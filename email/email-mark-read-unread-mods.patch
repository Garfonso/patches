This patch modifies how messages are marked as read or unread in the email application.

This patch includes the following changes:
1) Messages are NOT marked as read when they are opened from the message list card (by default, this is what happens, which may not be useful if you just want to *look* at a message but don't want to have it be marked as read)

2) Updates the "Mark as Read"/"Mark as Unread" menu item label and function to work based the read/unread state of the message instead of defaulting to "Mark as Unread"

3) The message is marked as read when the message is forwarded, replied to, or deleted.
Index: /usr/palm/applications/com.palm.app.email/app/controllers/message-assistant.js
===================================================================
--- .orig/usr/palm/applications/com.palm.app.email/app/controllers/message-assistant.js
+++ /usr/palm/applications/com.palm.app.email/app/controllers/message-assistant.js
@@ -272,9 +272,16 @@ var MessageAssistant = Class.create({
 		this.data = resp;
 
 		// Set the "read" flag if need be
+		/*
 		if (!EmailFlags.isRead(resp.flags)) {
 			Email.setRead(resp.id, true);
 		}
+		*/
+		if (EmailFlags.isRead(resp.flags)) {
+			this.markUnreadMenuItem.label = MessageAssistant.kAppMenuMarkUnread;
+		} else {
+			this.markUnreadMenuItem.label = MessageAssistant.kAppMenuMarkRead;
+		}
 
 		// Very first thing to do with recipients is fix them up for the address picker.
 		EmailRecipient.addAddressPickerFields(resp.recipients);
@@ -1710,24 +1717,32 @@ var MessageAssistant = Class.create({
 	},
 
 	reply: function() {
+		Email.setRead(this.data.id, true);
+		
 		var email = new Email();
 		email.createReply(this.data, this.account.login);
 		MenuController.showComposeView(email);
 	},
 
 	replyAll: function() {
+		Email.setRead(this.data.id, true);
+		
 		var email = new Email();
 		email.createReplyAll(this.data, this.account.login);
 		MenuController.showComposeView(email);
 	},
 
 	forward: function() {
+		Email.setRead(this.data.id, true);
+		
 		var email = new Email();
 		email.createForward(this.data, this.account.login);
 		MenuController.showComposeView(email);
 	},
 
 	deleteEmail: function() {
+		Email.setRead(this.data.id, true);
+		
 		Email.setDeleted(this.data.id, true);
 		this.controller.stageController.popScene();
 	}
