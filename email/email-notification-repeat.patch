This patch will repeat the email notification alert every two minutes until either dismissed or viewed.

Updated to be compatible with the delete from notification bar.
Index: /usr/palm/applications/com.palm.app.email/app/controllers/app-assistant.js
===================================================================
--- .orig/usr/palm/applications/com.palm.app.email/app/controllers/app-assistant.js
+++ /usr/palm/applications/com.palm.app.email/app/controllers/app-assistant.js
@@ -62,7 +62,8 @@ AppAssistant.prototype.handleLaunch = fu
 	// Complain if the params claim to be a string
 	if (!params) {
 		params = {};
-	} else if (Object.isString(params) && params.length > 0) {
+	}
+	else if (Object.isString(params) && params.length > 0) {
 		Mojo.Log.error("received string params \"" + params + "\"");
 		try {
 			params = params.toJSON();		
@@ -125,11 +126,20 @@ LaunchHandler = Class.create({
 			this.handleEditAccount();
 		} else if (params.reminderPersonId) { 
 			this.handleContact(params);
+		} else if(params.playalarmsound){
+			this.playAlarmSound();
 		} else {
 			this.handleDefault();
 		}
 	},
-	
+
+	playAlarmSound: function() {
+		var dashboard = this.notificationAssistant.appController.getStageProxy(NotificationAssistant.kNewEmailDashboardStageName);
+		if (dashboard) {
+			dashboard.delegateToSceneAssistant("playAlarmSound");
+		}
+	},
+		
 	handleCompose: function() {
 		var params = this.launchParameters;
 		var email = new Email();
Index: /usr/palm/applications/com.palm.app.email/app/controllers/email-dashboard-assistant.js
===================================================================
--- .orig/usr/palm/applications/com.palm.app.email/app/controllers/email-dashboard-assistant.js
+++ /usr/palm/applications/com.palm.app.email/app/controllers/email-dashboard-assistant.js
@@ -8,6 +8,10 @@ var EmailDashboardAssistant = Class.crea
 	
 	initialize: function(notificationAssistant) {
 		this.notificationAssistant = notificationAssistant;
+		
+		//need to access the details for what is being displayed so we can get the folder obj
+		//to access the sound that should be played
+		this.itemDetails = undefined;
 	},
 
 	setup: function() {
@@ -27,6 +31,9 @@ var EmailDashboardAssistant = Class.crea
 		// turn off throbber
 		Mojo.Log.info('Turning off throbber');
 		this.controller.stageController.indicateNewContent(false);
+		
+		//remove the Notification repeat task
+		this.removePlayAlarmSoundTask();
 	},
 
 	tapHandler: function(event) {
@@ -52,11 +59,17 @@ var EmailDashboardAssistant = Class.crea
 	},
 
 	update: function() {
+		//remove the nag reminder
+		this.removePlayAlarmSoundTask();
+		
 		if (!this.notificationAssistant) {
 			Mojo.Log.error("I feel a disturbance in the Force... As if notificationAssistant isn't there");
 			return;
 		}
 
+		//reschedule the nag reminder
+		this.schedulePlayAlarmSoundTask();
+		
 		var notificationInfo = this.notificationAssistant.notificationInfo;
 		var content;
 		var latestDetails;
@@ -125,6 +138,9 @@ var EmailDashboardAssistant = Class.crea
 		}
 	
 		this.controller.sceneElement.update(content);
+		
+		//set item details to support nag reminder
+		this.itemDetails = latestDetails;
 	},
 
 	showSingleMessage: function(account, folder, message) {
@@ -147,6 +163,69 @@ var EmailDashboardAssistant = Class.crea
 
 	showFolder: function(accountId, folderId, resp) {
 		var folderInfo = { folderId: folderId,
+			accountId: accountId,
+			login: resp.address,
+			domain: resp.accountDomain
+		};
+		//Mojo.Log.info("email: showFolder accountId=", accountId, ", folderId=", folderId, ", resp=", $H(resp).inspect());
+		this.controller.serviceRequest('palm://com.palm.applicationManager', {
+			method: 'open',
+			parameters: {
+				id: 'com.palm.app.email',
+				params: { 'debounce': 'f'+folderId, 'folderInfo': folderInfo }
+				}
+			});
+	},
+	
+	playAlarmSound: function() {
+		//play nag sound and reschedule
+		if (this.itemDetails)
+		{
+			if (this.itemDetails.playSound !== AccountpreferencesAssistant.kNotifyTypeNone) {
+				PalmSystem.playSoundNotification(this.notificationAssistant.getNotificationSoundClass(this.itemDetails.playSound));
+			        this.schedulePlayAlarmSoundTask();
+			}
+		}
+	},
+	
+	schedulePlayAlarmSoundTask: function() {
+		try {
+	
+			//retrigger reminder every two minutes until we acknowledge it.
+			//change the value in addMinutes to a value other than 2 if you prefer a different time span for the notification repeat.
+			var playSoundTime = new Date();
+			playSoundTime = new Date(playSoundTime.getTime() + 2*60*1000);
+		
+			this.controller.serviceRequest('palm://com.palm.taskScheduler', {
+				method: 'updateTask',
+				parameters: {uri: 'palm://com.palm.applicationManager/open',
+				arguments: {'id': 'com.palm.app.email',
+					'params': {'playalarmsound': true}},
+				key: 'email-playalarmsound',
+				start: {date: playSoundTime.toUTCString()}}
+				});
+		}
+		catch (e) {
+			Mojo.Log.logException(e, "email-dashboard-assistant.schedulePlayAlarmSoundTask");
+		}
+	},
+	
+	removePlayAlarmSoundTask: function() {
+		try 
+		{
+		
+			this.controller.serviceRequest('palm://com.palm.taskScheduler', {
+				method: 'removeTask',
+				parameters: {key: 'email-playalarmsound'}
+				});
+		}
+		catch (e) {
+			//Mojo.Log.logException(e, "email-dashboard-assistant.removePlayAlarmSoundTask");
+		}
+	},
+	
+	showFolder: function(accountId, folderId, resp) {
+		var folderInfo = { folderId: folderId,
 		                   accountId: accountId,
 		                   login: resp.address,
 		                   domain: resp.accountDomain
