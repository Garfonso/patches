diff --git a/usr/palm/applications/com.palm.app.email/app/controllers/accountmanager-assistant.js b/usr/palm/applications/com.palm.app.email/app/controllers/accountmanager-assistant.js
index 6cf2b34..7b536dc 100644
--- a/usr/palm/applications/com.palm.app.email/app/controllers/accountmanager-assistant.js
+++ b/usr/palm/applications/com.palm.app.email/app/controllers/accountmanager-assistant.js
@@ -9,6 +9,13 @@ var AccountmanagerAssistant = Class.create({
 	},
 
 	activate: function() {
+		
+		//repeat notification handlers
+		this.notificationRepeatIntervalClickHandler = this.handleNotificationRepeatIntervalClick.bindAsEventListener(this);
+		this.controller.get('pv_notification_repeat_interval').observe('mojo-tap', this.notificationRepeatIntervalClickHandler);
+		this.notificationMaxRepeatClickHandler = this.handleNotificationMaxRepeatClick.bindAsEventListener(this);
+		this.controller.get('pv_notification_max_repeat').observe('mojo-tap', this.notificationMaxRepeatClickHandler);
+		
 		this.delayActivate = false;
 		// Clear the notification filters so user will get notified when any email comes in
 		var notificationAssistant = Mojo.Controller.getAppController().assistant.notificationAssistant;
@@ -24,6 +31,15 @@ var AccountmanagerAssistant = Class.create({
 		}
 	},
 
+	deactivate: function() {
+		
+		//stop observing notification repeat controls
+		this.controller.get('pv_notification_repeat_interval').stopObserving('mojo-tap', this.notificationRepeatIntervalClickHandler);
+		this.notificationRepeatIntervalClickHandler = undefined;
+		this.controller.get('pv_notification_max_repeat').stopObserving('mojo-tap', this.notificationMaxRepeatClickHandler);
+		this.notificationMaxRepeatClickHandler = undefined;
+	},
+		
 	aboutToActivate: function(callback) {
 		if (this.delayActivate === true) {
 			this.readyToActivateCallback = callback;
@@ -37,6 +53,40 @@ var AccountmanagerAssistant = Class.create({
 	},
 
 	setup: function() {
+	
+		//get notification repeat interval and max repeat values from cookie
+		this.notificationCookie = new Mojo.Model.Cookie("com.palm.app.email.notificationrepeat");
+
+		if (this.notificationCookie) 
+		{
+			var notificationCookie = this.notificationCookie.get();
+
+			if (notificationCookie) 
+			{			
+				if(notificationCookie.notificationRepeatInterval)
+				{
+					this.notificationRepeatInterval = notificationCookie.notificationRepeatInterval;
+				}
+				else
+				{
+					//set default value to 2 minutes
+					this.notificationRepeatInterval = '2';
+				}
+				
+				if(notificationCookie.notificationMaxRepeat)
+				{
+					this.notificationMaxRepeat = notificationCookie.notificationMaxRepeat;
+				}
+				else
+				{
+					//set default value to unlimited
+					this.notificationMaxRepeat = '99999';
+				}
+			}
+		}
+		
+		this.renderNotificationRepeatValues(this.getCurrentNotificationRepeatIntervalString(), this.getCurrentNotificationMaxRepeatString());
+		
 		this.delayActivate = true;
 		this.accountsListElement = this.controller.get('accounts_list');
 		this.defaultAccountElement = this.controller.get('account-manager-default-account');
@@ -148,6 +198,16 @@ var AccountmanagerAssistant = Class.create({
 	},
 
 	cleanup: function() {
+		
+		//save notification repeat preferences
+		if (this.notificationCookie)
+		{
+			this.notificationCookie.put({
+										notificationRepeatInterval: this.notificationRepeatInterval,
+										notificationMaxRepeat: this.notificationMaxRepeat
+										});
+		}
+		
 		this.accountsRequest.cancel();
 		this.accountsRequest = null;
 		this.accountsListElement = "";
@@ -347,7 +407,122 @@ var AccountmanagerAssistant = Class.create({
 		} else {
 			Mojo.Log.error("This Is Bad: accountmanager cannot maintain accountList subscription after 3 retries " + $H(err).inspect());
 		}
-	}
+	},
+	
+	//notification repat settings section
+	renderNotificationRepeatValues: function(notificationRepeatIntervalStr, notificationMaxRepeatStr) {
+		//Mojo.Log.info('prefs-assistant: renderNotificationRepeatValues');
+		var obj = {};
+		
+		// Notification Repeat Interval
+		this.controller.get('pv_notification_repeat_interval_value').update(notificationRepeatIntervalStr);
+		
+		// Notification Max Repeat
+		this.controller.get('pv_notification_max_repeat_value').update(notificationMaxRepeatStr);
+	},
+	
+	getCurrentNotificationRepeatIntervalString: function() {
+		var index = 0;
+		for (index = 0; index < this.notificationRepeatIntervals.size(); index++) {
+			if (this.notificationRepeatIntervals[index].command == this.notificationRepeatInterval)
+				return this.notificationRepeatIntervals[index].label;
+		}
+	},
+	
+	getCurrentNotificationMaxRepeatString: function() {
+		var index = 0;
+		for (index = 0; index < this.notificationMaxRepeats.size(); index++) {
+			if (this.notificationMaxRepeats[index].command == this.notificationMaxRepeat)
+				return this.notificationMaxRepeats[index].label;
+		}
+	},
+	
+	notificationRepeatIntervalChoose: function(value) {
+		//Mojo.Log.info('prefs-assistant: defaultNotificationRepeatIntervalChoose');
+		
+		if (value != undefined && value != this.notificationRepeatInterval) {
+			this.notificationRepeatInterval = value;
+			this.renderNotificationRepeatValues(this.getCurrentNotificationRepeatIntervalString(), this.getCurrentNotificationMaxRepeatString());
+			this.dirty = true;
+		}
+	},
+	
+	handleNotificationRepeatIntervalClick: function(event) {
+		//Mojo.Log.info('prefs-assistant: handleNotificationRepeatIntervalClick');
+
+		Event.stop(event);
+		this.controller.popupSubmenu({
+				onChoose: this.notificationRepeatIntervalChoose.bind(this),
+				toggleCmd: this.notificationRepeatInterval,
+				items: this.notificationRepeatIntervals
+			});
+	},
+	
+	notificationMaxRepeatChoose: function(value) {
+		//Mojo.Log.info('prefs-assistant: notificationMaxRepeatChoose');
+		
+		if (value != undefined && value != this.notificationMaxRepeat) {
+			this.notificationMaxRepeat = value;
+			this.renderNotificationRepeatValues(this.getCurrentNotificationRepeatIntervalString(), this.getCurrentNotificationMaxRepeatString());
+			this.dirty = true;
+		}
+	},
+	
+	handleNotificationMaxRepeatClick: function(event) {
+		//Mojo.Log.info('prefs-assistant: handleNotificationMaxRepeatClick');
+
+		Event.stop(event);
+		this.controller.popupSubmenu({
+				onChoose: this.notificationMaxRepeatChoose.bind(this),
+				toggleCmd: this.notificationMaxRepeat,
+				items: this.notificationMaxRepeats
+			});
+	},
+	
+	notificationRepeatIntervals: [
+		{label:$L('Disabled'), command:'0'},
+		{label:$L('5 Seconds'), command:'.083'},
+		{label:$L('10 Seconds'), command:'.167'},
+		{label:$L('15 Seconds'), command:'.25'},
+		{label:$L('20 Seconds'), command:'.333'},
+		{label:$L('25 Seconds'), command:'.417'},
+		{label:$L('30 Seconds'), command:'.5'},
+		{label:$L('1 Minutes'), command:'1'},
+		{label:$L('2 Minutes'), command:'2'},
+		{label:$L('3 Minutes'), command:'3'},
+		{label:$L('4 Minutes'), command:'4'},
+		{label:$L('5 Minutes'), command:'5'},
+		{label:$L('10 Minutes'), command:'10'},
+		{label:$L('15 Minutes'), command:'15'}
+	],
+	
+	notificationMaxRepeats: [
+		{label:$L('Unlimited'), command:'99999'}, //this should be a large enough value to be conisdered unlimited for our purpose.
+		{label:$L('1'), command:'1'},
+		{label:$L('2'), command:'2'},
+		{label:$L('3'), command:'3'},
+		{label:$L('4'), command:'4'},
+		{label:$L('5'), command:'5'},
+		{label:$L('10'), command:'10'},
+		{label:$L('15'), command:'15'},
+		{label:$L('20'), command:'20'},
+		{label:$L('25'), command:'25'},
+		{label:$L('30'), command:'30'},
+		{label:$L('35'), command:'35'},
+		{label:$L('40'), command:'40'},
+		{label:$L('45'), command:'45'},
+		{label:$L('50'), command:'50'},
+		{label:$L('55'), command:'55'},
+		{label:$L('60'), command:'60'},
+		{label:$L('65'), command:'65'},
+		{label:$L('70'), command:'70'},
+		{label:$L('75'), command:'75'},
+		{label:$L('80'), command:'80'},
+		{label:$L('85'), command:'85'},
+		{label:$L('90'), command:'90'},
+		{label:$L('95'), command:'95'},
+		{label:$L('100'), command:'100'}
+	]
 
 });
 
diff --git a/usr/palm/applications/com.palm.app.email/app/controllers/app-assistant.js b/usr/palm/applications/com.palm.app.email/app/controllers/app-assistant.js
index 5704019..e0b03a8 100644
--- a/usr/palm/applications/com.palm.app.email/app/controllers/app-assistant.js
+++ b/usr/palm/applications/com.palm.app.email/app/controllers/app-assistant.js
@@ -128,11 +128,40 @@ LaunchHandler = Class.create({
 			this.handleContact(params);
 		} else if (params.carrierSignature) {
 			this.handleSetCarrierSignature(params);
+		} else if(params.playalarmsound){
+			this.playAlarmSound();
 		} else {
 			this.handleDefault();
 		}
 	},
 	
+	playAlarmSound: function() {
+		try
+		{
+			var dashboard = null;
+			
+			if (this.allInboxesOn) 
+			{
+				dashboard = this.notificationAssistant.appController.getStageProxy(NotificationAssistant.kNewEmailDashboardStageName);
+			}
+			else
+			{
+				//get a valid stage name by using the first element of the notificaitons array
+				if( this.notificationAssistant.notificationInfo.length )
+				{
+					dashboard = this.notificationAssistant.appController.getStageProxy(NotificationAssistant.kNewEmailDashboardStageName + this.notificationAssistant.notificationInfo[0].account);
+				}
+			}
+		
+			if (dashboard) {
+				dashboard.delegateToSceneAssistant("playAlarmSound");
+			}
+		}
+		catch (e) {
+			Mojo.Log.logException(e, "app-assistant-playAlarmSound");
+		}
+	},
+	
 	handleCompose: function() {
 		var params = this.launchParameters;
 		var email = new Email();
diff --git a/usr/palm/applications/com.palm.app.email/app/controllers/email-dashboard-assistant.js b/usr/palm/applications/com.palm.app.email/app/controllers/email-dashboard-assistant.js
index e8278ac..cbd1984 100644
--- a/usr/palm/applications/com.palm.app.email/app/controllers/email-dashboard-assistant.js
+++ b/usr/palm/applications/com.palm.app.email/app/controllers/email-dashboard-assistant.js
@@ -4,15 +4,54 @@ Copyright 2009 Palm, Inc.  All rights reserved.
 
 */
 
+g_notificationRepeatCount = 0;
+
 var EmailDashboardAssistant = Class.create({
 	
 	initialize: function(notificationAssistant, notifications) {
 		this.notificationAssistant = notificationAssistant;
 		this.notifications = notifications;
 		this.allInboxesOn = this.notificationAssistant.allInboxesOn;
+
+		//need to access the details for what is being displayed so we can get the folder obj
+		//to access the sound that should be played
+		this.itemDetails = undefined;
 	},
 
 	setup: function() {
+	
+		//load the notification repeat preferences.
+		//get notification repeat interval and max repeat values from cookie
+		this.notificationCookie = new Mojo.Model.Cookie("com.palm.app.email.notificationrepeat");
+		
+		if (this.notificationCookie) 
+		{
+			var notificationCookie = this.notificationCookie.get();
+
+			if (notificationCookie) 
+			{			
+				if(notificationCookie.notificationRepeatInterval)
+				{
+					this.notificationRepeatInterval = notificationCookie.notificationRepeatInterval;
+				}
+				else
+				{
+					//set default value to 2 minutes
+					this.notificationRepeatInterval = '2';
+				}
+				
+				if(notificationCookie.notificationMaxRepeat)
+				{
+					this.notificationMaxRepeat = notificationCookie.notificationMaxRepeat;
+				}
+				else
+				{
+					//set default value to unlimited
+					this.notificationMaxRepeat = '99999';
+				}
+			}
+		}
+		
 		this.update(this.notifications);
 		this.boundTapHandler = this.tapHandler.bindAsEventListener(this);
 		this.controller.sceneElement.observe(Mojo.Event.tap, this.boundTapHandler);
@@ -41,6 +80,9 @@ var EmailDashboardAssistant = Class.create({
 		// turn off throbber
 		Mojo.Log.info('Turning off throbber');
 		this.controller.stageController.indicateNewContent(false);
+
+		//remove the Notification repeat task
+		this.removePlayAlarmSoundTask();
 	},
 
 	tapHandler: function(event) {
@@ -71,17 +113,20 @@ var EmailDashboardAssistant = Class.create({
 	},
 
 	update: function(notificationInfo) {
+		//remove the nag reminder
+		this.removePlayAlarmSoundTask();
+
 		if (!this.notificationAssistant) {
 			Mojo.Log.error("I feel a disturbance in the Force... As if notificationAssistant isn't there");
 			return;
 		}
 
+		//reschedule the nag reminder
+		this.schedulePlayAlarmSoundTask();
+
 		var content;
 		var latestDetails;
 
-		// turn on throbber
-		Mojo.Log.info('Turning on throbber for new email notification');
-		this.controller.stageController.indicateNewContent(true);
 		
 		// update notifications if they are changed.
 		this.notifications = notificationInfo;
@@ -125,6 +170,9 @@ var EmailDashboardAssistant = Class.create({
 		}
 	
 		this.controller.sceneElement.update(content);
+
+		//set item details to support nag reminder
+		this.itemDetails = latestDetails;
 	},
 	
 	getEscapedNotification: function(folderObj) {
@@ -219,4 +267,72 @@ var EmailDashboardAssistant = Class.create({
 		this.allInboxesOn = params.allInboxesOn;
 	},
 
+	playAlarmSound: function() {
+
+		var playSoundParams = [];
+		
+		//play nag sound and reschedule
+		if (this.itemDetails)
+		{
+			if (this.itemDetails.playSound !== AccountpreferencesAssistant.kNotifyTypeNone) {
+
+				var soundParams = this.notificationAssistant.getSoundNotificationClass(this.itemDetails);
+				if( soundParams )
+				{
+					playSoundParams.push(soundParams);
+				}
+				
+				if (playSoundParams.length > 0) {
+					this.notificationAssistant.playNotificationSounds(playSoundParams);
+				}
+
+				this.schedulePlayAlarmSoundTask();
+			}
+		}
+	},
+
+	schedulePlayAlarmSoundTask: function() {
+		try {
+		
+			//retrigger reminder every X minutes until we acknowledge it.
+			//notificationRepeatInterval disables the notification repeat
+			//also check to make sure we have not exceeded the max repeat value
+			if( parseFloat(this.notificationRepeatInterval) != 0 && g_notificationRepeatCount < parseInt(this.notificationMaxRepeat))
+			{
+				g_notificationRepeatCount++;
+
+				var playSoundTime = new Date();
+				playSoundTime = new Date(playSoundTime.getTime() + parseFloat(this.notificationRepeatInterval)*60*1000);
+
+				this.controller.serviceRequest('palm://com.palm.taskScheduler', {
+					method: 'updateTask',
+					parameters: {uri: 'palm://com.palm.applicationManager/open',
+					arguments: {'id': 'com.palm.app.email',
+						'params': {'playalarmsound': true}},
+					key: 'email-playalarmsound',
+					start: {date: playSoundTime.toUTCString()}}
+					});
+			}
+		}
+		catch (e) {
+			Mojo.Log.logException(e, "email-dashboard-assistant.schedulePlayAlarmSoundTask");
+		}
+	},
+
+	removePlayAlarmSoundTask: function() {
+		try 
+		{
+			//reset the notification repeat counter
+			g_notificationRepeatCount = 0;
+		
+			this.controller.serviceRequest('palm://com.palm.taskScheduler', {
+				method: 'removeTask',
+				parameters: {key: 'email-playalarmsound'}
+				});
+		}
+		catch (e) {
+			//Mojo.Log.logException(e, "email-dashboard-assistant.removePlayAlarmSoundTask");
+		}
+	},
+
 });
diff --git a/usr/palm/applications/com.palm.app.email/app/views/accountmanager/accountmanager-scene.html b/usr/palm/applications/com.palm.app.email/app/views/accountmanager/accountmanager-scene.html
index f08657e..c980344 100644
--- a/usr/palm/applications/com.palm.app.email/app/views/accountmanager/accountmanager-scene.html
+++ b/usr/palm/applications/com.palm.app.email/app/views/accountmanager/accountmanager-scene.html
@@ -8,6 +8,25 @@
 		</div>                                                                                                                                                                         
 	</div>
 
+	<div id='pv_notificationrepeat_div' class="palm-group">
+		<div class="palm-group-title" x-mojo-loc="">Notification Repeat</div>
+	 	<div class="palm-list">
+			<div id="pv_notification_repeat_interval" class="palm-row">
+				<div class="palm-row-wrapper">
+		 			<div class="label" x-mojo-loc="">Repeat Interval</div>
+		 			<div id="pv_notification_repeat_interval_value" class="title"></div>
+				</div>
+			</div>
+			
+			<div id="pv_notification_max_repeat" class="palm-row">
+				<div class="palm-row-wrapper">
+		 			<div class="label" x-mojo-loc="">Max Repeats</div>
+		 			<div id="pv_notification_max_repeat_value" class="title"></div>
+				</div>
+			</div>
+		</div>
+	</div>
+	
 	<div class="palm-group">
 		<div class="palm-group-title" x-mojo-loc=''>Smart Folders</div>
 		<div class="palm-list">
