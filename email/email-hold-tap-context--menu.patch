diff --git a/usr/palm/applications/com.palm.app.email/app/controllers/message-assistant.js b/usr/palm/applications/com.palm.app.email/app/controllers/message-assistant.js
index 761069e..ae76da2 100644
--- a/usr/palm/applications/com.palm.app.email/app/controllers/message-assistant.js
+++ b/usr/palm/applications/com.palm.app.email/app/controllers/message-assistant.js
@@ -52,6 +52,7 @@ var MessageAssistant = Class.create({
 		this.boundHandleLinkClicked = this.handleLinkClicked.bind(this);
 		this.boundHandleInlineImageSaved = this.handleInlineImageSaved.bind(this);
 		this.boundHandleWebViewSingleTap = this.handleWebViewSingleTap.bind(this);
+		this.boundHandleWebViewHoldTap = this.handleWebViewHoldTap.bind(this);
 		this.boundHandleDOMClicked = this.handleDOMClicked.bind(this);
 		this.boundHandleMessageDownloadRetry = this.handleMessageDownloadRetry.bind(this);
 		
@@ -168,6 +169,7 @@ var MessageAssistant = Class.create({
 		this.webview.removeEventListener(Mojo.Event.webViewMimeHandoff, this.boundHandleLinkClicked, false);
 		this.webview.removeEventListener(Mojo.Event.webViewImageSaved, this.boundHandleInlineImageSaved, false);
 		this.webview.removeEventListener('singletap', this.boundHandleWebViewSingleTap, true);
+		this.webview.removeEventListener(Mojo.Event.hold, this.boundHandleWebViewHoldTap, true);
 		
 		
 		this.messageTarget.stopObserving(Mojo.Event.tap, this.boundHandleDOMClicked);
@@ -1657,6 +1659,112 @@ var MessageAssistant = Class.create({
 		}
 	},
 	
+	handleWebViewHoldTap: function(event) {	
+		try {			
+			var popupItems = [
+				{label: $L('Open URL'), command:'openNew'},
+				{label: $L('Share Link'), command:'shareUrl'},
+				{label: $L('Copy URL'), command:'copyUrl'},
+				{label: $L('Copy to Photos'), command:'copyToPhotos'},
+				{label: $L('Share Image'), command:'shareImage'} //,
+				// {label: $L('Set Wallpaper'), command:'setWallpaper'}
+			];
+
+			var findItem = function(command) {
+				for (var i = 0, len = popupItems.length; i < len; i++) {
+					if (popupItems[i].command === command) {
+						return popupItems[i];
+					}
+				}
+			};
+
+			var selectedCommand;
+			var imageInfo;
+
+			var saveImageCallback = function(succeeded, path) {
+				if (succeeded) {
+					switch (selectedCommand) {
+						case 'shareImage':
+							this.shareImage(imageInfo, path);
+							break;
+						case 'setWallpaper':
+							this.setWallpaper(path);
+							break;
+						case 'copyToPhotos':
+							this.showOkAlert($L('Image Saved'),
+								$L('The image was successfully added to your photo album.'));
+							break;
+					}
+				}
+				else {
+					this.showOkAlert($L('Error Saving Image'),
+							$L('There was an error saving the selected image.'));
+				}
+			}.bind(this);
+
+			var urlInfo = {};
+			var popupSelectFunc = function(value) {
+				selectedCommand = value;
+				
+				switch (value) {
+					case 'openNew':
+						this.newBrowserPage(urlInfo.url);
+						break;
+					case 'shareUrl':
+						this.shareUrl(urlInfo.url, urlInfo.desc);
+						break;
+					case 'copyUrl':
+						this.controller.stageController.setClipboard(urlInfo.url);
+						break;
+					case 'copyToPhotos':
+						this.webview.mojo.saveImageAtPoint(event.down.offsetX, event.down.offsetY, "/media/internal", saveImageCallback);
+						break;
+					case 'shareImage':
+						this.webview.mojo.saveImageAtPoint(event.down.offsetX, event.down.offsetY, "/tmp", saveImageCallback);
+						break;
+					case 'setWallpaper':
+						this.webview.mojo.saveImageAtPoint(event.down.offsetX, event.down.offsetY, "/media/internal", saveImageCallback);
+						break;
+				}
+			}.bind(this);
+
+			var imageInfoResponse = function(response) {
+				imageInfo = response;
+				var usedItems = [];
+				
+				if (urlInfo.url) {
+					usedItems.push( findItem('openNew') );
+					usedItems.push( findItem('shareUrl') );
+					usedItems.push( findItem('copyUrl') );
+				}
+			
+				if (response.src) {
+					usedItems.push( findItem('shareImage') );
+				}
+
+				if (this.supportedImageType(response.src, response.mimeType)) {
+					usedItems.push( findItem('copyToPhotos') );
+					//usedItems.push( findItem('setWallpaper') );
+				}
+				
+				if (usedItems.length) {
+					this.controller.popupSubmenu({ onChoose: popupSelectFunc, items: usedItems });
+				}
+			}.bind(this);
+
+			var urlInspectResponse = function(response) {
+				urlInfo = response || {};
+				this.webview.mojo.getImageInfoAtPoint(event.down.offsetX, event.down.offsetY, imageInfoResponse);
+			}.bind(this);
+
+			this.webview.mojo.inspectUrlAtPoint(event.down.offsetX, event.down.offsetY, urlInspectResponse);
+			
+		}
+		catch (e) {
+			Mojo.Log.logException(e);
+		}
+	},
+	
 	supportedImageType:function(url, mimeType) {
 		switch (this.getImageType(url, mimeType)) {
 			case 'jpeg':
@@ -1960,6 +2068,7 @@ var MessageAssistant = Class.create({
 		this.webview.addEventListener(Mojo.Event.webViewMimeHandoff, this.boundHandleLinkClicked, false);
 		this.webview.addEventListener(Mojo.Event.webViewImageSaved, this.boundHandleInlineImageSaved, false);
 		this.webview.addEventListener('singletap', this.boundHandleWebViewSingleTap, true);
+		this.webview.addEventListener(Mojo.Event.hold, this.boundHandleWebViewHoldTap, true);
 
 		this.waitingForMessageBody = undefined;
 	},
