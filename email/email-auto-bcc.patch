diff --git a/usr/palm/applications/com.palm.app.email/app/controllers/accountpreferences-assistant.js b/usr/palm/applications/com.palm.app.email/app/controllers/accountpreferences-assistant.js
index 3c48b42..fee6cb1 100644
--- a/usr/palm/applications/com.palm.app.email/app/controllers/accountpreferences-assistant.js
+++ b/usr/palm/applications/com.palm.app.email/app/controllers/accountpreferences-assistant.js
@@ -35,6 +35,7 @@ var AccountpreferencesAssistant = Class.create({
 		this.controller.setupWidget('sync-server-deleted-toggle', this.syncServerDeletedOptions, this.accountDetails);
 		
 		this.controller.setupWidget('signature', {}, this.accountDetails);
+		this.controller.setupWidget('autobcc',  this.autobccAttributes, this.accountDetails);
 		this.controller.setupWidget('reply-to', this.replyToAttributes, this.accountDetails);
 		this.controller.setupWidget('full-name', this.displayNameAttributes, this.accountDetails);
 
@@ -156,6 +157,9 @@ var AccountpreferencesAssistant = Class.create({
 		if (this.accountDetails.notify === false) {
 			Mojo.Controller.getAppController().assistant.notificationAssistant.clearAccount(this.accountDetails.id);
 		}
+		
+		var bcc_cookie = new Mojo.Model.Cookie("bcc_cookie:"+this.accountDetails.id);
+		bcc_cookie.put(this.accountDetails.autobcc);
 
 		// richtextedit doesn't use data model so manually copy the signature
 		var signature = this.controller.get('signature').innerHTML;
@@ -391,6 +395,11 @@ var AccountpreferencesAssistant = Class.create({
 		Mojo.Event.listen(signatureElem, 'focus', function() { signatureElem.addClassName('focused'); }, true);
 		Mojo.Event.listen(signatureElem, 'blur', function() { signatureElem.removeClassName('focused'); }, true);
 
+		// Need to manually insert the autobcc from cookie
+		var bcc_cookie = new Mojo.Model.Cookie("bcc_cookie:"+this.accountDetails.id);
+		this.autobcc = bcc_cookie.get();
+		this.accountDetails.autobcc = this.autobcc;
+			
 		// Setup the drawer here so that it doesn't animate once the scene is rendered
 		this.controller.setupWidget('sound-toggle-drawer', {unstyled:true, property:'notify'}, this.accountDetails);
 		this.controller.setupWidget('sound-selector', this.soundOptions, this.accountDetails);
@@ -430,6 +439,12 @@ var AccountpreferencesAssistant = Class.create({
 		acceptBack: true
 	},
 
+	autobccAttributes: {
+		modelProperty: 'autobcc',
+		textReplacement: false,
+		acceptBack: true
+	},
+	
 	//mailFormats:  {
 	//	modelProperty: 'useHTML',
 	//	label: $L("Mail format"),
diff --git a/usr/palm/applications/com.palm.app.email/app/controllers/compose-assistant.js b/usr/palm/applications/com.palm.app.email/app/controllers/compose-assistant.js
index e4f2e91..a5d80c5 100644
--- a/usr/palm/applications/com.palm.app.email/app/controllers/compose-assistant.js
+++ b/usr/palm/applications/com.palm.app.email/app/controllers/compose-assistant.js
@@ -89,10 +89,9 @@ var ComposeAssistant = Class.create({
 			// The CC and BCC must begin life shown, so here we determine if they should be hidden.
 			// Show if they have contacts in them, otherwise hide. 
 			if (this.parsedRecips[EmailRecipient.roleBcc] && this.parsedRecips[EmailRecipient.roleBcc].length > 0) {
+				this.setupCCWidgets();
 				this.showingRecipients = true;
-				this.ccElement.show();
 				this.bccElement.show();
-				this.controller.showWidgetContainer(this.ccElement);
 				this.controller.showWidgetContainer(this.bccElement);
 			}
 
@@ -204,6 +203,25 @@ var ComposeAssistant = Class.create({
 		Event.observe(this.forwardElement, 'keydown', this.setDirtyForwardHandler, true);
 
 		this.controller.setupWidget(Mojo.Menu.commandMenu, undefined, this.cmdMenuModel);			
+		
+		// autobcc 
+		// need to determine type of account before handling attachments
+		var accounts = EmailAppDepot.getDepot().accounts;
+		if (accounts && accounts.count > 0) {
+			this.renderListOfUserAccount(accounts);
+		} else {
+			Mojo.Log.error("Compose scene using EmailAccount.getAccounts because depot isn't set");
+			EmailAccount.getAccounts(this.controller, this.renderListOfUserAccount.bind(this), 
+				function(err) { Mojo.Log.error("Compose getAccounts:", $H(err).inspect()); });
+		}
+		if (this.email.autobcc.length > 0){
+			var newRecip = new Object();
+			newRecip.type = 'email';
+			newRecip.role = EmailRecipient.roleBcc;
+			newRecip.value  = this.email.autobcc;
+			newRecip.contactDisplay = this.email.autobcc;
+			this.email.recipients.push(newRecip);
+		}
 
 		// Add address picker
 		this.parsedRecips = EmailRecipient.separateRecipients(this.email.recipients);
@@ -251,16 +269,6 @@ var ComposeAssistant = Class.create({
 		};
 		this.controller.setupWidget('emailSubject', subjectWidgetAttrs, this.email);
 		
-		// need to determine type of account before handling attachments
-		var accounts = EmailAppDepot.getDepot().accounts;
-		if (accounts && accounts.count > 0) {
-			this.renderListOfUserAccount(accounts);
-		} else {
-			Mojo.Log.error("Compose scene using EmailAccount.getAccounts because depot isn't set");
-			EmailAccount.getAccounts(this.controller, this.renderListOfUserAccount.bind(this), 
-									 function(err) { Mojo.Log.error("Compose getAccounts:", $H(err).inspect()); });
-		}
-
 		// Need to perform some fixup of the attachments before setting up the attachments-list
 		var fixupAttachment = this.fixupAttachment;
 		this.email.attachments.each( function(attachment) { fixupAttachment(attachment); });
@@ -765,6 +773,8 @@ var ComposeAssistant = Class.create({
 		var modelAccountValid = false;
 		response.list.each( function(account) {
 			if (account.originalLogin) {
+				var bcc_cookie = new Mojo.Model.Cookie("bcc_cookie:"+account.id);
+				var autobccToUse = bcc_cookie.get();
 				var choiceEntry = new Object();
 				var sigToUse = this.resolveSignature(account);
 				choiceEntry.label = account.originalLogin;
@@ -776,6 +786,7 @@ var ComposeAssistant = Class.create({
 				// If replying to an email, use that account otherwise look for the 
 				// the default account.
 				if (thisAccountLogin && thisAccountLogin == account.originalLogin.toLowerCase()) {
+					email.autobcc = autobccToUse;
 					email.signature = sigToUse;
 					modelAccountValid = true;
 					model.account = account.id;
@@ -783,10 +794,12 @@ var ComposeAssistant = Class.create({
 					// It could change, though so make JS convert it to true/false
 					this.originalAccountDomain = account.accountDomain;
 				} else if (!model.account && account.defaultAccountFlag == true) {
+					email.autobcc = autobccToUse;
 					modelAccountValid = true;
 					model.account = account.id;
 					email.signature = sigToUse;
 				} else if (model.account && model.account == account.id) {
+					email.autobcc = autobccToUse;
 					modelAccountValid = true;
 					email.signature = sigToUse;
 				} 
diff --git a/usr/palm/applications/com.palm.app.email/app/views/accountpreferences/accountpreferences-scene.html b/usr/palm/applications/com.palm.app.email/app/views/accountpreferences/accountpreferences-scene.html
index 9a5c18b..31fdaab 100644
--- a/usr/palm/applications/com.palm.app.email/app/views/accountpreferences/accountpreferences-scene.html
+++ b/usr/palm/applications/com.palm.app.email/app/views/accountpreferences/accountpreferences-scene.html
@@ -83,6 +83,22 @@
 	</div> 
 </div>
 
+<div id="edit-account-autobcc" class="palm-group">
+	<div class="palm-group-title" x-mojo-loc=''>Auto Bcc</div>
+	<div class="palm-list">
+		<div class="palm-row single">
+			<!-- <div class="palm-row-wrapper textfield-group" x-mojo-focus-highlight="true" style="margin: -16px -15px -15px -16px;">		    -->
+			<!-- <div id="autobcc" style="min-height: 72px;" x-mojo-element="RichTextEdit"></div> -->
+			<div class="palm-row-wrapper textfield-group" x-mojo-focus-highlight="true">		   
+				<div class="title">
+				        <div id="autobcc" x-mojo-element="TextField"></div>
+				</div>
+			</div>		          
+		</div>  
+	</div> 
+</div>
+
+
 <div id="edit-account-reply-to" class="palm-group">
 	<div class="palm-group-title" x-mojo-loc=''>Reply-To Address</div>
 	<div id="edit-account-reply-to-list" class="palm-list">
