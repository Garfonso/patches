diff --git a/usr/palm/applications/com.palm.app.email/app/controllers/accountpreferences-assistant.js b/usr/palm/applications/com.palm.app.email/app/controllers/accountpreferences-assistant.js
index 3c48b42..f4924f7 100644
--- a/usr/palm/applications/com.palm.app.email/app/controllers/accountpreferences-assistant.js
+++ b/usr/palm/applications/com.palm.app.email/app/controllers/accountpreferences-assistant.js
@@ -455,6 +455,11 @@ var AccountpreferencesAssistant = Class.create({
 			{label: $L('7 days'), value: 7},
 			{label: $L('2 weeks'), value: 14},
 			{label: $L('1 month'), value: 30},
+			{label: $L('2 months'), value: 60},
+			{label: $L('3 months'), value: 90},
+			{label: $L('6 months'), value: 180},
+			{label: $L('9 months'), value: 270},
+			{label: $L('1 year'), value: 365},
 			{label: $L('All'), value: 0}
 		]
 	},
@@ -493,11 +498,22 @@ var AccountpreferencesAssistant = Class.create({
 			{label: $L('10 minutes'), value: 10},
 			{label: $L('15 minutes'), value: 15},
 			{label: $L('30 minutes'), value: 30},
-			{label: $L('1 hour'), value: 60},
-			{label: $L('6 hours'), value: 360},
-			{label: $L('12 hours'), value: 720},
-			{label: $L('24 hours'), value: 1440},
-			{label: $L('Manual'), value: 1000000}
+			{label: $L('45 minutes'), value: 45},
+ 			{label: $L('1 hour'), value: 60},
+			{label: $L('90 minutes'), value: 90},
+			{label: $L('2 hours'), value: 120},
+			{label: $L('3 hours'), value: 180},
+			{label: $L('4 hours'), value: 240},
+			{label: $L('5 hours'), value: 300},
+ 			{label: $L('6 hours'), value: 360},
+			{label: $L('7 hours'), value: 420},
+			{label: $L('8 hours'), value: 480},
+			{label: $L('9 hours'), value: 540},
+			{label: $L('10 hours'), value: 600},
+			{label: $L('11 hours'), value: 660},
+ 			{label: $L('12 hours'), value: 720},
+ 			{label: $L('24 hours'), value: 1440},
+ 			{label: $L('Manual'), value: 1000000}
 		]
 	}
 });
diff --git a/usr/palm/applications/com.palm.app.email/app/controllers/compose-assistant.js b/usr/palm/applications/com.palm.app.email/app/controllers/compose-assistant.js
index e4f2e91..2302338 100644
--- a/usr/palm/applications/com.palm.app.email/app/controllers/compose-assistant.js
+++ b/usr/palm/applications/com.palm.app.email/app/controllers/compose-assistant.js
@@ -172,8 +172,11 @@ var ComposeAssistant = Class.create({
 				visible: true,
 				menuClass: 'palm-white',
 				items: [
+					{label:$L('Priority'), icon:'priority', command:'priority'},
 					{label:$L('Attach'), icon:'attach', command:'attach'},
-					{label:$L('Send'), icon:'send', command:'send'}
+					{label:$L('Send'), icon:'send', command:'send'},
+					{label:$L('Save'), icon:'save', command:'save'},
+					{label:$L('Delete'),icon:'delete', command:'cancel'}
 				]};
 
 		this.appMenuSaveIndex = 2;
@@ -609,16 +612,37 @@ var ComposeAssistant = Class.create({
 					break;
 
 				case 'save':
-					this.draftIsDirty = true; // set to true to make sure the save occurs
-					this.saveDraft();
+					this.controller.showAlertDialog({
+					onChoose: function(value) {if (value == 'yes') {this.saveDraft();}},
+					title: $L("Save This Message?"),
+					choices:[
+						{label:$L('Yes'), value:"yes", type:'negative'},  
+						{label:$L("No"), value:"no", type: 'dismiss'}
+							]
+					});
 					break;
 
 				case 'send':
-					this.send();
-					break;
+					this.controller.showAlertDialog({
+					onChoose: function(value) {if (value == 'yes') {this.send();}},
+					title: $L("Send This Message?"),
+					choices:[
+						{label:$L('Yes'), value:"yes", type:'negative'},  
+						{label:$L("No"), value:"no", type: 'dismiss'}
+							]
+					});
+ 					break;
 
 				case 'cancel':
-					this.cancelCompose();
+					this.controller.showAlertDialog({
+					onChoose: function(value) {if (value == 'yes') {this.cancelCompose();}},
+					title: $L("Discard this Draft?"),
+					message: $L("This cannot be undone"),
+					choices:[
+						{label:$L('Yes'), value:"yes", type:'negative'},  
+						{label:$L("No"), value:"no", type: 'dismiss'}
+							]
+					});
 					break;
 						
 				case 'priority':
@@ -1164,8 +1188,7 @@ ComposeAssistant.onLoad = function(controller, email) {
 	if (email.action === ComposeAssistant.kForwardAction) {
 		controller.get('forwarded_msg_body').innerHTML = originalText;
 	} else {
-		bodyText += originalText;
-		editor.setStyle({'min-height':'320px', 'font-size': '18px'});
+		controller.get('forwarded_msg_body').innerHTML = originalText;
 	}
 	editor.innerHTML = bodyText;
 	
@@ -1212,6 +1235,6 @@ ComposeAssistant.replaceURIs = function(originalText, email) {
 ComposeAssistant.kForwardAction = 'forward';
 ComposeAssistant.kAppMenuHighPriority = $L('Set as High Priority');
 ComposeAssistant.kAppMenuNormalPriority = $L('Set as Normal Priority');
-ComposeAssistant.kEmptySignatureRegex = /<span id="signature"><div style="font-family: arial, sans-serif; font-size: 12px;color: #999999;">[<br>]*<\/div>[<br>]*<\/span>/
+ComposeAssistant.kEmptySignatureRegex = /<span id="signature"><div style="font-family: Calibri, sans-serif; font-size: 16px;color: #999999;">[<br>]*<\/div>[<br>]*<\/span>/
 ComposeAssistant.kForwardDraftDelimeter = "<span id='FORWARD_DRAFT_TEXT' class='display:none'></span>"; 
 
diff --git a/usr/palm/applications/com.palm.app.email/app/controllers/email-dashboard-assistant.js b/usr/palm/applications/com.palm.app.email/app/controllers/email-dashboard-assistant.js
index e8278ac..df838f4 100644
--- a/usr/palm/applications/com.palm.app.email/app/controllers/email-dashboard-assistant.js
+++ b/usr/palm/applications/com.palm.app.email/app/controllers/email-dashboard-assistant.js
@@ -50,6 +50,13 @@ var EmailDashboardAssistant = Class.create({
 			target = target.up('div.email-dashboard-tap-target');
 		}
 
+		var tDelete = false;
+
+		//check to see if the trash icon was tapped
+		if ( target.hasClassName('email-dashboard-tap-target-delete')) {
+			tDelete = true;
+		}
+
 		event.stopPropagation();
 		if (target) {
 			// disable the tap event to prevent keep handling user's multiple taps
@@ -61,7 +68,15 @@ var EmailDashboardAssistant = Class.create({
 			if (accountId == "single") {
 				var folderId = target.readAttribute('folderid');
 				var messageId = target.readAttribute('messageid');
-				this.showSingleMessage(accountId, folderId, messageId);
+				
+				if(tDelete)
+				{
+					this.deleteSingleMessage(accountId, folderId, messageId);
+				}
+				else
+				{
+					this.showSingleMessage(accountId, folderId, messageId);
+				}
 			} else if (accountId == "all") {
 				this.showAccount(); // just display the account scene
 			} else {
@@ -171,6 +186,51 @@ var EmailDashboardAssistant = Class.create({
 	                });
 	},
 
+	deleteSuccess: function(account, folder, message) {
+		//try to sync so that we get notified of the delete and the notification gets updated
+		Folder.syncFolder(folder, true);
+	},
+
+	deleteFailure: function(account, folder, message) {
+		//if we failed it is likely due to not getting the delete msg back from the server so we didnt remove the already deleted email notification
+
+		//set the ignoreClear flag so that the new email timestamp doesnt get set
+		//this will allow for us to close the stage but when the next update comes through we will still have all the unread emails to work with
+		this.ignoreClear = true;
+		if (this.notificationAssistant.allInboxesOn) {
+                       this.notificationAssistant.closeEmailDashboard();
+              }
+              else
+              {
+			this.notificationAssistant.closeEmailDashboard(this.notifications[0]);
+              }
+
+		//try to sync the folder to get any updates
+		Folder.syncFolder(folder, true);
+	},
+
+	deleteSingleMessage: function(account, folder, message) {
+		var deleteReq = new Mojo.Service.Request('palm://com.palm.mail', {
+			method: 'setDeleted',
+			parameters: {'message':message, 'value': true },
+			onSuccess: this.deleteSuccess.bind(this, account, folder, message),
+			onFailure: this.deleteFailure.bind(this, account, folder, message)
+		});
+
+		//So should not need to do this but many have reported the emails not deleting due to issues with synchronization after 1.3.1 update
+		//So lets try to send the delete twice.
+//		var delet?eReq = new Mojo.Service.Request('palm://com.palm.mail', {
+//			method: 'setDeleted',
+//			parameters: {'message':message, 'value': true },
+//			onSuccess: this.deleteSuccess.bind(this, account, folder, message),
+//			onFailure: this.deleteFailure.bind(this, account, folder, message)
+//		});
+
+		//Since we are not consistently getting the message back from the server that something was deleted so that the notification bar
+		//gets updated go ahead and close it if we get the message the notification bar will come back up. Truly sucks that it doesnt always give us$
+		this.deleteFailure(account, folder, message);
+	},
+
 	showFolder: function(accountId, folderId, resp) {
 		this.notificationAssistant.setFolderViewedTimestamp(folderId, new Date().getTime());
 		this.notificationAssistant.clearAccount(accountId, folderId);
diff --git a/usr/palm/applications/com.palm.app.email/app/controllers/list-assistant.js b/usr/palm/applications/com.palm.app.email/app/controllers/list-assistant.js
index e66f292..e880d1e 100644
--- a/usr/palm/applications/com.palm.app.email/app/controllers/list-assistant.js
+++ b/usr/palm/applications/com.palm.app.email/app/controllers/list-assistant.js
@@ -49,7 +49,8 @@ var ListAssistant = Class.create(App.Scene, {
 			visible:true,
 			items: [
 				{label:$L('Compose'), icon:'compose', command:'compose'},
-				{},
+				{label:$L('Delete All'), icon:'delete', command:'deleteall'},
+				{label:$L('All Read'), icon:'priority', command:'readall'},
 				{label:$L('Update'), icon:'sync', command:'sync'}
 			]};
 	this.controller.setupWidget(Mojo.Menu.commandMenu, undefined, this.cmdMenuModel);
@@ -89,7 +90,7 @@ var ListAssistant = Class.create(App.Scene, {
 					fixedHeightItems:true,
 					itemTemplate: 'list/email_entry',
 					swipeToDelete: true,
-					autoconfirmDelete: true,
+					autoconfirmDelete: false,
 					uniquenessProperty: 'id',
 					dividerTemplate: 'list/date_separator',
 					dividerFunction: function(email) { return email.category; },
@@ -231,6 +232,14 @@ var ListAssistant = Class.create(App.Scene, {
   handleCommand: function(event) {
 	if (event.type == Mojo.Event.command) {
 		switch (event.command) {
+			case 'deleteall':
+				this.handleDeleteAll();
+				break;
+
+			case 'readall':
+				this.handleReadAll();
+				break;
+
 			case 'compose':
 				this.handleSend();
 				break;
@@ -761,6 +770,81 @@ var ListAssistant = Class.create(App.Scene, {
 			}
 		}
 	},
+  handleDeleteAll: function (event) {
+     	
+	var totalCount = 0;
+     			
+	totalCount = this.emailListElement.mojo.getLength();
+     					
+	this.controller.showAlertDialog({
+  		onChoose: function(value) {
+			if(value == 'yes') {
+				//Delete all items in this folder
+//				this.deleteAll();
+				Folder.emptyFolder(this.folderObj.folderId);
+			}
+		},
+		title: '<b>' + $L('Delete All') + '</b>',
+		message: $L('Are you sure you want to delete all ') + "<b>" + totalCount + "</b>" + $L(' items in this folder?'),
+		choices: [
+			{label:$L('Yes'), value:'yes', type:'affirmative'},
+			{label:$L('No'), value:'no', type:'alert'}
+			]
+	});
+  },
+  
+  handleReadAllResponse: function (event) {
+  },
+
+  readAll: function(tleft){
+  	var count = this.emailListElement.mojo.getLength();
+	var id;
+	while(tleft > 0) 
+	{	
+		var item = this.emailListElement.mojo.getNodeByIndex((tleft - 1));	
+		if(item !== undefined)
+		{
+		   	id = item.id;
+		   	if(id)
+		   	{
+				this.controller.serviceRequest(Email.identifier, {
+			        	method: 'setRead',
+			                parameters: {'message':id, 'value': true },
+			                onSuccess: this.handleReadAllResponse.bind(this),
+			                onFailure: this.handleReadAllResponse.bind(this)
+	             			});
+	     		}
+	     	
+	     		tleft = tleft - 1;
+		}
+		else
+		{
+			tleft = tleft - 1;
+		}
+	}	
+  },
+  
+
+  handleReadAll: function (event) {
+   		var totalCount = 0;
+		totalCount = this.emailListElement.mojo.getLength();
+		if (totalCount > 0) {
+			this.controller.showAlertDialog({
+        	    onChoose: function(value) {
+  	        		if(value == 'yes') {
+  	        				var tleft = totalCount;
+							this.readAll(tleft);
+	               	}
+				},
+	               	title: '<b>' + $L('All Read') + '</b>',
+                	message: $L('Are you sure you want to mark ') + "<b>" + totalCount + "</b>" + $L(' items in this folder read?'),
+                    choices: [
+                    	{label:$L('Yes'), value:'yes', type:'affirmative'},
+                        {label:$L('No'), value:'no', type:'alert'}
+                    ]
+        		});
+  		}
+  },
 
   updateFolderStatusModel: function(response) {
 	if (!response.folders) {
diff --git a/usr/palm/applications/com.palm.app.email/app/controllers/message-assistant.js b/usr/palm/applications/com.palm.app.email/app/controllers/message-assistant.js
index 761069e..672c41c 100644
--- a/usr/palm/applications/com.palm.app.email/app/controllers/message-assistant.js
+++ b/usr/palm/applications/com.palm.app.email/app/controllers/message-assistant.js
@@ -61,23 +61,32 @@ var MessageAssistant = Class.create({
 		if (focusStage === true) {
 			this.focusStageTimer = this.focusEmailStage.bind(this).delay(0.6);
 		}
+		this.requests = [];
 	},
 
 	setup: function() {
 		this.setupMessage(); // get message details and setup message webview widget
-		
+		// move-to menu
+		this.moveToMenuModel = {
+			items: []
+			};	
+	
 		// setup menu	
 		this.cmdMenuModel = {
 				visible:true,
 				items: [
+					{label:$L('Move'),      icon:'file',      submenu:'move-to', disabled: true},
+					{label:$L('Set Flag'),  icon:'make-vip',      command:'flag'},
 					{label:$L('Reply'),     icon:'reply',     command:'reply'},
 					{label:$L('Reply all'), icon:'reply-all', command:'replyAll'},
 					{label:$L('Forward'),   icon:'forward-email', command:'forward'},
+					{label:$L('MarkUnread'),   icon:'back', command:'mark-unread'},
 					{label:$L('Delete'),    icon:'delete',    command:'delete'}
 				]};
 		this.controller.setupWidget(Mojo.Menu.commandMenu, undefined, this.cmdMenuModel);
-		
-		this.markUnreadMenuItem =     {label:MessageAssistant.kAppMenuMarkUnread, shortcut:'k', command:'mark-unread'};
+		this.controller.setupWidget('move-to', undefined, this.moveToMenuModel);
+
+		this.markUnreadMenuItem =     {label:MessageAssistant.kAppMenuMarkUnread, shortcut:'u', command:'mark-unread'};
 		this.markSetFlagMenuItem =    {label:MessageAssistant.kAppMenuSetFlag, shortcut:'g', command:'flag'};
 		this.showRecipientsMenuItem = {label:MessageAssistant.kAppMenuShowRecipients, shortcut:'s', command:'show-recipients'};
 		
@@ -143,6 +152,7 @@ var MessageAssistant = Class.create({
 		Mojo.Event.listen(this.controller.stageController.document, Mojo.Event.activate, this.boundUpdateRecipientStatus);
 
 		Mojo.Event.listen(this.controller.getSceneScroller(), Mojo.Event.scrollStarting, this.addAsScrollListener.bind(this));
+		Mojo.Event.listen(this.controller.document, Mojo.Event.flick, this.flickHandler.bind(this));
 		
 		this.subjectElement = this.controller.get('email_subject');
 		this.readViewContainer = this.controller.get('email-readview-content-container');
@@ -175,9 +185,27 @@ var MessageAssistant = Class.create({
 		Mojo.Event.stopListening(this.controller.stageController.document, Mojo.Event.activate, this.boundUpdateRecipientStatus);
 		//  This currently does nothing. Commenting out
 		//  Message.closeMessage(this.controller, this.data.id);
+		this.requests.each(function (r) { r.cancel();});
 	},
-
-	aboutToActivate: function(callback) {
+	
+	renderFolderList: function(data) {
+		var padding = "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
+		if (data.list) {
+			this.moveToMenuModel.items = [];
+			data.list.each(function(folder) {
+				var name = padding.substring(0, folder.depth*24) + folder.name;
+				var icon = 'server-folder-icon';
+				if (this.account.folder === folder.id) {
+					icon = 'server-folder-checkmark checked';
+				}
+				this.moveToMenuModel.items.push({label: name, command: 'move-to-cmd_' + folder.id, icon: icon});
+			}.bind(this));
+			this.cmdMenuModel.items[0].disabled = false;
+			this.controller.modelChanged(this.moveToMenuModel);
+			this.controller.modelChanged(this.cmdMenuModel);
+		}
+},
+ aboutToActivate: function(callback) {
 		if (this.delayActivate === true) {
 			this.readyToActivateCallback = callback;
 		} else {
@@ -376,6 +404,8 @@ var MessageAssistant = Class.create({
 		var assistant = Mojo.Controller.getAppController().assistant;
 		assistant.notificationAssistant.clear(resp.account, resp.folder, this.data.id);
 		assistant.clearDebounce('m'+this.data.id);
+		this.requests.push(Folder.subscribeAccountFolderList(this.account.account, undefined, this.renderFolderList.bind(this)));
+
 	},
 
 	updateRecipientStatus: function() {
@@ -1442,8 +1472,21 @@ var MessageAssistant = Class.create({
 	handleCommand: function(event) {
 		if (event.type == Mojo.Event.command) {
 			try {
-				switch (event.command) {
-					case 'copyAll':
+				var targetId = null;
+				if (event.command.substring(0, 11) === 'move-to-cmd') {
+					targetId = event.command.substring(event.command.lastIndexOf('_')+1);
+					event.command = 'move-to-cmd';
+				}
+			switch (event.command) {
+					case 'move-to-cmd':
+						if (targetId) {
+							Mojo.Log.error('moving to folder: %s', targetId);
+							Message.moveMessage(this.controller, this.account.emailId, targetId);
+							this.controller.stageController.popScene();
+						}
+						break;
+
+				case 'copyAll':
 						this.copyAll(event);
 						break;
 						
@@ -1473,14 +1516,10 @@ var MessageAssistant = Class.create({
 						var currentLabel = this.markUnreadMenuItem.label;
 						var markRead = (currentLabel == MessageAssistant.kAppMenuMarkRead);
 						Message.setRead(this.data.id, markRead);
-						if (markRead) {
-							this.markUnreadMenuItem.label = MessageAssistant.kAppMenuMarkUnread;
-						} else {
-							this.markUnreadMenuItem.label = MessageAssistant.kAppMenuMarkRead;
-						}
-						
+
+						this.markUnreadMenuItem.label = MessageAssistant.kAppMenuMarkUnread;
 						this.updateMessageInParentScene();
-						
+						this.controller.stageController.popScene();
 						break;
 
 					case 'flag':
@@ -1854,6 +1893,14 @@ var MessageAssistant = Class.create({
 			}
 		}
 	},
+	flickHandler: function(event) {
+	    if (event.velocity.x > 0) {
+	        this.boundGotoNextEmailNewer();
+        }
+        else {
+            this.boundGotoNextEmailOlder();
+        }
+	},
 
 	gotoNextEmail: function(direction) {
 		if (this.nextMessages !== undefined && this.nextMessages[direction] !== undefined) {
@@ -2142,10 +2189,18 @@ var MessageAssistant = Class.create({
 		});
 	},
 
-	deleteEmail: function() {
-		Message.setDeleted(this.data.id, true);
-		this.controller.stageController.popScene();
-	}
+	
+       deleteEmail: function() {                                  
+                Message.setDeleted(this.data.id, true);       
+                if(this.nextMessages["older"] !== undefined){       
+                        this.gotoNextEmail("older");       
+                }else if(this.nextMessages["newer"] !== undefined){
+                	this.gotoNextEmail("newer");
+                }else{
+                        this.controller.stageController.popScene();
+                }                 
+                                              
+        }  
 });
 
 MessageAssistant.kAppMenuMarkRead = $L('Mark as Read');
diff --git a/usr/palm/applications/com.palm.app.email/app/controllers/notification-assistant.js b/usr/palm/applications/com.palm.app.email/app/controllers/notification-assistant.js
index e6af5d5..7d3578e 100644
--- a/usr/palm/applications/com.palm.app.email/app/controllers/notification-assistant.js
+++ b/usr/palm/applications/com.palm.app.email/app/controllers/notification-assistant.js
@@ -20,7 +20,7 @@ var NotificationAssistant = Class.create({
 		// sending broadcast and dashboard updates when the user would see it because of the
 		// scene he's in.
 		this.filter = {};
-		this.newMailDeferralTimeout = 7;
+		this.newMailDeferralTimeout = 0;//7;
   	},
 
 	windowBlurFocusHandler: function(event) {
@@ -234,8 +234,10 @@ var NotificationAssistant = Class.create({
 
 			var folderObj;
 			var listIndex;
+
 			for (listIndex = 0; listIndex < resp.list.length; ++listIndex) {
 				folderObj = resp.list[listIndex];
+
 				if (this.shouldDoNotification(folderObj)) {
 					// Add to the UI model only if notify is set and the count shows there's items to add
 					if (folderObj.notify === true && folderObj.count > 0) {
@@ -658,10 +660,10 @@ var NotificationAssistant = Class.create({
 			// displayActive and displayDimmed
 			if (data.event == 'displayOff') {
 				this.displayOff = true;
-				this.newMailDeferralTimeout = 0.5;
+				this.newMailDeferralTimeout = 0;//0.5;
 			} else if (data.event == 'displayOn') {
 				this.displayOff = false;
-				this.newMailDeferralTimeout = 7;
+				this.newMailDeferralTimeout = 0;//7;
 			}
 
 			Mojo.Log.info("displayUpdate displayOff", this.displayOff, "event", data.event);
diff --git a/usr/palm/applications/com.palm.app.email/app/models/Email.js b/usr/palm/applications/com.palm.app.email/app/models/Email.js
index 7a69e15..fb0f108 100644
--- a/usr/palm/applications/com.palm.app.email/app/models/Email.js
+++ b/usr/palm/applications/com.palm.app.email/app/models/Email.js
@@ -159,7 +159,7 @@ var Email = Class.create({
 							if (r.displayName === r.address) 
 								toStr = r.displayName;
 							else 
-								toStr = "#{displayName} <#{address}>".interpolate(r);
+								toStr = "#{displayName}".interpolate(r);
 							toAddressList.push(toStr);
 						}
 					} else if (r.role === EmailRecipient.roleCc) {
@@ -168,7 +168,7 @@ var Email = Class.create({
 							if (r.displayName === r.address) 
 								ccStr = r.displayName;
 							else 
-								ccStr = "#{displayName} <#{address}>".interpolate(r);
+								ccStr = "#{displayName}".interpolate(r);
 							ccAddressList.push(ccStr);
 						}
 					}
@@ -180,33 +180,34 @@ var Email = Class.create({
 					this.text += $L("<b>From:</b> ") + "#{displayName}".interpolate(fromObj).escapeHTML() + "<br/>";
 				}
 				else {
-					this.text += $L("<b>From:</b> ") + "#{displayName} <#{address}>".interpolate(fromObj).escapeHTML() + "<br/>" 
+					this.text += $L("<b>From:</b> ") + "#{displayName}".interpolate(fromObj).escapeHTML() + "<br/>" 
 				};
-				this.text += $L("<b>Date:</b> ") + Mojo.Format.formatDate(new Date(parseInt(original.timeStamp)), {date:'medium', time:'short'}) + "<br/>";
-				this.text += $L("<b>Subject:</b> #{summary}").interpolate(original) + "<br/>";
+				this.text += $L("<b>Sent:</b> ") + Mojo.Format.formatDate(new Date(parseInt(original.timeStamp)), {date:'full', time:'short'}) + "<br/>";		
 				if (toAddressList.length > 0) {
 					this.text += $L("<b>To:</b> ") + "#{list}".interpolate({list:toAddressList.join("; ")}).escapeHTML() + "<br/>";
 				}
 				if (ccAddressList.length > 0) {
-					this.text += $L("<b>CC:</b> ") + "#{list}".interpolate({list:ccAddressList.join("; ")}).escapeHTML() + "<br/>";
+					this.text += $L("<b>Cc:</b> ") + "#{list}".interpolate({list:ccAddressList.join("; ")}).escapeHTML() + "<br/>";
 				}
+				this.text += $L("<b>Subject:</b> #{summary}").interpolate(original) + "<br/>";
 				this.text += "<br/>";
 			} else {
 				
-				// reply case. Integrate header info with sentence
-				var strArgs = {
-					"monthDate": "",
-					"displayName": fromObj.displayName,
-					"address": fromObj.address
+				if (fromObj.displayName === fromObj.address) {
+					this.text += $L("<b>From:</b> ") + "#{displayName}".interpolate(fromObj).escapeHTML() + "<br/>";
+				}
+				else {
+					this.text += $L("<b>From:</b> ") + "#{displayName}".interpolate(fromObj).escapeHTML() + "<br/>" 
 				};
-				if (original.timeStamp) {
-					// <Month (short version)> <Day>,<Year> at <time>
-					strArgs.monthDate = Mojo.Format.formatDate(new Date(parseInt(original.timeStamp, 10)), {date:'medium', time:'short'});
-					this.text += $L("On #{monthDate}, #{displayName} <#{address}> wrote: ").interpolate(strArgs).escapeHTML();
-				} else {
-					this.text += $L("#{displayName} <#{address}> wrote: ").interpolate(strArgs).escapeHTML();
+				this.text += $L("<b>Sent:</b> ") + Mojo.Format.formatDate(new Date(parseInt(original.timeStamp)), {date:'full', time:'short'}) + "<br/>";		
+				if (toAddressList.length > 0) {
+					this.text += $L("<b>To:</b> ") + "#{list}".interpolate({list:toAddressList.join("; ")}).escapeHTML() + "<br/>";
+				}
+				if (ccAddressList.length > 0) {
+					this.text += $L("<b>Cc:</b> ") + "#{list}".interpolate({list:ccAddressList.join("; ")}).escapeHTML() + "<br/>";
 				}
-				this.text += "<br><br>";
+				this.text += $L("<b>Subject:</b> #{summary}").interpolate(original) + "<br/>";
+				this.text += "<br/>";
 			}
 			this.originalText = original.text;
 		} else {
@@ -347,7 +348,7 @@ var Email = Class.create({
 		else if (this.action == "reply" || this.action == "replyAll") {
 			Message.setReplied(this.id, true);
 			// No SmartReply in version 1.0
-			//params.replyMessage = this.id;
+			params.replyMessage = this.id;
 		}
 
 		// Quick strip: replace <br> and <p> with newline and then strip all html tags
@@ -380,8 +381,8 @@ Email.getPriorityClass = function(priority) {
 	return priority;
 }
 
-Email.kSignaturePlaceholder = "<span style='font-family:Prelude, Verdana, san-serif;'><br><br></span><span id='signature'></span>";
-Email.kReplyForwardSetupElems = "<br><br>" + Email.kSignaturePlaceholder + "<span style='color:navy; font-family:Prelude, Verdana, san-serif; '><hr align='left' style='width:75%'/>";
+Email.kSignaturePlaceholder = "<span style='font-family:Prelude, Calibri, san-serif; font-size:16px; color:black;'><br><br></span><span id='signature'></span>";
+Email.kReplyForwardSetupElems = "<span style='font-family:Prelude, Calibri, san-serif; font-size:16px'>" + Email.kSignaturePlaceholder + "<hr align='left' style='width:75%'/>";
 
 Email.kSubjectPrefixRe = $L("Re: ");
 Email.kSubjectPrefixFw = $L("Fw: ");
diff --git a/usr/palm/applications/com.palm.app.email/app/views/email-dashboard/multiple-accounts-template.html b/usr/palm/applications/com.palm.app.email/app/views/email-dashboard/multiple-accounts-template.html
index 38c8b71..0941eb1 100644
--- a/usr/palm/applications/com.palm.app.email/app/views/email-dashboard/multiple-accounts-template.html
+++ b/usr/palm/applications/com.palm.app.email/app/views/email-dashboard/multiple-accounts-template.html
@@ -5,6 +5,10 @@
     </div>
      <div class="palm-dashboard-icon email">
      </div>
+  </div>
+  <div class="palm-dashboard-icon-container email-dashboard-tap-target email-dashboard-tap-target-delete" style="float: right; margin-left: 4px;" accountid="single" folderid="#{folder}" messageid="#{message}">
+	<div class="palm-dashboard-icon delete">
+	</div>
   </div>   
   <div class="palm-dashboard-text-container email-dashboard-tap-target" accountid="single" folderid="#{folder}" messageid="#{message}">
      <div class="dashboard-title">
diff --git a/usr/palm/applications/com.palm.app.email/app/views/email-dashboard/single-account-template.html b/usr/palm/applications/com.palm.app.email/app/views/email-dashboard/single-account-template.html
index 31a4683..5c4619c 100644
--- a/usr/palm/applications/com.palm.app.email/app/views/email-dashboard/single-account-template.html
+++ b/usr/palm/applications/com.palm.app.email/app/views/email-dashboard/single-account-template.html
@@ -5,6 +5,10 @@
     </div>
      <div class="palm-dashboard-icon #{accountDomain}">
      </div>
+  </div>
+  <div class="palm-dashboard-icon-container email-dashboard-tap-target email-dashboard-tap-target-delete" style="float: right; margin-left: 4px;" accountid="single" folderid="#{folder}" messageid="#{message}">
+	<div class="palm-dashboard-icon delete">
+       </div>
   </div>   
   <div class="palm-dashboard-text-container email-dashboard-tap-target" accountid="single" folderid="#{folder}" messageid="#{message}">
      <div class="dashboard-title">
diff --git a/usr/palm/applications/com.palm.app.email/app/views/email-dashboard/single-email-template.html b/usr/palm/applications/com.palm.app.email/app/views/email-dashboard/single-email-template.html
index 0eca342..6307dc5 100644
--- a/usr/palm/applications/com.palm.app.email/app/views/email-dashboard/single-email-template.html
+++ b/usr/palm/applications/com.palm.app.email/app/views/email-dashboard/single-email-template.html
@@ -1,7 +1,12 @@
-<div class="dashboard-notification-module single">
+<div class="dashboard-notification-module">
   <div class="palm-dashboard-icon-container email-dashboard-tap-target" accountid="#{account}">
      <div class="palm-dashboard-icon #{accountDomain}">
      </div>
+  </div>
+  <div class="palm-dashboard-icon-container email-dashboard-tap-target email-dashboard-tap-target-delete" style="float: right; margin-left: 4px;" 
+  		accountid="single" folderid="#{folder}" messageid="#{message}">
+        <div class="palm-dashboard-icon delete">
+	</div>
   </div>   
   <div class="palm-dashboard-text-container email-dashboard-tap-target" accountid="single" folderid="#{folder}" messageid="#{message}">
      <div class="dashboard-title">
diff --git a/usr/palm/applications/com.palm.app.email/stylesheets/notifications.css b/usr/palm/applications/com.palm.app.email/stylesheets/notifications.css
index 5ba21eb..fdf9fa9 100644
--- a/usr/palm/applications/com.palm.app.email/stylesheets/notifications.css
+++ b/usr/palm/applications/com.palm.app.email/stylesheets/notifications.css
@@ -78,3 +78,9 @@ Copyright 2009 Palm, Inc.  All rights reserved.
 .palm-dashboard-icon.gmail			{ background: url(../images/notification-large-gmail.png) center left no-repeat; }
 .palm-dashboard-icon.yahoo			{ background: url(../images/notification-large-yahoo.png) center left no-repeat; }
 .palm-dashboard-icon.aol			{ background: url(../images/notification-large-aol.png) center left no-repeat; }
+
+/*To support delete of email from notification*/
+.palm-dashboard-icon.delete 	       { background: url(../images/icon_trash.png) center center no-repeat; }
+
+.email-dashboard-tap-target-delete {
+}
