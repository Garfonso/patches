diff --git a/usr/palm/applications/com.palm.app.email/app/controllers/accountpreferences-assistant.js b/usr/palm/applications/com.palm.app.email/app/controllers/accountpreferences-assistant.js
index 15f6bac..83fa17f 100644
--- a/usr/palm/applications/com.palm.app.email/app/controllers/accountpreferences-assistant.js
+++ b/usr/palm/applications/com.palm.app.email/app/controllers/accountpreferences-assistant.js
@@ -41,7 +41,77 @@ AccountpreferencesAssistant.kPreModelNameAscii = " Pre";
 AccountpreferencesAssistant.prototype.setup = function() {
 	
 	Mojo.Log.warn("NOTE setup() for scene %s", this.controller.sceneName);	
+	// Adding Tweaks Default Values for Email Megamix Patch
+	this.additionalSyncWindow = false;
+	this.additionalSyncTimes = false;
+	console.info("SyncTimes is.");
+	console.info(this.additionalSyncTimes);
 	
+	//Tweaks Setup for Email Megamix Patch
+	this.newSyncLookback = this.controller.get('new-sync-lookback');
+	this.newSyncFetchSelector = this.controller.get('new-sync-fetch-selector');
+	this.controller.serviceRequest("palm://org.webosinternals.tweaks.prefs/", {method: "get", 
+	parameters: {owner: "org.webosinternals.patches.email-megamix",
+	keys: ["additionalSyncWindow", "additionalSyncTimes"]},
+	onSuccess: function(response) {
+		if((response) && (response.additionalSyncWindow != undefined)){
+				this.additionalSyncWindow = response.additionalSyncWindow;
+				this.syncWindowOptions.choices = this.additionalSyncWindow ? [
+					{label: $L('1 day'), value: 1},
+					{label: $L('3 days'), value: 3},
+					{label: $L('7 days'), value: 7},
+					{label: $L('2 weeks'), value: 14},
+					{label: $L('1 month'), value: 30},
+					{label: $L('2 months'), value: 60},
+					{label: $L('3 months'), value: 90},
+					{label: $L('6 months'), value: 180},
+					{label: $L('9 months'), value: 270},
+					{label: $L('1 year'), value: 365},
+					{label: $L('All'), value: "0"}
+				] : [	
+					{label: $L('1 day'), value: 1},
+					{label: $L('3 days'), value: 3},
+					{label: $L('7 days'), value: 7},
+					{label: $L('2 weeks'), value: 14},
+					{label: $L('All'), value: "0"}
+				];
+				this.controller.setupWidget('edit-account-sync-lookback-selector', this.syncWindowOptions, this.accountPrefs);
+				this.controller.instantiateChildWidgets(this.newSyncLookback);
+				}
+		if((response) && (response.additionalSyncTimes != undefined)){
+				this.additionalSyncTimes = response.additionalSyncTimes;
+				this.fetchOptions.choices = this.additionalSyncTimes ? [
+					{label: $L('5 minutes'), value: AccountPreferences.SYNC_5_MINS + ""},
+					{label: $L('10 minutes'), value: AccountPreferences.SYNC_10_MINS + ""},
+					{label: $L('15 minutes'), value: AccountPreferences.SYNC_15_MINS + ""},
+					{label: $L('30 minutes'), value: AccountPreferences.SYNC_30_MINS + ""},
+					{label: $L('45 minutes'), value: AccountPreferences.SYNC_45_MINS + ""},
+					{label: $L('1 hour'), value: AccountPreferences.SYNC_1_HR + ""},
+					{label: $L('2 hours'), value: AccountPreferences.SYNC_2_HRS + ""},
+					{label: $L('4 hours'), value: AccountPreferences.SYNC_4_HRS + ""},
+					{label: $L('6 hours'), value: AccountPreferences.SYNC_6_HRS + ""},
+					{label: $L('8 hours'), value: AccountPreferences.SYNC_8_HRS + ""},
+					{label: $L('10 hours'), value: AccountPreferences.SYNC_10_HRS + ""},
+					{label: $L('12 hours'), value: AccountPreferences.SYNC_12_HRS + ""},
+					{label: $L('24 hours'), value: AccountPreferences.SYNC_24_HRS + ""},
+					{label: $L('Manual'), value: AccountPreferences.SYNC_MANUAL + ""}
+				] : [
+					{label: $L('5 minutes'), value: AccountPreferences.SYNC_5_MINS + ""},
+					{label: $L('10 minutes'), value: AccountPreferences.SYNC_10_MINS + ""},
+					{label: $L('15 minutes'), value: AccountPreferences.SYNC_15_MINS + ""},
+					{label: $L('30 minutes'), value: AccountPreferences.SYNC_30_MINS + ""},					
+					{label: $L('1 hour'), value: AccountPreferences.SYNC_1_HR + ""},
+					{label: $L('6 hours'), value: AccountPreferences.SYNC_6_HRS + ""},										
+					{label: $L('12 hours'), value: AccountPreferences.SYNC_12_HRS + ""},
+					{label: $L('24 hours'), value: AccountPreferences.SYNC_24_HRS + ""},
+					{label: $L('Manual'), value: AccountPreferences.SYNC_MANUAL + ""}
+				];
+				this.renderAccountDetails();
+				this.controller.setupWidget('edit-account-sync-fetch-selector', this.fetchOptions, this.accountPrefs);
+				this.controller.instantiateChildWidgets(this.newSyncFetchSelector);
+				}
+	}.bind(this)});
+		
 	// bind functions
 	this.showNotificationChangeHandler = this.showNotificationChanged.bind(this);
 	this.notificationTypeChangeHandler = this.notificationTypeChanged.bind(this);
@@ -60,8 +130,7 @@ AccountpreferencesAssistant.prototype.setup = function() {
 	this.accountPrefs.syncFrequencyMins = this.accountPrefs.syncFrequencyMins + "";
 
 	this.controller.setupWidget('edit-mail-type-selector', this.mailTypes, this.accountPrefs);
-	this.controller.setupWidget('edit-account-sync-lookback-selector', this.syncWindowOptions, this.accountPrefs);
-	this.controller.setupWidget('edit-account-sync-fetch-selector', this.fetchOptions, this.accountPrefs);
+//	this.controller.setupWidget('edit-account-sync-fetch-selector', this.fetchOptions, this.accountPrefs);
 	//this.controller.setupWidget('edit-account-mail-format-selector', this.mailFormats, this.accountPrefs);
 	this.controller.setupWidget('edit-account-show-notification-toggle', this.notificationOptions, this.accountPrefs.notifications);
 	this.controller.setupWidget('sync-deleted-toggle', this.syncDeletedOptions, this.accountPrefs);
@@ -98,8 +167,7 @@ AccountpreferencesAssistant.prototype.setup = function() {
 	this.controller.listen('edit-account-imap-sent', Mojo.Event.tap, this.handleChangeServerFolder.bind(this, "sent"));
 	this.controller.listen('edit-account-imap-drafts', Mojo.Event.tap, this.handleChangeServerFolder.bind(this, "drafts"));
 	this.controller.listen('edit-account-imap-trash', Mojo.Event.tap, this.handleChangeServerFolder.bind(this, "trash"));
-		
-	this.renderAccountDetails();
+	
 	Mojo.Log.warn("NOTE: setup() for scene %s DONE", this.controller.sceneName);
 };
 
@@ -516,14 +584,6 @@ AccountpreferencesAssistant.prototype.syncWindowOptions = {
     multiline: true,
 	modelProperty: 'syncWindowDays',
 	label: $L("Show email"),
-	choices: [
-		{label: $L('1 day'), value: 1},
-		{label: $L('3 days'), value: 3},
-		{label: $L('7 days'), value: 7},
-		{label: $L('2 weeks'), value: 14},
-		{label: $L('1 month'), value: 30},
-		{label: $L('All'), value: "0"}
-	]
 };
 
 AccountpreferencesAssistant.prototype.soundOptions = {
@@ -551,6 +611,7 @@ AccountpreferencesAssistant.prototype.syncServerDeletedOptions = {
 };
 
 AccountpreferencesAssistant.prototype.fetchOptionsPushLabel = { label: $L('As items arrive'), value: AccountPreferences.SYNC_PUSH + "", disabled: false };
+
 AccountpreferencesAssistant.prototype.fetchOptions = {
 	modelProperty: 'syncFrequencyMins',
 	label: $L("Get email"),
@@ -562,8 +623,13 @@ AccountpreferencesAssistant.prototype.fetchOptions = {
 		{label: $L('10 minutes'), value: AccountPreferences.SYNC_10_MINS + ""},
 		{label: $L('15 minutes'), value: AccountPreferences.SYNC_15_MINS + ""},
 		{label: $L('30 minutes'), value: AccountPreferences.SYNC_30_MINS + ""},
+		{label: $L('45 minutes'), value: AccountPreferences.SYNC_45_MINS + ""},
 		{label: $L('1 hour'), value: AccountPreferences.SYNC_1_HR + ""},
+		{label: $L('2 hours'), value: AccountPreferences.SYNC_2_HRS + ""},
+		{label: $L('4 hours'), value: AccountPreferences.SYNC_4_HRS + ""},
 		{label: $L('6 hours'), value: AccountPreferences.SYNC_6_HRS + ""},
+		{label: $L('8 hours'), value: AccountPreferences.SYNC_8_HRS + ""},
+		{label: $L('10 hours'), value: AccountPreferences.SYNC_10_HRS + ""},
 		{label: $L('12 hours'), value: AccountPreferences.SYNC_12_HRS + ""},
 		{label: $L('24 hours'), value: AccountPreferences.SYNC_24_HRS + ""},
 		{label: $L('Manual'), value: AccountPreferences.SYNC_MANUAL + ""}
@@ -571,4 +637,3 @@ AccountpreferencesAssistant.prototype.fetchOptions = {
 };
 
 AccountpreferencesAssistant.kSYNC_FREQ_PUSH = AccountPreferences.SYNC_PUSH + "";
-
diff --git a/usr/palm/applications/com.palm.app.email/app/controllers/compose-assistant.js b/usr/palm/applications/com.palm.app.email/app/controllers/compose-assistant.js
index 4a5c48a..15b895d 100644
--- a/usr/palm/applications/com.palm.app.email/app/controllers/compose-assistant.js
+++ b/usr/palm/applications/com.palm.app.email/app/controllers/compose-assistant.js
@@ -58,6 +58,13 @@ var ComposeAssistant = function(options, stageName, composeReadyFunc) {
 	this.attachmentDownloadFailedHandler = this.attachmentError.bind(this);
 	this.attachmentProgressbarUpdateHandler = this.attachmentUpdateProgressbar.bind(this);
 	this.attachmentDownloadedHandler = this.handleAttachmentDetails.bind(this);
+	//Tweaks Default Values
+	this.priorityButton = false;
+	this.discardButton = false;
+	this.saveDraftButton = false;
+	this.saveConfirmation = false;	
+	this.discardConfirmation = false;
+	this.sendConfirmation = false;
 };
 
 ComposeAssistant.prototype.isReplyForward = function() {
@@ -254,8 +261,7 @@ ComposeAssistant.prototype.setup = function() {
 			visible: true,
 			menuClass: 'palm-white',
 			items: [
-				{label:$L('Attach'), icon:'attach', command:'attach'},
-				{label:$L('Send'), icon:'send', command:'send'}
+					//Items moved to Tweaks Setup to prevent double loading.
 			]};
 	this.controller.setupWidget(Mojo.Menu.commandMenu, undefined, this.cmdMenuModel);
 
@@ -345,8 +351,68 @@ ComposeAssistant.prototype.setup = function() {
 	
 	// update ui to disable save until email is dirty
 	this.setDirty(false);
+	
+	//Tweaks Setup for Email Megamix Patch (Adds priority, save and discard buttons. Also adds send, save and discard confirmations)
+	this.controller.serviceRequest("palm://org.webosinternals.tweaks.prefs/", {method: "get", 
+	parameters: {owner: "org.webosinternals.patches.email-megamix",
+		keys: [ "sendConfirmation", "discardConfirmation", "saveConfirmation", "priorityButton", "discardButton", "saveDraftButton"]},
+		onSuccess: function(response) {
+			this.cmdMenuModel.items = [
+				{label:$L('Attach'), icon:'attach', command:'attach'},
+				{label:$L('Send'), icon:'send', command:'send'},
+			];			
+			if((response) && (response.sendConfirmation != undefined)){
+				this.sendConfirmation = response.sendConfirmation;
+				if(this.sendConfirmation == true)
+					this.cmdMenuModel.items.splice(1,1,this.sendConfirmationOption);
+				}
+			if((response) && (response.discardConfirmation != undefined)){
+				this.discardConfirmation = response.discardConfirmation;
+				}
+			if((response) && (response.saveConfirmation != undefined)){
+				this.saveConfirmation = response.saveConfirmation;
+				}
+			if((response) && (response.priorityButton != undefined)){
+				this.priorityButton = response.priorityButton;
+				if(this.priorityButton == true)						
+					this.cmdMenuModel.items.unshift(this.priorityButtonOption);									
+				}
+			if((response) && (response.saveDraftButton != undefined)){						
+				this.saveDraftButton = response.saveDraftButton;
+//				if((response) && (response.saveConfirmation != undefined)){
+//					this.saveConfirmation = response.saveConfirmation;
+//					console.info("Save Confirmation is");
+//					console.info(this.saveConfirmation);
+//					}
+				if(this.saveDraftButton == true){
+					console.info("Setup Save Draft Button");
+					if(this.saveConfirmation == true)
+						this.cmdMenuModel.items.push(this.saveDraftConfirmationButtonOption);
+					else
+						this.cmdMenuModel.items.push(this.saveDraftButtonOption);
+					}
+				}
+			if((response) && (response.discardButton != undefined)){						
+				this.discardButton = response.discardButton;
+				if(this.discardButton == true){
+					if(this.discardConfirmation == true)
+						this.cmdMenuModel.items.push(this.discardConfirmationButtonOption);
+					else
+						this.cmdMenuModel.items.push(this.discardButtonOption);
+					}											
+				}
+			this.controller.modelChanged(this.cmdMenuModel);
+		}.bind(this)});	
 };
 
+ComposeAssistant.prototype.priorityButtonOption = {label:$L('Priority'), icon:'priority', command:'priority'};
+ComposeAssistant.prototype.discardButtonOption = {label:$L('Delete'),icon:'delete', command:'cancel'};
+ComposeAssistant.prototype.saveDraftButtonOption = {label:$L('Save'), icon:'save', command:'save'};
+
+ComposeAssistant.prototype.sendConfirmationOption = {label:$L('Send'), icon:'send', command:'send-confirmation'};
+ComposeAssistant.prototype.discardConfirmationButtonOption = {label:$L('Delete'),icon:'delete', command:'cancel-confirmation'};
+ComposeAssistant.prototype.saveDraftConfirmationButtonOption = {label:$L('Save'), icon:'save', command:'save-confirmation'};
+
 /*
 	We patch the body element's focus method, since the default behavior seems to have changed so that all text in the div is selected.
 	So, the patched version uses setPosition on the window's selection object instead.
@@ -668,17 +734,51 @@ ComposeAssistant.prototype.handleCommand = function(event) {
 				this.handleAttach();
 				break;
 
-			case 'save':
-				this.draftIsDirty = true; // set to true to make sure the save occurs
-				this.saveDraft();
-				break;
+			case 'save-confirmation':
+					this.controller.showAlertDialog({
+						onChoose: function(value) {if (value == 'yes') {this.saveDraft();}},
+						title: $L("Save This Message?"),
+						choices:[
+							{label:$L('Yes'), value:"yes", type:'negative'},  
+							{label:$L("No"), value:"no", type: 'dismiss'}
+								]						
+						});
+					break;
 
-			case 'send':
-				this.send();
+			case 'save':
+					this.draftIsDirty = true; // set to true to make sure the save occurs
+					this.saveDraft();
+					break;
+
+			case 'send-confirmation':
+					this.controller.showAlertDialog({
+					onChoose: function(value) {if (value == 'yes') {this.send();}},
+					title: $L("Send This Message?"),
+					choices:[
+						{label:$L('Yes'), value:"yes", type:'negative'},  
+						{label:$L("No"), value:"no", type: 'dismiss'}
+							]
+					});
+ 					break;
+			
+			case "send":
+					this.send();
+					break;
+
+			case 'cancel-confirmation':
+					this.controller.showAlertDialog({
+					onChoose: function(value) {if (value == 'yes') {this.cancelCompose();}},
+					title: $L("Discard this Draft?"),
+					message: $L("This cannot be undone"),
+					choices:[
+						{label:$L('Yes'), value:"yes", type:'negative'},  
+						{label:$L("No"), value:"no", type: 'dismiss'}
+							]
+					});
 				break;
-
+				
 			case 'cancel':
-				this.cancelCompose();
+					this.cancelCompose();
 				break;
 					
 			case 'priority':
diff --git a/usr/palm/applications/com.palm.app.email/app/controllers/list-assistant.js b/usr/palm/applications/com.palm.app.email/app/controllers/list-assistant.js
index 2e239ef..a13d6c8 100644
--- a/usr/palm/applications/com.palm.app.email/app/controllers/list-assistant.js
+++ b/usr/palm/applications/com.palm.app.email/app/controllers/list-assistant.js
@@ -27,6 +27,10 @@ var ListAssistant = function(targetFolder, pushingOtherScenes){
 	// Runtime state:
 	this.pendingComposeActions = [];
 
+	//Tweaks Default Values
+	this.deleteAllButton = false;
+	this.markAllReadButton = false;	
+	
 	this.currentZoomItem = undefined;
 	this.currentZoomItemPreview = undefined;
 	this.currentZoomItemHeight = 0;
@@ -38,6 +42,9 @@ var ListAssistant = function(targetFolder, pushingOtherScenes){
 
 };
 
+ListAssistant.prototype.deleteAllButtonOption = {label:$L('Delete All'), icon:'delete', command:'empty-folder'};
+ListAssistant.prototype.markAllReadButtonOption = {label:$L('All Read'), icon:'priority', command:'mark-folder-read'};
+
 ListAssistant.prototype.setup = function() {
 	//window.logger.log("ListAssistant setup");
 
@@ -71,9 +78,7 @@ ListAssistant.prototype.setup = function() {
 	this.cmdMenuModel = {
 			visible:true,
 			items: [
-				{label:$L('Compose'), icon:'compose', command:'compose'},
-				{},
-				{label:$L('Update'), icon:'sync', command:'sync'}
+				// Items moved to Tweaks Setup to prevent double loading
 			]};
 	this.controller.setupWidget(Mojo.Menu.commandMenu, undefined, this.cmdMenuModel);
 
@@ -94,8 +99,27 @@ ListAssistant.prototype.setup = function() {
 		]};
 	this.controller.setupWidget(Mojo.Menu.appMenu, {omitDefaultItems:true}, this.appMenuModel);
 
-
-
+		//Tweaks Setup for Email Megamix Patch (Adds delete all and all read buttons)
+		this.controller.serviceRequest("palm://org.webosinternals.tweaks.prefs/", {method: "get", 
+		parameters: {owner: "org.webosinternals.patches.email-megamix",
+			keys: [ "markAllReadButton", "deleteAllButton"]},
+			onSuccess: function(response) {
+				this.cmdMenuModel.items = [
+					{label:$L('Compose'), icon:'compose', command:'compose'},
+					{label:$L('Update'), icon:'sync', command:'sync'}
+				];				
+				if((response) && (response.markAllReadButton != undefined)){
+						this.markAllReadButton = response.markAllReadButton;
+						if(this.markAllReadButton == true)
+							this.cmdMenuModel.items.splice(1,0,this.markAllReadButtonOption);			
+						}
+				if((response) && (response.deleteAllButton != undefined)){						
+						this.deleteAllButton = response.deleteAllButton;
+						if(this.deleteAllButton == true)							
+							this.cmdMenuModel.items.splice(1,0,this.deleteAllButtonOption);
+						}
+				this.controller.modelChanged(this.cmdMenuModel);
+			}.bind(this)});
 
 	this.account = EmailApp.accounts.ids[this.folder.accountId] || {};
 	Mojo.Log.info("ListAssistant.setupDelayed()");
@@ -205,6 +229,9 @@ ListAssistant.prototype.setup = function() {
 	//window.logger.log("ListAssistant setup done");
 };
 
+ListAssistant.prototype.deleteAllButtonOption = {label:$L('Delete All'), icon:'delete', command:'empty-folder'};
+ListAssistant.prototype.markAllReadButtonOption = {label:$L('All Read'), icon:'priority', command:'mark-folder-read'};
+
 // Call to set up the lists in this scene.
 // Includes logic to do nothing if called >1 time.
 // Returns true if the lists were not already set up.
diff --git a/usr/palm/applications/com.palm.app.email/app/controllers/message-assistant.js b/usr/palm/applications/com.palm.app.email/app/controllers/message-assistant.js
index 7e52e36..711b0f3 100644
--- a/usr/palm/applications/com.palm.app.email/app/controllers/message-assistant.js
+++ b/usr/palm/applications/com.palm.app.email/app/controllers/message-assistant.js
@@ -73,6 +73,10 @@ var MessageAssistant = function(params, focusStage, detailsObj){
 	this.renderedMessageBody = false;
 	
 	// Bind prototype methods to instance:
+	this.previousEmailSwipeControl = true;
+	this.reverseSwipeControl = false;
+	this.moveToFolder = false;
+	this.setFlagButton = false;
 	this.parentAssistant = AppAssistant.getSceneAssistant("list");		
 	this.showHideRecipients = this.showHideRecipients.bind(this);
 	this._orientationChanged = this._orientationChanged.bind(this);
@@ -126,6 +130,40 @@ var MessageAssistant = function(params, focusStage, detailsObj){
 		this._hookupEventListeners();
         this._orientationChanged(this.positions[this.lastPosition]);
 		//window.logger.log("MessageAssistant setup done");
+	
+		//Tweaks Setup for Swipe Controls
+		this.controller.serviceRequest("palm://org.webosinternals.tweaks.prefs/", {method: "get", 
+		parameters: {owner: "org.webosinternals.patches.email-megamix",
+			keys: ["previousEmailSwipeControl", "reverseSwipeControl"]},
+			onSuccess: function(response) {
+				if((response) && (response.previousEmailSwipeControl != undefined))
+						this.previousEmailSwipeControl = response.previousEmailSwipeControl;
+				if((response) && (response.reverseSwipeControl != undefined))
+						this.reverseSwipeControl = response.reverseSwipeControl;
+			}.bind(this)});
+		//Tweaks Setup for Email Megamix Patch (Adds Move to Folder and Set Flag Buttons)
+		this.controller.serviceRequest("palm://org.webosinternals.tweaks.prefs/", {method: "get", 
+		parameters: {owner: "org.webosinternals.patches.email-megamix",
+			keys: [ "moveToFolder", "setFlagButton"]},
+			onSuccess: function(response) {
+				this.cmdMenuModel.items = [
+					{label:$L('Reply'),     icon:'reply',     command:'reply'},
+					{label:$L('Reply all'), icon:'reply-all', command:'replyAll'},
+					{label:$L('Forward'),   icon:'forward-email', command:'forward'},
+					{label:$L('Delete'),    icon:'delete',    command:'delete', disabled: this.readonly}
+				];
+				if((response) && (response.setFlagButton != undefined)){						
+						this.setFlagButton = response.setFlagButton;
+						if(this.setFlagButton == true)							
+							this.cmdMenuModel.items.unshift(this.setFlagButtonOption);
+						}
+				if((response) && (response.moveToFolder != undefined)){
+						this.moveToFolder = response.moveToFolder;
+						if(this.moveToFolder == true)
+							this.cmdMenuModel.items.unshift(this.moveToFolderOption);			
+						}
+				this.controller.modelChanged(this.cmdMenuModel);
+			}.bind(this)});
 	};
 	
 	MessageAssistant.prototype._setupMenus = function() {
@@ -134,11 +172,8 @@ var MessageAssistant = function(params, focusStage, detailsObj){
 		this.cmdMenuModel = {
 				visible:true,
 				items: [
-					{label:$L('Reply'),     icon:'reply',     command:'reply'},
-					{label:$L('Reply all'), icon:'reply-all', command:'replyAll'},
-					{label:$L('Forward'),   icon:'forward-email', command:'forward'},
-					{label:$L('Delete'),    icon:'delete',    command:'delete', disabled: this.readonly}
-				]};
+				//items moved to Tweaks Setup in order to prevent double loading
+				]};		
 		this.controller.setupWidget(Mojo.Menu.commandMenu, undefined, this.cmdMenuModel);
 		
 		this.markUnreadMenuItem =     {label:MessageAssistant.kAppMenuMarkUnread, shortcut:'k', command:'mark-unread', disabled: this.readonly};
@@ -176,6 +211,9 @@ var MessageAssistant = function(params, focusStage, detailsObj){
 		
 	};
 	
+	MessageAssistant.prototype.setFlagButtonOption = {label:$L('Set Flag'),  icon:'make-vip',      command:'flag'};
+	MessageAssistant.prototype.moveToFolderOption = {label:$L('Move'), 	icon:'file', 	command:'move'};
+	
 	MessageAssistant.prototype._hookupEventListeners = function() {
 		this.emailHeaderBlock = this.controller.get('email_header_block');
 		this.emailPicturesBlock = this.controller.get('email_pictures_list');
@@ -211,6 +249,8 @@ var MessageAssistant = function(params, focusStage, detailsObj){
 		Mojo.Log.warn("Need to put scroll listening code back");
 		Mojo.Event.listen(this.controller.getSceneScroller(), Mojo.Event.scrollStarting, this.addAsScrollListener.bind(this));
 		
+		Mojo.Event.listen(this.controller.document, Mojo.Event.flick, this.flickHandler.bind(this));
+		
 		this.subjectElement = this.controller.get('email_subject');
 		this.readViewContainer = this.controller.get('email-readview-content-container');
         this.controller.listen(this.controller.document, 'orientationchange', this.handleOrientationChangedEvent);
@@ -2430,6 +2470,26 @@ MessageAssistant.prototype._getAttachmentById = function(id) {
 		}
 	};
 
+	MessageAssistant.prototype.flickHandler = function(event) {
+	console.info('Swipe Detected')
+		if(this.reverseSwipeControl == false){
+			if(this.previousEmailSwipeControl == true){
+				if (event.velocity.x > 0)
+					this.boundGotoNextEmailNewer();
+				else 
+					this.boundGotoNextEmailOlder();
+			}
+		}
+		else {
+			if(this.previousEmailSwipeControl == true){
+				if (event.velocity.x < 0)
+					this.boundGotoNextEmailNewer();
+				else 
+					this.boundGotoNextEmailOlder();
+			}
+		}
+	};
+	
 	MessageAssistant.prototype.gotoNextEmail = function(direction) {
 		if (this.nextMessages !== undefined && this.nextMessages[direction] !== undefined) {
 			Mojo.Log.info("### we have emails in the desired direction");
diff --git a/usr/palm/applications/com.palm.app.email/app/models/AccountPreferences.js b/usr/palm/applications/com.palm.app.email/app/models/AccountPreferences.js
index 3dd59f4..dc279c0 100644
--- a/usr/palm/applications/com.palm.app.email/app/models/AccountPreferences.js
+++ b/usr/palm/applications/com.palm.app.email/app/models/AccountPreferences.js
@@ -82,8 +82,13 @@ AccountPreferences.SYNC_5_MINS	= 5;
 AccountPreferences.SYNC_10_MINS	= 10;
 AccountPreferences.SYNC_15_MINS	= 15;
 AccountPreferences.SYNC_30_MINS	= 30;
+AccountPreferences.SYNC_45_MINS	= 45;
 AccountPreferences.SYNC_1_HR	= 60;
+AccountPreferences.SYNC_2_HRS	= 120;
+AccountPreferences.SYNC_4_HRS	= 240;
 AccountPreferences.SYNC_6_HRS	= 360;
+AccountPreferences.SYNC_8_HRS	= 480;
+AccountPreferences.SYNC_10_HRS	= 600;
 AccountPreferences.SYNC_12_HRS	= 720;
 AccountPreferences.SYNC_24_HRS	= 1440;
 AccountPreferences.SYNC_PUSH	= -1;
diff --git a/usr/palm/applications/com.palm.app.email/app/views/accountpreferences/accountpreferences-scene.html b/usr/palm/applications/com.palm.app.email/app/views/accountpreferences/accountpreferences-scene.html
index 655326c..4a255a0 100644
--- a/usr/palm/applications/com.palm.app.email/app/views/accountpreferences/accountpreferences-scene.html
+++ b/usr/palm/applications/com.palm.app.email/app/views/accountpreferences/accountpreferences-scene.html
@@ -103,12 +103,16 @@
 	<div id="edit-account-sync-list" class="palm-list">
 		<div class="palm-row first" x-mojo-tap-highlight="momentary">
 			<div class="palm-row-wrapper">
-				<div id="edit-account-sync-lookback-selector" x-mojo-element="ListSelector"></div>
+				<div id="new-sync-lookback">
+					<div id="edit-account-sync-lookback-selector" x-mojo-element="ListSelector"></div>
+				</div>
 			</div>
 		</div>
 		<div class="palm-row last" x-mojo-tap-highlight="momentary">
 			<div class="palm-row-wrapper">
-				<div id="edit-account-sync-fetch-selector" x-mojo-element="ListSelector"></div>
+				<div id="new-sync-fetch-selector">
+					<div id="edit-account-sync-fetch-selector" x-mojo-element="ListSelector"></div>
+				</div>
 			</div>
 		</div>
 	</div>
