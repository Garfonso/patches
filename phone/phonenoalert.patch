Turns off the system tones during a call.  Will reset them to the original setting after the call.
Turns off the system tones during a call.  Will reset them to the original setting after the call.
Index: /usr/palm/applications/com.palm.app.phone/app/models/FormattedCall.js
===================================================================
--- .orig/usr/palm/applications/com.palm.app.phone/app/models/FormattedCall.js
+++ /usr/palm/applications/com.palm.app.phone/app/models/FormattedCall.js
@@ -13,12 +13,32 @@ var FormattedCall =  Class.create({
 			this.formatCall(id, lineState);
 	},
 	
+	getSSStatus: function() {
+		this.getSSStatusReq = AudioService.getSystemSoundStatus(this.getSSStatusQuery.bind(this));
+	},
+	
+	getSSStatusQuery: function(payload) {
+                if (payload.muted == true || payload.muted == false) {                                                                                                         
+                	Mojo.Log.error("SVC Initial Muted Value: %j",payload.muted);                                                            
+                        SSmute = payload.muted;                                                                                        
+                	AudioService.muteSystemSound(true);
+                } else {                                                                                                                    
+                        Mojo.Log.error("SVC No initial value.  Setting to false.");                                                             
+                        SSmute = false;               
+                        AudioService.muteSystemSound(true);                                                                                 
+              	}	
+	},
+	
 	// given the line number and the service's list of calls
 	// build object whose properties will be Mojo.Rendered into
 	// template, including array of member calls
 	formatConferenceCall: function(lineNumber, callMsg) {
 		QDLogger.log( "formatConferenceCall");
 		this.state = this.formatState(callMsg[lineNumber].state);
+        	if (this.state == "Ended") {
+        		Mojo.Log.error("SVC resetting system volume for conference call");
+        		AudioService.muteSystemSound(SSmute);
+        	}	
         this.conferenceLabel = this.formatConferenceLabel();
 		// TODO: not sure why i didn't have this in the first place
 		this.contact = this.conferenceLabel;
@@ -48,9 +68,16 @@ var FormattedCall =  Class.create({
 		this.contact = this.formatContact(this.formatNumber(callMsg[lineNumber].number), callMsg[lineNumber].contact.name, callMsg[lineNumber].cnapName),
 		this.lineNumber = lineNumber;
 		this.id = callMsg[lineNumber].id;
-		
+		if (this.lineNumber == 0 && this.state == "") {
+			Mojo.Log.error("SVC setting system volume to mute");
+			this.getSSStatus();
+		}
+		if (this.state == "Ended" || this.state == "Ending") {
+			Mojo.Log.error("SVC resetting system volume to %j",SSmute);
+			AudioService.muteSystemSound(SSmute);
+		}
 		// ensure empty label is displayed as empty
-		this.displayLabel = (callMsg[lineNumber].contact.labelFormatted ? callMsg[lineNumber].contact.labelFormatted : "");
+    		this.displayLabel = (callMsg[lineNumber].contact.labelFormatted ? callMsg[lineNumber].contact.labelFormatted : "");
     },
     
 	// given a phone number (or empty/unknown value), return the formatted and
Index: /usr/palm/applications/com.palm.app.phone/sources.json
===================================================================
--- .orig/usr/palm/applications/com.palm.app.phone/sources.json
+++ /usr/palm/applications/com.palm.app.phone/sources.json
@@ -1,5 +1,8 @@
 [
   {
+    "source": "app\/models\/audio-luna-service.js"
+  },
+  {
     "source": "app\/models\/QDLogger.js"
   },
   {
Index: /usr/palm/applications/com.palm.app.phone/app/models/audio-luna-service.js
===================================================================
--- /dev/null
+++ /usr/palm/applications/com.palm.app.phone/app/models/audio-luna-service.js
@@ -0,0 +1,28 @@
+/* Copyright 2009 Palm, Inc.  All rights reserved. */
+
+var AudioService = Class.create({ 
+	initialize: function() { 
+	}
+});
+    
+AudioService.getSystemSoundStatus = function(callback) {
+   var request = new Mojo.Service.Request(AudioService.system_identifier, {
+         method: 'status',
+         parameters: {"subscribe": false},
+         onSuccess: callback,
+         onFailure: callback
+    });
+    return request;
+}
+         	  	  	      	
+AudioService.muteSystemSound = function(mute) {
+   var request = new Mojo.Service.Request(AudioService.system_identifier, {
+         method: 'setMuted',
+         parameters: {"muted": mute}, 
+    });
+    return request;
+}
+
+AudioService.system_identifier = 'palm://com.palm.audio/system';
+AudioService.ringtone_identifier = 'palm://com.palm.audio/ringtone';
+AudioService.vibrate_identifier = 'palm://com.palm.audio/vibrate';
