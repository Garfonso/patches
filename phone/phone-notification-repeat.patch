This patch will repeat the missed call notification every 2 minutes until either dismissed or viewed.

11-15-09:
Updated for 1.3.1
Index: /usr/palm/applications/com.palm.app.phone/app/controllers/app-assistant.js
===================================================================
--- .orig/usr/palm/applications/com.palm.app.phone/app/controllers/app-assistant.js
+++ /usr/palm/applications/com.palm.app.phone/app/controllers/app-assistant.js
@@ -180,6 +180,8 @@ AppAssistant.prototype.handleLaunch = fu
 			this.createLockStage();
 			this.loadSettings();
 			return;
+		} else if(params.playalarmsound){
+			this.playAlarmSound();
 		} else {
 			// when in first use, always default to doing nothing for invalid args; 
 			// otherwise default to showing dialpad
@@ -214,6 +216,13 @@ AppAssistant.prototype.handleLaunch = fu
     }
 };
 
+AppAssistant.prototype.playAlarmSound = function() {
+	var stageController = Mojo.Controller.getAppController().getStageProxy("misseddash");
+	if (stageController) {
+		stageController.delegateToSceneAssistant("playAlarmSound");
+	}
+};
+
 // parse URI and dial number in it
 AppAssistant.prototype.launchURI = function(uri){
 	var offset = -1;
Index: /usr/palm/applications/com.palm.app.phone/app/controllers/dashannounce-assistant.js
===================================================================
--- .orig/usr/palm/applications/com.palm.app.phone/app/controllers/dashannounce-assistant.js
+++ /usr/palm/applications/com.palm.app.phone/app/controllers/dashannounce-assistant.js
@@ -56,11 +56,17 @@ var DashannounceAssistant = Class.create
   },
   deactivate:function(){
 	this.controller.stopListening(this.controller.document, Mojo.Event.activate, this.onFocus);
-  	
+  
+  	//remove the Notification repeat task
+  	this.removePlayAlarmSoundTask();	
   },
 
   // run callback and close this
   onIconTap: function () {
+  
+  	//remove the Notification repeat task
+  	this.removePlayAlarmSoundTask();
+  	
 	QDLogger.log( "DashannounceAssistant::onTap", "windowName:" , this.windowName);
 	if (this.iconCallback) {
 		this.iconCallback();
@@ -70,6 +76,9 @@ var DashannounceAssistant = Class.create
   },
   
   onMessageTap: function () {
+  	//remove the Notification repeat task
+  	this.removePlayAlarmSoundTask();
+  			
 	QDLogger.log( "DashannounceAssistant::onTap", "windowName:" , this.windowName);
 	if (this.messageCallback) {
 		this.messageCallback();
@@ -79,6 +88,9 @@ var DashannounceAssistant = Class.create
   },
   
   updateMessage: function(header, body, itemcount, timestamp) {
+  	//remove the Notification repeat task
+  	this.removePlayAlarmSoundTask();
+  			
   	QDLogger.log("DashannounceAssistant::updateMessage");
 	if(this.windowName == 'misseddash' && timestamp)
 		this.missedTimeStamp=timestamp;
@@ -90,9 +102,15 @@ var DashannounceAssistant = Class.create
 	this.itemcount = itemcount;
 	this.updateBadge();
 	this.controller.stageController.indicateNewContent(true);
+	
+	//reschedule the nag reminder
+	this.schedulePlayAlarmSoundTask();
   },
   
   updateBadge: function() {
+  	//remove the Notification repeat task
+  	this.removePlayAlarmSoundTask();
+  	
   	   if (this.itemcount > 1) {
 	   		QDLogger.log("DashannounceAssistant::updateBadge", this.itemcount);
 			this.controller.get('notification').removeClassName("single")
@@ -102,6 +120,49 @@ var DashannounceAssistant = Class.create
 	   		this.controller.get('notification').addClassName("single");
 	   		this.controller.get('itemcount').hide();
 	   }
+	   
+	//reschedule the nag reminder
+	this.schedulePlayAlarmSoundTask();
+  },
+  
+  playAlarmSound: function() {
+  	//play nag sound and reschedule
+	PalmSystem.playSoundNotification('alerts');
+	this.schedulePlayAlarmSoundTask();
+  },
+
+  schedulePlayAlarmSoundTask: function() {
+	try {
+		//retrigger reminder every two minutes until we acknowledge it.
+		//change the value in addMinutes to a value other than 2 if you prefer a different time span for the notification repeat.
+		var playSoundTime = new Date();
+		playSoundTime = new Date(playSoundTime.getTime() + 2*60*1000);
+
+		this.controller.serviceRequest('palm://com.palm.taskScheduler', {
+			method: 'updateTask',
+			parameters: {uri: 'palm://com.palm.applicationManager/open',
+			arguments: {'id': 'com.palm.app.phone',
+				'params': {'playalarmsound': true}},
+			key: 'phone-playalarmsound',
+			start: {date: playSoundTime.toUTCString()}}
+			});
+	}
+	catch (e) {
+		Mojo.Log.logException(e, "dashannounce-assistant.schedulePlayAlarmSoundTask");
+	}
+  },
+
+  removePlayAlarmSoundTask: function() {
+	try 
+	{
+		this.controller.serviceRequest('palm://com.palm.taskScheduler', {
+			method: 'removeTask',
+			parameters: {key: 'phone-playalarmsound'}
+			});
+	}
+	catch (e) {
+		Mojo.Log.logException(e, "dashannounce-assistant.removePlayAlarmSoundTask");
+	}
   }
   
 });
