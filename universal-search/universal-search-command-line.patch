Index: /usr/lib/luna/system/luna-applauncher/app/controllers/calculator.js
===================================================================
--- .orig/usr/lib/luna/system/luna-applauncher/app/controllers/calculator.js
+++ /usr/lib/luna/system/luna-applauncher/app/controllers/calculator.js
@@ -0,0 +1,50 @@
+/*jslint browser: true, eqeqeq: true, undef: true */
+/******************************************************************************
+Lines above are for jslint, the JavaScript verifier.
+http://www.jslint.com/
+******************************************************************************/
+
+var Calculator = function () {
+	var abs		= Math.abs;
+	var max		= Math.max;
+	var min		= Math.min;
+	var random	= Math.random;
+	var ceil	= Math.ceil;
+	var round	= Math.round;
+	var floor	= Math.floor;
+	var E		= Math.E;
+	var LN10	= Math.LN10;
+	var LN2		= Math.LN2;
+	var LOG10E	= Math.LOG10E;
+	var LOG2E	= Math.LOG2E;
+	var PI		= Math.PI;
+	var SQRT1_2	= Math.SQRT1_2;
+	var SQRT2	= Math.SQRT2;
+	var acos	= Math.acos;
+	var asin	= Math.asin;
+	var atan	= Math.atan;
+	var atan2	= Math.atan2;
+	var cos		= Math.cos;
+	var exp		= Math.exp;
+	var log		= Math.log;
+	var pow		= Math.pow;
+	var sin		= Math.sin;
+	var sqrt	= Math.sqrt;
+	var tan		= Math.tan;
+	var cot         = function (x) { return 1 / tan(x); }; // cotangent
+	var sec         = function (x) { return 1 / cos(x); }; // secant
+	var csc         = function (x) { return 1 / sin(x); }; // cosecant
+	var log2        = function (x) { return log(x) / LN2; };
+	var log10       = function (x) { return log(x) / LN10; };
+
+	// I really wish we could provide a true global context
+	// independent from Mojo or whatever environment we happen
+	// to be in.
+	var a, b, c, d, e, f, g, h, i, j, k, l, m;
+	var n, o, p, q, r, s, t, u, v, w, x, y, z;
+	
+	this.calculate = function (string) {
+		return eval(string);
+	};
+};
+
Index: /usr/lib/luna/system/luna-applauncher/app/controllers/global-search-assistant.js
===================================================================
--- .orig/usr/lib/luna/system/luna-applauncher/app/controllers/global-search-assistant.js
+++ /usr/lib/luna/system/luna-applauncher/app/controllers/global-search-assistant.js
@@ -125,6 +125,7 @@
 		searchesDiv.update(Mojo.View.render({template: 'global-search/expanded-searches-div' }));
 		this.expandedSearchDrawer = { showExpanded: false };
 		this.controller.setupWidget('expanded_searches_drawer', {unstyled:true, property:'showExpanded'}, this.expandedSearchDrawer);
+
 		this.webDrawer = { showWeb: false };
 		this.controller.setupWidget('web_drawer', {unstyled:true, property:'showWeb'}, this.webDrawer);
 		
@@ -160,9 +161,47 @@
 		
 		this.controller.listen(this.controller.document, 'paste', this.onPaste.bindAsEventListener(this), true);
 		
+		this.uscl = new USCL();
+		
+		var searchesDivUSCL = this.controller.get('searches-list-uscl');
+		searchesDivUSCL.update(Mojo.View.render({template: 'global-search/expanded-searches-div-uscl' }));
+		this.expandedSearchDrawerUSCL = { showExpanded: false };
+		this.controller.setupWidget('expanded_searches_drawer_uscl',
+					    { unstyled:true, property:'showExpanded', 
+					      scrollDisabled: true},
+					    this.expandedSearchDrawerUSCL);
+
+		this.usclDrawer = { showUSCL: false };
+		this.controller.setupWidget('command_line_drawer', {unstyled: true, property: 'showUSCL'}, this.usclDrawer);
+
+		this.usclSearchesAttrs = {
+			listTemplate: "global-search/templates/uscl-searches-list",
+			itemTemplate: "global-search/templates/uscl-searches-item",
+			swipeToDelete: false,
+			reorderable: false,
+			renderLimit: 500
+		};
+		this.usclSearchesModel = { 
+			items: this.uscl.universalSearchList 
+		};
+		this.controller.setupWidget("usclSearches",
+					    this.usclSearchesAttrs,
+					    this.usclSearchesModel);
+
+		this.onTapUSCLHandler = this.onTapUSCL.bindAsEventListener(this);
+		this.controller.listen("usclSearches",
+				       Mojo.Event.listTap,
+				       this.onTapUSCLHandler);
+		
 		this.initOnServerStart("com.palm.systemservice");
 	},
   
+	onTapUSCL: function (event) {
+		var entry = this.usclSearchesModel.items[event.index];
+		this.runUSCL({ entry: entry,
+				      arg: this.currentFilter });
+	},
+  
 	ready: function() {
 		// try to force our input field to always have focus (there are some exceptions)
 		var input = this.searchField.querySelector('[name=searchtermInput]');
@@ -170,6 +209,21 @@
 			input.blur = function() { this.focus();	}
 		}
 		this.enable(true);
+		this.monkeyPatch1();
+	},
+
+	/* allows one to disable the scrollIntoView behavior of Mojo.Widget.Drawer. */
+	/* WARNING: THIS MONKEY-PATCHES A PRIVATE API */
+	monkeyPatch1: function () {
+		if (this.monkeyPatched) { return; }
+		var monkey = Mojo.Widget.Drawer.prototype.scrollIntoView;
+		if (!monkey) { return; }
+		Mojo.Widget.Drawer.prototype.scrollIntoView = function () {
+			if (this.controller.attributes.scrollDisabled) {
+				return;
+			}
+			monkey.apply(this, arguments);
+		};
 	},
 	
 	isEnabled: function() {
@@ -1353,6 +1407,80 @@
 		ApplicationService.launch('com.palm.app.browser', params);		
 	},	
 	
+	deactivateWithError: function (message) {
+		this.controller.showAlertDialog({
+			onChoose: (function () { this.deactivate(); }).bind(this),
+			title: "Error",
+			message: message,
+			choices: [ { label: "OK", value: "ok" } ]
+		});
+	},
+
+	deactivateWithWarning: function (message) {
+		this.controller.showAlertDialog({
+			onChoose: (function () { this.deactivate(); }).bind(this),
+			title: "Warning",
+			message: message,
+			choices: [ { label: "OK", value: "ok" } ]
+		});
+	},
+
+	runUSCL: function (o) {
+		if (!this.uscl) {
+			this.deactivate();
+		}
+		var result;
+		try {
+			if (o instanceof Object) {
+				result = this.uscl.run(o.entry, o.arg);
+			}
+			else {
+				result = this.uscl.runString(o);
+			}
+		}
+		catch (e) {
+			if (e instanceof USCLError) {
+				this.deactivateWithError(e.message);
+				/* remember, kids, don't deactivate right away! */
+				return;
+			}
+			else {
+				throw e;
+			}
+		}
+		if (result === false) {
+			/* don't deactivate; let something else do it */
+		}
+		else if (!result) {
+			this.deactivate();
+		}
+		else if (result instanceof Function) {
+			if (!result.noDeactivate) {
+				this.deactivate();
+			}
+			result.apply(this);
+		}
+		else if (result instanceof Object) {
+			this.controller.showAlertDialog({
+				onChoose: (function () { this.deactivate(); }).bind(this),
+				title: result.title,
+				message: result.message,
+				choices: [ { label: "OK", value: "ok" } ]
+			});
+		}
+		else if (result.constructor && result.constructor === String) {
+			this.controller.showAlertDialog({
+			 	onChoose: (function () { this.deactivate(); }).bind(this),
+			 	title: "Result",
+			 	message: result,
+			 	choices: [ { label: "OK", value: "ok" } ]
+			});
+		}
+		else {
+			this.deactivate();
+		}
+	},
+
 	toggleSearchListDivs: function() {
 		if(!this.enterKeyActionItem){
 			this.enterKeyActionItem = 'search'
@@ -1363,16 +1491,40 @@
 					$('webtext').innerHTML = this.currentFilter;
 					this.webDrawer.showWeb = true;
 					this.controller.modelChanged(this.webDrawer);
+					this.usclDrawer.showUSCL = false;
+					this.controller.modelChanged(this.usclDrawer);
+				}
+				else if (this.uscl.isCommandString(this.currentFilter)) {
+					$('uscl-text').innerHTML = this.currentFilter;
+					this.webDrawer.showWeb = false;
+					this.controller.modelChanged(this.webDrawer);
+					this.usclDrawer.showUSCL = true;
+					this.controller.modelChanged(this.usclDrawer);
 				}
 				else {
 					this.webDrawer.showWeb =  false ;
 					this.controller.modelChanged(this.webDrawer);
+					this.usclDrawer.showUSCL = false;
+					this.controller.modelChanged(this.usclDrawer);
 				}
 				$('find').removeClassName('single');
 				$('find').addClassName('first');
 				this.searchField.removeClassName('text-hidden');
 				this.expandedSearchDrawer.showExpanded = true;
 				this.controller.modelChanged(this.expandedSearchDrawer);
+
+				if (this.uscl.show) {
+					this.usclSearchesModel.items = 
+						this.uscl.getUniversalSearchCommandList();
+					this.controller.modelChanged(this.usclSearchesModel);
+					this.controller.get('searchesDivUSCL').show();
+					this.expandedSearchDrawerUSCL.showExpanded = true;
+				}
+				else {
+					this.controller.get('searchesDivUSCL').hide();
+					this.expandedSearchDrawerUSCL.showExpanded = false;
+				}
+				this.controller.modelChanged(this.expandedSearchDrawerUSCL);
 			} else {//find...
 				if (this.dialDiv.visible() || this.numberDiv.visible()) {
 					this.searchField.addClassName('text-hidden');
@@ -1382,6 +1534,11 @@
 				}
 				this.expandedSearchDrawer.showExpanded = false;
 				this.controller.modelChanged(this.expandedSearchDrawer);
+
+				this.controller.get('searchesDivUSCL').hide();
+				this.expandedSearchDrawerUSCL.showExpanded = false;
+				this.controller.modelChanged(this.expandedSearchDrawerUSCL);
+
 				$('find').removeClassName('first');
 				$('find').addClassName('single');
 			}
@@ -1396,16 +1553,39 @@
 					$('webtext').innerHTML = this.currentFilter;
 					this.webDrawer.showWeb = true;
 					this.controller.modelChanged(this.webDrawer);
+					this.usclDrawer.showUSCL = false;
+					this.controller.modelChanged(this.usclDrawer);
+				}
+				else if (this.uscl.isCommandString(this.currentFilter)) {
+					$('uscl-text').innerHTML = this.currentFilter;
+					this.webDrawer.showWeb = false;
+					this.controller.modelChanged(this.webDrawer);
+					this.usclDrawer.showUSCL = true;
+					this.controller.modelChanged(this.usclDrawer);
 				}
 				else {
 					this.webDrawer.showWeb = false;
 					this.controller.modelChanged(this.webDrawer);
+					this.usclDrawer.showUSCL = false;
+					this.controller.modelChanged(this.usclDrawer);
 				}
 				$('find').removeClassName('single');
 				$('find').addClassName('first');
 				this.searchField.removeClassName('text-hidden');
 				this.expandedSearchDrawer.showExpanded = true;
 				this.controller.modelChanged(this.expandedSearchDrawer);
+
+				if (this.uscl.show) {
+					this.usclSearchesModel.items = this.uscl.getUniversalSearchCommandList();
+					this.controller.modelChanged(this.usclSearchesModel);
+					this.controller.get('searchesDivUSCL').show();
+					this.expandedSearchDrawerUSCL.showExpanded = true;
+				}
+				else {
+					this.controller.get('searchesDivUSCL').hide();
+					this.expandedSearchDrawerUSCL.showExpanded = false;
+				}
+				this.controller.modelChanged(this.expandedSearchDrawerUSCL);
 			} else {//find...
 				if (this.dialDiv.visible() || this.numberDiv.visible()) {
 					this.searchField.addClassName('text-hidden');
@@ -1415,6 +1595,11 @@
 				}
 				this.expandedSearchDrawer.showExpanded = false;
 				this.controller.modelChanged(this.expandedSearchDrawer);
+
+				this.controller.get('searchesDivUSCL').hide();
+				this.expandedSearchDrawerUSCL.showExpanded = false;
+				this.controller.modelChanged(this.expandedSearchDrawerUSCL);
+
 				$('find').removeClassName('first');
 				$('find').addClassName('single');
 			}
@@ -1434,6 +1619,11 @@
 				this.searchExplicitlyExpanded = false;
 				this.expandedSearchDrawer.showExpanded = false;
 				this.controller.modelChanged(this.expandedSearchDrawer);
+
+				this.controller.get('searchesDivUSCL').hide();
+				this.expandedSearchDrawerUSCL.showExpanded = false;
+				this.controller.modelChanged(this.expandedSearchDrawerUSCL);
+
 				$('find').removeClassName('first');
 				$('find').addClassName('single');
 				if (this.dialDiv.visible() || this.numberDiv.visible()) {
@@ -1449,21 +1639,46 @@
 					$('webtext').innerHTML = this.currentFilter;
 					this.webDrawer.showWeb = true;
 					this.controller.modelChanged(this.webDrawer);
+					this.usclDrawer.showUSCL = false;
+					this.controller.modelChanged(this.usclDrawer);
+				}
+				else if (this.uscl.isCommandString(this.currentFilter)) {
+					$('uscl-text').innerHTML = this.currentFilter;
+					this.webDrawer.showWeb = false;
+					this.controller.modelChanged(this.webDrawer);
+					this.usclDrawer.showUSCL = true;
+					this.controller.modelChanged(this.usclDrawer);
 				}
 				else {
 					this.webDrawer.showWeb = false;
 					this.controller.modelChanged(this.webDrawer);
+					this.usclDrawer.showUSCL = false;
+					this.controller.modelChanged(this.usclDrawer);
 				}
 				$('find').removeClassName('single');
 				$('find').addClassName('first');
 				this.searchField.removeClassName('text-hidden');
 				this.expandedSearchDrawer.showExpanded = true;
 				this.controller.modelChanged(this.expandedSearchDrawer);
+
+				if (this.uscl.show) {
+					this.usclSearchesModel.items = this.uscl.getUniversalSearchCommandList();
+					this.controller.modelChanged(this.usclSearchesModel);
+					this.controller.get('searchesDivUSCL').show();
+					this.expandedSearchDrawerUSCL.showExpanded = true;
+				}
+				else {
+					this.controller.get('searchesDivUSCL').hide();
+					this.expandedSearchDrawerUSCL.showExpanded = false;
+				}
+				this.controller.modelChanged(this.expandedSearchDrawerUSCL);
 			}
 		} else {
 			var url = target.id;
 			if (url == "web")
 				this.launchBrowser(this.currentFilter);
+			else if (url == "uscl")
+				this.runUSCL(this.currentFilter);
 		}
 	},
 	
@@ -1716,6 +1931,13 @@
 		this.gpsInfo = undefined;
 		if(this.highlightTarget != null)
 			this.highlightTarget.removeClassName('selected');
+
+ 		this.usclDrawer.showUSCL =  false ;
+ 		this.controller.modelChanged(this.usclDrawer);
+ 		this.controller.get('searchesDivUSCL').hide();
+ 		this.expandedSearchDrawerUSCL.showExpanded = false;
+ 		this.controller.modelChanged(this.expandedSearchDrawerUSCL);
+ 		$('uscl').removeClassName('selected');
 	},
 	
   webSiteString: function(s){
@@ -1815,6 +2037,7 @@
 	//clear search':
 	$(this.defaultSearchEngine).removeClassName('palm-focus');
 	$('web').removeClassName('palm-focus');
+	$('uscl').removeClassName('palm-focus');
   },
   highlightSelection: function() {
   	
@@ -1888,6 +2111,24 @@
 		$(this.defaultSearchEngine).removeClassName('palm-focus');
 		$('web').removeClassName('palm-focus');
 	}
+
+	if (this.enterKeyActionItem === "search") {
+		if (this.webDrawer.showWeb == true) {
+			$('uscl').removeClassName('palm-focus');
+		}
+		else if (this.usclDrawer.showUSCL == true) {
+			$(this.defaultSearchEngine).removeClassName('palm-focus');
+			$('web').removeClassName('palm-focus');
+			this.highlightTarget = $('uscl');
+			$('uscl').addClassName('palm-focus');
+		}
+		else if (this.expandedSearchDrawer.showExpanded == true) {
+			$('uscl').removeClassName('palm-focus');
+		}
+	}
+	else {
+		$('uscl').removeClassName('palm-focus');
+	}
   },
   
   enterKeyAction: function(){
@@ -1976,6 +2217,8 @@
 			}
 			if (this.webDrawer.showWeb == true)
 				this.launchBrowser(this.currentFilter);
+			else if (this.usclDrawer.showUSCL == true)
+				this.runUSCL(this.currentFilter);
 			else {
 				this.launchBrowser(this.URLs[this.defaultSearchEngine] + encodeURIComponent(this.currentFilter));
 			}
Index: /usr/lib/luna/system/luna-applauncher/app/controllers/uscl-help-command-list.js
===================================================================
--- .orig/usr/lib/luna/system/luna-applauncher/app/controllers/uscl-help-command-list.js
+++ /usr/lib/luna/system/luna-applauncher/app/controllers/uscl-help-command-list.js
@@ -0,0 +1,41 @@
+/*jslint browser: true, eqeqeq: true, undef: true */
+/*global Mojo */
+/******************************************************************************
+Lines above are for jslint, the JavaScript verifier.
+http://www.jslint.com/
+******************************************************************************/
+
+function UsclHelpCommandListAssistant (uscl) {
+	this.uscl = uscl;
+}
+
+UsclHelpCommandListAssistant.prototype.setup = function () {
+	this.stageController = this.controller.stageController;
+	this.items = this.uscl.getHelpCommandList();
+	this.controller.setupWidget("command-list", {
+		listTemplate: "uscl-help-command-list/templates/list",
+		itemTemplate: "uscl-help-command-list/templates/item",
+		swipeToDelete: false,
+		reorderable: false,
+		renderLimit: this.items.length
+	}, this.itemsModel = {
+		items: this.items
+	});
+	this.showCommandHandler = this.showCommand.bindAsEventListener(this);
+	this.controller.listen("command-list", Mojo.Event.listTap,
+			       this.showCommandHandler);
+
+	var body = this.stageController.document.getElementsByTagName("body");
+	body[0].addClassName("uscl-body");
+};
+
+UsclHelpCommandListAssistant.prototype.showCommand = function (event) {
+	this.stageController.pushScene("uscl-help-command-view",
+				       this.items, event.index);
+};
+
+UsclHelpCommandListAssistant.prototype.cleanup = function () {
+	this.controller.stopListening("command-list", Mojo.Event.listTap,
+				      this.showCommandHandler);
+};
+
Index: /usr/lib/luna/system/luna-applauncher/app/controllers/uscl-help-command-view.js
===================================================================
--- .orig/usr/lib/luna/system/luna-applauncher/app/controllers/uscl-help-command-view.js
+++ /usr/lib/luna/system/luna-applauncher/app/controllers/uscl-help-command-view.js
@@ -0,0 +1,70 @@
+/*jslint browser: true, eqeqeq: true, undef: true */
+/*global Mojo */
+/******************************************************************************
+Lines above are for jslint, the JavaScript verifier.
+http://www.jslint.com/
+******************************************************************************/
+
+function UsclHelpCommandViewAssistant (items, index) {
+	this.items = items;
+	this.item = this.items[index];
+}
+
+UsclHelpCommandViewAssistant.prototype.setup = function () {
+	this.stageController = this.controller.stageController;
+	this.controller.get("title").innerHTML =
+		this.item.title;
+	this.controller.get("description").innerHTML =
+		this.item.description;
+
+	if (this.item.aka && this.item.aka.length) {
+		this.controller.get("aka").innerHTML =
+			this.item.aka.map(function (s) {
+				return "<kbd class='alias'>." + s + "</kbd>";
+			}).joinAnd();
+	}
+	else {
+		this.controller.get("akaDiv").hide();
+	}
+
+	if ("usage" in this.item) {
+		if (typeof(this.item.usage) === "object" &&
+		    this.item.usage.constructor === Array) {
+			this.controller.get("usage").innerHTML =
+				"<br />" +
+				this.item.usage.join("<br />");
+		}
+		else {
+			this.controller.get("usage").innerHTML =
+				"." + this.item.commandName + " " +
+				this.item.usage;
+		}
+	}
+	else {
+		this.controller.get("usage").innerHTML = 
+			"." + this.item.commandName;
+	}
+
+	if ("example" in this.item) {
+		if (typeof(this.item.example) === "object" &&
+		    this.item.example.constructor === Array) {
+			this.controller.get("example-title").innerHTML =
+				"Examples";
+			this.controller.get("example").innerHTML =
+				"<br />" +
+				this.item.example.join("<br />");
+		}
+		else {
+			this.controller.get("example").innerHTML =
+				"." + this.item.commandName + " " +
+				this.item.example;
+		}
+	}
+	else {
+		this.controller.get("exampleDiv").hide();
+	}
+
+	var body = this.stageController.document.getElementsByTagName("body");
+	body[0].addClassName("uscl-body");
+};
+
Index: /usr/lib/luna/system/luna-applauncher/app/controllers/uscl.js
===================================================================
--- .orig/usr/lib/luna/system/luna-applauncher/app/controllers/uscl.js
+++ /usr/lib/luna/system/luna-applauncher/app/controllers/uscl.js
@@ -0,0 +1,1374 @@
+/*jslint browser: true, eqeqeq: true, undef: true, evil: true */
+/*global Mojo, Class, Ajax, Calculator, $H, PalmSystem */
+/******************************************************************************
+Lines above are for jslint, the JavaScript verifier.
+http://www.jslint.com/
+******************************************************************************/
+
+//-----------------------------------------------------------------------------
+// Additional String Methods
+//-----------------------------------------------------------------------------
+
+if (!String.prototype.trim) {
+	String.prototype.trim = function () {
+		return this.replace(/^\s+/, "").replace(/\s+$/, "");
+	};
+}
+if (!String.prototype.normalizeSpace) {
+	String.prototype.normalizeSpace = function () {
+		return this.trim().replace(/\s+/g, " ");
+	};
+}
+if (!String.prototype.toBoolean) {
+	String.prototype.toBoolean = function () {
+		var s = this.toLowerCase().normalizeSpace();
+		var i = parseInt(s, 10);
+		if (!isNaN(i)) {
+			return (i !== 0);
+		}
+		switch (s) {
+		case "yes":
+		case "y":
+		case "true":
+		case "t":
+		case "on":
+		case "enable":
+		case "enabled":
+			return true;
+		case "no":
+		case "n":
+		case "false":
+		case "f":
+		case "off":
+		case "disable":
+		case "disabled":
+			return false;
+		default:
+			return undefined;
+		}
+	};
+}
+if (!String.prototype.format) {
+	/* Implements Mojo.Log.xxx-ish formatting. */
+	String.prototype.format = function () {
+		var args = Array.prototype.slice.call(arguments, 0);
+		var result = this.replace(/%[%jsoidf]/g, function (str) {
+			switch (str) {
+			case "%o":
+				return Object.inspect(args.shift());
+			case "%j":
+				return Object.toJSON(args.shift());
+			case "%%":
+				return "%";
+			}
+			return args.shift();
+		});
+		return result;
+	};
+}
+if (!Array.prototype.forEach2) {
+	// A version of Array#forEach that stops the loop if the
+	// specified function returns false.  This special behavior is
+	// influenced by jQuery's each() methods.  Based on MIT-licensed
+	// code from: http://tinyurl.com/yh9nvwb
+	// (https://developer.mozilla.org/En/Core_JavaScript_1.5_Reference/Objects/Array/ForEach)
+	Array.prototype.forEach2 = function(fun /*, thisp*/) {
+		var len = this.length >>> 0;
+		if (typeof fun !== "function") {
+			throw new TypeError();
+		}
+		var thisp = arguments[1];
+		for (var i = 0; i < len; i++) {
+			if (i in this) {
+				var ret = fun.call(thisp, this[i], i, this);
+				if (ret === false) {
+					return;
+				}
+			}
+		}
+	};		
+}
+if (!Array.prototype.joinAnd) {
+	Array.prototype.joinAnd = function () {
+		if (this.length <= 2) {
+			return this.join(" and ");
+		}
+		else {
+			return this.slice(0, this.length - 1).join(", ") +
+				", and " + this[this.length - 1];
+		}
+	};
+}
+
+//-----------------------------------------------------------------------------
+// A special exception class for errors.
+//-----------------------------------------------------------------------------
+
+var USCLError = function (message) {
+	Error.apply(this, arguments);
+	this.message = message; // ugh, why on Earth do I have to do this?
+};
+USCLError.prototype = new Error();
+USCLError.prototype.constructor = USCLError;
+USCLError.prototype.name = "USCLError";
+
+//*****************************************************************************
+// The good stuff lies here.
+//*****************************************************************************
+
+var USCL = Class.create({
+
+	//---------------------------------------------------------------------
+	// Initialization
+	//---------------------------------------------------------------------
+
+	initialize: function () {
+		this.inEmulator = /desktop/.test(PalmSystem.version);
+		this.initBuiltinFlags();
+		this.build();
+		this.show = false;
+		this.loadPreferences();
+		this.hiddenFlags = {};
+		this.updateFromLocalFile();
+	},
+
+	loadPreferences: function () {
+		this.db = new Mojo.Depot({ name: "uscl", replace: false },
+					 this.onLoadDatabase.bind(this),
+					 function () { /* don't care */ });
+	},
+	
+	onLoadDatabase: function () {
+		var that = this;
+		this.db.get("show", 
+			    function (o) { that.show = o; },
+			    function () { that.show = false; });
+		this.db.get("hiddenFlags", 
+			    function (o) { that.hiddenFlags = o || {}; },
+			    function () { that.hiddenFlags = {}; });
+	},
+
+	setShow: function (flag) {
+		this.show = flag;
+		this.db.add("show", this.show, 
+			    function () { /* don't care */ },
+			    function () { /* don't care */ });
+	},
+
+	saveHiddenFlags: function () {
+		this.db.add("hiddenFlags", this.hiddenFlags,
+			    function () { /* don't care */ },
+			    function () { /* don't care */ });
+	},
+	
+	build: function () {
+		this.fixTitles();
+		this.buildSupportingAppList();
+	},
+
+	fixTitles: function () {
+		var commandName;
+		var entry;
+		for (commandName in this.entries) {
+			if (this.entries.hasOwnProperty(commandName)) {
+				entry = this.entries[commandName];
+				if (typeof(entry) === "object") {
+					if (!("title" in entry)) {
+						entry.title = commandName;
+					}
+					entry.titleSort = entry.title.toLowerCase();
+				}
+			}
+		}
+	},
+
+	buildSupportingAppList: function () {
+		this.appListRequest = 
+			new Mojo.Service.Request("palm://com.palm.applicationManager", {
+				method: 'searchApps',
+				parameters: {'keyword': 'iGrokTheCommandLine'},
+				onSuccess: this.handleSupportingAppResults.bind(this, "iGrokTheCommandLine"),
+				onFailure: this.handleSupportingAppResults.bind(this, "iGrokTheCommandLine")
+			});
+		this.appListRequest = 
+			new Mojo.Service.Request("palm://com.palm.applicationManager", {
+				method: 'searchApps',
+				parameters: {'keyword': 'iCanBeRefreshed'},
+				onSuccess: this.handleSupportingAppResults.bind(this, "iCanBeRefreshed"),
+				onFailure: this.handleSupportingAppResults.bind(this, "iCanBeRefreshed")
+			});
+	},
+
+	handleSupportingAppResults: function (keyword, response) {
+		var that = this;
+		var apps = response.apps;
+		if (!apps) {
+			return;
+		}
+		this.apps = {};
+		this.apps[keyword] = {};
+		apps.forEach(function (app) {
+			var launchPoint = app.launchPoint;
+			that.apps[keyword][launchPoint] = true;
+		});
+	},
+
+	//---------------------------------------------------------------------
+	// hidden flags
+	//---------------------------------------------------------------------
+
+	clearAllHiddenFlags: function () {
+		this.hiddenFlags = {};
+		this.saveHiddenFlags();
+	},
+	
+	setHiddenFlags: function (a) {
+		var that = this;
+		a.forEach(function (command) {
+			command = command.replace(/^\./, "");
+			command = that.unalias(command.toLowerCase());
+			if (command) {
+				that.hiddenFlags[command] = true;
+			}
+		});
+		this.saveHiddenFlags();
+	},
+
+	clearHiddenFlags: function (a) {
+		var that = this;
+		a.forEach(function (command) {
+			command = command.replace(/^\./, "");
+			command = that.unalias(command.toLowerCase());
+			if (command) {
+				delete that.hiddenFlags[command];
+			}
+		});
+		this.saveHiddenFlags();
+	},
+
+	//---------------------------------------------------------------------
+	// .quickNote functionality
+	//---------------------------------------------------------------------
+
+	noteColors: ["pink", "yellow", "green", "blue"],
+
+	randomNoteColor: function () {
+		return this.noteColors[Math.floor(Math.random() * this.noteColors.length)];
+	},
+
+	newNoteTimestamp: function () {
+		return Mojo.Format.formatDate(new Date(), "short").replace(/ /, "\n");
+	},
+
+	quickNoteCommand: function (text) {
+		var that = this;
+		var fun = function () {
+			var globalSearch = this;
+			var cookie = new Mojo.Model.Cookie("notesWarningDisplayedTEST");
+			var checkIfNotesIsRunning = function (event) {
+				var notesIsRunning = false;
+				event.documents.forEach2(function (d) {
+					var a = d.appId.split(/\s+/);
+					if (a && a.length && a[0] === "com.palm.app.notes") {
+						notesIsRunning = true;
+						return false; // break the forEach2 loop.
+					}
+				});
+				if (notesIsRunning) {
+					if (that.apps &&
+					    that.apps.iCanBeRefreshed &&
+					    that.apps.iCanBeRefreshed["com.palm.app.notes_default"]) {
+						globalSearch.controller.serviceRequest(
+							"palm://com.palm.applicationManager", {
+								method: "launch",
+								parameters: {
+									id: "com.palm.app.notes",
+									params: { refresh: true }
+								}
+							}
+						);
+						globalSearch.deactivate();
+					}
+					else {
+						globalSearch.deactivateWithWarning("Because you are running Notes and " + 
+										   "do not have the latest version " + 
+										   "of the USCL Notes Patch installed, " + 
+										   "please close and reopen Notes.  " + 
+										   "Your quicknote has been entered, " + 
+										   "but *may* not be shown until " + 
+										   "you close and reopen Notes.");
+					}
+				}
+				else {
+					globalSearch.deactivate();
+				}
+			};
+			var getStats = function () {
+				var request = new Mojo.Service.Request("palm://com.palm.lunastats", {
+					method: 'getStats',
+					parameters: {},
+					onSuccess: checkIfNotesIsRunning,
+					onFailure: function (event) {
+						if (event.documents) {
+							checkIfNotesIsRunning(event);
+						}
+					}
+				});
+			};
+			var noteText = text + "\n\n" + that.newNoteTimestamp() + "\n";
+			var request = new Mojo.Service.Request("palm://com.palm.notes", {
+				method: "saveNote",
+				parameters: {
+					text: noteText,
+					color: that.randomNoteColor()
+				},
+				onComplete: getStats
+			});
+		};
+		fun.noDeactivate = true;
+		return fun;
+	},
+
+	//---------------------------------------------------------------------
+	// .calc
+	//---------------------------------------------------------------------
+
+	calcCommand: function (s) {
+		// Yes, I'm aware that eval is usually evil.  The user
+		// chooses to use 'calc' at their own risk.  I'm only
+		// using it here because I'm too lazy at the moment to
+		// write an infix expression calculator.
+		if (!this.calculator) {
+			this.calculator = new Calculator();
+		}
+		var result;
+		try {
+			result = this.calculator.calculate(s);
+		}
+		catch (e) {
+			return {
+				title: "Error",
+				message: e
+			};
+		}
+		return {
+			title: "Calculator",
+			message: s + " \u2192 " + Object.toJSON(result)
+		};
+	},
+
+	//---------------------------------------------------------------------
+	// .restart, .rescan
+	//---------------------------------------------------------------------
+
+	restartCommand: function (arg) {
+		var r;
+		switch (arg) {
+		case "luna":
+			try {
+				r = new Mojo.Service.Request(
+					'luna://org.webosinternals.ipkgservice',
+					{ method: 'restartluna' }
+				);
+			}
+			catch (e1) {
+				throw new USCLError('Error Restarting Luna: ' + e1.message);
+			}
+			break;
+		case "java":
+			try {
+				r = new Mojo.Service.Request(
+					'palm://org.webosinternals.ipkgservice',
+					{ method: 'restartjava' }
+				);
+			}
+			catch (e2) {
+				throw new USCLError('Error restarting Java: ' + e2.message);
+			}
+			break;
+		}
+	},
+
+	rescanCommand: function () {
+		try {
+			var r = new Mojo.Service.Request(
+				'palm://com.palm.applicationManager',
+				{ method: 'rescan' }
+			);
+		}
+		catch (e) {
+			throw new USCLError('Error Rescanning: ' + e.message);
+		}
+	},
+
+	//---------------------------------------------------------------------
+	// .show; .hide
+	//---------------------------------------------------------------------
+
+	showCommand: function (args) {
+		if (args && args.length === 1 && args[0] === "all") {
+			this.clearAllHiddenFlags();
+			return undefined;
+		}
+		else if (args && args.length) {
+			this.clearHiddenFlags(args);
+			return undefined;
+		}
+		else {
+			this.setShow(true);
+			return {
+				title: "Show Additional Searches",
+				message: "Additional searches will now appear in Universal Search."
+			};
+		}
+	},
+
+	hideCommand: function (args) {
+		if (args && args.length) {
+			this.setHiddenFlags(args);
+			return undefined;
+		}
+		else {
+			this.setShow(false);
+			return {
+				title: "Hide Additional Searches",
+				message: "Additional searches will no longer appear in Universal Search."
+			};
+		}
+	},
+
+	//---------------------------------------------------------------------
+	// .update
+	//---------------------------------------------------------------------
+
+	updateCommand: function () {
+		var fun = function () {
+			var that = this;
+			this.uscl.updateFromLocalFile({
+				onFailure: function (response) {
+					if (response.status === 404) {
+						that.deactivateWithError("uscl.json not found.");
+					}
+					else {
+						that.deactivateWithError("Unexpected error updating from uscl.json.");
+					}
+				},
+				onParseFailure: function (response) {
+					that.deactivateWithError("Syntax error in uscl.json.");
+				},
+				onParseSuccess: function (response) {
+					that.deactivate();
+				}
+			});
+		};
+		fun.noDeactivate = true;
+		return fun;
+	},
+
+	//---------------------------------------------------------------------
+	// Builtin Commands
+	//---------------------------------------------------------------------
+
+	categories: [
+		// not in use yet
+		{ name: "search", title: "Search" },
+		{ name: "reference", title: "Reference" },
+		{ name: "utilities", title: "Utilities" },
+		{ name: "location", title: "Location" },
+		{ name: "system", title: "System" }
+	],
+
+	entries: {
+		"calc": {	// BUILTIN
+			title: "Calculator",
+			usage: "<var>expression</var>",
+			example: [
+				".calc (37 * 1.8) + 32",
+				".calc sin(PI / 2)",
+				".calc Math.sin(Math.PI / 2)"
+			],
+			description: ("Perform a calculation.  " + 
+				      "Can also evaluate other JavaScript expressions.  " +
+				      "Use at your own risk.  " +
+				      "Functions and constants in the core Math object " +
+				      "can be used with or without the 'Math.' prefix.  " +
+				      "More complex calculations (such as unit conversions) " +
+				      "can be sent to Google (see .google) " +
+				      "or Wolfram Alpha (see .wolfram)."),
+			method: function (s) {
+				return this.calcCommand(s);
+			},
+			noArguments: {
+				appId: "com.palm.app.calculator"
+			}
+		},
+		"c": "calc",
+		"eval": "calc",
+
+		"imdb": {	// BASICS
+			title: "IMDB.com",
+			usage: "<var>query</var>",
+			example: "the big lebowski",
+			description: ("Search movies, TV shows, actors, directors, " + 
+				      "producers, and more on IMDB.com."),
+			url: "http://www.imdb.com/find?s=all&q=",
+			noArguments: {
+				url: "http://www.imdb.com/"
+			}
+		},
+		"i": "imdb", // keytoss alias
+
+		"dict": {	// BASICS
+			title: "Dictionary.com",
+			usage: "<var>word</var>",
+			example: "ebullient",
+			description: "Find a word on Dictionary.com.",
+			url: "http://m.reference.com/d/search.html?q=",
+			noArguments: {
+				url: "http://m.reference.com/d/"
+			}
+		},
+		"d": "dict",
+
+		"thes": {	// BASICS
+			title: "Thesaurus.com",
+			usage: "<var>word</var>",
+			example: "ebullient",
+			description: "Find a word on Thesaurus.com.",
+			url: "http://m.reference.com/t/search.html?q=",
+			noArguments: {
+				url: "http://m.reference.com/t/"
+			}
+		},
+		"th": "thes",
+
+		"beer": {	// EXTRAS
+			title: "BeerAdvocate",
+			usage: "<var>beer</var>",
+			example: "leine's sunset wheat",
+			description: "Find a beer on BeerAdvocate.com.  See also RateBeer (.ratebeer).",
+			url: "http://www.google.com/m/search?client=ms-palm-webOS&channel=iss&q=site:beeradvocate.com%20",
+			noArguments: {
+				url: "http://www.beeradvocate.com/"
+			}
+		},
+		"ba": "beer",
+
+		"ratebeer": {	// EXTRAS
+			title: "RateBeer",
+			usage: "<var>beer</var>",
+			example: "schlenkerla urbock",
+			description: "Find a beer on RateBeer.com.  See also BeerAdvocate (.beer).",
+			url: "http://www.google.com/m/search?client=ms-palm-webOS&channel=iss&q=site:ratebeer.com%20",
+			noArguments: {
+				url: "http://www.ratebeer.com/"
+			}
+		},
+		"rb": "ratebeer",
+
+		"ebay": {	// BASICS
+			title: "eBay",
+			usage: "<var>item</var>",
+			example: "mp3 player",
+			description: "Find something on eBay.com.",
+			url: "http://m.ebay.com/Pages/SearchResults.aspx?emvAD=320x320&emvcc=0&sv=",
+			noArguments: {
+				url: "http://m.ebay.com/"
+			}
+		},
+		"e": "ebay", // keytoss alias
+
+		"yahoo": {	// BASICS
+			title: "Yahoo!",
+			usage: "<var>keywords</var>",
+			example: "laptop reviews",
+			description: "Search Yahoo!",
+			url: "http://m.yahoo.com/w/search/oneSearch?p=",
+			noArguments: {
+				url: "http://m.yahoo.com/search"
+			}
+		},
+		"y": "yahoo",
+
+		"gis": {	// BASICS
+			title: "Google Images",
+			usage: "<var>keywords</var>",
+			example: "pirate hat",
+			description: "Search Google Images.",
+			url: "http://www.google.com/m/search?client=ms-palm-webOS&channel=iss&site=images&q=",
+			noArguments: {
+				url: "http://images.google.com/m/"
+			}
+		},
+		"gi": "gis", // keytoss alias
+		
+		"shop": {	// BASICS
+			title: "Google Product Search",
+			usage: "<var>keywords</var>",
+			example: "palm pre",
+			description: "Search for prices on Google Products.",
+			url: "http://www.google.com/m/search?client=ms-palm-webOS&channel=iss&site=products&q=",
+			noArguments: {
+				url: "http://products.google.com/m/"
+			}
+		},
+		"froogle": "shop",
+		"gp": "shop", // keytoss alias
+
+		"news": {	// BASICS
+			title: "Google News Search",
+			usage: "<var>keywords</var>",
+			example: "obama",
+			description: "Search Google News.",
+			url: "http://www.google.com/m/search?client=ms-palm-webOS&channel=iss&site=news&q=",
+			noArguments: {
+				url: "http://news.google.com/m/"
+			}
+		},
+		"gn": "news", // keytoss alias
+		
+		"google": {	// BUILTIN FOR COMPLETENESS
+			excludeFromUniversalSearch: true,
+			title: "Google",
+			usage: "<var>keywords</var>",
+			example: "hummus recipe",
+			description: "Search Google.",
+			url: "www.google.com/m/search?client=ms-palm-webOS&channel=iss&q=",
+			noArguments: {
+				url: "http://www.google.com/m/"
+			}
+		},
+		"g": "google",
+
+		"amazon": {	// BASICS
+			title: "Amazon",
+			usage: "<var>keywords</var>",
+			example: "i am america and so can you",
+			description: "Search for products on Amazon.com.",
+			url: "http://www.amazon.com/gp/aw/s/ref=is_box_?k=",
+			noArguments: {
+				url: "http://www.amazon.com/gp/aw"
+			}
+		},
+		"az": "amazon",
+		"am": "amazon", // keytoss alias
+
+		"wikipedia": {	// BUILTIN FOR COMPLETENESS
+			excludeFromUniversalSearch: true,
+			title: "Wikipedia",
+			usage: "<var>keywords</var>",
+			example: "isaac newton",
+			description: "Search Wikipedia, the online encyclopedia that anyone can edit.",
+			url: "http://en.m.wikipedia.org/wiki/Special:Search?search=",
+			noArguments: {
+				url: "http://en.m.wikipedia.org/"
+			}
+		},
+		"wiki": "wikipedia",
+		"w": "wikipedia",
+
+		"wolfram": {	// EXTRAS
+			title: "Wolfram Alpha",
+			usage: "<var>keywords</var>",
+			example: [
+				".wa June 23, 1988",
+				".wa new york",
+				".wa IBM Apple",
+				".wa $250 + 15%",
+				".wa x**2 sin(x)"
+			],
+			description: "Query something on Wolfram Alpha.  Dates, cities, stocks, and equations.  Go nuts!",
+			url: "http://www.wolframalpha.com/input/?i=",
+			noArguments: {
+				url: "http://www.wolframalpha.com/"
+			}
+		},
+		"wa": "wolfram",
+	
+		"snopes": {	// EXTRAS
+			title: "Snopes",
+			usage: "<var>keywords</var>",
+			example: "jerry rivers",
+			description: "Debunk or confirm urban legends.  Win bets and embarrass your friends!",
+			url: "http://www.google.com/m/search?client=ms-palm-webOS&channel=iss&q=site:www.snopes.com%20",
+			noArguments: {
+				url: "http://www.snopes.com/"
+			}
+		},
+		"sn": "snopes",
+
+		"keytoss": {	// BUILTIN
+			title: "KeyToss",
+			usage: [
+				".keytoss <var>command</var> <var>keywords</var>",
+				".kt <var>command</var> <var>keywords</var>",
+				"..<var>command</var> <var>keywords</var>"
+			],
+			example: [
+				".keytoss af wtf",
+				".kt af omg",
+				"..af bbq"
+			],
+			description: ("Perform a search via the KeyToss mobile portal.<br />" + 
+				      "You do not need to type the at sign (<kbd>@</kbd>) before the <i>command</i>.<br />" + 
+				      "Use <nobr><kbd>.keywords|.kt kt list</kbd></nobr> or <nobr><kbd>..kt list</kbd></nobr> " + 
+				      "to get a list of commands to pass to KeyToss."),
+			preprocess: function (s) {
+				return s.replace(/^\s*@\s*/, "");
+			},
+			url: "http://pre.keytoss.com/parse.php5?pv=131&term=%40",
+			noArguments: {
+				url: "http://pre.keytoss.com/"
+			}
+		},
+		"kt": "keytoss",
+
+		"note": {	// BUILTIN
+			title: "New Note",
+			usage: "<var>text</var>",
+			example: "I like pie.",
+			description: "Quickly create a new note.",
+			appId: "com.palm.app.notes",
+			param: "newNoteText",
+			noArguments: {
+				appId: "com.palm.app.notes"
+			}
+		},
+		"memo": "note",
+		"m": "note",
+		"n": "note",
+
+		"quicknote": {	// BUILTIN
+			title: "New Note (without launch)",
+			usage: "<var>text</var>",
+			example: "I like pie.",
+			description: "Quickly create a new note, without launching the Notes application.",
+			method: function (text) {
+				return this.quickNoteCommand(text);
+			}
+		},
+		"quickmemo": "quicknote",
+		"qmemo": "quicknote",
+		"qnote": "quicknote",
+		"qm": "quicknote",
+		"qn": "quicknote",
+
+		"restart": {	// BUILTIN
+			excludeFromUniversalSearch: true,
+			title: "Restart Luna or Java",
+			usage: "<b>luna</b>|<b>java</b>",
+			description: "Restarts the Luna system manager or Java services.",
+			method: function (arg) {
+				return this.restartCommand(arg);
+			}
+		},
+
+		"rescan": {	// BUILTIN
+			excludeFromUniversalSearch: true,
+			argumentsOptional: true,
+			title: "Rescan Applications",
+			description: "Rescans the list of applications on your device.",
+			method: function () {
+				return this.rescanCommand();
+			}
+		},
+
+		"show": {	// BUILTIN
+			excludeFromUniversalSearch: true,
+			argumentsOptional: true,
+			takesMultipleArguments: true,
+			title: "Show Additional Searches",
+			usage: [
+				"<kbd>.show</kbd>",
+				"<kbd>.show</kbd> <var>cmd</var> ...",
+				"<kbd>.show all</kbd>"
+			],
+			description: ("Use <kbd>.show</kbd> without arguments to show additional searches on the Universal Search screen.<br />" +
+				      "Use <kbd>.show <var>cmd</var> ...</kbd> to un-hide the specified commands when additional searches are shown " +
+				      "(does not apply when <kbd>.hide</kbd> without arguments is used to hide all searches).<br />" +
+				      "Use <kbd>.show all</kbd> to un-hide all commands when additional searches are shown.<br />" +
+				      "See also <kbd>.hide</kbd>."),
+			method: function (args) {
+				return this.showCommand(args);
+			}
+		},
+
+		"hide": {	// BUILTIN
+			excludeFromUniversalSearch: true,
+			argumentsOptional: true,
+			takesMultipleArguments: true,
+			title: "Hide Additional Searches",
+			usage: [
+				"<kbd>.hide</kbd>",
+				"<kbd>.hide</kbd> <var>cmd</var> <var>cmd</var> ..."
+			],
+			description: ("Use <kbd>.hide</kbd> without arguments to hide additional searches from the Universal Search screen.<br />" + 
+				      "Use <kbd>.hide <var>cmd</var> ...</kbd> to hide the specified commands when additional searches are shown.<br />" +
+				      "See also <kbd>.show</kbd>."),
+			method: function (args) {
+				return this.hideCommand(args);
+			}
+		},
+
+		"gps": {	// BUILTIN
+			excludeFromUniversalSearch: true,
+			title: "GPS On/Off",
+			usage: "on|off",
+			description: "Turns location using GPS on/off.",
+			takesBooleanArgument: true,
+			method: function (flag) {
+				this.setUseGps(flag);
+			}
+		},
+
+		"usegoogle": {	// BUILTIN
+			excludeFromUniversalSearch: true,
+			title: "Google Location Services On/Off",
+			usage: "on|off",
+			description: ("Turns location using Google Services on/off.  " +
+				      "This uses cell towers to roughly pinpoint your general location.  " + 
+				      "Accuracy will vary."),
+			takesBooleanArgument: true,
+			method: function (flag) {
+				this.setUseGoogle(flag);
+			}
+		},
+
+		"autolocate": {	// BUILTIN
+			excludeFromUniversalSearch: true,
+			title: "Auto Locate On/Off",
+			usage: "on|off",
+			description: ("Turns auto location on/off.  " +
+				      "When Auto Locate is on, applications can automatically identify your location.  " +
+				      "When off, applications that use location data will ask if it's okay " + 
+				      "to identify your location for that particular session only."),
+			takesBooleanArgument: true,
+			method: function (flag) {
+				this.setAutoLocate(flag);
+			}
+		},
+
+		"geotag": {	// BUILTIN
+			excludeFromUniversalSearch: true,
+			title: "Geotagging On/Off",
+			usage: "on|off",
+			description: ("Turns geotagging of photos on/off.  " + 
+				      "This only applies when Auto Locate is on."),
+			takesBooleanArgument: true,
+			method: function (flag) {
+				this.setGeotagPhotos(flag);
+			}
+		},
+
+		"bgdata": {	// BUILTIN
+			excludeFromUniversalSearch: true,
+			title: "Background Data Collection On/Off",
+			usage: "on|off",
+			description: ("Turns background collection of data on/off.  " + 
+				      "This allows Google to collect anonymous location data " + 
+				      "to improve the quality of location services."),
+			takesBooleanArgument: true,
+			method: function (flag) {
+				this.setUseBackgroundDataCollection(flag);
+			}
+		},
+
+		"maps": {	// BUILTIN FOR COMPLETENESS
+			excludeFromUniversalSearch: true,
+			title: "Google Maps",
+			argumentsOptional: true,
+			usage: "<var>keywords</var>",
+			description: "Opens the Google Maps application and searches for what you specify.",
+			method: function (arg) {
+				// must be run from within global search.
+				return function () {
+					this.launchMap(arg);
+				};
+			}
+		},
+
+		"update": {	// BUILTIN
+			excludeFromUniversalSearch: true,
+			title: "Update User-Defined Commands",
+			argumentsOptional: true,
+			description: ("If <tt>uscl.json</tt> on the root directory of the USB Drive partition " + 
+				      "on this device is modified, added, or removed, use this command to update Universal Search Command Line."),
+			method: function () {
+				return this.updateCommand();
+			}
+		},
+
+		"help": {	// BUILTIN
+			excludeFromUniversalSearch: true,
+			title: "Help",
+			excludeFromHelp: true,
+			argumentsOptional: true,
+			method: function () {
+				this.showHelp();
+			}
+		}
+	},
+
+	//---------------------------------------------------------------------
+	// Builtin flags populated on initialization.
+	//---------------------------------------------------------------------
+
+	isBuiltin: {},
+
+	/* This must be done as early as possible upon initialization. */
+	initBuiltinFlags: function () {
+		var command;
+		for (command in this.entries) {
+			if (this.entries.hasOwnProperty(command)) {
+				this.isBuiltin[command] = true;
+			}
+		}
+	},
+
+	//---------------------------------------------------------------------
+	// /media/internal/uscl.json
+	//---------------------------------------------------------------------
+
+	updateFromLocalFile: function (options) {
+		var that = this;
+		var request = new Ajax.Request("/media/internal/uscl.json", {
+			method: "get",
+			onSuccess: function (response) {
+				that.localFileSuccess(response, options);
+				if (options && options.onSuccess) {
+					options.onSuccess(response);
+				}
+			},
+			onFailure: function (response) {
+				that.localFileFailure(response, options);
+				if (options && options.onFailure) {
+					options.onFailure(response);
+				}
+			},
+			onComplete: function (response) {
+				that.fixTitles();
+				if (options && options.onComplete) {
+					options.onComplete(response);
+				}
+			}
+		});
+	},
+
+	localFileSuccess: function (response, options) {
+		var o;
+		this.deleteLocalCommands();
+		try {
+			o = response.responseText.evalJSON({
+				sanitize: true
+			});
+		}
+		catch (e) {
+			this.deleteLocalCommands();
+			options.onParseFailure(response);
+		}
+		if (o) {
+			this.mergeLocalCommands(o);
+		}
+		options.onParseSuccess(response);
+	},
+
+	localFileFailure: function (response, options) {
+		this.deleteLocalCommands();
+	},
+
+	deleteLocalCommands: function () {
+		var nonBuiltins = [];
+		var command;
+		for (command in this.entries) {
+			if (this.entries.hasOwnProperty(command)) {
+				if (!this.isBuiltin[command]) {
+					nonBuiltins.push(command);
+				}
+			}
+		}
+		nonBuiltins.forEach(function (command) {
+			delete this.entries[command];
+		}, this);
+	},
+
+	mergeLocalCommands: function (o) {
+		if (!o.entries) { return; }
+		for (var command in o.entries) {
+			if (o.entries.hasOwnProperty(command)) {
+				if (!(command in this.entries)) {
+					this.entries[command] = o.entries[command];
+				}
+			}
+		}
+		this.fixTitles();
+	},
+
+	//---------------------------------------------------------------------
+	// Command Interpretation
+	//---------------------------------------------------------------------
+
+	rawGetEntry: function (commandName) {
+		if (commandName in this.entries) {
+			return this.entries[commandName];
+		}
+		return undefined;
+	},
+
+	getEntry: function (commandName) {
+		var entry = this.rawGetEntry(commandName);
+		while (entry && entry.constructor === String) {
+			entry = this.entries[entry];
+		}
+		if (!entry) {
+			return undefined;
+		}
+		return entry;
+	},
+
+	unalias: function (commandName) {
+		var entry = this.rawGetEntry(commandName);
+		while (entry && entry.constructor === String) {
+			commandName = entry;
+			entry = this.entries[entry];
+		}
+		if (!entry) {
+			return undefined;
+		}
+		return commandName;
+	},
+
+	appWorksWithUSCL: function (appId) {
+		return (this.apps &&
+			this.apps.iGrokTheCommandLine &&
+			this.apps.iGrokTheCommandLine[appId + "_default"]);
+	},
+
+	runEntry: function (entry, arg) {
+		if (entry.preprocess) {
+			arg = entry.preprocess.apply(this, [arg]);
+		}
+		if (!/\S/.test(arg) && !entry.argumentsOptional) {
+			throw new USCLError("No arguments specified.");
+		}
+		if (entry.method) {
+			var args = [arg];
+			if (entry.takesMultipleArguments) {
+				if (/\S/.test(arg)) {
+					args = [arg.normalizeSpace().split(" ")];
+				}
+				else {
+					args = [];
+				}
+			}
+			else if (entry.takesBooleanArgument) {
+				var flag = arg.toBoolean();
+				if (flag !== undefined) {
+					args = [flag];
+				}
+				else {
+					throw new USCLError("Invalid argument");
+				}
+			}
+			var result = entry.method.apply(this, args);
+			return result;
+		}
+		else if (entry.appId) {
+			if (!this.appWorksWithUSCL(entry.appId)) {
+				var message =
+					"The application " + entry.appId +
+					" is not installed or" +
+					" has not been patched to work with the " + 
+					"Universal Search Command Line.";
+				if (entry.appId === "com.palm.app.notes") {
+					message += "  Please install the USCL Memos Patch" +
+						" via Preware (or by other means).";
+				}
+				throw new USCLError(message);
+			}
+			var params = { };
+			params[entry.param] = arg;
+			// We return a function, which will be called
+			// with this set to the global search assistant
+			// object.  I don't remember why we can't just
+			// start the serviceRequest here.
+			return function () {
+				this.controller.serviceRequest(
+					"palm://com.palm.applicationManager", {
+						method: "launch",
+						parameters: {
+							id: entry.appId,
+							params: params
+						}
+					}
+				);
+			};
+		}
+		else if (entry.url) {
+			// We returns a function, which will be called
+			// with this set to the global search assistant
+			// object.
+			return function () {
+				this.launchBrowser(entry.url + encodeURIComponent(arg.trim()));
+			};
+		}
+		else {
+			throw new USCLError("Command not implemented.");
+		}
+	},
+	
+	run: function (what, arg) {
+		var commandName;
+		var entry;
+		try {
+			if (typeof(what) === "object") {
+				commandName = what.commandName;
+				return this.runEntry(what, arg);
+			}
+			else {
+				commandName = what;
+				entry = this.getEntry(commandName);
+				if (!entry) {
+					throw new USCLError("Command not found.");
+				}
+				else {
+					return this.runEntry(entry, arg);
+				}
+			}
+		}
+		catch (error) {
+			if (error instanceof USCLError) {
+				throw new USCLError("." + commandName + ": " +
+						    error.message);
+			}
+			else {
+				throw error;
+			}
+		}
+	},
+
+	runString: function (s, /* optional */ justCheck) {
+		var arg, commandName;
+		if (/^\s*\.\.(\S.*)$/.test(s)) { // ..<keytoss-command> <args>
+			if (justCheck) {
+				return true;
+			}
+			arg = RegExp.$1;
+			return this.run("keytoss", arg);
+		}
+		else if (/^\s*\.(\S+)\s*(.*)$/.test(s)) { // .<uscl-command> <args>
+			if (justCheck) {
+				return true;
+			}
+			commandName = RegExp.$1;
+			arg         = RegExp.$2;
+			return this.run(commandName, arg);
+		}
+		else if (/^(.*?)\s+\.\.(\S+)\s*$/.test(s)) { // <args> ..<keytoss-command>
+			if (justCheck) {
+				return true;
+			}
+			arg = RegExp.$2 + " " + RegExp.$1;
+			return this.run("keytoss", arg);
+		}
+		else if (/^(.*?)\s+\.(\S+)\s*$/.test(s)) { // <args> .<uscl-command>
+			if (justCheck) {
+				return true;
+			}
+			commandName = RegExp.$2;
+			arg         = RegExp.$1;
+			return this.run(commandName, arg);
+		}
+		else {
+			if (justCheck) {
+				return false;
+			}
+			throw new USCLError("No command supplied.");
+		}
+	},
+	
+	isCommandString: function (s) {
+		return this.runString(s, /* justCheck */ true);
+	},
+
+	//---------------------------------------------------------------------
+	// Help
+	//---------------------------------------------------------------------
+
+	getHelpCommandList: function () {
+		var commandName;
+		var entry;
+		var realEntry;
+		var result = [];
+		for (commandName in this.entries) {
+			if (this.entries.hasOwnProperty(commandName)) {
+				entry = this.entries[commandName];
+				
+				if (typeof(entry) !== "object") { continue; }
+				if (entry.excludeFromHelp) { continue; }
+				if (entry.emulatorOnly && !this.inEmulator) { continue; }
+				
+				result.push(entry);
+				entry.aka = [];
+				entry.commandName = commandName;
+			}
+		}
+		for (commandName in this.entries) {
+			if (this.entries.hasOwnProperty(commandName)) {
+				entry = this.entries[commandName];
+				if (entry.constructor === String) {
+					realEntry = this.getEntry(commandName);
+					realEntry.aka.push(commandName);
+				}
+			}
+		}
+		result.forEach(function (entry) {
+			entry.aka.sort();
+		});
+		result.sort(function (a, b) {
+			return ((a.titleSort < b.titleSort) ? -1 : 
+				(a.titleSort > b.titleSort) ? 1 : 0);
+		});
+		return result;
+	},
+
+	showHelp: function () {
+		var that = this;
+		var sc = Mojo.Controller.appController.getStageController("uscl-help");
+		if (sc) {
+			var scenes = sc.getScenes();
+			if (!(scenes && scenes.length === 1)) {
+				// doing this if the top scene is
+				// already the one we want causes an
+				// unwanted transition effect.
+				sc.popScenesTo("uscl-help-command-list");
+			}
+			sc.activate();
+		}
+		else {
+			var stageArguments = {
+				name: "uscl-help",
+				lightweight: true
+			};
+			var pushScene = function (sc) {
+				sc.pushScene("uscl-help-command-list", that);
+			};
+			Mojo.Controller.appController.createStageWithCallback(
+				stageArguments, pushScene, "card");
+		}
+	},
+
+	//---------------------------------------------------------------------
+	// Additional Universal Search Options
+	//---------------------------------------------------------------------
+
+	getUniversalSearchCommandList: function () {
+		var commandName;
+		var entry;
+		var result = [];
+		for (commandName in this.entries) {
+			if (this.entries.hasOwnProperty(commandName)) {
+				entry = this.entries[commandName];
+
+				if (typeof(entry) !== "object") { continue; }
+				if (entry.excludeFromUniversalSearch) { continue; }
+				if (entry.emulatorOnly && !this.inEmulator) { continue; }
+				if (this.hiddenFlags[commandName]) { continue; } /* .hide <cmd> */
+
+				result.push(entry);
+			}
+		}
+		result.sort(function (a, b) {
+			return ((a.titleSort < b.titleSort) ? -1 : 
+				(a.titleSort > b.titleSort) ? 1 : 0);
+		});
+		return result;
+	},
+
+	//---------------------------------------------------------------------
+	// .gps, etc.
+	//---------------------------------------------------------------------
+
+	setUseGps: function (flag) {
+		this.setLocationServiceFlag({
+			method: "setUseGps",
+			parameter: "useGps",
+			name: "GPS",
+			flag: flag
+		});
+	},
+
+	setUseBackgroundDataCollection: function (flag) {
+		this.setLocationServiceFlag({
+			method: "setUseBackgroundDataCollection",
+			parameter: "useBackgroundDataCollection",
+			name: "Background Data Collection",
+			flag: flag
+		});
+	},
+
+	setGeotagPhotos: function (flag) {
+		this.setLocationServiceFlag({
+			method: "setGeotagPhotos",
+			parameter: "geotagPhotos",
+			name: "Geotagging",
+			flag: flag
+		});
+	},
+
+	setAutoLocate: function (flag) {
+		this.setLocationServiceFlag({
+			method: "setAutoLocate",
+			parameter: "autoLocate",
+			name: "Auto-Locate",
+			flag: flag
+		});
+	},
+
+	setUseGoogle: function (flag) {
+		this.setLocationServiceFlag({
+			method: "setUseGoogle",
+			parameter: "useGoogle",
+			name: "Google Location Services",
+			flag: flag
+		});
+	},
+
+	setLocationServiceFlag: function (options) {
+		var that = this;
+
+		var flag = options.flag;
+
+		var parameters = {};
+		parameters[options.parameter] = flag;
+
+		var request = new Mojo.Service.Request("palm://com.palm.location", {
+			method: options.method,
+			parameters: parameters,
+			onSuccess: function () {
+				that.bannerNotify("Successfully %s %s.".format(
+					flag ? "enabled" : "disabled",
+					options.name
+				));
+			},
+			onFailure: function (response) {
+				that.bannerNotify("Error %s %s: %j".format(
+					flag ? "enabling" : "disabling",
+					options.name,
+					$H(response)
+				));
+			}
+		});
+	},
+
+	//---------------------------------------------------------------------
+	// Utilities
+	//---------------------------------------------------------------------
+
+	bannerNotify: function (message) {
+		Mojo.Controller.appController.showBanner({
+			messageText: message
+		}, "", "uscl");
+	}
+
+});
+
Index: /usr/lib/luna/system/luna-applauncher/app/views/global-search/expanded-searches-div.html
===================================================================
--- .orig/usr/lib/luna/system/luna-applauncher/app/views/global-search/expanded-searches-div.html
+++ /usr/lib/luna/system/luna-applauncher/app/views/global-search/expanded-searches-div.html
@@ -17,4 +17,14 @@
 			</div>
 		</div> 
 	</div>  
+	<div id='command_line_drawer' x-mojo-element="Drawer">
+		<div class="palm-row last" id="uscl" name="search-identifier" x-mojo-tap-highlight="persistent">
+			<div class="palm-row-wrapper">
+				<div class="title search-command-line truncating-text">
+					<span class="prefix">cmd:</span>
+					<kbd id="uscl-text">#{filterText}</kbd>
+				</div>
+			</div>
+		</div> 
+	</div>
 </div>
Index: /usr/lib/luna/system/luna-applauncher/app/views/global-search/expanded-searches-div-uscl.html
===================================================================
--- .orig/usr/lib/luna/system/luna-applauncher/app/views/global-search/expanded-searches-div-uscl.html
+++ /usr/lib/luna/system/luna-applauncher/app/views/global-search/expanded-searches-div-uscl.html
@@ -0,0 +1,3 @@
+<div id='expanded_searches_drawer_uscl' x-mojo-element="Drawer">
+	<div id="usclSearches" class="palm-list" x-mojo-element="List"></div>
+</div>
Index: /usr/lib/luna/system/luna-applauncher/app/views/global-search/templates/uscl-searches-item.html
===================================================================
--- .orig/usr/lib/luna/system/luna-applauncher/app/views/global-search/templates/uscl-searches-item.html
+++ /usr/lib/luna/system/luna-applauncher/app/views/global-search/templates/uscl-searches-item.html
@@ -0,0 +1,5 @@
+<div class="palm-row" name="search-identifier" x-mojo-tap-highlight="momentary">
+	<div class="palm-row-wrapper">
+		<div class="search-uscl">#{title}</div>
+	</div>
+</div>
Index: /usr/lib/luna/system/luna-applauncher/app/views/global-search/templates/uscl-searches-list.html
===================================================================
--- .orig/usr/lib/luna/system/luna-applauncher/app/views/global-search/templates/uscl-searches-list.html
+++ /usr/lib/luna/system/luna-applauncher/app/views/global-search/templates/uscl-searches-list.html
@@ -0,0 +1,3 @@
+<div class="palm-list">
+	#{-listElements}
+</div>
Index: /usr/lib/luna/system/luna-applauncher/app/views/launcher/launcher-scene.html
===================================================================
--- .orig/usr/lib/luna/system/luna-applauncher/app/views/launcher/launcher-scene.html
+++ /usr/lib/luna/system/luna-applauncher/app/views/launcher/launcher-scene.html
@@ -10,6 +10,10 @@
 		
 		<div class="palm-group solid" id="launcherIconsDiv"></div>
 		
+		<div class="palm-group unlabeled search" id="searchesDivUSCL">
+			<div class="palm-list" id="searches-list-uscl"></div>
+		</div>
+		
 		<div id="contactsDiv"></div>
 		
 		<div class="palm-group search" id="singleContactsDiv"></div>
Index: /usr/lib/luna/system/luna-applauncher/app/views/uscl-help-command-list/templates/item.html
===================================================================
--- .orig/usr/lib/luna/system/luna-applauncher/app/views/uscl-help-command-list/templates/item.html
+++ /usr/lib/luna/system/luna-applauncher/app/views/uscl-help-command-list/templates/item.html
@@ -0,0 +1,6 @@
+<div class="palm-row" x-mojo-tap-highlight="momentary">
+	<div class="palm-row-wrapper">
+		<div class="uscl-help-command-name"  id="command-name"><kbd>.#{commandName}</kbd></div>
+		<div class="uscl-help-command-title" id="title"       >#{title}</div>
+	</div>
+</div>
Index: /usr/lib/luna/system/luna-applauncher/app/views/uscl-help-command-list/templates/list.html
===================================================================
--- .orig/usr/lib/luna/system/luna-applauncher/app/views/uscl-help-command-list/templates/list.html
+++ /usr/lib/luna/system/luna-applauncher/app/views/uscl-help-command-list/templates/list.html
@@ -0,0 +1,3 @@
+<div class="palm-list">
+	#{-listElements}
+</div>
Index: /usr/lib/luna/system/luna-applauncher/app/views/uscl-help-command-list/uscl-help-command-list-scene.html
===================================================================
--- .orig/usr/lib/luna/system/luna-applauncher/app/views/uscl-help-command-list/uscl-help-command-list-scene.html
+++ /usr/lib/luna/system/luna-applauncher/app/views/uscl-help-command-list/uscl-help-command-list-scene.html
@@ -0,0 +1,11 @@
+<div id="uscl-help-command-list" class="uscl-help uscl-help-command-list">
+	<div class="palm-page-header multi-line">
+		<div class="palm-page-header-wrapper">
+			<div class="title left">
+				Universal Search Command Line Help
+			</div>
+		</div>
+	</div>
+	<div id="command-list" x-mojo-element="List">
+	</div>
+</div>
Index: /usr/lib/luna/system/luna-applauncher/app/views/uscl-help-command-view/uscl-help-command-view-scene.html
===================================================================
--- .orig/usr/lib/luna/system/luna-applauncher/app/views/uscl-help-command-view/uscl-help-command-view-scene.html
+++ /usr/lib/luna/system/luna-applauncher/app/views/uscl-help-command-view/uscl-help-command-view-scene.html
@@ -0,0 +1,23 @@
+<div id="uscl-help-command-view" class="uscl-help uscl-help-command-view">
+	<div class="palm-page-header multi-line">
+		<div class="palm-page-header-wrapper">
+			<div class="title left un-capitalize" id="title">
+			</div>
+		</div>
+	</div>
+	<div class="contents">
+		<div class="uscl-help-usage" id="usageDiv">
+			Usage:
+			<kbd class="usage" id="usage"></kbd>
+		</div>
+		<div class="uscl-help-aka" id="akaDiv">
+			Also known as:
+			<span class="aka" id="aka"></span>
+		</div>
+		<div class="uscl-help-description" id="description"></div>
+		<div class="uscl-help-example" id="exampleDiv">
+			<span class="example-title" id="example-title">Example</span>:
+			<kbd class="example" id="example"></kbd>
+		</div>
+	</div>
+</div>
Index: /usr/lib/luna/system/luna-applauncher/index.html
===================================================================
--- .orig/usr/lib/luna/system/luna-applauncher/index.html
+++ /usr/lib/luna/system/luna-applauncher/index.html
@@ -9,6 +9,7 @@
 	
 	<link href="stylesheets/launcher.css" media="screen" rel="stylesheet" type="text/css" title="standard" />
 	<link href="stylesheets/global-search.css" media="screen" rel="stylesheet" type="text/css" title="standard" />
+	<link href="stylesheets/uscl.css" media="screen" rel="stylesheet" type="text/css" title="standard" />
 </head>
 <body>
 </body>
Index: /usr/lib/luna/system/luna-applauncher/sources.json
===================================================================
--- .orig/usr/lib/luna/system/luna-applauncher/sources.json
+++ /usr/lib/luna/system/luna-applauncher/sources.json
@@ -13,6 +13,24 @@
 	},
 	
 	{
+		"source": "app\/controllers\/uscl.js"
+	},
+
+	{
+		"source": "app\/controllers\/calculator.js"
+	},
+	
+	{
+		"source": "app\/controllers\/uscl-help-command-list.js",
+		"scenes": "uscl-help-command-list"
+	},
+	
+	{
+		"source": "app\/controllers\/uscl-help-command-view.js",
+		"scenes": "uscl-help-command-view"
+	},
+	
+	{
 		"source": "app\/controllers\/app-info-assistant.js"
 	},
 
Index: /usr/lib/luna/system/luna-applauncher/stylesheets/global-search.css
===================================================================
--- .orig/usr/lib/luna/system/luna-applauncher/stylesheets/global-search.css
+++ /usr/lib/luna/system/luna-applauncher/stylesheets/global-search.css
@@ -167,6 +167,20 @@
 	text-align: center;
 }
     
+.palm-group.search .search-command-line {
+	text-align: left;
+	font-size: smaller;
+}
+.palm-group.search .search-command-line .prefix {
+	color: black;
+	font-weight: bold;
+}
+.palm-group.search .search-uscl {
+	text-align: center;
+	padding-top: 10px;
+	padding-bottom: 10px;
+}
+    
 .palm-group.search .palm-group-title {
 	max-width: 264px;                   
 }                       
Index: /usr/lib/luna/system/luna-applauncher/stylesheets/uscl.css
===================================================================
--- .orig/usr/lib/luna/system/luna-applauncher/stylesheets/uscl.css
+++ /usr/lib/luna/system/luna-applauncher/stylesheets/uscl.css
@@ -0,0 +1,66 @@
+body.uscl-body {
+	background-image: none;
+	background-color: #555555; /* roughly equivalent to the scrim */
+	color: white;
+}
+
+/******************************************************************************
+Command List, Command View
+******************************************************************************/
+
+kbd {
+	font-weight: bold;
+	color: yellow;
+	font-family: inherit;
+}
+kbd .aliases {
+	font-weight: normal;
+	opacity: 0.5;
+}
+kbd var {
+	font-weight: normal;
+	font-style: italic;
+}
+
+#uscl-help-command-list .palm-row-wrapper {
+	padding: 10px 15px 10px 15px;
+}
+#uscl-help-command-list .palm-row .uscl-help-command-title {
+}
+#uscl-help-command-list .palm-row .uscl-help-command-name {
+	float: right;
+	text-align: right;
+	padding-left: 1em;
+}
+
+#uscl-help-command-view .contents {
+	padding: 5px 15px;
+}
+#uscl-help-command-view .uscl-help-aka {
+	padding-top: .5em;
+	font-size: smaller;
+	padding-left: 2em;
+	text-indent: -2em;
+}
+#uscl-help-command-view .uscl-help-description {
+	padding-top: .5em;
+	font-size: smaller;
+}
+#uscl-help-command-view .uscl-help-example {
+	padding-top: .5em;
+	font-size: smaller;
+}
+
+/******************************************************************************
+Feed list
+******************************************************************************/
+.palm-menu-fade {
+	display: none;
+}
+.uscl-feed-list-scene .uscl-feed-list .palm-row-wrapper .padding {
+	padding: 5px 15px;
+}
+.uscl-feed-list-scene .uscl-feed-list .palm-row-wrapper .uscl-feed-url {
+	font-size: 60%;
+}
+
