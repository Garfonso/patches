diff --git a/usr/lib/luna/system/luna-applauncher/app/controllers/global-search-assistant.js b/usr/lib/luna/system/luna-applauncher/app/controllers/global-search-assistant.js
index b9db2c2..b535662 100644
--- a/usr/lib/luna/system/luna-applauncher/app/controllers/global-search-assistant.js
+++ b/usr/lib/luna/system/luna-applauncher/app/controllers/global-search-assistant.js
@@ -140,6 +140,7 @@ GlobalSearchAssistant = Class.create({
 		searchesDiv.update(Mojo.View.render({template: 'global-search/expanded-searches-div' }));
 		this.expandedSearchDrawer = { showExpanded: false };
 		this.controller.setupWidget('expanded_searches_drawer', {unstyled:true, property:'showExpanded'}, this.expandedSearchDrawer);
+
 		this.webDrawer = { showWeb: false };
 		this.controller.setupWidget('web_drawer', {unstyled:true, property:'showWeb'}, this.webDrawer);
 		
@@ -175,11 +176,52 @@ GlobalSearchAssistant = Class.create({
 		
 		this.controller.listen(this.controller.document, 'paste', this.onPaste.bindAsEventListener(this), true);
 		
+		this.uscl = new USCL();
+		this.uscl.globalSearchAssistant = this;
+		// OMG CIRCULAR REFERENCE, but LauncherAssistant's cleanup
+		// handler *should* take care of this as a precaution.
+		
+		var searchesDivUSCL = this.controller.get('searches-list-uscl');
+		searchesDivUSCL.update(Mojo.View.render({template: 'global-search/expanded-searches-div-uscl' }));
+		this.expandedSearchDrawerUSCL = { showExpanded: false };
+		this.controller.setupWidget('expanded_searches_drawer_uscl',
+					    { unstyled:true, property:'showExpanded', 
+					      scrollDisabled: true},
+					    this.expandedSearchDrawerUSCL);
+
+		this.usclDrawer = { showUSCL: false };
+		this.controller.setupWidget('command_line_drawer', {unstyled: true, property: 'showUSCL'}, this.usclDrawer);
+
+		this.usclSearchesAttrs = {
+			listTemplate: "global-search/templates/uscl-searches-list",
+			itemTemplate: "global-search/templates/uscl-searches-item",
+			swipeToDelete: false,
+			reorderable: false,
+			renderLimit: 500
+		};
+		this.usclSearchesModel = { 
+			items: this.uscl.universalSearchList 
+		};
+		this.controller.setupWidget("usclSearches",
+					    this.usclSearchesAttrs,
+					    this.usclSearchesModel);
+
+		this.onTapUSCLHandler = this.onTapUSCL.bindAsEventListener(this);
+		this.controller.listen("usclSearches",
+				       Mojo.Event.listTap,
+				       this.onTapUSCLHandler);
+		
 		this.initOnServerStart("com.palm.systemservice");
 		
 		this.galInit();
 	},
-  
+
+ 	onTapUSCL: function (event) {
+ 		var entry = this.usclSearchesModel.items[event.index];
+ 		this.runUSCL({ entry: entry,
+ 			       arg: this.currentFilter });
+ 	},
+   
 	ready: function() {
 		// try to force our input field to always have focus (there are some exceptions)
 		var input = this.searchField.querySelector('[name=searchtermInput]');
@@ -187,6 +229,21 @@ GlobalSearchAssistant = Class.create({
 			input.blur = function() { this.focus();	}
 		}
 		this.enable(true);
+		this.monkeyPatch1();
+	},
+
+	// allows one to disable the scrollIntoView behavior of Mojo.Widget.Drawer.
+	// WARNING: THIS MONKEY-PATCHES A PRIVATE API
+	monkeyPatch1: function () {
+		if (this.monkeyPatched) { return; }
+		var monkey = Mojo.Widget.Drawer.prototype.scrollIntoView;
+		if (!monkey) { return; }
+		Mojo.Widget.Drawer.prototype.scrollIntoView = function () {
+			if (this.controller.attributes.scrollDisabled) {
+				return;
+			}
+			monkey.apply(this, arguments);
+		};
 	},
 	
 	isEnabled: function() {
@@ -229,7 +286,8 @@ GlobalSearchAssistant = Class.create({
 	},
 	
 	deactivate: function() {
-		
+		this.defaultDeactivation = true;
+
 		this.searchTerm = "";
 		this.searchPressHoldTerm = "";
 		
@@ -1560,6 +1618,102 @@ GlobalSearchAssistant = Class.create({
 		ApplicationService.launch('com.palm.app.browser', params);		
 	},	
 	
+	deactivateWithError: function (message, allowHTMLMessage) {
+		this.controller.showAlertDialog({
+			onChoose: (function () { this.deactivate(); }).bind(this),
+			title: "Error",
+			message: message,
+			choices: [ { label: "OK", value: "ok" } ],
+			allowHTMLMessage: allowHTMLMessage
+		});
+	},
+
+	deactivateWithWarning: function (message, allowHTMLMessage) {
+		this.controller.showAlertDialog({
+			onChoose: (function () { this.deactivate(); }).bind(this),
+			title: "Warning",
+			message: message,
+			choices: [ { label: "OK", value: "ok" } ],
+			allowHTMLMessage: allowHTMLMessage
+		});
+	},
+
+	runUSCL: function (o) {
+		if (!this.uscl) {
+			this.deactivate();
+		}
+		var result;
+		try {
+			if (o instanceof Object) {
+				// when someone types something and taps
+				// one of the extended universal search
+				// items we added.
+				result = this.uscl.run(o.entry, o.arg);
+			}
+			else {
+				// We assume it's a string at this
+				// point.  This is when someone types a
+				// universal search string containing a
+				// USCL command and hits Enter.  Whether
+				// it contains a USCL command is
+				// determined by
+				// this.uscl.isCommandString() before we
+				// get to this point.
+				result = this.uscl.runString(o);
+			}
+		}
+		catch (e) {
+			if (e instanceof USCLError) {
+				// e has: message, stack, constructor, name
+				Mojo.Log.error("%s: %s", e.name, e.message);
+				Mojo.Log.error(e.stack);
+				this.deactivateWithError(e.message);
+				// remember, kids, don't deactivate
+				// right away!
+				return;
+			}
+			else {
+				Mojo.Log.error("%s: %s", e.name, e.message);
+				Mojo.Log.error(e.stack);
+				this.deactivateWithError(e.message);
+				// NOTE: We should only get to this
+				// point if there's a bug in the code.
+			}
+		}
+		if (result && result instanceof Object) {
+			this.controller.showAlertDialog({
+				onChoose: (function () {
+					this.deactivate(); 
+				}).bind(this),
+				title: result.title,
+				message: result.message,
+				choices: [ { label: "OK", value: "ok" } ]
+			});
+		}
+		else if (result && result.constructor && 
+			 result.constructor === String) {
+			this.controller.showAlertDialog({
+			 	onChoose: (function () {
+					this.deactivate();
+				}).bind(this),
+			 	title: "Result",
+			 	message: result,
+			 	choices: [ { label: "OK", value: "ok" } ]
+			});
+		}
+		else {
+			// default behavior.
+			if (this.defaultDeactivation) {
+				this.deactivate();
+			}
+		}
+	},
+
+	defaultDeactivation: true,
+	preventDefaultDeactivation: function () {
+		this.defaultDeactivation = false;
+	},
+
 	toggleSearchListDivs: function() {
 		if(!this.enterKeyActionItem){
 			this.enterKeyActionItem = 'search'
@@ -1570,16 +1724,40 @@ GlobalSearchAssistant = Class.create({
 					$('webtext').innerHTML = this.currentFilter;
 					this.webDrawer.showWeb = true;
 					this.controller.modelChanged(this.webDrawer);
+					this.usclDrawer.showUSCL = false;
+					this.controller.modelChanged(this.usclDrawer);
+				}
+				else if (this.uscl.isCommandString(this.currentFilter)) {
+					$('uscl-text').innerHTML = this.currentFilter;
+					this.webDrawer.showWeb = false;
+					this.controller.modelChanged(this.webDrawer);
+					this.usclDrawer.showUSCL = true;
+					this.controller.modelChanged(this.usclDrawer);
 				}
 				else {
 					this.webDrawer.showWeb =  false ;
 					this.controller.modelChanged(this.webDrawer);
+					this.usclDrawer.showUSCL = false;
+					this.controller.modelChanged(this.usclDrawer);
 				}
 				$('find').removeClassName('single');
 				$('find').addClassName('first');
 				this.searchField.removeClassName('text-hidden');
 				this.expandedSearchDrawer.showExpanded = true;
 				this.controller.modelChanged(this.expandedSearchDrawer);
+
+				if (this.uscl.show) {
+					this.usclSearchesModel.items = 
+						this.uscl.getUniversalSearchCommandList();
+					this.controller.modelChanged(this.usclSearchesModel);
+					this.controller.get('searchesDivUSCL').show();
+					this.expandedSearchDrawerUSCL.showExpanded = true;
+				}
+				else {
+					this.controller.get('searchesDivUSCL').hide();
+					this.expandedSearchDrawerUSCL.showExpanded = false;
+				}
+				this.controller.modelChanged(this.expandedSearchDrawerUSCL);
 			} else {//find...
 				if (this.dialDiv.visible() || this.numberDiv.visible()) {
 					this.searchField.addClassName('text-hidden');
@@ -1589,6 +1767,11 @@ GlobalSearchAssistant = Class.create({
 				}
 				this.expandedSearchDrawer.showExpanded = false;
 				this.controller.modelChanged(this.expandedSearchDrawer);
+
+				this.controller.get('searchesDivUSCL').hide();
+				this.expandedSearchDrawerUSCL.showExpanded = false;
+				this.controller.modelChanged(this.expandedSearchDrawerUSCL);
+
 				$('find').removeClassName('first');
 				$('find').addClassName('single');
 			}
@@ -1603,16 +1786,39 @@ GlobalSearchAssistant = Class.create({
 					$('webtext').innerHTML = this.currentFilter;
 					this.webDrawer.showWeb = true;
 					this.controller.modelChanged(this.webDrawer);
+					this.usclDrawer.showUSCL = false;
+					this.controller.modelChanged(this.usclDrawer);
+				}
+				else if (this.uscl.isCommandString(this.currentFilter)) {
+					$('uscl-text').innerHTML = this.currentFilter;
+					this.webDrawer.showWeb = false;
+					this.controller.modelChanged(this.webDrawer);
+					this.usclDrawer.showUSCL = true;
+					this.controller.modelChanged(this.usclDrawer);
 				}
 				else {
 					this.webDrawer.showWeb = false;
 					this.controller.modelChanged(this.webDrawer);
+					this.usclDrawer.showUSCL = false;
+					this.controller.modelChanged(this.usclDrawer);
 				}
 				$('find').removeClassName('single');
 				$('find').addClassName('first');
 				this.searchField.removeClassName('text-hidden');
 				this.expandedSearchDrawer.showExpanded = true;
 				this.controller.modelChanged(this.expandedSearchDrawer);
+
+				if (this.uscl.show) {
+					this.usclSearchesModel.items = this.uscl.getUniversalSearchCommandList();
+					this.controller.modelChanged(this.usclSearchesModel);
+					this.controller.get('searchesDivUSCL').show();
+					this.expandedSearchDrawerUSCL.showExpanded = true;
+				}
+				else {
+					this.controller.get('searchesDivUSCL').hide();
+					this.expandedSearchDrawerUSCL.showExpanded = false;
+				}
+				this.controller.modelChanged(this.expandedSearchDrawerUSCL);
 			} else {//find...
 				if (this.dialDiv.visible() || this.numberDiv.visible()) {
 					this.searchField.addClassName('text-hidden');
@@ -1622,6 +1828,11 @@ GlobalSearchAssistant = Class.create({
 				}
 				this.expandedSearchDrawer.showExpanded = false;
 				this.controller.modelChanged(this.expandedSearchDrawer);
+
+				this.controller.get('searchesDivUSCL').hide();
+				this.expandedSearchDrawerUSCL.showExpanded = false;
+				this.controller.modelChanged(this.expandedSearchDrawerUSCL);
+
 				$('find').removeClassName('first');
 				$('find').addClassName('single');
 			}
@@ -1641,6 +1852,11 @@ GlobalSearchAssistant = Class.create({
 				this.searchExplicitlyExpanded = false;
 				this.expandedSearchDrawer.showExpanded = false;
 				this.controller.modelChanged(this.expandedSearchDrawer);
+
+				this.controller.get('searchesDivUSCL').hide();
+				this.expandedSearchDrawerUSCL.showExpanded = false;
+				this.controller.modelChanged(this.expandedSearchDrawerUSCL);
+
 				$('find').removeClassName('first');
 				$('find').addClassName('single');
 				if (this.dialDiv.visible() || this.numberDiv.visible()) {
@@ -1656,21 +1872,46 @@ GlobalSearchAssistant = Class.create({
 					$('webtext').innerHTML = this.currentFilter;
 					this.webDrawer.showWeb = true;
 					this.controller.modelChanged(this.webDrawer);
+					this.usclDrawer.showUSCL = false;
+					this.controller.modelChanged(this.usclDrawer);
+				}
+				else if (this.uscl.isCommandString(this.currentFilter)) {
+					$('uscl-text').innerHTML = this.currentFilter;
+					this.webDrawer.showWeb = false;
+					this.controller.modelChanged(this.webDrawer);
+					this.usclDrawer.showUSCL = true;
+					this.controller.modelChanged(this.usclDrawer);
 				}
 				else {
 					this.webDrawer.showWeb = false;
 					this.controller.modelChanged(this.webDrawer);
+					this.usclDrawer.showUSCL = false;
+					this.controller.modelChanged(this.usclDrawer);
 				}
 				$('find').removeClassName('single');
 				$('find').addClassName('first');
 				this.searchField.removeClassName('text-hidden');
 				this.expandedSearchDrawer.showExpanded = true;
 				this.controller.modelChanged(this.expandedSearchDrawer);
+
+				if (this.uscl.show) {
+					this.usclSearchesModel.items = this.uscl.getUniversalSearchCommandList();
+					this.controller.modelChanged(this.usclSearchesModel);
+					this.controller.get('searchesDivUSCL').show();
+					this.expandedSearchDrawerUSCL.showExpanded = true;
+				}
+				else {
+					this.controller.get('searchesDivUSCL').hide();
+					this.expandedSearchDrawerUSCL.showExpanded = false;
+				}
+				this.controller.modelChanged(this.expandedSearchDrawerUSCL);
 			}
 		} else {
 			var url = target.id;
 			if (url == "web")
 				this.launchBrowser(this.currentFilter);
+			else if (url == "uscl")
+				this.runUSCL(this.currentFilter);
 		}
 	},
 	
@@ -1929,6 +2170,13 @@ GlobalSearchAssistant = Class.create({
 		this.gpsInfo = undefined;
 		if(this.highlightTarget != null)
 			this.highlightTarget.removeClassName('selected');
+
+ 		this.usclDrawer.showUSCL =  false ;
+ 		this.controller.modelChanged(this.usclDrawer);
+ 		this.controller.get('searchesDivUSCL').hide();
+ 		this.expandedSearchDrawerUSCL.showExpanded = false;
+ 		this.controller.modelChanged(this.expandedSearchDrawerUSCL);
+ 		$('uscl').removeClassName('selected');
 	},
 	
   webSiteString: function(s){
@@ -1974,6 +2222,7 @@ GlobalSearchAssistant = Class.create({
 	//clear search':
 	$(this.defaultSearchEngine).removeClassName('palm-focus');
 	$('web').removeClassName('palm-focus');
+	$('uscl').removeClassName('palm-focus');
   },
   highlightSelection: function() {
   	
@@ -2047,6 +2296,24 @@ GlobalSearchAssistant = Class.create({
 		$(this.defaultSearchEngine).removeClassName('palm-focus');
 		$('web').removeClassName('palm-focus');
 	}
+
+	if (this.enterKeyActionItem === "search") {
+		if (this.webDrawer.showWeb == true) {
+			$('uscl').removeClassName('palm-focus');
+		}
+		else if (this.usclDrawer.showUSCL == true) {
+			$(this.defaultSearchEngine).removeClassName('palm-focus');
+			$('web').removeClassName('palm-focus');
+			this.highlightTarget = $('uscl');
+			$('uscl').addClassName('palm-focus');
+		}
+		else if (this.expandedSearchDrawer.showExpanded == true) {
+			$('uscl').removeClassName('palm-focus');
+		}
+	}
+	else {
+		$('uscl').removeClassName('palm-focus');
+	}
   },
   
   enterKeyAction: function(){
@@ -2144,6 +2411,8 @@ GlobalSearchAssistant = Class.create({
 			}
 			if (this.webDrawer.showWeb == true)
 				this.launchBrowser(this.currentFilter);
+			else if (this.usclDrawer.showUSCL == true)
+				this.runUSCL(this.currentFilter);
 			else {
 				this.launchBrowser(this.URLs[this.defaultSearchEngine] + encodeURIComponent(this.currentFilter));
 			}
diff --git a/usr/lib/luna/system/luna-applauncher/app/controllers/launcher-assistant.js b/usr/lib/luna/system/luna-applauncher/app/controllers/launcher-assistant.js
index 9057138..4b0d270 100644
--- a/usr/lib/luna/system/luna-applauncher/app/controllers/launcher-assistant.js
+++ b/usr/lib/luna/system/luna-applauncher/app/controllers/launcher-assistant.js
@@ -179,7 +179,16 @@ var LauncherAssistant = Class.create({
 		
 		this.launchRequest = undefined;
 	},
-	
+
+	cleanup: function () {
+		if (this.globalSearchAssistant &&
+		    this.globalSearchAssistant.uscl) {
+			delete this.globalSearchAssistant.uscl.globalSearchAssistant;
+		}
+		// because the global-search-assistant creates a OMG
+		// CIRCULAR REFERENCE.
+	},
+
 	onResize: function(event) {
 		this.adjustLayout();
 	},
@@ -766,3 +775,38 @@ var LauncherAssistant = Class.create({
 	}
 	
 });
+
+(function () {
+	var about = function () {
+		this.globalSearchAssistant.uscl.showAbout();
+	};
+	var help = function () {
+		this.globalSearchAssistant.uscl.showHelp();
+	};
+
+	LauncherAssistant.prototype.appMenuModel.items.push({
+		label: $L("USCL Help..."),
+		command: "uscl-help"
+	});
+	LauncherAssistant.prototype.appMenuModel.items.push({
+		label: $L("About USCL..."),
+		command: "uscl-about"
+	});
+
+	var handleCommand = LauncherAssistant.prototype.handleCommand;
+	var new_handleCommand = function (event) {
+		if (event.type === Mojo.Event.command &&
+		    event.command === "uscl-about") {
+			about.apply(this);
+		}
+		else if (event.type === Mojo.Event.command &&
+			 event.command === "uscl-help") {
+			help.apply(this);
+		}
+		else {
+			handleCommand.apply(this, [event]);
+		}
+	};
+	LauncherAssistant.prototype.handleCommand = new_handleCommand;
+})();
+
diff --git a/usr/lib/luna/system/luna-applauncher/app/controllers/uscl/builtins/uscl-calc.js b/usr/lib/luna/system/luna-applauncher/app/controllers/uscl/builtins/uscl-calc.js
new file mode 100644
index 0000000..d0ab037
--- /dev/null
+++ b/usr/lib/luna/system/luna-applauncher/app/controllers/uscl/builtins/uscl-calc.js
@@ -0,0 +1,121 @@
+/*jslint browser: true, eqeqeq: true, undef: true, evil: true */
+/*global Mojo, USCL */
+/******************************************************************************
+Lines above are for jslint, the JavaScript verifier.
+http://www.jslint.com/
+******************************************************************************/
+
+(function () {
+
+	var Calculator = function () {
+
+		// We define these just so you can say, for example, "abs"
+		// instead of "Math.abs".
+
+		var abs		= Math.abs;
+		var max		= Math.max;
+		var min		= Math.min;
+		var random	= Math.random;
+		var ceil	= Math.ceil;
+		var round	= Math.round;
+		var floor	= Math.floor;
+		var E		= Math.E;
+		var LN10	= Math.LN10;
+		var LN2		= Math.LN2;
+		var LOG10E	= Math.LOG10E;
+		var LOG2E	= Math.LOG2E;
+		var PI		= Math.PI;
+		var SQRT1_2	= Math.SQRT1_2;
+		var SQRT2	= Math.SQRT2;
+		var acos	= Math.acos;
+		var asin	= Math.asin;
+		var atan	= Math.atan;
+		var atan2	= Math.atan2;
+		var cos		= Math.cos;
+		var exp		= Math.exp;
+		var log		= Math.log;
+		var pow		= Math.pow;
+		var sin		= Math.sin;
+		var sqrt	= Math.sqrt;
+		var tan		= Math.tan;
+
+		// And a few extensions to make your life a little more easier.
+
+		var cot         = function (x) { return 1 / tan(x); }; // cotangent
+		var sec         = function (x) { return 1 / cos(x); }; // secant
+		var csc         = function (x) { return 1 / sin(x); }; // cosecant
+		var log2        = function (x) { return log(x) / LN2; };
+		var log10       = function (x) { return log(x) / LN10; };
+
+		// I really wish we could provide a true global context
+		// independent from Mojo or whatever environment we happen to be
+		// in.  Oh well, at least we have 26 variables.
+
+		var a, b, c, d, e, f, g, h, i, j, k, l, m;
+		var n, o, p, q, r, s, t, u, v, w, x, y, z;
+		
+		this.calculate = function (string) {
+			return eval(string);
+		};
+	};
+
+	Object.extend(USCL.prototype, {
+		calcCommand: function (s) {
+			// Yes, I'm aware that eval is usually evil.  The user
+			// chooses to use 'calc' at their own risk.  I'm only
+			// using it here because I'm too lazy at the moment to
+			// write an infix expression calculator.
+			if (!this.calculator) {
+				this.calculator = new Calculator();
+			}
+			var result;
+			try {
+				result = this.calculator.calculate(s);
+			}
+			catch (e) {
+				throw new USCLError(e);
+			}
+			return {
+				title: "Calculator",
+				message: s + " \u2192 " + Object.toJSON(result)
+			};
+		}
+	});
+
+	Object.extend(USCL.prototype.builtinEntries, {
+		"calc": {	// BUILTIN
+			title: "Calculator",
+			usage: "<var>expression</var>",
+			example: [".calc (37 * 1.8) + 32",
+				  ".calc sin(PI / 2)",
+				  ".calc Math.sin(Math.PI / 2)"],
+			description: 
+			("Perform a calculation. " + 
+			 "Can also evaluate other JavaScript expressions. " +
+			 "Yes, it uses <kbd>eval()</kbd>, and I&rsquo;m " + 
+			 "aware that it&rsquo;s generally recognized as evil. " + 
+			 "Use at your own risk." +
+			 "<br /><br />" +
+			 "Functions and constants in the core Math object can be " +
+			 "used with or without the <kbd>Math.</kbd> prefix. " +
+			 "More complex calculations (such as unit conversions) " +
+			 "can be sent to Google (see <kbd>.google</kbd>) " +
+			 "or Wolfram Alpha (see <kbd>.wolfram</kbd>)." +
+			 "<br /><br />" +
+			 "Additional functions available: " +
+			 "<kbd>cot()</kbd>, " + 
+			 "<kbd>sec()</kbd>, " + 
+			 "<kbd>csc()</kbd>, " + 
+			 "<kbd>log()</kbd>, " + 
+			 "<kbd>log10()</kbd>"
+			),
+			method: function (s) {
+				return this.calcCommand(s);
+			}
+		},
+		"c": "calc",
+		"eval": "calc"
+	});
+
+})();
+
diff --git a/usr/lib/luna/system/luna-applauncher/app/controllers/uscl/builtins/uscl-maps.js b/usr/lib/luna/system/luna-applauncher/app/controllers/uscl/builtins/uscl-maps.js
new file mode 100644
index 0000000..41f2d89
--- /dev/null
+++ b/usr/lib/luna/system/luna-applauncher/app/controllers/uscl/builtins/uscl-maps.js
@@ -0,0 +1,20 @@
+/*jslint browser: true, eqeqeq: true, undef: true */
+/*global USCL */
+/******************************************************************************
+Lines above are for jslint, the JavaScript verifier.
+http://www.jslint.com/
+******************************************************************************/
+
+Object.extend(USCL.prototype.builtinEntries, {
+	"maps": {	// BUILTIN FOR COMPLETENESS
+		excludeFromUniversalSearch: true,
+		title: "Google Maps",
+		argumentsOptional: true,
+		usage: "<var>keywords</var>",
+		description: "Opens the Google Maps application and searches for what you specify.",
+		method: function (arg) {
+			this.globalSearchAssistant.launchMap(arg);
+		}
+	}
+});
+
diff --git a/usr/lib/luna/system/luna-applauncher/app/controllers/uscl/builtins/uscl-notes.js b/usr/lib/luna/system/luna-applauncher/app/controllers/uscl/builtins/uscl-notes.js
new file mode 100644
index 0000000..043fbdc
--- /dev/null
+++ b/usr/lib/luna/system/luna-applauncher/app/controllers/uscl/builtins/uscl-notes.js
@@ -0,0 +1,114 @@
+/*jslint browser: true, eqeqeq: true, undef: true */
+/*global Mojo, USCL, USCLError */
+/******************************************************************************
+Lines above are for jslint, the JavaScript verifier.
+http://www.jslint.com/
+******************************************************************************/
+
+Object.extend(USCL.prototype, {
+	noteColors: ["pink", "yellow", "green", "blue"],
+
+	randomNoteColor: function () {
+		return this.noteColors[Math.floor(Math.random() *
+						  this.noteColors.length)];
+	},
+
+	newNoteTimestamp: function () {
+		return Mojo.Format.formatDate(new Date(),
+					      "short").replace(/ /, "\n");
+	},
+
+	quickNoteWarning: "Because you are running Notes and " + 
+		"do not have the latest version " + 
+		"of the USCL Notes Patch installed, " + 
+		"please close and reopen Notes.  " + 
+		"Your quicknote has been entered, " + 
+		"but <i>may</i> not be shown until " + 
+		"you close and reopen Notes.",
+
+	quickNoteCommand: function (text) {
+		var gsa = this.globalSearchAssistant;
+		gsa.preventDefaultDeactivation();
+		var onRunning = (function () {
+			if (this.apps &&
+			    this.apps.iCanBeRefreshed &&
+			    this.apps.iCanBeRefreshed["com.palm.app.notes"]) {
+				var request = new Mojo.Service.Request(
+					"palm://com.palm.applicationManager", {
+						method: "launch",
+						parameters: {
+							id: "com.palm.app.notes",
+							params: { refresh: true }
+						}
+					}
+				);
+				gsa.deactivate();
+			}
+			else {
+				gsa.deactivateWithWarning(this.quickNoteWarning, true);
+			}
+		}).bind(this);
+		var onNotRunning = function () {
+			gsa.deactivate();
+		};
+		var noteText = text + "\n\n" + this.newNoteTimestamp() + "\n";
+		var request = new Mojo.Service.Request("palm://com.palm.notes", {
+			method: "saveNote",
+			parameters: {
+				text: noteText,
+				color: this.randomNoteColor()
+			},
+			onComplete: (function () {
+				this.checkForAppRunning("com.palm.app.notes",
+							onRunning,
+							onNotRunning);
+			}).bind(this)
+		});
+	}
+});
+
+Object.extend(USCL.prototype.builtinEntries, {
+	"note": {	// BUILTIN
+		title: "New Note",
+		usage: "<var>text</var>",
+		example: "I like pie.",
+		description: "Quickly create a new note.",
+		method: function (arg) {
+			if (!(this.apps &&
+			      this.apps.iGrokTheCommandLine &&
+			      this.apps.iGrokTheCommandLine["com.palm.app.notes"])) {
+				throw new USCLError("This command will not " +
+						    "work if the USCL Memos " +
+						    "Patch is not installed.");
+			}
+			var request = new Mojo.Service.Request(
+				"palm://com.palm.applicationManager", { 
+					method: "launch",
+					parameters: {
+						id: "com.palm.app.notes",
+						params: { newNoteText: arg }
+					}
+				}
+			);
+		}
+	},
+	"memo": "note",
+	"m": "note",
+	"n": "note",
+
+	"quicknote": {	// BUILTIN
+		title: "New Note (without launch)",
+		usage: "<var>text</var>",
+		example: "I like pie.",
+		description: "Quickly create a new note, without launching the Notes application.",
+		method: function (text) {
+			return this.quickNoteCommand(text);
+		}
+	},
+	"quickmemo": "quicknote",
+	"qmemo": "quicknote",
+	"qnote": "quicknote",
+	"qm": "quicknote",
+	"qn": "quicknote"
+});
+
diff --git a/usr/lib/luna/system/luna-applauncher/app/controllers/uscl/builtins/uscl-quickevent.js b/usr/lib/luna/system/luna-applauncher/app/controllers/uscl/builtins/uscl-quickevent.js
new file mode 100644
index 0000000..5677bd2
--- /dev/null
+++ b/usr/lib/luna/system/luna-applauncher/app/controllers/uscl/builtins/uscl-quickevent.js
@@ -0,0 +1,49 @@
+/*jslint browser: true, eqeqeq: true, undef: true */
+/*global Mojo, USCL */
+/******************************************************************************
+Lines above are for jslint, the JavaScript verifier.
+http://www.jslint.com/
+******************************************************************************/
+
+Object.extend(USCL.prototype, {
+	launchQuickEvent: function (entry) {
+		var appId = "com.palm.net.heden.webos.quickevent";
+		if (this.appInstalled[appId]) {
+			var request = new Mojo.Service.Request(
+				"palm://com.palm.applicationManager", {
+					method: "launch",
+					parameters: {
+						id: appId,
+						params: { entry: entry }
+					}
+				}
+			);
+		}
+		else {
+			throw new USCLError("You must install Quick Event " + 
+					    "(and restart Luna) to use this.");
+		}
+	}
+});
+
+Object.extend(USCL.prototype.builtinEntries, {
+	"quickevent": {
+		title: "Quick Event",
+		usage: [ "<small>" + 
+			 ".qe <var>evt</var> <var>time</var>-[<var>time</var>] [<var>date</var>] [@|in|at <var>loc</var>]<br />" +
+			 ".qe <var>evt</var> ad- [<var>date</var>] [@|in|at <var>loc</var>]" + 
+			 "</small>" ],
+		example: [
+			".qe Lunch 11am-12:15pm next wed at Hotel Astoria",
+			".qe Haircut 1500-1600 1/30 at Fred's",
+			".qe Valentine's Day ad- 2/14"
+		],
+		description: "If the Quick Event app (available through Preware) is installed, use it to add an event to your calendar.  " + 
+			"<kbd>ad-</kbd> indicates an all-day event.",
+		method: function (arg) {
+			return this.launchQuickEvent(arg);
+		}
+	},
+	"qe": "quickevent"
+});
+
diff --git a/usr/lib/luna/system/luna-applauncher/app/controllers/uscl/builtins/uscl-restart.js b/usr/lib/luna/system/luna-applauncher/app/controllers/uscl/builtins/uscl-restart.js
new file mode 100644
index 0000000..0f64de7
--- /dev/null
+++ b/usr/lib/luna/system/luna-applauncher/app/controllers/uscl/builtins/uscl-restart.js
@@ -0,0 +1,81 @@
+/*jslint browser: true, eqeqeq: true, undef: true */
+/*global Mojo, USCL, USCLError */
+/******************************************************************************
+Lines above are for jslint, the JavaScript verifier.
+http://www.jslint.com/
+******************************************************************************/
+
+Object.extend(USCL.prototype, {
+	restartCommand: function (arg) {
+		var r;
+		switch (arg) {
+		case "luna":
+			Mojo.Log.info("restart luna");
+			try {
+				r = new Mojo.Service.Request(
+					'luna://org.webosinternals.ipkgservice',
+					{ method: 'restartLuna' }
+				);
+			}
+			catch (e1) {
+				Mojo.Log.error("Error Restaring Luna: %s", e1.message);
+				throw new USCLError('Error Restarting Luna: ' +
+						    e1.message);
+			}
+			break;
+		case "java":
+			Mojo.Log.info("restart java");
+			try {
+				r = new Mojo.Service.Request(
+					'palm://org.webosinternals.ipkgservice',
+					{ method: 'restartJava' }
+				);
+			}
+			catch (e2) {
+				Mojo.Log.error("Error Restaring Java: %s", e2.message);
+				throw new USCLError('Error restarting Java: ' +
+						    e2.message);
+			}
+			this.bannerNotify("Restarting Java...");
+			break;
+		}
+	},
+
+	rescanCommand: function () {
+		try {
+			var r = new Mojo.Service.Request(
+				'palm://org.webosinternals.ipkgservice',
+				{ method: 'rescan' }
+			);
+		}
+		catch (e) {
+			throw new USCLError('Error Rescanning: ' + e.message);
+		}
+		this.bannerNotify("Rescanning...");
+	}
+});
+
+Object.extend(USCL.prototype.builtinEntries, {
+	"restart": {
+		excludeFromUniversalSearch: true,
+		title: "Restart Luna or Java",
+		usage: "<b>luna</b>|<b>java</b>",
+		description: ("Restarts the Luna system manager or Java services.  " +
+			      "Restarting Luna may (or may not) solve performance issues, " + 
+			      "including the &ldquo;Too Many Cards&rdquo; error.  " + 
+			      "You may wish to try <kbd>.gc</kbd> first, though."),
+		method: function (arg) {
+			return this.restartCommand(arg);
+		}
+	},
+	"rescan": {
+		excludeFromUniversalSearch: true,
+		argumentsOptional: true,
+		title: "Rescan Applications",
+		description: "Rescans the list of applications on your device.",
+		method: function () {
+			return this.rescanCommand();
+		}
+	}
+});
+
diff --git a/usr/lib/luna/system/luna-applauncher/app/controllers/uscl/builtins/uscl-sites.js b/usr/lib/luna/system/luna-applauncher/app/controllers/uscl/builtins/uscl-sites.js
new file mode 100644
index 0000000..bfe4e85
--- /dev/null
+++ b/usr/lib/luna/system/luna-applauncher/app/controllers/uscl/builtins/uscl-sites.js
@@ -0,0 +1,193 @@
+/*jslint browser: true, eqeqeq: true, undef: true */
+/*global USCL */
+/******************************************************************************
+Lines above are for jslint, the JavaScript verifier.  http://www.jslint.com/
+******************************************************************************/
+
+Object.extend(USCL.prototype.builtinEntries, {
+
+	"imdb": {
+		title: "IMDB.com",
+		usage: "<var>query</var>",
+		example: "the big lebowski",
+		description: ("Search movies, TV shows, actors, directors, " + 
+			      "producers, and more on IMDB.com."),
+		url: "http://m.imdb.com/find?q="
+	},
+	"i": "imdb", // keytoss alias
+
+	"dict": {
+		title: "Dictionary.com",
+		usage: "<var>word</var>",
+		example: "ebullient",
+		description: "Find a word on Dictionary.com.",
+		url: "http://m.reference.com/d/search.html?q="
+	},
+	"d": "dict",
+
+	"thes": {
+		title: "Thesaurus.com",
+		usage: "<var>word</var>",
+		example: "ebullient",
+		description: "Find a word on Thesaurus.com.",
+		url: "http://m.reference.com/t/search.html?q="
+	},
+	"th": "thes",
+
+	"ebay": {
+		title: "eBay",
+		usage: "<var>item</var>",
+		example: "mp3 player",
+		description: "Find something on eBay.com.",
+		url: "http://m.ebay.com/Pages/SearchResults.aspx?emvAD=320x320&emvcc=0&sv="
+	},
+	"e": "ebay", // keytoss alias
+
+	"yahoo": {
+		title: "Yahoo!",
+		usage: "<var>keywords</var>",
+		example: "laptop reviews",
+		description: "Search Yahoo!",
+		url: "http://m.yahoo.com/w/search/oneSearch?p="
+	},
+	"y": "yahoo",
+
+	"gis": {	
+		title: "Google Images",
+		usage: "<var>keywords</var>",
+		example: "pirate hat",
+		description: "Search Google Images.",
+		url: "http://www.google.com/m/search?client=ms-palm-webOS&channel=iss&site=images&q="
+	},
+	"gi": "gis", // keytoss alias
+	
+	"shop": {	
+		title: "Google Product Search",
+		usage: "<var>keywords</var>",
+		example: "palm pre",
+		description: "Search for prices on Google Products.",
+		url: "http://www.google.com/m/search?client=ms-palm-webOS&channel=iss&site=products&q="
+	},
+	"froogle": "shop",
+	"gp": "shop", // keytoss alias
+
+	"news": {	
+		title: "Google News Search",
+		usage: "<var>keywords</var>",
+		example: "obama",
+		description: "Search Google News.",
+		url: "http://www.google.com/m/search?client=ms-palm-webOS&channel=iss&site=news&q="
+	},
+	"gn": "news", // keytoss alias
+	
+	"google": {	// BUILTIN FOR COMPLETENESS
+		excludeFromUniversalSearch: true,
+		title: "Google",
+		usage: "<var>keywords</var>",
+		example: "hummus recipe",
+		description: "Search Google.",
+		url: "www.google.com/m/search?client=ms-palm-webOS&channel=iss&q="
+	},
+	"g": "google",
+
+	"amazon": {	
+		title: "Amazon",
+		usage: "<var>keywords</var>",
+		example: "i am america and so can you",
+		description: "Search for products on Amazon.com.",
+		url: "http://www.amazon.com/gp/aw/s/ref=is_box_?k="
+	},
+	"az": "amazon",
+	"am": "amazon", // keytoss alias
+
+	"wikipedia": {	// BUILTIN FOR COMPLETENESS
+		excludeFromUniversalSearch: true,
+		title: "Wikipedia",
+		usage: "<var>keywords</var>",
+		example: "isaac newton",
+		description: "Search Wikipedia, the online encyclopedia that anyone can edit.",
+		url: "http://en.m.wikipedia.org/wiki/Special:Search?search="
+	},
+	"wiki": "wikipedia",
+	"w": "wikipedia",
+
+	"wolfram": {	
+		title: "Wolfram Alpha",
+		usage: "<var>keywords</var>",
+		example: [
+			".wa June 23, 1988",
+			".wa new york",
+			".wa IBM Apple",
+			".wa $250 + 15%",
+			".wa x**2 sin(x)"
+		],
+		description: "Query something on Wolfram Alpha.  Dates, cities, stocks, and equations.  Go nuts!",
+		url: "http://www.wolframalpha.com/input/?i="
+	},
+	"wa": "wolfram",
+	
+	"youtube": {
+		"title": "YouTube",
+		"usage": "<var>keywords</var>",
+		"example": "petra haden the who",
+		"description": "Find videos on YouTube.",
+		"url": "http://m.youtube.com/results?is_adult=True&hl=en&gl=US&client=mv-google&q="
+	},
+	"yt": "youtube",
+
+	"precentral": {
+                "title": "Pre Central",
+                "usage": "<var>keyword</var> ...",
+                "example": "universal search",
+                "description": "Search PreCentral.net's mobile site.",
+                "url": "http://m.precentral.net/search/"
+	},
+	"pc": "precentral",
+
+	"webosroundup": {
+		"title": "webOS Roundup",
+		"usage": "<var>keyword</var> ...",
+                "example": "universal search",
+                "description": "Search webOS Roundup's mobile site.",
+                "url": "http://www.webosroundup.com/?s="
+	},
+	"wor": "webosroundup",
+
+	"twitter": {
+		"excludeFromUniversalSearch": true,
+		"title": "Twitter",
+		"usage": "<var>query</var>",
+		"example": [
+			"justin bieber",
+			"#webos"
+		],
+		"description": "Search recent messages posted on Twitter and see what's happening.",
+		"url": "http://search.twitter.com/search?q="
+	},
+	"tw": "twitter",
+
+	"keytoss": {	
+		title: "KeyToss",
+		usage: [
+			".keytoss <var>command</var> <var>keywords</var>",
+			".kt <var>command</var> <var>keywords</var>",
+			"..<var>command</var> <var>keywords</var>"
+		],
+		example: [
+			".keytoss af wtf",
+			".kt af omg",
+			"..af bbq"
+		],
+		description: ("Perform a search via the KeyToss mobile portal.<br />" + 
+			      "You do not need to type the at sign (<kbd>@</kbd>) before the <i>command</i>.<br />" + 
+			      "Use <nobr><kbd>.keywords|.kt kt list</kbd></nobr> or <nobr><kbd>..kt list</kbd></nobr> " + 
+			      "to get a list of commands to pass to KeyToss."),
+		preprocess: function (s) {
+			return s.replace(/^\s*@\s*/, "");
+		},
+		url: "http://pre.keytoss.com/parse.php5?pv=131&term=%40"
+	},
+	"kt": "keytoss"
+
+});
+
diff --git a/usr/lib/luna/system/luna-applauncher/app/controllers/uscl/builtins/uscl-system.js b/usr/lib/luna/system/luna-applauncher/app/controllers/uscl/builtins/uscl-system.js
new file mode 100644
index 0000000..b565a1f
--- /dev/null
+++ b/usr/lib/luna/system/luna-applauncher/app/controllers/uscl/builtins/uscl-system.js
@@ -0,0 +1,198 @@
+/*jslint browser: true, eqeqeq: true, undef: true */
+/*global USCL, Mojo, $H, USCLError */
+/******************************************************************************
+Lines above are for jslint, the JavaScript verifier.
+http://www.jslint.com/
+******************************************************************************/
+
+Object.extend(USCL.prototype, {
+	setServiceFlag: function (options) {
+		var that = this;
+
+		var parameters;
+		if ("parameters" in options) {
+			parameters = options.parameters;
+		}
+		else {
+			parameters = {};
+		}
+
+		if ("parameter" in options) {
+			parameters[options.parameter] = options.flag;
+		}
+		
+		var request = new Mojo.Service.Request(options.serviceID, {
+			method: options.method,
+			parameters: parameters,
+			onSuccess: function () {
+				that.bannerNotify("Successfully %s %s.".format(
+					options.flag ? "enabled" : "disabled",
+					options.name
+				));
+			},
+			onFailure: function (response) {
+				that.bannerNotify("Error %s %s: %s".format(
+					options.flag ? "enabling" : "disabling",
+					options.name,
+					response.errorText));
+				Mojo.Log.error("Error %s %s: %s",
+					       options.flag ? "enabling" : "disabling",
+					       options.name,
+					       response.errorText);
+			}
+		});
+	},
+	setLocationServiceFlag: function (options) {
+		return this.setServiceFlag(Object.extend({
+			serviceID: "palm://com.palm.location"
+		}, options));
+	}
+});
+
+Object.extend(USCL.prototype, {
+	setUseGps: function (flag) {
+		this.setLocationServiceFlag({
+			method: "setUseGps",
+			parameter: "useGps",
+			name: "GPS",
+			flag: flag
+		});
+	}
+});
+Object.extend(USCL.prototype.builtinEntries, {
+	"gps": {	// BUILTIN
+		excludeFromUniversalSearch: true,
+		title: "GPS On/Off",
+		usage: "on|off",
+		description: "Turns location using GPS on/off.",
+		method: function (arg) {
+			var flag = arg.toBoolean(USCLError);
+			this.setUseGps(flag);
+		}
+	}
+});
+
+Object.extend(USCL.prototype, {
+	setUseBackgroundDataCollection: function (flag) {
+		this.setLocationServiceFlag({
+			method: "setUseBackgroundDataCollection",
+			parameter: "useBackgroundDataCollection",
+			name: "Background Data Collection",
+			flag: flag
+		});
+	}
+});
+Object.extend(USCL.prototype.builtinEntries, {
+	"bgdata": {	// BUILTIN
+		excludeFromUniversalSearch: true,
+		title: "Background Data Collection On/Off",
+		usage: "on|off",
+		description: ("Turns background collection of data on/off.  " + 
+			      "This allows Google to collect anonymous location data " + 
+			      "to improve the quality of location services."),
+		method: function (arg) {
+			var flag = arg.toBoolean(USCLError);
+			this.setUseBackgroundDataCollection(flag);
+		}
+	}
+});
+
+Object.extend(USCL.prototype, {
+	setGeotagPhotos: function (flag) {
+		this.setLocationServiceFlag({
+			method: "setGeotagPhotos",
+			parameter: "geotagPhotos",
+			name: "Geotagging",
+			flag: flag
+		});
+	}
+});
+Object.extend(USCL.prototype.builtinEntries, {
+	"geotag": {	// BUILTIN
+		excludeFromUniversalSearch: true,
+		title: "Geotagging On/Off",
+		usage: "on|off",
+		description: ("Turns geotagging of photos on/off.  " + 
+			      "This only applies when Auto Locate is on."),
+		method: function (arg) {
+			var flag = arg.toBoolean(USCLError);
+			this.setGeotagPhotos(flag);
+		}
+	}
+});
+
+Object.extend(USCL.prototype, {
+	setAutoLocate: function (flag) {
+		this.setLocationServiceFlag({
+			method: "setAutoLocate",
+			parameter: "autoLocate",
+			name: "Auto-Locate",
+			flag: flag
+		});
+	}
+});
+Object.extend(USCL.prototype.builtinEntries, {
+	"autolocate": {	// BUILTIN
+		excludeFromUniversalSearch: true,
+		title: "Auto Locate On/Off",
+		usage: "on|off",
+		description: ("Turns auto location on/off.  " +
+			      "When Auto Locate is on, applications can automatically identify your location.  " +
+			      "When off, applications that use location data will ask if it's okay " + 
+			      "to identify your location for that particular session only."),
+		method: function (arg) {
+			var flag = arg.toBoolean(USCLError);
+			this.setAutoLocate(flag);
+		}
+	}
+});
+
+Object.extend(USCL.prototype, {
+	setUseGoogle: function (flag) {
+		this.setLocationServiceFlag({
+			method: "setUseGoogle",
+			parameter: "useGoogle",
+			name: "Google Location Services",
+			flag: flag
+		});
+	}
+});
+Object.extend(USCL.prototype.builtinEntries, {
+	"usegoogle": {	// BUILTIN
+		excludeFromUniversalSearch: true,
+		title: "Google Location Services On/Off",
+		usage: "on|off",
+		description: ("Turns location using Google Services on/off.  " +
+			      "This uses cell towers to roughly pinpoint your general location.  " + 
+			      "Accuracy will vary."),
+		method: function (arg) {
+			var flag = arg.toBoolean(USCLError);
+			this.setUseGoogle(flag);
+		}
+	}
+});
+
+Object.extend(USCL.prototype, {
+	garbageCollectCommand: function () {
+		this.bannerNotify("Garbage collecting...");
+		var request = new Mojo.Service.Request("palm://com.palm.lunastats", {
+			method: "gc",
+			parameters: { }
+		});
+	}
+});
+Object.extend(USCL.prototype.builtinEntries, {
+	"gc": {		// BUILTIN
+		excludeFromUniversalSearch: true,
+		argumentsOptional: true,
+		title: "Garbage Collect",
+		description: ("Garbage collect the JavaScript heap.  " + 
+			      "This may (or may not) solve performance issues, " + 
+			      "including the &ldquo;Too Many Cards&rdquo; error.  " + 
+			      "Failing that, you may wish to try <kbd>.restart luna</kbd>."),
+		method: function () {
+			return this.garbageCollectCommand();
+		}
+	}
+});
+
diff --git a/usr/lib/luna/system/luna-applauncher/app/controllers/uscl/builtins/uscl-tasks.js b/usr/lib/luna/system/luna-applauncher/app/controllers/uscl/builtins/uscl-tasks.js
new file mode 100644
index 0000000..eb89efa
--- /dev/null
+++ b/usr/lib/luna/system/luna-applauncher/app/controllers/uscl/builtins/uscl-tasks.js
@@ -0,0 +1,228 @@
+/*jslint browser: true, eqeqeq: true, undef: true */
+/*global Mojo, USCL, USCLError */
+/******************************************************************************
+Lines above are for jslint, the JavaScript verifier.
+http://www.jslint.com/
+******************************************************************************/
+
+Object.extend(USCL.prototype, {
+	createTaskList: function (name, callback) {
+		var that = this;
+		var request = new Mojo.Service.Request("palm://com.palm.tasks", {
+			method: "saveTaskList",
+			parameters: {
+				name: name
+			},
+			onComplete: function (response) {
+				Mojo.Log.info("NEW TASK LIST ID: %j", response.id);
+				if (callback) {
+					callback(response.id);
+				}
+			}
+		});
+	},
+
+	getOrCreateTaskList: function (name, callback) {
+		var that = this;
+		var request = new Mojo.Service.Request("palm://com.palm.tasks", {
+			method: "getTaskLists",
+			parameters: { },
+			onComplete: function (response) {
+				var list = response.list;
+				for (var i = 0; i < list.length; ++i) {
+					Mojo.Log.info("GETTASKLISTS [%j]: %j", i, list[i]);
+					if (list[i].name === name) {
+						Mojo.Log.info("EXISTING TASK LIST ID: %j", list[i].id);
+						if (callback) {
+							callback(list[i].id);
+						}
+						return;
+					}
+				}
+				that.createTaskList(name, callback);
+			}
+		});
+	},
+
+	createTask: function (taskListId, subject, callback) {
+		var request = new Mojo.Service.Request("palm://com.palm.tasks", {
+			method: "saveTask",
+			parameters: {
+				subject: subject,
+				taskListId: taskListId
+			},
+			onComplete: function (response) {
+				Mojo.Log.info("NEW TASK: taskListId = %j, id = %j, subject = %j",
+					      taskListId, response.id, subject);
+				if (callback) {
+					callback(taskListId, response.id);
+				}
+			}
+		});
+	},
+	
+	createTasks: function (taskListId, subjects, callback) {
+		var that = this;
+		var len = subjects.length;
+		var remaining = subjects.length;
+		var taskIds = [];
+		Mojo.Log.info("createTasks: remaining === %d", remaining);
+		for (var i = 0; i < len; i++) {
+			(function (i) {
+				that.createTask(taskListId, subjects[i],
+						function (taskListId, taskId) {
+							taskIds[i] = taskId;
+							Mojo.Log.info("taskIds[%d] === %d; taskIds.length = %d", i, taskId, taskIds.length);
+							remaining--;
+							Mojo.Log.info("createTasks: after decrement, remaining === %d", remaining);
+							if (remaining === 0) {
+								Mojo.Log.info("=== 0");
+								if (callback) {
+									Mojo.Log.info("there's a callback");
+									callback(taskListId, taskIds);
+								}
+							}
+						});
+			})(i);
+		}
+	},
+
+	taskCommand: function (options, args) {
+		var that = this;
+		var taskListName = (options && options.taskListName) ? 
+			options.taskListName : "Unfiled";
+		var onRunning = function (taskListId, taskIds) {
+			var params = { details: { show: {
+				taskListId: taskListId, 
+				taskId: taskIds[taskIds.length - 1]
+			} } };
+			var request = new Mojo.Service.Request(
+				"palm://com.palm.applicationManager", {
+					method: "launch",
+					parameters: {
+						id: "com.palm.app.tasks",
+						params: params
+					}
+				}
+			);
+		};
+		var onNotRunning = function (taskListId, taskIds) {
+			var params = { details: { show: {
+				taskListId: taskListId, 
+				taskId: taskIds[taskIds.length - 1]
+			} } };
+			if (options && options.launchTasks) {
+				var request = new Mojo.Service.Request(
+					"palm://com.palm.applicationManager", {
+						method: "launch",
+						parameters: {
+							id: "com.palm.app.tasks",
+							params: params
+						}
+					}
+				);
+			}
+		};
+		var onComplete = function (taskListId, taskIds) {
+			that.checkForAppRunning("com.palm.app.tasks",
+						onRunning.curry(taskListId, taskIds),
+						onNotRunning.curry(taskListId, taskIds));
+		};
+		that.getOrCreateTaskList(taskListName,
+					 function (taskListId) {
+						 that.createTasks(taskListId, args,
+								  onComplete);
+					 });
+	}
+});
+
+Object.extend(USCL.prototype.builtinEntries, {
+	"task": {
+		title: "New Task (launches Tasks app)",
+		usage: "[<var>option</var> ...] <var>task</var>; ...",
+		example: [
+			".task finish project foo; present proposal",
+			".task -s , -c Groceries skim milk, juice"
+		],
+		description: "Create one or more new tasks, and launch the Tasks application.",
+		options: [
+			{ synopsis: "-c <var>category</var>",
+			  description: "tasks are added to the specified category instead of &lsquo;Unfiled&rsquo;" },
+			{ synopsis: "-s <var>char</var>",
+			  description: "tasks are separated by the specified character (and any optional whitespace before and/or after) instead of the semicolon"
+			},
+			{ synopsis: "-s space",
+			  description: "tasks are separated by whitespace"
+			},
+			{ synopsis: "-s /<var>regex</var>/",
+			  description: "tasks are separated by the specified regular expression (you must supply the whitespace yourself)"
+			},
+			{ synopsis: "-q",
+			  description: "do not launch the Tasks application unless it&lsquo;s already launched"
+			}
+		],
+		method: function (arg) {
+			var args = arg.splitArguments();
+			var options = args.getopt("c:s:q", USCLError);
+			if ("c" in options) {
+				options.taskListName = options.c;
+				delete options.c;
+			}
+			if ("q" in options) {
+				options.launchTasks = false;
+				delete options.q;
+			}
+			else {
+				options.launchTasks = true;
+			}
+			arg = args.join(" ");
+
+			var rx;
+			if ("s" in options) {
+				if (options.s === "\\" ||
+				    options.s === "(" || options.s === ")" ||
+				    options.s === "[" || options.s === "]" ||
+				    options.s === "{" || options.s === "}" ||
+				    options.s === "." ||
+				    options.s === "|" ||
+				    options.s === "^" || options.s === "$" ||
+				    options.s === "+" || options.s === "?" ||
+				    options.s === "*") {
+					rx = new RegExp("\\s*\\" + options.s + "\\s*");
+				}
+				else if (options.s.length === 1) {
+					rx = new RegExp("\\s*" + options.s + "\\s*");
+				}
+				else if (options.s === "space") {
+					rx = /\s+/;
+				}
+				else if (/^\/(.*)\/$/) {
+					rx = RegExp.$1;
+					rx = new RegExp(rx);
+				}
+				else {
+					throw new USCLError("-s: invalid argument");
+				}
+			}
+			else {
+				rx = /\s*;\s*/;
+			}
+			args = arg.splitArguments(rx);
+			Mojo.Log.info("  re-split args: %j", args);
+			return this.taskCommand(options, args);
+		}
+	},
+	"todo": "task",
+	"t": "task",
+
+	"quicktask": {
+		title: "New Task (no launch)",
+		usage: "<var>task</var>; ...",
+		example: "finish project foo; present proposal",
+		description: "Create one or more new tasks without launching the Tasks application.  If Tasks is already launched, jump to it.  Accepts the same command-line options as <kbd>.task</kbd>.",
+		aliasedTo: ".task -q %s"
+	},
+	"quicktodo": "quicktask",
+	"qt": "quicktask"
+});
+
diff --git a/usr/lib/luna/system/luna-applauncher/app/controllers/uscl/builtins/uscl-wifi.js b/usr/lib/luna/system/luna-applauncher/app/controllers/uscl/builtins/uscl-wifi.js
new file mode 100644
index 0000000..c51eaa2
--- /dev/null
+++ b/usr/lib/luna/system/luna-applauncher/app/controllers/uscl/builtins/uscl-wifi.js
@@ -0,0 +1,33 @@
+/*jslint browser: true, eqeqeq: true, undef: true */
+/*global USCL, Mojo, $H, USCLError */
+/******************************************************************************
+Lines above are for jslint, the JavaScript verifier.
+http://www.jslint.com/
+******************************************************************************/
+
+Object.extend(USCL.prototype, {
+	setWiFi: function (flag) {
+		this.setServiceFlag({
+			serviceID: "palm://com.palm.wifi",
+			name: "Wi-Fi",
+			flag: flag,
+			method: "setstate",
+			parameters: { "state": (flag ?
+						"enabled" :
+						"disabled") }
+		});
+	}
+});
+Object.extend(USCL.prototype.builtinEntries, {
+	"wifi": {	// BUILTIN
+		excludeFromUniversalSearch: true,
+		title: "Wi-Fi On/Off",
+		usage: "on|off",
+		description: "Turns Wi-Fi on/off.",
+		method: function (arg) {
+			var flag = arg.toBoolean(USCLError);
+			this.setWiFi(flag);
+		}
+	}
+});
+
diff --git a/usr/lib/luna/system/luna-applauncher/app/controllers/uscl/getopt.js b/usr/lib/luna/system/luna-applauncher/app/controllers/uscl/getopt.js
new file mode 100644
index 0000000..ec7569d
--- /dev/null
+++ b/usr/lib/luna/system/luna-applauncher/app/controllers/uscl/getopt.js
@@ -0,0 +1,121 @@
+/*jslint browser: true, eqeqeq: false, undef: true */
+/******************************************************************************
+Lines above are for jslint, the JavaScript verifier.
+http://www.jslint.com/
+******************************************************************************/
+
+/*
+http://blog.fpmurphy.com/2010/02/javascript-shell-command-line-processing.html
+*/
+
+//
+//  getopt.js    Finnbarr P. Murphy March 2010
+//               modified by Darren Embry May 2010
+//
+//  Based on BSD getopt.c  Use subject to BSD license.
+//
+//  For details of how to use this function refer to
+//  the BSD man page for getopt(3). GNU-style long
+//  options are not supported.
+//
+
+function getopt(nargv, ostr)
+{
+	if ( typeof getopt.place == 'undefined' ) {
+		getopt.place = ""; // static string, option letter processing
+		getopt.iplace = 0; // index into string
+	}
+
+	var oli;		// option letter list index
+
+	if (getopt.optreset || getopt.iplace == getopt.place.length) {
+		getopt.optreset = false;
+		getopt.place = nargv[getopt.optind]; 
+		getopt.iplace = 0;
+		if (getopt.optind >= nargv.length || 
+		    getopt.place.charAt(getopt.iplace++) != "-") {
+			// argument is absent or is not an option
+			getopt.place = ""; 
+			getopt.iplace = 0;
+			return null;
+		}
+		getopt.optopt = getopt.place.charAt(getopt.iplace++);
+		if (getopt.optopt == '-' &&
+		    getopt.iplace == getopt.place.length) {
+			// "--" => end of options
+			++getopt.optind;
+			getopt.place = "";
+			getopt.iplace = 0;
+			return null;
+		}
+		if (getopt.optopt == 0) {
+			// Solitary '-', treat as a '-' option
+			getopt.place = "";
+			getopt.iplace = 0;
+			if (ostr.indexOf('-') == -1) {
+				return null;
+			}
+			getopt.optopt = '-';
+		}
+	}
+	else {
+		getopt.optopt = getopt.place.charAt(getopt.iplace++);
+	}
+		
+	// see if option letter is what is wanted
+	if (getopt.optopt == ':' ||
+	    (oli = ostr.indexOf(getopt.optopt)) == -1) {
+		if (getopt.iplace == getopt.place.length) {
+			++getopt.optind;
+		}
+		if (getopt.opterr && ostr.charAt(0) != ':') {
+			throw new Error("illegal option -- " + getopt.optopt);
+		}
+		return ('?');
+	}
+
+	// does this option require an argument?
+	if (ostr.charAt(oli + 1) != ':') {
+		// does not need argument
+		getopt.optarg = null;
+		if (getopt.iplace == getopt.place.length) {
+			++getopt.optind;
+		}
+	}
+	else {
+		//  Option-argument is either the rest of this argument
+		//  or the entire next argument.
+		if (getopt.iplace < getopt.place.length) {
+			getopt.optarg = getopt.place.substr(getopt.iplace);
+		}
+		else if (nargv.length > ++getopt.optind) {
+			getopt.optarg = nargv[getopt.optind];
+		}
+		else {
+			// option argument absent
+			getopt.place = "";
+			getopt.iplace = 0;
+			if (ostr.charAt(0) == ':') {
+				return (':');
+			}
+			if (getopt.opterr) {
+				throw new Error(
+					"option requires an argument -- " + 
+						getopt.optopt);
+			}
+			return('?');
+		}
+		getopt.place = "";
+		getopt.iplace = 0;
+		++getopt.optind;
+	}
+
+	return (getopt.optopt);
+}
+
+getopt.opterr   = true;	 // throw errors
+getopt.optind   = 0;	 // index into parent argv array
+getopt.optopt   = "";	 // character checked for validity
+getopt.optreset = false; // reset getopt
+getopt.optarg   = "";	 // option argument
+
diff --git a/usr/lib/luna/system/luna-applauncher/app/controllers/uscl/internal-docs/uscl-flow.txt b/usr/lib/luna/system/luna-applauncher/app/controllers/uscl/internal-docs/uscl-flow.txt
new file mode 100644
index 0000000..4023f00
--- /dev/null
+++ b/usr/lib/luna/system/luna-applauncher/app/controllers/uscl/internal-docs/uscl-flow.txt
@@ -0,0 +1,31 @@
+USE CASE 1	USE CASE 2	USE CASE 3
+----------------------- ----------------------- -----------------------
+user types something,	user types something	user types something
+then taps a search item containing a command,	containing a command,
+	then taps the cmd: item then hits Enter.
+
+"pizza 40204"	"pizza 40204 .maps"	"pizza 40204 .maps"
+	or ".maps pizza 40204"	or ".maps pizza 40204"
+
+GlobalSearchAssistant#	GlobalSearchAssistant#	GlobalSearchAssistant#
+onTapUSCL(event)	selectedSearch(event)	enterKeyAction()
+
+GlobalSearchAssistant#	GlobalSearchAssistant#	GlobalSearchAssistant#
+runUSCL({	runUSCL(	runUSCL(
+  "entry": entry,	  "pizza 40204 .maps"	  "pizza 40204 .maps"
+  "arg": "pizza 40204"	)	)
+})
+
+USCL#run(entry,	USCL#runString(cF)	USCL#runString(cF)
+  "pizza 40204")
+
+	USCL#run("maps",	USCL#run("maps",
+	  "pizza 40204")	  "pizza 40204")
+
+USCL#runEntry(entry,	USCL#runEntry(entry,	USCL#runEntry(entry,
+  "pizza 40204")	  "pizza 40204")	  "pizza 40204")
+
+# Local Variables: #
+# tab-stop-list: (24 48 72 96 120 144 168) #
+# tab-width: 24 #
+# End: #
diff --git a/usr/lib/luna/system/luna-applauncher/app/controllers/uscl/scratch.js b/usr/lib/luna/system/luna-applauncher/app/controllers/uscl/scratch.js
new file mode 100644
index 0000000..86b1156
--- /dev/null
+++ b/usr/lib/luna/system/luna-applauncher/app/controllers/uscl/scratch.js
@@ -0,0 +1,44 @@
+/*jslint browser: true, eqeqeq: true, undef: true */
+/******************************************************************************
+Lines above are for jslint, the JavaScript verifier.
+http://www.jslint.com/
+******************************************************************************/
+
+/* .calc */
+return USCL.Message({
+	title: "Error",
+	message: e
+});
+
+/* .maps */
+return USCL.GlobalSearchAssistantMethod(function () {
+	this.launchMap(arg);
+});
+
+/* .note */
+return USCL.Launch({
+	id: "com.palm.app.notes",
+	parameters: {
+		newNoteText: arg
+	}
+});
+
+/* .quicknote */
+...
+
+/* .quickevent */
+var appid = "com.palm.net.heden.webos.quickevent";
+if (this.isInstalled(appid)) {
+	return USCL.Launch({
+		id: appid,
+		parameters: { entry: arg }
+	});
+}
+else {
+	throw new USCLError("You do not have Quick Event installed.");
+}
+
+/* .task */
+
+/* .quicktask */
+
diff --git a/usr/lib/luna/system/luna-applauncher/app/controllers/uscl/uscl-about.js b/usr/lib/luna/system/luna-applauncher/app/controllers/uscl/uscl-about.js
new file mode 100644
index 0000000..221394f
--- /dev/null
+++ b/usr/lib/luna/system/luna-applauncher/app/controllers/uscl/uscl-about.js
@@ -0,0 +1,14 @@
+/*jslint browser: true, eqeqeq: true, undef: true */
+/*global Class */
+/******************************************************************************
+Lines above are for jslint, the JavaScript verifier.  http://www.jslint.com/
+******************************************************************************/
+
+var UsclAboutAssistant = Class.create({
+	"setup": function () {
+		var body = (this.controller.stageController.
+			    document.getElementsByTagName("body"));
+		body[0].addClassName("uscl-body");
+	}
+});
+
diff --git a/usr/lib/luna/system/luna-applauncher/app/controllers/uscl/uscl-help-command-list.js b/usr/lib/luna/system/luna-applauncher/app/controllers/uscl/uscl-help-command-list.js
new file mode 100644
index 0000000..a74bf4b
--- /dev/null
+++ b/usr/lib/luna/system/luna-applauncher/app/controllers/uscl/uscl-help-command-list.js
@@ -0,0 +1,63 @@
+/*jslint browser: true, eqeqeq: true, undef: true */
+/*global Mojo */
+/******************************************************************************
+Lines above are for jslint, the JavaScript verifier.
+http://www.jslint.com/
+******************************************************************************/
+
+function UsclHelpCommandListAssistant (params) {
+	this.uscl = params.uscl;
+}
+
+UsclHelpCommandListAssistant.prototype.setup = function () {
+	this.stageController = this.controller.stageController;
+	this.items = this.uscl.getHelpCommandList();
+	this.controller.setupWidget("command-list", {
+		listTemplate: "uscl-help-command-list/templates/list",
+		itemTemplate: "uscl-help-command-list/templates/item",
+		swipeToDelete: false,
+		reorderable: false,
+		renderLimit: this.items.length
+	}, this.itemsModel = {
+		items: this.items
+	});
+	this.showCommandHandler = this.showCommandTap.bindAsEventListener(this);
+	this.controller.listen("command-list", Mojo.Event.listTap,
+			       this.showCommandHandler);
+	
+	var body = this.stageController.document.getElementsByTagName("body");
+	body[0].addClassName("uscl-body");
+};
+
+UsclHelpCommandListAssistant.prototype.activate = function () {
+	this.showNextCommand();
+};
+
+UsclHelpCommandListAssistant.prototype.showCommandTap = function (event) {
+	this.stageController.pushScene("uscl-help-command-view", {
+		items: this.items,
+		index: event.index
+	});
+};
+
+UsclHelpCommandListAssistant.prototype.showNextCommand = function () {
+	if (this.uscl.nextEntryToShow !== undefined &&
+	    this.uscl.nextEntryToShow !== null) {
+		this.showEntry(this.uscl.nextEntryToShow);
+		this.uscl.nextEntryToShow = null;
+	}
+};
+
+UsclHelpCommandListAssistant.prototype.showEntry = function (entry) {
+	if (entry) {
+		this.stageController.pushScene("uscl-help-command-view", {
+			item: entry
+		});
+	}
+};
+
+UsclHelpCommandListAssistant.prototype.cleanup = function () {
+	this.controller.stopListening("command-list", Mojo.Event.listTap,
+				      this.showCommandHandler);
+};
+
diff --git a/usr/lib/luna/system/luna-applauncher/app/controllers/uscl/uscl-help-command-view.js b/usr/lib/luna/system/luna-applauncher/app/controllers/uscl/uscl-help-command-view.js
new file mode 100644
index 0000000..f592d8d
--- /dev/null
+++ b/usr/lib/luna/system/luna-applauncher/app/controllers/uscl/uscl-help-command-view.js
@@ -0,0 +1,86 @@
+/*jslint browser: true, eqeqeq: true, undef: true */
+/*global Mojo */
+/******************************************************************************
+Lines above are for jslint, the JavaScript verifier.
+http://www.jslint.com/
+******************************************************************************/
+
+function UsclHelpCommandViewAssistant (params) {
+	if ("items" in params && "index" in params) {
+		this.items = params.items;
+		this.item = this.items[params.index];
+	}
+	else if ("item" in params) {
+		this.item = params.item;
+	}
+}
+
+UsclHelpCommandViewAssistant.prototype.setup = function () {
+	this.stageController = this.controller.stageController;
+	this.controller.get("title").innerHTML =
+		this.item.title;
+	this.controller.get("description").innerHTML =
+		this.item.description;
+
+	if (this.item.aka && this.item.aka.length) {
+		this.controller.get("aka").innerHTML =
+			this.item.aka.map(function (s) {
+				return "<kbd class='alias'>." + s + "</kbd>";
+			}).joinAnd();
+	}
+	else {
+		this.controller.get("akaDiv").hide();
+	}
+
+	if ("usage" in this.item) {
+		if (typeof(this.item.usage) === "object" &&
+		    this.item.usage.constructor === Array) {
+			this.controller.get("usage").innerHTML =
+				"<br />" +
+				this.item.usage.join("<br />");
+		}
+		else {
+			this.controller.get("usage").innerHTML =
+				"." + this.item.commandName + " " +
+				this.item.usage;
+		}
+	}
+	else {
+		this.controller.get("usage").innerHTML = 
+			"." + this.item.commandName;
+	}
+
+	if ("options" in this.item) {
+		var dl = this.controller.get("options");
+		this.item.options.forEach(function (option) {
+			dl.innerHTML += "<dt><kbd>" + option.synopsis + "</kbd></dt>" +
+				"<dd>" + option.description + "</dd>";
+		});
+	}
+	else {
+		this.controller.get("optionsDiv").hide();
+	}
+
+	if ("example" in this.item) {
+		if (typeof(this.item.example) === "object" &&
+		    this.item.example.constructor === Array) {
+			this.controller.get("example-title").innerHTML =
+				"Examples";
+			this.controller.get("example").innerHTML =
+				"<br />" +
+				this.item.example.join("<br />");
+		}
+		else {
+			this.controller.get("example").innerHTML =
+				"." + this.item.commandName + " " +
+				this.item.example;
+		}
+	}
+	else {
+		this.controller.get("exampleDiv").hide();
+	}
+
+	var body = this.stageController.document.getElementsByTagName("body");
+	body[0].addClassName("uscl-body");
+};
+
diff --git a/usr/lib/luna/system/luna-applauncher/app/controllers/uscl/uscl.js b/usr/lib/luna/system/luna-applauncher/app/controllers/uscl/uscl.js
new file mode 100644
index 0000000..4801dcc
--- /dev/null
+++ b/usr/lib/luna/system/luna-applauncher/app/controllers/uscl/uscl.js
@@ -0,0 +1,785 @@
+/*jslint browser: true, eqeqeq: true, undef: true */
+/*global Mojo, Class, Ajax, $H, PalmSystem */
+/******************************************************************************
+Lines above are for jslint, the JavaScript verifier.
+http://www.jslint.com/
+******************************************************************************/
+
+//-----------------------------------------------------------------------------
+// A special exception class for errors.
+//-----------------------------------------------------------------------------
+
+var USCLError = function (message) {
+	Error.apply(this, arguments);
+	this.message = message; // ugh, why on Earth do I have to do this?
+};
+USCLError.prototype = new Error();
+USCLError.prototype.constructor = USCLError;
+USCLError.prototype.name = "USCLError";
+
+//*****************************************************************************
+// The good stuff lies here.
+//*****************************************************************************
+
+var USCL = Class.create({});
+
+USCL.DEFAULT_SHOW_STATE = true;
+USCL.MOJO_DEPOT_NAME = "uscl"; // "uscl";
+
+Object.extend(USCL.prototype, {
+
+	//---------------------------------------------------------------------
+	// Initialization
+	//---------------------------------------------------------------------
+
+	initialize: function () {
+		this.entries = Object.clone(this.builtinEntries);
+		this.inEmulator = /desktop/.test(PalmSystem.version);
+		this.build();
+		this.show = USCL.DEFAULT_SHOW_STATE;
+		this.loadPreferences();
+		this.hiddenFlags = {};
+		this.updateLocalCommands();
+		this.data = {};
+	},
+
+	loadPreferences: function () {
+		this.db = new Mojo.Depot({ name: USCL.MOJO_DEPOT_NAME,
+					   replace: false },
+					 this.onLoadDatabase.bind(this),
+					 function () { /* don't care */ });
+	},
+	
+	onLoadDatabase: function () {
+		var that = this;
+		this.db.get("show", 
+			    function (o) {
+				    if (o === null || o === undefined) {
+					    o = USCL.DEFAULT_SHOW_STATE;
+				    }
+				    that.show = o;
+			    },
+			    function () {
+				    that.show = USCL.DEFAULT_SHOW_STATE;
+			    });
+		this.db.get("hiddenFlags", 
+			    function (o) { that.hiddenFlags = o || {}; },
+			    function () { that.hiddenFlags = {}; });
+	},
+
+	setShow: function (flag) {
+		this.show = flag;
+		this.db.add("show", this.show, 
+			    function () { /* don't care */ },
+			    function () { /* don't care */ });
+	},
+
+	saveHiddenFlags: function () {
+		this.db.add("hiddenFlags", this.hiddenFlags,
+			    function () { /* don't care */ },
+			    function () { /* don't care */ });
+	},
+	
+	build: function () {
+		this.fixTitles();
+		this.buildSupportingAppList();
+	},
+
+	fixTitles: function () {
+		var commandName;
+		var entry;
+		for (commandName in this.entries) {
+			if (this.entries.hasOwnProperty(commandName)) {
+				entry = this.entries[commandName];
+				if (typeof(entry) === "object") {
+					if (!("title" in entry)) {
+						entry.title = commandName;
+					}
+					entry.titleSort = entry.title.toLowerCase();
+				}
+			}
+		}
+	},
+
+	buildSupportingAppList: function () {
+		this.apps = {};
+		this.appListRequest = 
+			new Mojo.Service.Request("palm://com.palm.applicationManager", {
+				method: 'searchApps',
+				parameters: {'keyword': 'iGrokTheCommandLine'},
+				onSuccess: this.handleSupportingAppResults.bind(this, "iGrokTheCommandLine"),
+				onFailure: this.handleSupportingAppResults.bind(this, "iGrokTheCommandLine")
+			});
+		this.appListRequest2 = 
+			new Mojo.Service.Request("palm://com.palm.applicationManager", {
+				method: 'searchApps',
+				parameters: {'keyword': 'iCanBeRefreshed'},
+				onSuccess: this.handleSupportingAppResults.bind(this, "iCanBeRefreshed"),
+				onFailure: this.handleSupportingAppResults.bind(this, "iCanBeRefreshed")
+			});
+		this.appListRequest3 =
+			new Mojo.Service.Request("palm://com.palm.applicationManager", {
+				method: 'listApps',
+				parameters: {},
+				onSuccess: this.handleInstalledApp.bind(this),
+				onFailure: this.handleInstalledApp.bind(this)
+			});
+	},
+
+	handleInstalledApp: function (response) {
+		var that = this;
+		var apps = response.apps;
+		if (!apps) { return; }
+		this.appInstalled = {};
+		apps.forEach(function (app) {
+			that.appInstalled[app.id] = true;
+		});
+	},
+
+	handleSupportingAppResults: function (keyword, response) {
+		var that = this;
+		var apps = response.apps;
+		if (!apps) { return; }
+		this.apps[keyword] = {};
+		apps.forEach(function (app) {
+			var id = app.id;
+			var appid = app.launchPoint.replace(/_default$/, "");
+			that.apps[keyword][appid] = true;
+		});
+	},
+
+	//---------------------------------------------------------------------
+	// hidden flags
+	//---------------------------------------------------------------------
+
+	clearAllHiddenFlags: function () {
+		this.hiddenFlags = {};
+		this.saveHiddenFlags();
+	},
+	
+	setHiddenFlags: function (a) {
+		var warnings = [];
+		a.forEach(function (command) {
+			command = command.replace(/^\./, "").toLowerCase();
+			var finalCommand = this.unalias(command);
+			if (finalCommand) {
+				this.hiddenFlags[finalCommand] = true;
+			}
+			else {
+				warnings.push("." + command);
+			}
+		}, this);
+		this.saveHiddenFlags();
+		return warnings;
+	},
+
+	clearHiddenFlags: function (a) {
+		var warnings = [];
+		a.forEach(function (command) {
+			command = command.replace(/^\./, "").toLowerCase();
+			var finalCommand = this.unalias(command);
+			if (finalCommand) {
+				delete this.hiddenFlags[finalCommand];
+			}
+			else {
+				warnings.push("." + command);
+			}
+		}, this);
+		this.saveHiddenFlags();
+		return warnings;
+	},
+
+	//---------------------------------------------------------------------
+
+	checkForAppRunning: function (appid, onRunning, onNotRunning) {
+		var checkIfRunning = function (event) {
+			var isRunning = false;
+			event.documents.forEach2(function (d) {
+				var a = d.appId.split(/\s+/);
+				if (a && a.length && a[0] === appid) {
+					isRunning = true;
+					return false;
+				}
+			});
+			if (isRunning) {
+				if (onRunning) {
+					onRunning();
+				}
+			}
+			else {
+				if (onNotRunning) {
+					onNotRunning();
+				}
+			}
+		};
+		var request = new Mojo.Service.Request("palm://com.palm.lunastats", {
+			method: "getStats",
+			parameters: {},
+			onSuccess: checkIfRunning,
+			onFailure: function (event) {
+				if (event.documents) {
+					checkIfRunning(event);
+				}
+			}
+		});
+	},
+	
+	//---------------------------------------------------------------------
+	// .show; .hide
+	//---------------------------------------------------------------------
+
+	showCommand: function (args) {
+		if (args && args.length === 1 && args[0] === "all") {
+			this.clearAllHiddenFlags();
+			return undefined;
+		}
+		else if (args && args.length) {
+			var warnings = this.clearHiddenFlags(args);
+			if (warnings && warnings.length) {
+				return {
+					title: "Warning",
+					message: "The following commands do not exist: " + warnings.join(", ")
+				};
+			}
+			else {
+				return undefined;
+			}
+		}
+		else {
+			this.setShow(true);
+			return {
+				title: "Show Additional Searches",
+				message: "Additional searches will now appear in Universal Search."
+			};
+		}
+	},
+
+	hideCommand: function (args) {
+		if (args && args.length) {
+			var warnings = this.setHiddenFlags(args);
+			if (warnings && warnings.length) {
+				return {
+					title: "Warning",
+					message: "The following commands do not exist: " + warnings.join(", ")
+				};
+			}
+			else {
+				return undefined;
+			}
+		}
+		else {
+			this.setShow(false);
+			return {
+				title: "Hide Additional Searches",
+				message: "Additional searches will no longer appear in Universal Search."
+			};
+		}
+	},
+
+	//---------------------------------------------------------------------
+	// Builtin Commands
+	//---------------------------------------------------------------------
+
+	builtinEntries: {
+		"show": {	// BUILTIN
+			excludeFromUniversalSearch: true,
+			argumentsOptional: true,
+			title: "Show Additional Searches",
+			usage: [
+				"<kbd>.show</kbd>",
+				"<kbd>.show</kbd> <var>cmd</var> ...",
+				"<kbd>.show all</kbd>"
+			],
+			description: ("Use <kbd>.show</kbd> without arguments to show additional searches on the Universal Search screen.<br />" +
+				      "Use <kbd>.show <var>cmd</var> ...</kbd> to un-hide the specified commands when additional searches are shown " +
+				      "(does not apply when <kbd>.hide</kbd> without arguments is used to hide all searches).<br />" +
+				      "Use <kbd>.show all</kbd> to un-hide all commands when additional searches are shown.<br />" +
+				      "See also <kbd>.hide</kbd>."),
+			method: function (arg) {
+				var args = arg.splitArguments();
+				return this.showCommand(args);
+			}
+		},
+		"hide": {	// BUILTIN
+			excludeFromUniversalSearch: true,
+			argumentsOptional: true,
+			title: "Hide Additional Searches",
+			usage: [
+				"<kbd>.hide</kbd>",
+				"<kbd>.hide</kbd> <var>cmd</var> <var>cmd</var> ..."
+			],
+			description: ("Use <kbd>.hide</kbd> without arguments to hide additional searches from the Universal Search screen.<br />" + 
+				      "Use <kbd>.hide <var>cmd</var> ...</kbd> to hide the specified commands when additional searches are shown.<br />" +
+				      "See also <kbd>.show</kbd>."),
+			method: function (arg) {
+				var args = arg.splitArguments();
+				return this.hideCommand(args);
+			}
+		},
+		"update": {	// BUILTIN
+			excludeFromUniversalSearch: true,
+			title: "Update User-Defined Commands",
+			argumentsOptional: true,
+			description: ("If <tt>uscl.json</tt> on the root directory of the USB Drive partition " + 
+				      "on this device is modified, added, or removed, use this command to update Universal Search Command Line."),
+			method: function () {
+				this.updateLocalCommands();
+			}
+		},
+		"help": {	// BUILTIN
+			excludeFromUniversalSearch: true,
+			title: "Help",
+			excludeFromHelp: true,
+			argumentsOptional: true,
+			method: function (arg) {
+				var args = arg.splitArguments();
+				this.showHelp(args.length ? args[0] : undefined);
+			}
+		},
+		"about": {
+			excludeFromUniversalSearch: true,
+			title: "About USCL",
+			description: "Displays information about Universal Search Command Line.",
+			argumentsOptional: true,
+			method: function () {
+				this.showAbout();
+			}
+		}
+	},
+
+	//---------------------------------------------------------------------
+	// For handling /media/internal/uscl.json and
+	// /media/internal/uscl/sources.json
+	//---------------------------------------------------------------------
+
+	LOCAL_FILE:   "/media/internal/uscl.json", // v.1
+	SOURCES_FILE: "/media/internal/uscl/sources.json", // v.2
+
+	updateLocalCommands: function () {
+		var that = this;
+		var reqs = 2;
+
+		this.deleteLocalCommands();
+
+		var onCompleteAll = function () {
+			Mojo.Log.info("USCL#updateLocalCommands: ALL REQUESTS COMPLETE\n");
+			that.fixTitles();
+		};
+		var onComplete = function (file, response) {
+			Mojo.Log.info("USCL#updateLocalCommands: COMPLETED: %s", file);
+			reqs -= 1;
+			if (reqs === 0) {
+				onCompleteAll();
+			}
+		};
+		var onFailure = function (file, response) {
+			Mojo.Log.error("USCL#updateLocalCommands: FAILURE: %s: %s", file, response.statusText);
+		};
+		
+		Mojo.Log.info("USCL#updateLocalCommands: STARTING REQUESTS\n");
+		Mojo.Log.info("USCL#updateLocalCommands: requesting %s", this.SOURCES_FILE);
+		var r1 = new Ajax.Request(this.SOURCES_FILE, {
+			method: "get",
+			onSuccess: function (response) {
+				if (response.responseText === "") {
+					Mojo.Log.info("USCL#updateLocalCommands: NOT FOUND OR EMPTY: %s", that.SOURCES_FILE); // ugh
+					return;
+				}
+				Mojo.Log.info("USCL#updateLocalCommands: SUCCESS: %s", that.SOURCES_FILE);
+				var result;
+				try {
+					result = response.responseText.evalJSON({ sanitize: true });
+				}
+				catch (e) {
+					Mojo.Log.error("USCL#updateLocalCommands: EXCEPTION: %s: %s",
+						       that.SOURCES_FILE, e);
+				}
+				if (!result) {
+					return;
+				}
+
+				reqs += result.length;
+				result.forEach(function (entry) {
+					var source = entry.source;
+					Mojo.Log.info("USCL#updateLocalCommands: requesting %s", source);
+
+					var r = new Ajax.Request(source, {
+						method: "get",
+						onSuccess: function (response) {
+							if (response.responseText === "") {
+								Mojo.Log.info("USCL#updateLocalCommands: NOT FOUND OR EMPTY: %s", source); // ugh
+								return;
+							}
+							Mojo.Log.info("USCL#updateLocalCommands: SUCCESS: %s", source);
+							var addEntries = that.addEntries.bind(that);
+							try {
+								var evil = function () {
+									eval(response.responseText);
+								};	
+								evil.apply(that);
+							}
+							catch (e) {
+								Mojo.Log.error("USCL#updateLocalCommands: EXCEPTION: %s: %s",
+									       source, e);
+							}
+						},
+						onFailure:  onFailure.curry(source),
+						onComplete: onComplete.curry(source)
+					});
+				});
+			},
+			onFailure:  onFailure.curry(this.SOURCES_FILE),
+			onComplete: onComplete.curry(this.SOURCES_FILE)
+		});
+
+		Mojo.Log.info("USCL#updateLocalCommands: requesting %s", this.LOCAL_FILE);
+		var r2 = new Ajax.Request(this.LOCAL_FILE, {
+			method: "get",
+			onSuccess: function (response) {
+				if (response.responseText === "") {
+					Mojo.Log.info("USCL#updateLocalCommands: NOT FOUND OR EMPTY: %s", that.LOCAL_FILE); // ugh
+					return;
+				}
+				Mojo.Log.info("USCL#updateLocalCommands: SUCCESS: %s", that.LOCAL_FILE);
+				var result;
+				try {
+					result = response.responseText.evalJSON({ sanitize: true });
+				}
+				catch (e) {
+					Mojo.Log.error("USCL#updateLocalCommands: EXCEPTION: %s: %s",
+						       that.LOCAL_FILE, e);
+				}
+				if (!result) {
+					return;
+				}
+				that.mergeLocalCommands(result);
+			},
+			onFailure:  onFailure.curry(this.LOCAL_FILE),
+			onComplete: onComplete.curry(this.LOCAL_FILE)
+		});
+	},
+	
+	deleteLocalCommands: function () {
+		this.entries = Object.clone(this.builtinEntries);
+	},
+
+	mergeLocalCommands: function (o) {
+		if (o && o.entries) {
+			this.addEntries(o.entries);
+		}
+		else {
+			this.addEntries(o);
+		}
+	},
+
+	addEntries: function (o) {
+		for (var command in o) {
+			if (o.hasOwnProperty(command)) {
+				if (command in this.builtinEntries) {
+					// don't override builtins.
+					Mojo.Log.info("USCL#mergeLocalCommands: not merging %s", command);
+				}
+				else {
+					Mojo.Log.info("USCL#mergeLocalCommands: merging %s", command);
+					this.entries[command] = o[command];
+				}
+			}
+		}
+		this.fixTitles();
+	},
+
+	//---------------------------------------------------------------------
+	// Command Interpretation
+	//---------------------------------------------------------------------
+
+	rawGetEntry: function (commandName) {
+		if (commandName in this.entries) {
+			return this.entries[commandName];
+		}
+		return undefined;
+	},
+
+	getEntry: function (commandName) {
+		var entry = this.rawGetEntry(commandName);
+		while (entry && entry.constructor === String) {
+			entry = this.entries[entry];
+		}
+		if (!entry) {
+			return undefined;
+		}
+		return entry;
+	},
+
+	unalias: function (commandName) {
+		var entry = this.rawGetEntry(commandName);
+		while (entry && entry.constructor === String) {
+			commandName = entry;
+			entry = this.entries[entry];
+		}
+		if (!entry) {
+			return undefined;
+		}
+		return commandName;
+	},
+
+	runEntry: function (entry, arg) {
+		if (entry.preprocess) {
+			arg = entry.preprocess.apply(this, [arg]);
+		}
+		if (!/\S/.test(arg) && !entry.argumentsOptional) {
+			throw new USCLError("No arguments specified.");
+		}
+
+		if (entry.method) {
+			var result = entry.method.apply(this, [arg]);
+			return result;
+		}
+		else if (entry.url) {
+			var url = entry.url + encodeURIComponent(arg.trim());
+			this.globalSearchAssistant.launchBrowser(url);
+		}
+		else if (entry.aliasedTo) {
+			return this.runString(entry.aliasedTo.replace(/\%s/, arg));
+		}
+		else {
+			throw new USCLError("Command not implemented.");
+		}
+	},
+	
+	run: function (what, arg) {
+		var commandName;
+		var entry;
+		try {
+			if (typeof(what) === "object") {
+				commandName = what.commandName;
+				return this.runEntry(what, arg);
+			}
+			else {
+				commandName = what;
+				entry = this.getEntry(commandName);
+				if (!entry) {
+					throw new USCLError("Command not found.");
+				}
+				else {
+					return this.runEntry(entry, arg);
+				}
+			}
+		}
+		catch (error) {
+			if (error instanceof USCLError) {
+				throw new USCLError("." + commandName + ": " +
+						    error.message);
+			}
+			else {
+				throw error;
+			}
+		}
+	},
+
+	parseString: function (s) {
+		var arg, commandName;
+		if (/^\s*\.\.(\S.*)$/.test(s)) {
+			// ..<keytoss-command> <args>
+			arg = RegExp.$1;
+			return ["keytoss", arg];
+		}
+		else if (/^\s*\.(\S+)\s*(.*)$/.test(s)) {
+			// .<uscl-command> <args>
+			commandName = RegExp.$1;
+			arg         = RegExp.$2;
+			return [commandName, arg];
+		}
+		else if (/^(.*?)\s+\.\.(\S+)\s*$/.test(s)) {
+			// <args> ..<keytoss-command>
+			arg = RegExp.$2 + " " + RegExp.$1;
+			return ["keytoss", arg];
+		}
+		else if (/^(.*?)\s+\.(\S+)\s*$/.test(s)) {
+			// <args> .<uscl-command>
+			commandName = RegExp.$2;
+			arg         = RegExp.$1;
+			return [commandName, arg];
+		}
+		else {
+			return false;
+		}
+	},
+
+	runString: function (s) {
+		var parsed = this.parseString(s);
+		if (!parsed) {
+			throw new USCLError("No command supplied.");
+		}
+		return this.run(parsed[0], parsed[1]);
+	},
+	
+	isCommandString: function (s) {
+		return !!this.parseString(s);
+	},
+
+	//---------------------------------------------------------------------
+	// Help
+	//---------------------------------------------------------------------
+
+	getHelpCommandList: function () {
+		var that = this;
+
+		Mojo.Log.info("USCL: getHelpCommandList");
+		var commandName;
+		var entry;
+		var realEntry;
+		var result = [];
+		for (commandName in this.entries) {
+			if (this.entries.hasOwnProperty(commandName)) {
+				entry = this.entries[commandName];
+				
+				if (typeof(entry) !== "object") {
+					continue;
+				}
+				if (entry.excludeFromHelp) {
+					continue;
+				}
+				if (entry.emulatorOnly && !this.inEmulator) {
+					continue;
+				}
+				
+				result.push(entry);
+				entry.isIncluded = true;
+				entry.aka = [];
+				entry.commandName = commandName;
+			}
+		}
+		for (commandName in this.entries) {
+			if (this.entries.hasOwnProperty(commandName)) {
+				entry = this.entries[commandName];
+				if (entry.constructor === String) {
+					realEntry = this.getEntry(commandName);
+					if (realEntry.isIncluded) {
+						realEntry.aka.push(commandName);
+					}
+				}
+			}
+		}
+		result.forEach(function (entry) {
+			entry.aka.sort();
+		});
+		result.sort(function (a, b) {
+			return ((a.titleSort < b.titleSort) ? -1 : 
+				(a.titleSort > b.titleSort) ? 1 : 0);
+		});
+		Mojo.Log.info("RESULT: %j", result);
+		return result;
+	},
+
+	showAbout: function () {
+		var stageController = (Mojo.Controller.appController.
+				       getStageController("uscl-about"));
+		if (stageController) {
+			stageController.activate();
+		}
+		else {
+			var stageArguments = {
+				name: "uscl-about",
+				lightweight: true
+			};
+			var pushScene = function (stageController) {
+				stageController.pushScene("uscl-about");
+			};
+			Mojo.Controller.appController.createStageWithCallback(
+				stageArguments, pushScene, "card");
+		}
+	},
+
+	showHelp: function (command) {
+		var that = this;
+		var stageController = Mojo.Controller.appController.getStageController("uscl-help");
+
+		if (command !== undefined) {
+			command = command.replace(/^\./, "");
+			var entry = this.getEntry(command);
+			if (!entry || (entry.emulatorOnly && !this.inEmulator)) {
+				throw new USCLError("." + command + ": no such command");
+			}
+			if (entry.excludeFromHelp) {
+				throw new USCLError("." + command + ": no help available");
+			}
+			this.nextEntryToShow = entry;
+		}
+		else {
+			this.nextEntryToShow = null;
+		}
+
+		if (stageController) {
+			var scenes = stageController.getScenes();
+			if (!(scenes && scenes.length === 1)) {
+				// doing this if the top scene is
+				// already the one we want causes an
+				// unwanted transition effect.
+				stageController.popScenesTo("uscl-help-command-list");
+			}
+			else {
+				// since assistant's activate() method
+				// is not triggered, we do it here.
+				stageController.delegateToSceneAssistant("showNextCommand");
+			}
+			stageController.activate();
+		}
+		else {
+			var stageArguments = {
+				name: "uscl-help",
+				lightweight: true
+			};
+			var pushScene = function (stageController) {
+				stageController.pushScene("uscl-help-command-list",
+							  { uscl: that });
+			};
+			Mojo.Controller.appController.createStageWithCallback(
+				stageArguments, pushScene, "card");
+		}
+	},
+
+	getUniversalSearchCommandList: function () {
+		Mojo.Log.info("USCL: getUniversalSearchCommandList");
+		var commandName;
+		var entry;
+		var result = [];
+		for (commandName in this.entries) {
+			if (this.entries.hasOwnProperty(commandName)) {
+				entry = this.entries[commandName];
+
+				if (typeof(entry) !== "object") {
+					continue;
+				}
+				if (entry.excludeFromUniversalSearch) {
+					continue;
+				}
+				if (entry.emulatorOnly && !this.inEmulator) {
+					continue;
+				}
+				if (this.hiddenFlags[commandName]) {
+					/* .hide <cmd> */
+					continue;
+				}
+
+				result.push(entry);
+			}
+		}
+		result.sort(function (a, b) {
+			return ((a.titleSort < b.titleSort) ? -1 : 
+				(a.titleSort > b.titleSort) ? 1 : 0);
+		});
+		return result;
+	},
+
+	//---------------------------------------------------------------------
+	// Utility
+	//---------------------------------------------------------------------
+
+	bannerNotify: function (message) {
+		Mojo.Controller.appController.showBanner({
+			messageText: message
+		}, "", "uscl");
+	}
+
+});
+
diff --git a/usr/lib/luna/system/luna-applauncher/app/controllers/uscl/utilities.js b/usr/lib/luna/system/luna-applauncher/app/controllers/uscl/utilities.js
new file mode 100644
index 0000000..868779f
--- /dev/null
+++ b/usr/lib/luna/system/luna-applauncher/app/controllers/uscl/utilities.js
@@ -0,0 +1,149 @@
+/*jslint browser: true, eqeqeq: true, undef: true */
+/*global getopt */
+/******************************************************************************
+Lines above are for jslint, the JavaScript verifier.
+http://www.jslint.com/
+******************************************************************************/
+
+if (!String.prototype.trim) {
+	String.prototype.trim = function () {
+		return this.replace(/^\s+/, "").replace(/\s+$/, "");
+	};
+}
+
+if (!String.prototype.normalizeSpace) {
+	String.prototype.normalizeSpace = function () {
+		return this.trim().replace(/\s+/g, " ");
+	};
+}
+
+if (!String.prototype.toBoolean) {
+	String.prototype.toBoolean = function (errorType) {
+		var s = this.toLowerCase().normalizeSpace();
+		var i = parseInt(s, 10);
+		if (!isNaN(i)) {
+			return (i !== 0);
+		}
+		switch (s) {
+		case "yes":
+		case "y":
+		case "true":
+		case "t":
+		case "on":
+		case "enable":
+		case "enabled":
+			return true;
+		case "no":
+		case "n":
+		case "false":
+		case "f":
+		case "off":
+		case "disable":
+		case "disabled":
+			return false;
+		default:
+			if (errorType) {
+				throw new errorType("Invalid argument");
+			}
+			else {
+				return undefined;
+			}
+		}
+	};
+}
+
+if (!String.prototype.format) {
+	// Implements Mojo.Log.xxx-ish formatting.  It's no sprintf, but it's
+	// good enough for now.
+	String.prototype.format = function () {
+		var args = Array.prototype.slice.call(arguments, 0);
+		var result = this.replace(/%[%jsoidf]/g, function (str) {
+			switch (str) {
+			case "%o":
+				return Object.inspect(args.shift());
+			case "%j":
+				return Object.toJSON(args.shift());
+			case "%%":
+				return "%";
+			}
+			return args.shift();
+		});
+		return result;
+	};
+}
+
+if (!String.prototype.splitArguments) {
+	String.prototype.splitArguments = function (rx) {
+		if (!rx) {
+			rx = /\s+/;
+		}
+		if (/\S/.test(this)) {
+			return this.normalizeSpace().split(rx);
+		}
+		else {
+			return [];
+		}
+	};
+}
+
+// A version of Array#forEach that stops the loop if the specified
+// function returns false.  This special behavior is influenced by
+// jQuery's each() methods.  Based on MIT-licensed code from:
+// http://tinyurl.com/yh9nvwb
+// (https://developer.mozilla.org/En/Core_JavaScript_1.5_Reference/Objects/Array/ForEach)
+if (!Array.prototype.forEach2) {
+	Array.prototype.forEach2 = function(fun /*, thisp*/) {
+		var len = this.length >>> 0;
+		if (typeof fun !== "function") {
+			throw new TypeError();
+		}
+		var thisp = arguments[1];
+		for (var i = 0; i < len; i++) {
+			if (i in this) {
+				var ret = fun.call(thisp, this[i], i, this);
+				if (ret === false) {
+					return;
+				}
+			}
+		}
+	};		
+}
+
+if (!Array.prototype.joinAnd) {
+	Array.prototype.joinAnd = function () {
+		if (this.length <= 2) {
+			return this.join(" and ");
+		}
+		else {
+			return this.slice(0, this.length - 1).join(", ") +
+				", and " + this[this.length - 1];
+		}
+	};
+}
+
+if (!Array.prototype.getopt) {
+	Array.prototype.getopt = function (optstr, errorType) {
+		try {
+			optstr = optstr.replace(/^:/, "");
+			var result = {};
+			var opt;
+			getopt.optreset = true; // reinitialize
+			getopt.opterr = true;	// reinitialize
+			getopt.optind = 0;	// reinitialize
+			while ((opt = getopt(this, optstr)) !== null) {
+				if (getopt.optarg === null) {
+					result[opt] = true;
+				}
+				else {
+					result[opt] = getopt.optarg;
+				}
+			}
+			this.splice(0, getopt.optind);
+			return result;
+		}
+		catch (e) {
+			throw new errorType(e.message);
+		}
+	};
+}
+
diff --git a/usr/lib/luna/system/luna-applauncher/app/views/global-search/expanded-searches-div-uscl.html b/usr/lib/luna/system/luna-applauncher/app/views/global-search/expanded-searches-div-uscl.html
new file mode 100644
index 0000000..896acfc
--- /dev/null
+++ b/usr/lib/luna/system/luna-applauncher/app/views/global-search/expanded-searches-div-uscl.html
@@ -0,0 +1,3 @@
+<div id='expanded_searches_drawer_uscl' x-mojo-element="Drawer">
+	<div id="usclSearches" class="palm-list" x-mojo-element="List"></div>
+</div>
diff --git a/usr/lib/luna/system/luna-applauncher/app/views/global-search/expanded-searches-div.html b/usr/lib/luna/system/luna-applauncher/app/views/global-search/expanded-searches-div.html
index 1520f3b..e321283 100644
--- a/usr/lib/luna/system/luna-applauncher/app/views/global-search/expanded-searches-div.html
+++ b/usr/lib/luna/system/luna-applauncher/app/views/global-search/expanded-searches-div.html
@@ -17,4 +17,14 @@
 			</div>
 		</div> 
 	</div>  
+	<div id='command_line_drawer' x-mojo-element="Drawer">
+		<div class="palm-row last" id="uscl" name="search-identifier" x-mojo-tap-highlight="persistent">
+			<div class="palm-row-wrapper">
+				<div class="title search-command-line truncating-text">
+					<span class="prefix">cmd:</span>
+					<kbd id="uscl-text">#{filterText}</kbd>
+				</div>
+			</div>
+		</div> 
+	</div>
 </div>
diff --git a/usr/lib/luna/system/luna-applauncher/app/views/global-search/templates/uscl-searches-item.html b/usr/lib/luna/system/luna-applauncher/app/views/global-search/templates/uscl-searches-item.html
new file mode 100644
index 0000000..77e36e5
--- /dev/null
+++ b/usr/lib/luna/system/luna-applauncher/app/views/global-search/templates/uscl-searches-item.html
@@ -0,0 +1,5 @@
+<div class="palm-row" name="search-identifier" x-mojo-tap-highlight="momentary">
+	<div class="palm-row-wrapper">
+		<div class="search-uscl">#{title}</div>
+	</div>
+</div>
diff --git a/usr/lib/luna/system/luna-applauncher/app/views/global-search/templates/uscl-searches-list.html b/usr/lib/luna/system/luna-applauncher/app/views/global-search/templates/uscl-searches-list.html
new file mode 100644
index 0000000..aff9c12
--- /dev/null
+++ b/usr/lib/luna/system/luna-applauncher/app/views/global-search/templates/uscl-searches-list.html
@@ -0,0 +1,3 @@
+<div class="palm-list">
+	#{-listElements}
+</div>
diff --git a/usr/lib/luna/system/luna-applauncher/app/views/launcher/launcher-scene.html b/usr/lib/luna/system/luna-applauncher/app/views/launcher/launcher-scene.html
index d34a6a5..929c2b2 100644
--- a/usr/lib/luna/system/luna-applauncher/app/views/launcher/launcher-scene.html
+++ b/usr/lib/luna/system/luna-applauncher/app/views/launcher/launcher-scene.html
@@ -14,6 +14,10 @@
 		
 		<div class="palm-group search" id="singleContactsDiv"></div>
 		
+		<div class="palm-group unlabeled search" id="searchesDivUSCL">
+			<div class="palm-list" id="searches-list-uscl"></div>
+		</div>
+		
 		<div class="palm-header-spacer strut"></div>
 	</div>
 	
diff --git a/usr/lib/luna/system/luna-applauncher/app/views/uscl-about/uscl-about-scene.html b/usr/lib/luna/system/luna-applauncher/app/views/uscl-about/uscl-about-scene.html
new file mode 100644
index 0000000..6f4da07
--- /dev/null
+++ b/usr/lib/luna/system/luna-applauncher/app/views/uscl-about/uscl-about-scene.html
@@ -0,0 +1,25 @@
+<div id="uscl-about" class="uscl-help uscl-help-about">
+	<div class="palm-page-header multi-line">
+		<div class="palm-page-header-wrapper">
+			<div class="title left un-capitalize" id="title">
+				About Universal Search Command Line
+			</div>
+		</div>
+	</div>
+	<div class="palm-body-text">
+
+		<h1><a target="_blank" href="http://webonastick.com/uscl/">Universal Search Command Line</a></h1>
+
+		<p>Copyright &copy; 2009&ndash;2010
+		<a href="mailto:dse@webonastick.com?subject=USCL">Darren Embry</a></p>
+
+		<p>You may copy and redistribute this patch under an <a target="_blank"
+		href="http://webonastick.com/uscl/#license">MIT-Style License</a>.</p>
+
+		<p>Includes BSD-licensed <a target="_blank"
+		href="http://blog.fpmurphy.com/2010/02/javascript-shell-command-line-processing.html">getopt
+		code by Finnbarr P. Murphy</a></p>
+
+	</div>
+</div>
+
diff --git a/usr/lib/luna/system/luna-applauncher/app/views/uscl-help-command-list/templates/item.html b/usr/lib/luna/system/luna-applauncher/app/views/uscl-help-command-list/templates/item.html
new file mode 100644
index 0000000..3aa3781
--- /dev/null
+++ b/usr/lib/luna/system/luna-applauncher/app/views/uscl-help-command-list/templates/item.html
@@ -0,0 +1,6 @@
+<div class="palm-row" x-mojo-tap-highlight="momentary">
+	<div class="palm-row-wrapper">
+		<div class="uscl-help-command-name"  id="command-name"><kbd>.#{commandName}</kbd></div>
+		<div class="uscl-help-command-title" id="title"       >#{title}</div>
+	</div>
+</div>
diff --git a/usr/lib/luna/system/luna-applauncher/app/views/uscl-help-command-list/templates/list.html b/usr/lib/luna/system/luna-applauncher/app/views/uscl-help-command-list/templates/list.html
new file mode 100644
index 0000000..aff9c12
--- /dev/null
+++ b/usr/lib/luna/system/luna-applauncher/app/views/uscl-help-command-list/templates/list.html
@@ -0,0 +1,3 @@
+<div class="palm-list">
+	#{-listElements}
+</div>
diff --git a/usr/lib/luna/system/luna-applauncher/app/views/uscl-help-command-list/uscl-help-command-list-scene.html b/usr/lib/luna/system/luna-applauncher/app/views/uscl-help-command-list/uscl-help-command-list-scene.html
new file mode 100644
index 0000000..c87d47b
--- /dev/null
+++ b/usr/lib/luna/system/luna-applauncher/app/views/uscl-help-command-list/uscl-help-command-list-scene.html
@@ -0,0 +1,11 @@
+<div id="uscl-help-command-list" class="uscl-help uscl-help-command-list">
+	<div class="palm-page-header multi-line">
+		<div class="palm-page-header-wrapper">
+			<div class="title left">
+				Universal Search Command Line Help
+			</div>
+		</div>
+	</div>
+	<div id="command-list" x-mojo-element="List">
+	</div>
+</div>
diff --git a/usr/lib/luna/system/luna-applauncher/app/views/uscl-help-command-view/uscl-help-command-view-scene.html b/usr/lib/luna/system/luna-applauncher/app/views/uscl-help-command-view/uscl-help-command-view-scene.html
new file mode 100644
index 0000000..263547b
--- /dev/null
+++ b/usr/lib/luna/system/luna-applauncher/app/views/uscl-help-command-view/uscl-help-command-view-scene.html
@@ -0,0 +1,27 @@
+<div id="uscl-help-command-view" class="uscl-help uscl-help-command-view">
+	<div class="palm-page-header multi-line">
+		<div class="palm-page-header-wrapper">
+			<div class="title left un-capitalize" id="title">
+			</div>
+		</div>
+	</div>
+	<div class="contents">
+		<div class="uscl-help-usage" id="usageDiv">
+			Usage:
+			<kbd class="usage" id="usage"></kbd>
+		</div>
+		<div class="uscl-help-aka" id="akaDiv">
+			Also known as:
+			<span class="aka" id="aka"></span>
+		</div>
+		<div class="uscl-help-description" id="description"></div>
+		<div class="uscl-help-options" id="optionsDiv">
+			<span class="options-title" id="options-title">Options</span>:
+			<dl class="options" id="options"></dl>
+		</div>
+		<div class="uscl-help-example" id="exampleDiv">
+			<span class="example-title" id="example-title">Example</span>:
+			<kbd class="example" id="example"></kbd>
+		</div>
+	</div>
+</div>
diff --git a/usr/lib/luna/system/luna-applauncher/index.html b/usr/lib/luna/system/luna-applauncher/index.html
index 16f4269..73ec764 100644
--- a/usr/lib/luna/system/luna-applauncher/index.html
+++ b/usr/lib/luna/system/luna-applauncher/index.html
@@ -9,6 +9,7 @@
 	
 	<link href="stylesheets/launcher.css" media="screen" rel="stylesheet" type="text/css" title="standard" />
 	<link href="stylesheets/global-search.css" media="screen" rel="stylesheet" type="text/css" title="standard" />
+	<link href="stylesheets/uscl.css" media="screen" rel="stylesheet" type="text/css" title="standard" />
 </head>
 <body>
 </body>
diff --git a/usr/lib/luna/system/luna-applauncher/sources.json b/usr/lib/luna/system/luna-applauncher/sources.json
index bb94ae2..be35071 100644
--- a/usr/lib/luna/system/luna-applauncher/sources.json
+++ b/usr/lib/luna/system/luna-applauncher/sources.json
@@ -12,6 +12,25 @@
 		"source": "app\/controllers\/global-search-assistant.js"
 	},
 	
+	{ "source": "app\/controllers\/uscl\/getopt.js" },
+	{ "source": "app\/controllers\/uscl\/utilities.js" },
+	{ "source": "app\/controllers\/uscl\/uscl.js" },
+	{ "source": "app\/controllers\/uscl\/builtins\/uscl-system.js" },
+	{ "source": "app\/controllers\/uscl\/builtins\/uscl-maps.js" },
+	{ "source": "app\/controllers\/uscl\/builtins\/uscl-calc.js" },
+	{ "source": "app\/controllers\/uscl\/builtins\/uscl-notes.js" },
+	{ "source": "app\/controllers\/uscl\/builtins\/uscl-quickevent.js" },
+	{ "source": "app\/controllers\/uscl\/builtins\/uscl-tasks.js" },
+	{ "source": "app\/controllers\/uscl\/builtins\/uscl-sites.js" },
+	{ "source": "app\/controllers\/uscl\/builtins\/uscl-restart.js" },
+
+	{ "source": "app\/controllers\/uscl\/uscl-help-command-list.js",
+	  "scenes": "uscl-help-command-list" },
+	{ "source": "app\/controllers\/uscl\/uscl-help-command-view.js",
+	  "scenes": "uscl-help-command-view" },
+	{ "source": "app\/controllers\/uscl\/uscl-about.js",
+	  "scenes": "uscl-about" },
+	
 	{
 		"source": "app\/controllers\/app-info-assistant.js"
 	},
diff --git a/usr/lib/luna/system/luna-applauncher/stylesheets/global-search.css b/usr/lib/luna/system/luna-applauncher/stylesheets/global-search.css
index 85f217b..5c7bbd8 100644
--- a/usr/lib/luna/system/luna-applauncher/stylesheets/global-search.css
+++ b/usr/lib/luna/system/luna-applauncher/stylesheets/global-search.css
@@ -167,6 +167,20 @@ Copyright 2009 Palm, Inc.  All rights reserved.
 	text-align: center;
 }
     
+.palm-group.search .search-command-line {
+	text-align: left;
+	font-size: smaller;
+}
+.palm-group.search .search-command-line .prefix {
+	color: black;
+	font-weight: bold;
+}
+.palm-group.search .search-uscl {
+	text-align: center;
+	padding-top: 10px;
+	padding-bottom: 10px;
+}
+    
 .palm-group.search .palm-group-title {
 	max-width: 264px;                   
 }                       
diff --git a/usr/lib/luna/system/luna-applauncher/stylesheets/uscl.css b/usr/lib/luna/system/luna-applauncher/stylesheets/uscl.css
new file mode 100644
index 0000000..3a8a3bd
--- /dev/null
+++ b/usr/lib/luna/system/luna-applauncher/stylesheets/uscl.css
@@ -0,0 +1,95 @@
+/******************************************************************************
+Command List, Command View, About Screen
+******************************************************************************/
+
+body.uscl-body {
+	background-image: none;
+	background-color: #555555; /* roughly equivalent to the scrim */
+	color: white;
+}
+body.uscl-body .palm-body-text {
+	color: white;
+}
+body.uscl-body .palm-body-text a:link,
+body.uscl-body .palm-body-text a:visited {
+	color: yellow;
+}
+body.uscl-body .palm-body-text p {
+	padding: 0;
+	margin: 0.5em 0;
+}
+body.uscl-body .palm-body-text h1 {
+	padding: 0;
+	margin: 0.3125em 0;
+	font-size: 160%;
+}
+
+kbd {
+	font-weight: bold;
+	color: yellow;
+	font-family: inherit;
+}
+kbd .aliases {
+	font-weight: normal;
+	opacity: 0.5;
+}
+kbd var {
+	font-weight: normal;
+	font-style: italic;
+}
+
+#uscl-help-command-list .palm-row-wrapper {
+	padding: 10px 15px 10px 15px;
+}
+#uscl-help-command-list .palm-row .uscl-help-command-title {
+}
+#uscl-help-command-list .palm-row .uscl-help-command-name {
+	float: right;
+	text-align: right;
+	padding-left: 1em;
+}
+
+#uscl-help-command-view .contents {
+	padding: 5px 15px;
+}
+#uscl-help-command-view .uscl-help-aka {
+	padding-top: .5em;
+	font-size: smaller;
+	padding-left: 2em;
+	text-indent: -2em;
+}
+#uscl-help-command-view .uscl-help-description {
+	padding-top: .5em;
+	font-size: smaller;
+}
+#uscl-help-command-view .uscl-help-options {
+	padding-top: .5em;
+	font-size: smaller;
+}
+#uscl-help-command-view .uscl-help-example {
+	padding-top: .5em;
+	font-size: smaller;
+}
+
+#uscl-help-command-view .uscl-help-options dl {
+	margin: 0 0 0 1em;
+	line-height: 100%;
+}
+#uscl-help-command-view .uscl-help-options dl dd {
+	font-size: smaller;
+	margin: 0 0 0 1.5em;
+}
+
+/******************************************************************************
+Feed list
+******************************************************************************/
+.palm-menu-fade {
+	display: none;
+}
+.uscl-feed-list-scene .uscl-feed-list .palm-row-wrapper .padding {
+	padding: 5px 15px;
+}
+.uscl-feed-list-scene .uscl-feed-list .palm-row-wrapper .uscl-feed-url {
+	font-size: 60%;
+}
+
