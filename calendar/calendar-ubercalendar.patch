diff --git a/usr/palm/applications/com.palm.app.calendar/app/controllers/app-assistant.js b/usr/palm/applications/com.palm.app.calendar/app/controllers/app-assistant.js
index 5375929..e258105 100644
--- a/usr/palm/applications/com.palm.app.calendar/app/controllers/app-assistant.js
+++ b/usr/palm/applications/com.palm.app.calendar/app/controllers/app-assistant.js
@@ -8,6 +8,27 @@ var AppAssistant = Class.create({
 		this.appController = appController;
 		this.openReminderAlert = null;
 		
+		//get snooze cookie -- renamed because of bug in cookie names
+		this.snoozeCookie = new Mojo.Model.Cookie("snoozeCookie");	
+		if (this.snoozeCookie) {
+			var snzcookie = this.snoozeCookie.get();
+			if (snzcookie) {			
+				if(snzcookie.showReminderDashboard !== undefined) {
+					this.showReminderDashboard = snzcookie.showReminderDashboard;
+				} else {
+					this.showReminderDashboard = false;
+				}
+				if(snzcookie.snoozethrob !== undefined) {
+					this.snoozeThrob = snzcookie.snoozethrob;
+				} else {
+					this.snoozeThrob = false;
+				}
+			}
+		} else {
+			this.snoozeThrob = false;
+			this.showReminderDashboard = false;
+		}
+		
 		// CURRENT DATE & TIME - Keeps track of the current day/month/time in view
 		this.currentDateTime = new Date();
 		this.currentDateTimeObservers = new Hash();
@@ -77,9 +98,9 @@ var AppAssistant = Class.create({
 		// TEMP Ignore the first time we get called which is at boot time. We need this until framework
 		// gives us a flag to let us now if this being called at boot.
 		this.handlelaunchCount++;
-		if (this.handlelaunchCount <= 1)
+		if (this.handlelaunchCount <= 1) {
 	  	 	return;	
-			
+		}
 		//if this failed during initialization, try again	
 		if (!this.calendarsManager.accounts) {			
 			this.calendarsManager.getCalendarsByAccount();
@@ -116,7 +137,10 @@ var AppAssistant = Class.create({
 		else if (launchParams.alarmclose){
 			Mojo.Log.info("$$$$$$$$ AppAssistant handleLaunch : alarmclose");
 			this.closeReminder(launchParams.alarmclose);
-		} 
+		}
+		else if (launchParams.playalarmsound){
+			this.playAlarmSound();
+		}
 		else if (launchParams.dayChange){
 			this.dayChange();
 		}
@@ -267,6 +291,20 @@ var AppAssistant = Class.create({
 		Mojo.Log.info("$$$$$$$$ AppAssistant closeReminder:end");
 	},
 	
+	playAlarmSound: function() {
+		if (this.openReminderAlert) {
+			this.openReminderAlert.playAlarmSound();
+			this.openReminderAlert = null;
+		}
+	},
+
+	closeToDashboard: function() {
+		if(this.openReminderAlert) {
+			this.openReminderAlert.closeToDashboard();
+			this.openReminderAlert = null;
+		}
+	},
+	
 	scheduleNextReminder: function(eventId) {
 		Mojo.Log.info("$$$$$$$$ AppAssistant scheduleNextReminder: for event:"+eventId);
 		new Mojo.Service.Request('palm://com.palm.calendar', {
@@ -366,6 +404,7 @@ var AppAssistant = Class.create({
 		var sound='calendar';
 		var useSound=false;
 		var prefs = this.prefsManager.getPrefs();
+		
 		if(dontAlert)
 		{
 			sound='none'
@@ -398,10 +437,15 @@ var AppAssistant = Class.create({
 		var height;
 		var reminder = getReminderManager().getReminder(eventId);
 		reminder.userClosed = false;
-		if (reminder.attendees.length > 1 /*now we include the organizer in attendee list*/)
-			height = 203;
-		else
-		  	height = 149;
+		if(reminder.attendees) {
+			if (reminder.attendees.length > 1 /*now we include the organizer in attendee list*/) {
+				height = 205; //203 orig; 74 + a couple to get more choices
+			} else {
+		  	height = 160; //149 orig;
+			}
+		} else {
+			height = 160;
+		}
 		
 		var needThrobbing =(hasNewContent || !isSnoozedReminder) ? true:false;
 		Mojo.Log.info("$$$$$$$$ AppAssistant doAlarm:createStageWithCallback for stage: "+this.createAlarmStageName(eventId)+", stage height is: "+height);
@@ -435,23 +479,25 @@ var AppAssistant = Class.create({
 				}, pushReminderScene.bind(this, eventId, needThrobbing), 'popupalert');
 			}
 		}
-		
-		Mojo.Log.info("$$$$$$$$ AppAssistant doAlarm:calling getStageController for calendar-dashboard");
-		var dashboardStageController = Mojo.Controller.getAppController().getStageController("calendar-dashboard");
-		if (!dashboardStageController) {
-			Mojo.Log.info("$$$$$$$$ AppAssistant doAlarm:calling getStageProxy for calendar-dashboard");
-			dashboardStageController = Mojo.Controller.getAppController().getStageProxy("calendar-dashboard");
-		}
-		if (!dashboardStageController) {
-			var pushDashboardScene = function(stageController){
-				stageController.pushScene('dashboard');
+		//Optionally disable reminder dashboard
+		if(this.showReminderDashboard || this.snoozeThrob) {
+			Mojo.Log.info("$$$$$$$$ AppAssistant doAlarm:calling getStageController for calendar-dashboard");
+			var dashboardStageController = Mojo.Controller.getAppController().getStageController("calendar-dashboard");
+			if (!dashboardStageController) {
+				Mojo.Log.info("$$$$$$$$ AppAssistant doAlarm:calling getStageProxy for calendar-dashboard");
+				dashboardStageController = Mojo.Controller.getAppController().getStageProxy("calendar-dashboard");
+			}
+			if (!dashboardStageController) {
+				var pushDashboardScene = function(stageController){
+					stageController.pushScene('dashboard');
+				}
+				Mojo.Log.info("$$$$$$$$ AppAssistant doAlarm:calling createStageWithCallback for calendar-dashboard");
+				Mojo.Controller.getAppController().createStageWithCallback({
+					name: "calendar-dashboard",
+					lightweight: true,
+					applicationStylesheets: ["stylesheets/notification.css"],
+				}, pushDashboardScene, "dashboard");
 			}
-			Mojo.Log.info("$$$$$$$$ AppAssistant doAlarm:calling createStageWithCallback for calendar-dashboard");
-			Mojo.Controller.getAppController().createStageWithCallback({
-				name: "calendar-dashboard",
-				lightweight: true,
-				applicationStylesheets: ["stylesheets/notification.css"],
-			}, pushDashboardScene, "dashboard");
 		}
 		Mojo.Log.info("$$$$$$$$ AppAssistant doAlarm :end");
 	},
@@ -481,6 +527,106 @@ var AppAssistant = Class.create({
 		}
 	},
 	
+	getUserUberCalGroups: function() {
+		// read cookie set variables for all views
+		var userCalGrpsCookie = new Mojo.Model.Cookie("ucGroupsCookie");
+		var userCalGrps = [];
+		if(userCalGrpsCookie) {
+			var calGrps = userCalGrpsCookie.get();
+			if(calGrps) {
+				if(calGrps.usercalgroups && calGrps.usercalgroups.length > 0 ) {
+					userCalGrps = calGrps.usercalgroups;
+					if(userCalGrps && userCalGrps.length > 0 &&  userCalGrps[0] && userCalGrps[0].rId !== undefined) {
+						return userCalGrps;
+					} else {
+						userCalGrps = undefined;
+					}
+				}
+			}
+		}
+		return userCalGrps;
+	},
+	
+	getUberGroups: function() {
+		// read cookie set variables
+		var uberGrpsCookie = new Mojo.Model.Cookie("uberGrpsCookie");
+		var uberGrps = {};
+		if(uberGrpsCookie) {
+			var uberGrps = uberGrpsCookie.get();
+			if(uberGrps && uberGrps.inUse !== undefined ) {
+				return uberGrps;
+			} else { // bad cookie, erased cookie or no defined groups yet: build it.
+				return {inUse: false, rId: ""};
+			}
+		} else { //bad cookie, erased cookie or no defined groups yet: build it.
+			return {inUse: false, rId: ""};
+		}
+	},
+	
+	setUberGroups: function(rID) {
+		//set cookie
+		if(rID){
+			var uberGrpsCookie = new Mojo.Model.Cookie("uberGrpsCookie");
+			if(uberGrpsCookie) {
+				uberGrpsCookie.put({inUse: true, rId: rID});
+			}
+		} else {
+			var uberGrpsCookie = new Mojo.Model.Cookie("uberGrpsCookie");
+			if(uberGrpsCookie) {
+				uberGrpsCookie.put({inUse: false, rId: ""});
+			}
+		}
+	},
+	
+	uberToggleGroupsCmd: function(usingUberGroups, name) {
+		// for toggleCmd on cal picker submenu
+		if(usingUberGroups === true && name) {
+			return name;
+		} else {
+			return getCurrentCal();
+		}
+	},
+	
+	getUberOrigExcludes: function() {
+		// read the orig excludes cookie
+		var uberOrigCookie = new Mojo.Model.Cookie("origExCookie");
+		var uberOrigEx = [];
+		if(uberOrigCookie) {
+			var uberEx = uberOrigCookie.get();
+			if(uberEx && uberEx.excludes && uberEx.excludes.length > 0) {
+				uberOrigEx = uberEx.excludes;
+				return uberOrigEx;
+			} else { // bad cookie, erased cookie or no defined groups yet: build it.
+				return undefined;
+			}
+		} else { //bad cookie, erased cookie or no defined groups yet: build it.
+			return undefined;
+		}
+	},
+	
+	getNotesIconParts: function(note){
+		if(!note || note === ""){
+			return false;
+		}
+		var start = note.indexOf('ICON=');
+		if( start > -1) {
+			var test = note.indexOf(';',start);
+			if(test >-1 && test > start + 5 && test - start <20){
+				var startTxt, endTxt, result, vresult, resultArray, patt = /[^a-z0-9_-]/;
+				startTxt = note.substring(0,start);
+				endTxt = note.length > test +1 ? note.substring(test+1) : "";
+				result = note.substring(start+5,test);
+				vresult = !patt.test(result) && result;
+				resultArray = vresult && [startTxt, vresult, endTxt];
+				return resultArray;
+			} else {
+				return false;
+			}
+		} else {
+			return false;
+		}
+	},
+
 	launchCalendarScene: function(stageController, showFirstUse) {
 		// Clear the view stack (just in case the starting scene is up)
 		stageController.popScenesTo();
@@ -488,8 +634,41 @@ var AppAssistant = Class.create({
 			// If this is the first use of Calendar, show the first use scene
 			this.firstUseManager = new FirstUseManager(stageController);
 		} else {
+			this.uberOpenInView = 'last';
+			this.snoozeThrob = false;
+			this.snoozeCookie = new Mojo.Model.Cookie("snoozeCookie");	
+			if (this.snoozeCookie) {
+				var snzcookie = this.snoozeCookie.get();
+				if (snzcookie) {
+					if(snzcookie.uberopeninview !== undefined) {
+						this.uberOpenInView = snzcookie.uberopeninview;
+					} else {
+						this.uberOpenInView = 'last';
+					}
+					if(snzcookie.snoozethrob !== undefined) {
+						this.snoozeThrob = snzcookie.snoozethrob;
+					} else {
+						this.snoozeThrob = false;
+					}
+				}
+			}
+		
 			// Otherwise show the Day View
-			stageController.pushScene({name: "day", transition: Mojo.Transition.crossFade, disableSceneScroller: true});
+			var view = "day";
+			var cookie = new Mojo.Model.Cookie("BackGesture");
+			try {
+				var lview = cookie.get();
+				if(lview && lview.lastview) {
+					view = lview.lastview;
+				}
+				if ((lview.lastview != "month") && (lview.lastview != "week")) {
+					view = "day";
+				}
+			} catch (e) {}
+			if(this.uberOpenInView !== 'last' && this.uberOpenInView !== undefined) {
+				view = this.uberOpenInView;
+			}
+			stageController.pushScene({name: view, transition: Mojo.Transition.crossFade, disableSceneScroller: true});
 		}
 	},
 	
@@ -764,6 +943,29 @@ function getDOWCount(value) {
 	return num;
 }
 
+function getIsLastProps(value) {
+	var monthDays= [ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ];
+	var dt = new Date(value);
+	var daydt = dt.getDate();
+	var yr = dt.getFullYear();
+	var mn = dt.getMonth();
+	if(isLeapYear(yr)) {
+		monthDays[1] = 29;
+	} else {
+		monthDays[1] = 28;
+	}
+	var lastdayIdx = (daydt - monthDays[mn] -1).toString();
+	if(monthDays[mn] - daydt < 7) {
+		if(monthDays[mn] - daydt === 0) {
+			return {lastweek: true, lastday: lastdayIdx, islastday: true };
+		} else {
+			return {lastweek: true, lastday: lastdayIdx, islastday: false};
+		}
+	} else {
+		return {lastweek: false, lastday: lastdayIdx, islastday: false};
+	}
+}
+
 function getAppAssistant() {
 	return Mojo.Controller.getAppController().assistant;
 }
@@ -819,6 +1021,34 @@ function buildCalendarsMenu(includeAll, includeReadOnly, includeExcludedFromAll)
 	return getCalendarsManager().buildCalendarsMenu(includeAll, includeReadOnly, includeExcludedFromAll);
 }
 
+function buildUberExcludes(includes) {
+	getCalendarsManager().buildUberExcludes(includes);
+}
+
+function getUserUberCalGroups() {
+	return getAppAssistant().getUserUberCalGroups();
+}
+
+function getNotesIconParts(note){
+	return getAppAssistant().getNotesIconParts(note);
+}
+
+function getUberGroups() {
+	return getAppAssistant().getUberGroups();
+}
+
+function getUberOrigExcludes() {
+	return getAppAssistant().getUberOrigExcludes();
+}
+
+function setUberGroups(rID) {
+	getAppAssistant().setUberGroups(rID);
+}
+
+function uberToggleGroupsCmd(usingUberGroups, name) {
+	return getAppAssistant().uberToggleGroupsCmd(usingUberGroups, name);
+}
+
 // ** CALENDAR PREFS
 function getPrefsManager() {
 	return getAppAssistant().prefsManager;
@@ -863,7 +1093,15 @@ function notifyTimeFormatObservers() {
 }
 
 function getTimeFormat() {
-	return getAppAssistant().timeFormat;
+	//if getAppAssistant is not valid yet return the default setting of this.timeFormat.
+	if(getAppAssistant() != undefined)
+	{
+		return getAppAssistant().timeFormat;
+	}
+	else
+	{
+		return this.timeFormat;
+	}
 }
 // **System  Time Change
 function observeTimeChange(sceneName, controller){
diff --git a/usr/palm/applications/com.palm.app.calendar/app/controllers/dashboard-assistant.js b/usr/palm/applications/com.palm.app.calendar/app/controllers/dashboard-assistant.js
index a667ac9..81ac2a6 100644
--- a/usr/palm/applications/com.palm.app.calendar/app/controllers/dashboard-assistant.js
+++ b/usr/palm/applications/com.palm.app.calendar/app/controllers/dashboard-assistant.js
@@ -14,6 +14,21 @@ var DashboardAssistant = Class.create({
 		
 		this.service = getCalendarService();
 		
+		this.snoozeThrob = false;
+		
+		//get default snooze duration from cookie
+		this.snoozeCookie = new Mojo.Model.Cookie("snoozeCookie");
+
+		if (this.snoozeCookie) {
+			var snzcookie = this.snoozeCookie.get();
+			if (snzcookie) {
+				if(snzcookie.snoozethrob)	{
+					this.snoozeThrob = snzcookie.snoozethrob;
+				} else {
+					this.snoozeThrob = false;
+				}
+			}
+		}
 		this.controller.get('calendar-dashboard').addEventListener(Mojo.Event.tap, this.tapHandler.bindAsEventListener(this));
 		this.controller.get('dashboard-icon').addEventListener(Mojo.Event.tap, this.reminderList.bindAsEventListener(this));
 		this.controller.get('dashboard-count').addEventListener(Mojo.Event.tap, this.reminderList.bindAsEventListener(this));
@@ -24,7 +39,10 @@ var DashboardAssistant = Class.create({
 	cleanup: function() {
 		Mojo.Log.info("$$$$$$$$ Dashboard-assistant cleanup: start ");
 		this.reminders.stopObservingReminders('dashboard');
-		this.reminders.removeAllReminders();
+//Do not remove the scheduled reminders
+//This is so that if the dashboard event is swiped away the reminder is not removed
+//to support reminders that are far in the future but may not want the icon in the dashboard.
+//		this.reminders.removeAllReminders();
 		Mojo.Log.info("$$$$$$$$ Dashboard-assistant cleanup: end ");
 	},
 	
@@ -35,6 +53,7 @@ var DashboardAssistant = Class.create({
 			Mojo.Log.info("$$$$$$$$ Dashboard-assistant updateMostRecentReminder: recent Reminder is "+this.reminder.id);
 			this.updateHTML(this.controller.get('dashboard-subject'), (this.reminder.subject != null) ? this.reminder.subject : '');
 			this.updateHTML(this.controller.get('dashboard-timeloc'), (this.reminder.subtitle != null) ? this.reminder.subtitle : '');
+			if(this.snoozeThrob) {this.controller.stageController.indicateNewContent(true);}
 		}
 		else
 		{
diff --git a/usr/palm/applications/com.palm.app.calendar/app/controllers/datetime-assistant.js b/usr/palm/applications/com.palm.app.calendar/app/controllers/datetime-assistant.js
index 1bc0374..0ec0b3a 100644
--- a/usr/palm/applications/com.palm.app.calendar/app/controllers/datetime-assistant.js
+++ b/usr/palm/applications/com.palm.app.calendar/app/controllers/datetime-assistant.js
@@ -19,6 +19,7 @@ var DatetimeAssistant = Class.create({
         this.callBackAfterUpdate = callBackAfterUpdate;
         this.targetId = longTargetId;
 		this.formatter = getFormatterService();
+		this.app = getAppAssistant();
     },
     
     update: function(){
@@ -140,21 +141,696 @@ var DatetimeAssistant = Class.create({
                 break;
         }
     },
-    
+	
+	// From monthview (Feb is fixed up by hand as necessary)
+	// We try to avoid the DateJS stuff because it's indescribably slow.
+	_monthDays: [ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ],
+	
+	rdayNames: function() {
+		var stday = 0;
+		if(this.startOfWeek==null || this.startOfWeek == 'undefined')
+			this.startOfWeek = 1;
+		stday = this.startOfWeek - 1;
+		var tday = new Date();
+		tday.moveToDayOfWeek(stday);
+		for (var i = 0; i < 7; i++) {
+			this._rdNames[i] = Mojo.Format.formatDate(tday, "E");
+			tday.addDays(1);
+		}
+	},
+	
+	radvanceWk: function(wk, month, year, maxwkn) {
+		var wkn = parseInt(wk, 10);
+		if(this.weekModulusNum != undefined && this.weekModulusNum <= 52 && this.weekModulusNum != 1) {
+			var maxwkn = this.weekModulusNum;
+		}
+		if((wkn > 8) && (wkn < maxwkn)) {
+			return (wkn + 1);
+		} else if((wkn <= 8) && (wkn < maxwkn)) {
+			wkn +=1;
+			var zd = '0';
+			return zd + wkn.toString();
+		} else if(wkn == maxwkn || wkn > maxwkn) {
+			var zd = '01';
+			return zd;
+		}
+	},
+	
+	// draw month function, expects numbers 0 based month
+	canvasRM: function(month, year, context) {
+		// date object
+		var rmon = new Date(year, month, 1);
+		
+		//setup number of days, 1st day(day of week), week number, number of weeks
+		var rd1dayOfMon = rmon.getDay();
+		var rwkNum = this.useISOweekNum === true ? rmon.getISO8601Week() : rmon.getWeekOfYear(this.prefStartDoW);
+		var maxwkn = this.useISOweekNum === true ? new Date((month != 0 ? year : year -1), 11, 28).getISO8601Week() : new Date((month != 0 ? year : year -1), 11, 28).getWeekOfYear(this.prefStartDoW);
+		maxwkn = maxwkn == 0 ? 53 : maxwkn;
+		rwkNum = rwkNum == 0 ? maxwkn : rwkNum;
+		if(this.weekNumOffset !== undefined && this.weekNumOffset !=0) {
+			var wkNum = parseInt(rwkNum,10) + this.weekNumOffset;
+			rwkNum = wkNum > maxwkn ? (wkNum - maxwkn) : wkNum;
+			rwkNum = rwkNum < 10 ? '0' + rwkNum : rwkNum;
+		}
+		if(this.weekModulusNum != undefined && this.weekModulusNum <= 52 && this.weekModulusNum != 1) {
+			rwkNum = (parseInt(rwkNum, 10) % this.weekModulusNum);
+			rwkNum = rwkNum !== 0 ? rwkNum : this.weekModulusNum;
+			rwkNum = rwkNum < 10 ? '0' + rwkNum : rwkNum;
+		}
+		var r1offset = rd1dayOfMon - (this.startOfWeek - 1);
+		if (r1offset < 0) {r1offset += 7;}  //num of days of prev mon
+		if(isLeapYear(year)) {
+			this._monthDays[1] = 29;
+		} else {
+			this._monthDays[1] = 28;
+		}
+		this.RM[context].maxdays = this._monthDays[month];		
+		//setup fonts and spacing
+		this.mthctx[context].fillStyle = "rgb(0, 0, 0)";
+		this.mthctx[context].font = "bold 14px Prelude";
+		this.mthctx[context].textAlign = "left";
+		this.mthctx[context].textBaseline = "top";
+		var top = 2;
+		var leftmargin = 2;
+		var left = 0 + leftmargin;
+		var txt = "";
+		this.colHW = 30;
+		var maxW = 30;
+		this.topCor = 42 + (this.colHW/2); //top margin + half-cell
+		this.leftCor = this.colHW;
+		this.RM[context].fstDayLidx = r1offset;
+		this.RM[context].fstDayTidx = 1;
+		// setup title and week header
+		var titleTxt = Mojo.Format.formatDate(rmon, $L("MMM yyyy"));
+		this.mthctx[context].strokeText(titleTxt, left + 90, top);
+		this.mthctx[context].textAlign = "center";
+		for (var i = 0; i < 7; i++) {
+			txt = this._rdNames[i];
+			left = (i * this.colHW) + this.leftCor + 13;//13 is for font &txt to ctr
+			top = 22;
+			this.mthctx[context].strokeText(txt, left, top);	
+		}
+		this.mthctx[context].fillStyle = "rgb(104, 104, 104)";
+		this.mthctx[context].font = "14px Prelude";
+		this.mthctx[context].textAlign = "left";
+		this.mthctx[context].textBaseline = "alphabetic";
+		for (var j = 0; j < 6; j++) {
+			txt = rwkNum;
+			left = leftmargin;
+			top = (j * this.colHW) + this.topCor + 3; // 3 is for font correction
+			this.mthctx[context].strokeText(txt, left, top);
+			rwkNum = this.radvanceWk(rwkNum, month, year, maxwkn);
+		}
+		//iterate through the date rows
+		var num = 1;
+		this.mthctx[context].fillStyle = "rgb(0, 0, 0)";
+		this.mthctx[context].font = "bold 14px Prelude";
+		this.mthctx[context].textAlign = "center";
+		for (var j=0; j<6; j++) {
+			if (num > this.RM[context].maxdays) {
+				break; }
+			top = (j * this.colHW) + this.topCor + 3;
+			for (var i=0; i<7; i++) {
+				if (j==0 && i ==0) {i = r1offset;}
+				txt = num;
+				left =  (i * this.colHW) + this.leftCor + 13;
+				this.mthctx[context].strokeText(txt, left, top);
+				num +=1;
+				if (num > this.RM[context].maxdays) {
+					break; }
+			}
+		}
+	},
+	
+	RMnextM: function(index) {
+		this.RM[index].month = this.RM[index - 1].month;
+		this.RM[index].year = this.RM[index - 1].year;
+		if(this.RM[index].month == 11) {
+			this.RM[index].month = 0;
+			this.RM[index].year += 1;
+		} else {
+			this.RM[index].month += 1;
+		}
+	},
+	
+	RMprevM: function(index) {
+		this.RM[index].month = this.RM[index + 1].month;
+		this.RM[index].year = this.RM[index + 1].year;
+		if(this.RM[index].month == 0) {
+			this.RM[index].month = 11;
+			this.RM[index].year -= 1;
+		} else {
+			this.RM[index].month -= 1;
+		}
+	},
+	
+	// determin calendar order for the canvas's
+	orderRM: function( stDate, eDate, isAllDay) {
+		//check first
+		if(stDate.getTime() > eDate.getTime) {
+			Mojo.Log.error ("start after end");
+			return;
+		}
+		for(var i=0; i<6; i++) {
+			this.RM[i] = {};
+			this.RM[i].month = "";
+			this.RM[i].year = "";
+			this.RM[i].fstDayLidx = 1;
+			this.RM[i].fstDayTidx = 1;
+			this.RM[i].maxdays = 1;
+		}
+		// date objects
+		var curD = new Date();
+		var curMY = {month: curD.getMonth(), year: curD.getFullYear() };
+		var stMY = {month: stDate.getMonth(), year: stDate.getFullYear() };
+		var eMY = {month: eDate.getMonth(), year: eDate.getFullYear() };
+		this.RMlast.duration = getTimePeriodParts(stDate, eDate, isAllDay);
+		var rwhen = {};
+		rwhen = getTimePeriodParts(curD, stDate, isAllDay);
+		var dura = this.RMlast.duration;
+		// determine duration case
+		if ( (dura.years == 0) && (((dura.months == 5) && (dura.days == 0)) || (dura.months < 5)) ) {
+			if ( (dura.months <=1) && ((rwhen.months <= 3) && (rwhen.years <=0)) ){
+				// we can fit in 6 months try to get today in the 6 months
+				if(curD.getTime() < stDate.getTime()) {
+					//close future start with curDate 
+					this.redlineSplit.setStyle({borderRight: '1px solid black'});
+					this.RM[0].month = curMY.month;
+					this.RM[0].year = curMY.year;
+					for (var i = 1; i < 6; i++) {
+						this.RMnextM(i);
+					}
+				} else {
+					// in close past start with stDate
+					this.redlineSplit.setStyle({borderRight: '1px solid black'});
+					this.RM[0].month = stMY.month;
+					this.RM[0].year = stMY.year;
+					for (var i = 1; i < 6; i++) {
+						this.RMnextM(i);
+					}
+				}
+			} else {
+				if((curD.getTime() < stDate.getTime()) && (((dura.months == 4) && (dura.days == 0) && (dura.years ==0)) || ((dura.months <4) && (dura.years==0)))){
+					// in 6 months, too far away for today, in future do prev 
+					this.redlineSplit.setStyle({borderRight: '1px solid black'});
+					this.RM[1].month = stMY.month;
+					this.RM[1].year = stMY.year;
+					this.RMprevM(0);
+					this.RMnextM(2);
+					this.RMnextM(3);
+					this.RMnextM(4);
+					this.RMnextM(5);
+				} else {
+					// in past or could be 6 cal months do start + 5
+					this.redlineSplit.setStyle({borderRight: '1px solid black'});
+					this.RM[0].month = stMY.month;
+					this.RM[0].year = stMY.year;
+					for (var i = 1; i < 6; i++) {
+						this.RMnextM(i);
+					}
+				}
+			}
+		} else { //duration won't fit in 6 months
+			if( ((stMY.year == curMY.year) && (stMY.month == curMY.month)) ||
+			  ((stMY.year < curMY.year) ||  ((stMY.year == curMY.year) && (stMY.month < curMY.month))) ){
+			//past or present month - do start + next + next redline split then -- prev + end + next
+				this.redlineSplit.setStyle({borderRight: '2px solid red'});
+				this.RM[0].month = stMY.month;
+				this.RM[0].year = stMY.year;
+				this.RMnextM(1);
+				this.RMnextM(2);
+				this.RM[4].month = eMY.month;
+				this.RM[4].year = eMY.year;
+				this.RMprevM(3);
+				this.RMnextM(5);
+			} else if((stMY.year > curMY.year) ||  ((stMY.year == curMY.year) && (stMY.month > curMY.month))) {
+			// future - do prev + start + next redline split prev + end + next
+				this.redlineSplit.setStyle({borderRight: '2px solid red'});
+				this.RM[1].month = stMY.month;
+				this.RM[1].year = stMY.year;
+				this.RMprevM(0);
+				this.RMnextM(2);
+				this.RM[4].month = eMY.month;
+				this.RM[4].year = eMY.year;
+				this.RMprevM(3);
+				this.RMnextM(5);
+			}
+		}	
+		// call canvasRM
+		for(var k=0; k<6; k++){
+			this.canvasRM(this.RM[k].month, this.RM[k].year, k);
+		}
+
+		// record for next time comparisons
+		this.RMlast.stMY = stMY;
+		this.RMlast.eMY = eMY;
+		this.RMlast.curMY = curMY;
+	},
+	
+	risRendered: function( year, month) {
+		for(var i=0; i<6; i++) {
+			if((this.RM[i].month == month) && (this.RM[i].year == year)) {
+				return i;
+			}
+		}
+		return -1;
+	},
+	
+	//mark days in calendar
+	markDay: function(rdate, imgsrc, color, rx, ry, rwt, rht) {
+		// determine which month, year, date
+		if (rdate instanceof Date == true) { 
+			var whatMn = rdate.getMonth();
+			var whatYr = rdate.getFullYear();
+			var whatDt = rdate.getDate();
+		} else if(rdate !== undefined) {
+			this.rtdate = new Date(rdate);
+			var whatMn = this.rtdate.getMonth();
+			var whatYr = this.rtdate.getFullYear();
+			var whatDt = this.rtdate.getDate();
+		}
+		var rmimgsrc = imgsrc;
+		var idx = this.risRendered(whatYr, whatMn);
+		if(idx == -1) { return; }
+		var fstDayLidx = this.RM[idx].fstDayLidx;
+		var fstDayTidx = this.RM[idx].fstDayTidx;
+		var rRow = Math.floor((whatDt + fstDayLidx -1) / 7);
+		var col = (whatDt + fstDayLidx - 1) % 7;
+		var itop = (rRow * this.colHW) + 40;
+		var ileft = (col * this.colHW) + this.colHW;
+		itop = (ry !== undefined) ? itop + ry : itop;
+		ileft = (rx !== undefined) ? ileft + rx : ileft;
+		if (rmimgsrc !== undefined) {
+			this.mthctx[idx].drawImage(rmimgsrc, ileft, itop, (rwt !== undefined)? rwt : this.colHW,(rht !== undefined)? rht : this.colHW);
+		} else if(color !== undefined) {
+			this.mthctx[idx].fillStyle = color;
+			this.mthctx[idx].fillRect(ileft, itop, this.colHW-2, this.colHW-2);
+		} else {
+			this.mthctx[idx].fillStyle = "rgba(232,227,124,0.5)";
+			this.mthctx[idx].fillRect(ileft, itop, this.colHW-2, this.colHW-2);
+		}
+	},
+	
+	rmMarkD: function() {
+		if(this.RMlast.duration.months > 7) {
+			return;
+		}
+		if((this.RMlast.stMY.month == this.RMlast.eMY.month) && (this.RMlast.stD.getDate() == this.RMlast.eD.getDate())) {
+			this.RMlast.HMDB = 1;
+			return;
+		}
+		var stTS = new Date(this.RMlast.stMY.year, this.RMlast.stMY.month, this.RMlast.stD.getDate(), 12).getTime();
+		var daylen = 3600000*24;
+		var end = howManyDaysBetween(this.RMlast.stD, this.RMlast.eD) +1;
+		this.RMlast.HMDB = end;
+		this.RMlast.stTS = stTS;
+		for (var z = 0; z < end; z++) {
+			this.markDay(stTS + (z*daylen),
+							this.dImg, 
+							null/*color*/,
+							null/*x adjust*/,
+							this.colHW-2/*y adjust*/ ,
+							this.colHW/*wd adjust*/,
+							2 /*ht adjust*/)
+		}
+	},
+	
+	rmRecur: function() {
+		// this function is after it is a known recurrent model
+		// time of when -- occuring each
+		var rcfrequency = this.targetEvent.rruleModel.frequency;
+		var rccount = this.targetEvent.rruleModel.count;
+		// this is week day names array
+		var rcbyday =  this.targetEvent.rruleModel.byday;
+		// this is the date of the month
+		var rcbymonthday = this.targetEvent.rruleModel.bymonthday;
+		// end day
+		var rcuntil = this.targetEvent.rruleModel.until;
+		// howmany times between
+		var rcint = this.targetEvent.rruleModel.interval;
+		// take stTS and duradays to create the base event from the curent event
+		var rcduraD = this.RMlast.HMDB;
+		var rcstTS = this.targetEvent.startTimestamp;
+		var rcstDy = new Date(rcstTS);
+		var rcstD = new Date(Date.UTC(rcstDy.getFullYear(), rcstDy.getMonth(), rcstDy.getDate(), 12));
+		rcstTS = rcstD.getTime();
+		var stDoW = rcstD.getDay();
+		var dlen = 3600000*24;
+		var rcdaysofwk = [];
+		this.recTS = []; // array of timestamps of the recurring evt
+		switch (rcfrequency) {
+				case 'DAILY':
+					var recfreqTS = dlen;
+					break;
+				case 'WEEKLY':
+					var recfreqTS = dlen * 7;
+					break;
+				case 'MONTHLY':
+					var recfreqTS = -1;
+					break;
+				case 'YEARLY':
+					var recfreqTS = -1;
+					break;
+		}
+
+		if(rcuntil !== "" && rcuntil !== undefined) {
+			// until is in UTC jan = 1, need local for cal
+			var rcyear = rcuntil.substring(0,4);
+			var rcmon = parseInt(rcuntil.substring(4,6), 10) -1;
+			var rcday = parseInt(rcuntil.substring(6,8), 10);
+			var rchour = parseInt(rcuntil.substring(9,11), 10);
+			var rcmin = parseInt(rcuntil.substring(11, 13), 10);
+			this.RMlast.recD = new Date(Date.UTC(rcyear, rcmon, rcday, rchour, rcmin));
+		} else if(this.targetEvent.isRecurringForever) {
+			if(rcfrequency == "DAILY" || recfreqTS == -1) {
+			// go out 6 months
+				this.RMlast.recD = new Date(this.RMlast.eMY.month + 6 > 11 ? this.RMlast.eMY.year + 1 : this.RMlast.eMY.year, this.RMlast.eMY.month + 6 > 11 ? this.RMlast.eMY.month - 6 : this.RMlast.eMY.month + 6, this.RMlast.eD.getDate());
+			} else {	// go out 1 year from the end date
+				this.RMlast.recD = new Date(this.RMlast.eMY.year + 1, this.RMlast.eMY.month, this.RMlast.eD.getDate());
+			}
+		} else if((rccount !== -1) && (recfreqTS !== -1)) { //until set outside of webos excludes yearly & monthly
+			this.RMlast.recD = new Date(rcstTS + (recfreqTS*rcint*rccount));
+		}
+		this.RMlast.recD.setUTCHours(12); // set end to noon UTC to match start, UTC get's the right day
+		var recHMDB = howManyDaysBetween(rcstD, this.RMlast.recD) +1;
+		// detect recurr model
+		switch (rcfrequency) {
+			case 'DAILY' : // Do Not Localize
+				// get how many intervals
+				var rcdays = 1 + Math.floor((recHMDB*dlen) / (recfreqTS*rcint));
+				for(var k=0; k < rcdays; k++) { // cycle through intervals
+					this.recTS.push((dlen*k*rcint) + rcstTS);	
+				}
+				while(this.recTS[this.recTS.length -1] > this.RMlast.recD.getTime()){
+					this.recTS.pop();
+				}
+				break;
+				
+            case 'WEEKLY': // Do NOT Localize
+				// find the day numbers from their names
+				var rci = this.targetEvent.rruleModel.byday.length;
+				var rcSundayTS = rcstTS - (stDoW*dlen); 
+				for(var i=0; i < rci; i++) {
+					rcdaysofwk[i] = this.recurrenceRule.dayMap.indexOf(rcbyday[i]);
+				}
+				if(rci > 1) {
+				// get start day dow because it has to be in rcdaysofwk
+					var rcpos = rcdaysofwk.indexOf(stDoW);
+					//need to get to the last of the array before start of next week
+					if(rcpos !== rci - 1){
+						for(var i = rcpos; i <= rci; i++) {
+							for(var j = 0; j < rcduraD; j++) {
+							// array's TS = duration days *milliseconds in a day + (sundays TS + day of week adjustment) 
+							this.recTS.push((dlen*j) + (rcSundayTS + dlen*rcdaysofwk[i]));	
+							}
+						}
+					}
+				}
+				//should be at the first day of the week after start day's week
+				// need to get how many intervals until GetHowManyDays / 7*interval
+				var rcwks = 1 + Math.floor((recHMDB*dlen) / (recfreqTS*rcint)); 
+				for(var k=1; k <= rcwks; k++) { // cycle through intervals
+					var rcwkSunTS = rcSundayTS + (rcint * recfreqTS * k);
+					for(var i = 0; i < rci; i++) { // cycle through days of week
+						for(var j = 0; j < rcduraD; j++) { //cycle duration
+						this.recTS.push((dlen*j) + (rcwkSunTS + dlen*rcdaysofwk[i]));	
+						}
+					}
+				}
+				while(this.recTS[this.recTS.length -1] > this.RMlast.recD.getTime()){
+					this.recTS.pop();
+				}
+            	break;
+                
+            case 'MONTHLY': // Do NOT Localize
+                //Monthly by date
+				var rcmonths = 1 + Math.floor(howManyMonthsBetween(rcstD ,this.RMlast.recD)/rcint);
+                if (this.targetEvent.rruleModel.bymonthday.length > 0) {
+					var rcmonthday = parseInt(this.targetEvent.rruleModel.bymonthday[0], 10);
+					if(rcmonthday > 0) {
+						var rcstmon = rcstD.getMonth();
+						var rcstyear = rcstD.getFullYear();
+						for(var i=0; i<rcmonths; i++) { //cycle through intervals
+							var rcmon = (rcstmon + (i*rcint)) > 11 ? rcstmon + (i*rcint) - 12 : rcstmon + (i*rcint);
+							var rcyear = (rcstmon + (i*rcint)) > 11 ? rcstyear + 1 : rcstyear; 
+							var rcmonTS = Date.UTC(rcyear, rcmon, rcmonthday, 12);
+							var rcmonChk = new Date(rcmonTS);
+							if(rcmonChk.getMonth() === rcmon) { // test valid date in the month
+								for(var j=0; j<rcduraD; j++) { // cycle through duration
+									this.recTS.push(rcmonTS + (j*dlen));
+								}
+							}
+						}
+					} else if(rcmonthday < 0) {
+						var rcstmon = rcstD.getMonth();
+						var rcstyear = rcstD.getFullYear();
+						for(var i=0; i<rcmonths; i++) { //cycle through intervals
+							var rcmon = (rcstmon + (i*rcint)) > 11 ? rcstmon + (i*rcint) - 12 : rcstmon + (i*rcint);
+							var rcmonLast = (rcstmon + 1 + (i*rcint)) > 11 ? rcstmon +1 + (i*rcint) - 12 : rcstmon + 1 +(i*rcint);
+							var rcyear = (rcstmon + 1 + (i*rcint)) > 11 ? rcstyear + 1 : rcstyear; 
+							var rcmonTS = Date.UTC(rcyear, rcmonLast, 1, 12) + rcmonthday*dlen;
+							var rcmonChk = new Date(rcmonTS);
+							if(rcmonChk.getMonth() === rcmon) { // test valid date in the month
+								for(var j=0; j<rcduraD; j++) { // cycle through duration
+									this.recTS.push(rcmonTS + (j*dlen));
+								}
+							}
+						}
+					}
+				} else {
+					// check for multiple by days and last week type set
+					var byDayLen = this.targetEvent.rruleModel.byday.length;
+					var byDayDefault = true;
+					if(byDayLen && byDayLen > 1) {
+						var byDayArray = [];
+						var ford = parseInt(this.targetEvent.rruleModel.byday[0], 10);
+						for(var i=0; i<byDayLen; i++) {
+							var ord = parseInt(this.targetEvent.rruleModel.byday[i], 10);
+							if(ord && ord !== ford) {//we only care about matching bysetpos type repeat
+								byDayDefault = true; //default to just using first byday
+								break; //cal doesn't support multiple pos days in monthly repeat 
+							} else if(ord && ord === ford) {
+								var DoW = this.recurrenceRule.dayMap.indexOf(this.targetEvent.rruleModel.byday[i].substring((ford<0?2:1)));
+								if(byDayArray.indexOf(DoW) === -1) {//not in previously
+									byDayArray.push(DoW);
+								}
+								byDayDefault = false;
+							}
+						} //should have an array with the last days wanted
+						if(!byDayDefault && byDayArray.length > 1) {
+							if(ford<0){
+								var rcmonthday = -1;
+							} else if(ford>0) {
+								var rcmonthday = 1;
+							}
+							var rcstmon = rcstD.getMonth();
+							var rcstyear = rcstD.getFullYear();
+							for(var i=0; i<rcmonths; i++) { //cycle through intervals
+								var rcmon = (rcstmon + (i*rcint)) > 11 ? rcstmon + (i*rcint) - 12 : rcstmon + (i*rcint);
+								if(ford<0){
+									var rcmonLast = (rcstmon + 1 + (i*rcint)) > 11 ? rcstmon +1 + (i*rcint) - 12 : rcstmon + 1 +(i*rcint);
+									var rcyear = (rcstmon + 1 + (i*rcint)) > 11 ? rcstyear + 1 : rcstyear; 
+									var rcmonTS = new Date(rcyear, rcmonLast, 1, 12).getTime() + rcmonthday*dlen;
+								} else if(ford>0){
+									var rcmonLast = (rcstmon + (i*rcint)) > 11 ? rcstmon + (i*rcint) - 12 : rcstmon +(i*rcint);
+									var rcyear = (rcstmon + (i*rcint)) > 11 ? rcstyear + 1 : rcstyear; 
+									var rcmonTS = new Date(rcyear, rcmonLast, 1, 12).getTime();
+								}
+								var rcDoW = new Date(rcmonTS).getDay();
+								for(var k=0; k< Math.abs(ford); k++) {
+									while(byDayArray.indexOf(rcDoW) === -1) {
+										rcmonTS = rcmonTS + rcmonthday*dlen;
+										rcDoW = new Date(rcmonTS).getDay();
+									}
+									if(k !== Math.abs(ford) - 1){
+										rcmonTS = rcmonTS + rcmonthday*dlen;
+										var rcDoW = new Date(rcmonTS).getDay();
+									}
+								}
+								var rcmonChk = new Date(rcmonTS);
+								if(rcmonChk.getMonth() === rcmon) { // test valid date in the month
+									for(var j=0; j<rcduraD; j++) { // cycle through duration
+										this.recTS.push(rcmonTS + (j*dlen));
+									}
+								}
+							}
+						} else {
+							byDayDefault = true; // just one byday
+						}
+					} else if(byDayLen === 1 || byDayDefault) {
+						var ucoldByDay = parseInt(this.targetEvent.rruleModel.byday[0], 10);
+						if(ucoldByDay && ucoldByDay > 0) {
+							var nth = getDOWCount(this.targetEvent.startTimestamp);
+							var rcmonths = 1 + Math.floor(howManyMonthsBetween(rcstD ,this.RMlast.recD)/rcint);
+							var rcstmon = rcstD.getMonth();
+							var rcstyear = rcstD.getFullYear();
+							var rcwantday = rcstD.getDay();
+							for(var i=0; i<rcmonths; i++) { // cycle through intervals
+								var rcmon = (rcstmon + (i*rcint)) > 11 ? rcstmon + (i*rcint) - 12 : rcstmon + (i*rcint);
+								var rcyear = (rcstmon + (i*rcint)) > 11 ? rcstyear + 1 : rcstyear;
+								var rcmonD = new Date(Date.UTC(rcyear, rcmon, 1, 12));
+								var rcfstday = rcmonD.getDay();
+								var rcaddTS = ((rcwantday - rcfstday) < 0) ? ((rcwantday - rcfstday) + 7)*dlen : (rcwantday - rcfstday)*dlen;
+								var rcmonTS = rcmonD.getTime() + rcaddTS + 7*dlen*(nth-1);
+								var rcmonChk = new Date(rcmonTS);
+								if(rcmonChk.getMonth() === rcmon) { // test valid date in the month
+									for(var j=0; j<rcduraD; j++) { // cycle through duration
+										this.recTS.push(rcmonTS + (j*dlen));
+									}
+								}
+							}
+						} else if(ucoldByDay && ucoldByDay <0) {
+							var nth = ucoldByDay;
+							var rcmonths = 1 + Math.floor(howManyMonthsBetween(rcstD ,this.RMlast.recD)/rcint);
+							var rcstmon = rcstD.getMonth();
+							var rcstyear = rcstD.getFullYear();
+							var rcwantday = rcstD.getDay();
+							for(var i=0; i<rcmonths; i++) { // cycle through intervals
+								var rcmon = (rcstmon + (i*rcint)) > 11 ? rcstmon + (i*rcint) - 12 : rcstmon + (i*rcint);
+								var rcmonLast = (rcstmon + 1 + (i*rcint)) > 11 ? rcstmon +1 + (i*rcint) - 12 : rcstmon + 1 +(i*rcint);
+								var rcyear = (rcstmon + 1 + (i*rcint)) > 11 ? rcstyear + 1 : rcstyear; 
+								var rcmonD = new Date(Date.UTC(rcyear, rcmonLast, 1, 12) - dlen);
+								var rcLstday = rcmonD.getDay();
+								var rcaddTS = ((rcwantday - rcLstday) > 0) ? ((rcwantday - rcLstday) - 7)*dlen : (rcwantday - rcLstday)*dlen;
+								var rcmonTS = rcmonD.getTime() + rcaddTS + 7*dlen*(nth+1);
+								var rcmonChk = new Date(rcmonTS);
+								if(rcmonChk.getMonth() === rcmon) { // test valid date in the month
+									for(var j=0; j<rcduraD; j++) { // cycle through duration
+										this.recTS.push(rcmonTS + (j*dlen));
+									}
+								}
+							}
+						}
+					}
+				}
+				while(this.recTS[this.recTS.length -1] > this.RMlast.recD.getTime()){
+					this.recTS.pop();
+				}
+				break;
+				
+			default:                
+				break;
+		}
+		// pull out the exceptions
+		if(this.targetEvent.exdates !== undefined) {
+			if(this.targetEvent.exdates !== "") {
+				var rcexTS = [];
+				var rcexstr = this.targetEvent.exdates.split("\r\n");
+				for(var i=0; i<rcexstr.length; i++){
+					var idx = rcexstr[i].indexOf(":");
+					if(idx !== -1) {
+						rcexstr[i] = rcexstr[i].substring(idx +1);
+					}
+				}
+				for(var j=0; j<rcexstr.length; j++) {
+					var rcyear = rcexstr[j].substring(0,4);
+					var rcmon = parseInt(rcexstr[j].substring(4,6), 10) -1;
+					var rcday = parseInt(rcexstr[j].substring(6,8), 10);
+					rcexTS[j] = Date.UTC(rcyear, rcmon, rcday, 12);
+				}
+				// pull exdates out of array
+				for(var k=0; k<rcexTS.length; k++) {
+					var idx = this.recTS.indexOf(rcexTS[k]);
+					if(idx !== -1) {
+						this.recTS.splice(idx,1);
+					}
+				}
+			}
+		}
+		// mark the recurrence days
+		var rcstop = this.recTS.length;
+		for(var k=0; k<rcstop; k++){
+			this.markDay(this.recTS[k],
+							this.rImg, 
+							null/*color*/,
+							null/*x adjust*/,
+							this.colHW-2/*y adjust*/ ,
+							this.colHW/*wd adjust*/,
+							2 /*ht adjust*/)
+		}
+		
+	},
+	
+	rmEval: function() {
+		if(this.targetModifiedTime) {			
+			this.RMlast.stD = new Date(this.targetModifiedTime.start);
+			this.RMlast.eD = new Date(this.targetModifiedTime.end);
+		} else {
+			this.RMlast.stD = new Date(this.targetEvent.startTimestamp);
+			this.RMlast.eD = new Date(this.targetEvent.endTimestamp);
+		}
+		if(this.targetEvent.rruleModel) {
+			
+			this.rmdoRec = true;
+			return;
+		} else {
+			this.rmdoRec = false;
+			return;
+		}
+	},
+	
     setup: function(){
         //Mojo.Log.info("datetime-assistant:setup");
-        
+		this.tzRequest = this.app.systemService.getCurrentTimeZone(this.getTimeZoneCB.bind(this));
+        this.weekModulusNum = 1;
+		this.weekNumOffset = 0;
+		this.useISOweekNum = false;
+		this.uberMinuteInterval = 5;
+		this.duraBtnOnTop = false;
+		this.prefStartDoW = 0;
+		this.weekCookie = new Mojo.Model.Cookie('WeekViewEnhanced');
+		if (this.weekCookie) {
+			var weekcookie = this.weekCookie.get();
+			if(weekcookie) {
+				if(weekcookie.weeknumoffset !== undefined) {
+						this.weekNumOffset = parseInt(weekcookie.weeknumoffset, 10);
+				} else {
+						this.weekNumOffset = 0;
+				}
+				if(weekcookie.weekmodulusnum !== undefined) {
+						this.weekModulusNum = parseInt(weekcookie.weekmodulusnum, 10);
+				} else {
+						this.weekModulusNum = 1;
+				}
+				if (weekcookie.useisoweeknum !== undefined) {
+					this.useISOweekNum = weekcookie.useisoweeknum;
+				} else {
+					this.useISOweekNum = false;
+				}
+				if (weekcookie.prefsstartofweek !== undefined) {
+					this.prefStartDoW = parseInt(weekcookie.prefsstartofweek, 10) -1;
+				} else {
+					this.prefStartDoW = 0;
+				}
+				if (weekcookie.uberminuteinterval !== undefined) {
+					this.uberMinuteInterval = parseInt(weekcookie.uberminuteinterval, 10);
+				} else {
+					this.uberMinuteInterval = 5;
+				}
+				if (weekcookie.durabtnontop !== undefined) {
+					this.duraBtnOnTop = weekcookie.durabtnontop;
+				} else {
+					this.duraBtnOnTop = false;
+				}
+			}
+		}
 		this.appMenuModel= { visible:true, 
             label: $L('Calendar'),
 							items: [ Mojo.Menu.editItem,
 									{label:$L('Preferences & Accounts'), command:Mojo.Menu.prefsCmd, disabled: true},
 									{label:$L('Help'), command:Mojo.Menu.helpCmd, disabled:false}]
-        }
+        };
         
 		this.controller.setupWidget(Mojo.Menu.appMenu, {omitDefaultItems:true}, this.appMenuModel);
         
         
         this.dateTimeView = this.controller.get('datetime_view');
+		this.duraBtn = 'edit_duration';
+		if(this.duraBtnOnTop === true){
+			this.duraBtn = "uber_dura_picker";
+			var headerParent = this.controller.get('edit_header').parentNode;
+			headerParent.innerHTML = '<div class="icon timedate"></div><div class="title" id="edit_header"></div><div style="float:right; margin-right:5px; margin-top: 13px;" id="uber_dura_picker">@</div>';
+        }
         this.header = this.controller.get('edit_header');
         
         this.blurStage = this.blurStageBound.bind(this);
@@ -168,26 +844,73 @@ var DatetimeAssistant = Class.create({
         this.startDateModel = {
             date: new Date(this.targetModifiedTime.start)
         };
+		this.uberEventDuration = (this.targetModifiedTime.end - this.targetModifiedTime.start)/(60*1000);
+         var startDiv = this.controller.get("edit_startDate").parentNode.parentNode;
+        startDiv.style.paddingTop = "0px";
+        //startDiv.style.marginTop = "-20px";
+        startDiv.removeChild(startDiv.firstChild);
+        startDiv.innerHTML = '<table width="100%"><tr><td width="10%"><div x-mojo-element="Button" id="popCanvasBtn2" class="popCanvas"></div></td><td width="90%"><div class="title datetime-picker"><div id="edit_startDate" x-mojo-element="DatePicker"></div></div></td></tr></table>';
+
+		var startTimeDiv = this.controller.get("start_time_row");
+        startTimeDiv.style.paddingTop = "0px";
+        //startTimeDiv.style.marginTop = "-40px";
+        startTimeDiv.removeChild(startTimeDiv.firstChild);
+        startTimeDiv.innerHTML = '<table width="100%"><tr><td width="10%"><div x-mojo-element="Button" id="popTimezoneBtn2" class="popTimezone"></div></td><td width="90%"><div class="datetime-picker"><div id="edit_startTime" x-mojo-element="TimePicker"></div></div></td></tr></table>';
+
+		var endDiv = this.controller.get("edit_endDate").parentNode.parentNode;
+        endDiv.style.paddingTop = "0px";
+        //endDiv.style.marginTop = "-20px";
+        endDiv.removeChild(endDiv.firstChild);
+        endDiv.innerHTML = '<table width="100%"><tr><td width="10%"><div x-mojo-element="Button" id="popCanvasBtn" class="popCanvas"></div></td><td width="90%"><div class="title datetime-picker"><div id="edit_endDate" x-mojo-element="DatePicker"></div></div></td></tr></table>';
+		
+		var endTimeDiv = this.controller.get("end_time_row");
+        endTimeDiv.style.paddingTop = "0px";
+        //endTimeDiv.style.marginTop = "-40px";
+        endTimeDiv.removeChild(endTimeDiv.firstChild);
+        endTimeDiv.innerHTML = '<table width="100%"><tr><td width="10%"><div x-mojo-element="Button" id="popTimezoneBtn" class="popTimezone"></div></td><td width="90%"><div class="datetime-picker"><div id="edit_endTime" x-mojo-element="TimePicker"></div></div></td></tr></table>';
+
+		var startdatePalmListDiv = this.controller.get("start_date_row").parentNode;
+        var parentDiv = this.controller.get("datetime_view");
+        var newDiv = this.controller.document.createElement("div");
+        newDiv.setAttribute("id", "lDrawer");
+        newDiv.setAttribute("x-mojo-element", "Drawer");
+        newDiv.setAttribute("class", "drawerClass");
+        newDiv.setAttribute("name", "DPmonth_view");
+        newDiv.innerHTML = '<div id="DPscrol" x-mojo-element="Scroller"><div id="DPscrolct">' +
+				'<div id="DPmonth_0" class="DPmv">' +
+				'<canvas id="left0" width="240" height="220" left="0"></canvas>' +
+				'</div><div id="DPmonth_1" class="DPmv">' +
+				'<canvas id="left1" width="240" height="220"></canvas>' +
+				'</div><div id="DPmonth_2" class="DPmv">' +
+				'<canvas id="left2" width="240" height="220"></canvas>' +
+				'</div><div id="DPmonth_3" class="DPmv">' +
+				'<canvas id="right0" width="240" height="220"></canvas>' +
+				'</div><div id="DPmonth_4" class="DPmv">' +
+				'<canvas id="right1" width="240" height="220"></canvas>' +
+				'</div><div id="DPmonth_5" class="DPmv">' +
+				'<canvas id="right2" width="280" height="220"></canvas></div></div></div>';
+        parentDiv.insertBefore(newDiv, startdatePalmListDiv.nextSibling);
         
-	this.controller.setupWidget('edit_startDate',{label: $L('Date'),modelProperty:'date'}, this.startDateModel);
+               
+	this.controller.setupWidget('edit_startDate',{label: ' ',modelProperty:'date'}, this.startDateModel);
         this.controller.listen('edit_startDate', Mojo.Event.propertyChange, this.startDateCallback.bindAsEventListener(this));
         
         this.endDateModel = {
             date: new Date(this.targetModifiedTime.end)
         };
-    this.controller.setupWidget('edit_endDate', {label: $L('Date'),modelProperty:'date'}, this.endDateModel);
+    this.controller.setupWidget('edit_endDate', {label: ' ',modelProperty:'date'}, this.endDateModel);
         this.controller.listen('edit_endDate', Mojo.Event.propertyChange, this.endDateCallback.bindAsEventListener(this));
         
         this.startTimeModel = {
             time: new Date(this.targetModifiedTime.start)
         };
-    this.controller.setupWidget('edit_startTime', {label: $L('Time'),modelProperty:'time'}, this.startTimeModel);
+    this.controller.setupWidget('edit_startTime', {label: ' ',modelProperty:'time', minuteInterval:this.uberMinuteInterval}, this.startTimeModel);
         this.controller.listen('edit_startTime', Mojo.Event.propertyChange, this.startTimeCallback.bindAsEventListener(this));
         
         this.endTimeModel = {
             time: new Date(this.targetModifiedTime.end)
         };
-    this.controller.setupWidget('edit_endTime', {label: $L('Time'), modelProperty:'time'}, this.endTimeModel);
+    this.controller.setupWidget('edit_endTime', {label: ' ', modelProperty:'time', minuteInterval:this.uberMinuteInterval}, this.endTimeModel);
         this.controller.listen('edit_endTime', Mojo.Event.propertyChange, this.endTimeCallback.bindAsEventListener(this));
         
         
@@ -195,19 +918,274 @@ var DatetimeAssistant = Class.create({
         
         this.allDayCheckboxAttribute = {
             modelProperty: "value"
-        }
+        };
         this.allDayCheckboxModel = {
             value: this.targetEvent.allDay
-        }
+        };
         this.controller.get('dtl_allday_cb').observe(Mojo.Event.propertyChange, this.handleAllDayTap.bindAsEventListener(this));
         this.controller.get('allDay_div').observe(Mojo.Event.tap, this.handleAllDayTap.bindAsEventListener(this));
         this.controller.setupWidget('dtl_allday_cb', this.allDayCheckboxAttribute, this.allDayCheckboxModel);
         
         this.updateTimedAllDay(false);
-        
-        
-    },
+       if(!this.duraBtnOnTop) {
+			this.controller.get('edit_duration').setStyle({textDecoration:"underline", height: "30px", fontSize: "14"});
+		}
+        // button setup
+		/*this.controller.setupWidget("uber_dura_picker",
+			{},
+			{
+				label : '@',
+				disabled: false,
+				buttonClass: "secondary"
+			}
+		);*/
+		this.durationClickHandler = this.handleDurationClick.bindAsEventListener(this);
+		this.controller.get(this.duraBtn).observe('mojo-tap', this.durationClickHandler);
+		this.controller.get(this.duraBtn).observe('mojo-hold', this.durationClickHandler);
+		this.controller.setupWidget("popCanvasBtn",
+			{},
+			{
+				label : "",
+				disabled: false
+			}
+		);
+		this.popCanvasBtn = this.controller.get('popCanvasBtn');
+		this.controller.setupWidget("popCanvasBtn2",
+			{},
+			{
+				label : "",
+				disabled: false
+			}
+		);
+		this.canvasBtnHandler = this.DPtoggleDrawer.bind(this);
+		this.popCanvasBtn2 = this.controller.get('popCanvasBtn2');
+		
+		this.controller.setupWidget("popTimezoneBtn",
+			{},
+			{
+				label : "",
+				disabled: false
+			}
+		);
+		this.popTimezoneBtn = this.controller.get('popTimezoneBtn');
+		this.controller.setupWidget("popTimezoneBtn2",
+			{},
+			{
+				label : "",
+				disabled: false
+			}
+		);
+		this.timezoneBtnHandler = this.DPtimezonePop.bind(this);
+		this.popTimezoneBtn2 = this.controller.get('popTimezoneBtn2');
+		
+		Mojo.Event.listen(this.popCanvasBtn, Mojo.Event.tap, this.canvasBtnHandler);
+		Mojo.Event.listen(this.popCanvasBtn2, Mojo.Event.tap, this.canvasBtnHandler);
+		Mojo.Event.listen(this.popTimezoneBtn, Mojo.Event.tap, this.timezoneBtnHandler);
+		Mojo.Event.listen(this.popTimezoneBtn2, Mojo.Event.tap, this.timezoneBtnHandler);
+		// drawer setup
+		this.controller.setupWidget("DPscrol",{mode: 'horizontal-snap'}, {snapElements: {x:[this.controller.get("DPmonth_0"), this.controller.get("DPmonth_1"), this.controller.get("DPmonth_2"), this.controller.get("DPmonth_3"), this.controller.get("DPmonth_4"), this.controller.get("DPmonth_5")]}});
+		this.dModel = {open:false};
+		this.controller.setupWidget('lDrawer', {property:'open', drawerBottomOffset: 50}, this.dModel);
+		this.ldrawer = this.controller.get('lDrawer');		
+		// setup month canvas context
+		this.redlineSplit = this.controller.get("DPmonth_2");
+		this.mthctx = [];
+		this.left0 = this.controller.get("left0");
+		this.mthctx[0] = this.left0.getContext('2d');
+		this.left1 = this.controller.get("left1");
+		this.mthctx[1] = this.left1.getContext('2d');
+		this.left2 = this.controller.get("left2");
+		this.mthctx[2] = this.left2.getContext('2d');
+		this.right0 = this.controller.get("right0");
+		this.mthctx[3] = this.right0.getContext('2d');
+		this.right1 = this.controller.get("right1");
+		this.mthctx[4] = this.right1.getContext('2d');
+		this.right2 = this.controller.get("right2");
+		this.mthctx[5] = this.right2.getContext('2d');
+		// setup vars
+		this.startOfWeek = getPrefs().startOfWeek;
+		this._rdNames = [];
+		this.RMlast = {};
+		this.RMlast.duration = {years: 0, months: 0, days: 0, hours: 0, minutes: 0};
+		this.RM = [];
+		this.topCor = "";
+		this.leftCor = "";
+		this.rtdayimg = new Image();
+		this.rtdayimg.src = "./images/week-current-day.png";
+		this.rmdoRec = false;
+		this.rdayNames();
+		this.rmEval();
+		this.orderRM(this.RMlast.stD, this.RMlast.eD, this.targetEvent.allDay);
+		this.stImg = new Image();
+		this.stImg.src = "./images/day-allday-event-green-center.png";
+		this.eImg = new Image();
+		this.eImg.src = "./images/day-allday-event-red-center.png";
+		this.dImg = new Image();
+		this.dImg.src = "./images/day-event-green.png";
+		this.rImg = new Image();
+		this.rImg.src = "./images/day-event-yellow.png";
+		this.rmScroller = this.controller.get('DPscrol');
+		//this.rmScrollP = {x : 0, y : 0};
+		this.rmlastBtn = null;
+		this.tzlastBtn = null;
+		this.convertedTS = null;
+		this.rtDate = new Date();
+		//this.uberTzId = null;
+		this.rmcalHold = false;
+	},
     
+	
+	// toggle drawer function:
+	DPtoggleDrawer: function(e) {
+		var curBtn = e.currentTarget.id;
+		if(curBtn == "popCanvasBtn2") {
+			this.rmScrollTo(this.RMlast.stD);
+		} else {
+			this.rmScrollTo(this.RMlast.eD);
+		}
+		if (curBtn == this.rmlastBtn)  {
+			this.ldrawer.mojo.setOpenState(false);
+			this.rmlastBtn = null;
+			if(!this.targetEvent.allDay) {
+				this.slideDown(this.controller.get('start_time_row'), 0.4);		
+				this.slideDown(this.controller.get('end_time_row'), 0.4);
+			}
+		} else {
+			this.rmlastBtn = curBtn;
+			var state = this.ldrawer.mojo.getOpenState();
+			if(!state) {
+			
+				this.ldrawer.mojo.setOpenState(true);
+				if(!this.targetEvent.allDay) {
+					this.slideUp(this.controller.get('start_time_row'), 0.4);
+					this.slideUp(this.controller.get('end_time_row'), 0.4);
+				}
+			}
+		}
+	},	
+	
+	getTimeZoneCB: function(payload) {
+		if(payload.timeZone) {
+			this.uberTzId = payload.timeZone;
+			//Mojo.Log.error(Object.toJSON(JSON.stringify(this.uberTzId)));
+		}
+	},
+	
+	DPtimezonePop: function(e) {
+		this.tzlastBtn = e.currentTarget.id && e.currentTarget.id;
+		//Mojo.Log.error("Pop timezone converter  :" + e.currentTarget.id);
+		var tz = this.uberTzId;
+		if(this.tzlastBtn != null && this.tzlastBtn == "popTimezoneBtn2") {
+			// start date
+			var dateStamp = new Date(this.startDateModel.date);
+			var timeStamp = new Date(this.startTimeModel.time);
+			timeStamp.setFullYear(dateStamp.getFullYear());
+			timeStamp.setMonth(dateStamp.getMonth());
+			timeStamp.setDate(dateStamp.getDate());
+		} else if(this.tzlastBtn !== null && this.tzlastBtn == "popTimezoneBtn") {
+			// end date
+			var dateStamp = new Date(this.endDateModel.date);
+			var timeStamp = new Date(this.endTimeModel.time);
+			timeStamp.setFullYear(dateStamp.getFullYear());
+			timeStamp.setMonth(dateStamp.getMonth());
+			timeStamp.setDate(dateStamp.getDate());
+		}
+		if(this.tzlastBtn !== null && timeStamp && tz){
+			this.controller.showDialog({
+            template: 'shared/uber-timezone',
+            assistant: new UberTimezoneConverter(this.controller, this, tz, timeStamp.getTime()),
+			});
+		}
+	},
+	
+	uberConverterCallBack: function(){
+		if(!this.convertedTS || this.tzlastBtn == null){
+			return;
+		}
+		if(this.tzlastBtn != null && this.tzlastBtn == "popTimezoneBtn2") {
+			// start date
+			var oldDura = this.targetModifiedTime.end - this.targetModifiedTime.start;
+			var cDate = new Date(this.convertedTS);
+			var oldDate = new Date(this.startDateModel.date);
+			if(cDate.getFullYear() === oldDate.getFullYear() && cDate.getMonth() === oldDate.getMonth() && cDate.getDate() === oldDate.getDate() ) {
+				if((this.convertedTS < oldDate.getTime()) || ((this.convertedTS > oldDate.getTime()) && this.convertedTS - oldDate.getTime() < oldDura)){this.targetModifiedTime.start = this.convertedTS;}
+				this.startTimeModel.time = new Date(cDate);
+				this.controller.modelChanged(this.startTimeModel);
+				Mojo.Event.send(this.controller.get('edit_startTime'), 'mojo-property-change', {value: this.startTimeModel.time} );
+			} else { //leave targetModifiedTime "date" alone until after time switch
+				var newDate = new Date(this.targetModifiedTime.start); 
+				newDate.setHours(cDate.getHours());
+				newDate.setMinutes(cDate.getMinutes());
+				if((this.convertedTS < oldDate.getTime()) || ((this.convertedTS > oldDate.getTime()) && this.convertedTS- oldDate.getTime() < oldDura)){this.targetModifiedTime.start = newDate.getTime();}
+				this.startTimeModel.time = new Date(newDate);
+				this.controller.modelChanged(this.startTimeModel);
+				Mojo.Event.send(this.controller.get('edit_startTime'), 'mojo-property-change', {value: this.startTimeModel.time} );
+				if((this.convertedTS < oldDate.getTime()) || ((this.convertedTS > oldDate.getTime()) && this.convertedTS - oldDate.getTime() < oldDura)){
+					this.targetModifiedTime.start = this.convertedTS;
+					this.changingStartDate = true;
+				}
+				this.startDateModel.date = new Date(cDate);
+				this.controller.modelChanged(this.startDateModel);
+				Mojo.Event.send(this.controller.get('edit_startDate'), 'mojo-property-change', {value: this.startDateModel.date} );
+				if(this.changingStartDate){this.changingStartDate = false;}
+			}
+			this.calcDuration();
+		} else if(this.tzlastBtn !== null && this.tzlastBtn == "popTimezoneBtn") {
+			// end date
+			var cDate = new Date(this.convertedTS);
+			var oldDate = new Date(this.endDateModel.date);
+			if(cDate.getFullYear() === oldDate.getFullYear() && cDate.getMonth() === oldDate.getMonth() && cDate.getDate() === oldDate.getDate() ) {
+				this.targetModifiedTime.end = cDate.getTime();
+				this.endTimeModel.time = new Date(cDate);
+				this.controller.modelChanged(this.endTimeModel);
+				Mojo.Event.send(this.controller.get('edit_endTime'), 'mojo-property-change', {value: this.endTimeModel.time} );
+			} else { //change time then day
+				//leave targetModifiedTime "date" alone until after time switch
+				var newDate = new Date(this.targetModifiedTime.end); 
+				newDate.setHours(cDate.getHours());
+				newDate.setMinutes(cDate.getMinutes());
+				this.targetModifiedTime.end = newDate.getTime();
+				this.endTimeModel.time = new Date(newDate);
+				this.controller.modelChanged(this.endTimeModel);
+				this.dateTimeoutID = 0;
+				//Mojo.Event.send(this.controller.get('edit_endTime'), 'mojo-property-change', {value: this.endTimeModel.time} );
+				this.targetModifiedTime.end = cDate.getTime();
+				this.endDateModel.date = new Date(this.targetModifiedTime.end);
+				this.controller.modelChanged(this.endDateModel);
+				Mojo.Event.send(this.controller.get('edit_endDate'), 'mojo-property-change', {value: this.endDateModel.date} );
+				this.targetModifiedTime.changed = true;
+			}
+		}
+	},
+	
+	rmScrollTo: function(x) {
+		if (x instanceof Date == true) { 
+			var whatMn = x.getMonth();
+			var whatYr = x.getFullYear();
+			var idx = this.risRendered(whatYr, whatMn);
+		} else if(x >= 0 && x <= 6) {
+			var idx = x;
+		}
+		//idx = idx * 241;
+		//idx = -idx;
+		this.controller.get('DPscrol').mojo.setSnapIndex(idx, true);
+	},
+	
+	rmHandleUpdate: function() {
+		// date picker model changed do redraw
+		for(var i = 0;i<6; i++) {
+			this.mthctx[i].clearRect(0, 0, 240,220);
+		}
+		this.rmEval();
+		this.orderRM(this.RMlast.stD, this.RMlast.eD, this.targetEvent.allDay);
+		this.markDay(new Date(), this.rtdayimg);
+		this.markDay(this.RMlast.stD, this.stImg , null/*color*/, 1/*x adjust*/,null/*y adjust*/ ,2 /*wd adjust*/,this.colHW /*ht adjust*/);
+		this.markDay(this.RMlast.eD, this.eImg , null/*color*/, this.colHW-2/*x adjust*/,null/*y adjust*/ ,2 /*wd adjust*/,this.colHW /*ht adjust*/);
+		this.rmMarkD();
+		if(this.rmdoRec) {this.rmRecur(); }
+		this.rmScrollTo(this.RMlast.stD);
+	},
+	
     checktargetEventDirty: function(){
         //construct rrule
 		if(this.targetEvent.rruleModel)
@@ -388,7 +1366,7 @@ var DatetimeAssistant = Class.create({
 			oldTimeStart.setMinutes(newTimeStart.getMinutes());
 			oldTimeStart.setSeconds(newTimeStart.getSeconds());
 			var oldTimeEnd = oldTimeStart.clone();
-			var oldTimeEnd = oldTimeEnd.addMilliseconds(duration);
+			oldTimeEnd = oldTimeEnd.addMilliseconds(duration);
 			this.targetEvent.startTimestamp = oldTimeStart.getTime();
 			this.targetEvent.endTimestamp = oldTimeEnd.getTime();
 		}
@@ -413,10 +1391,70 @@ var DatetimeAssistant = Class.create({
                 this.callBackAfterUpdate(this.targetId);
             this.controller.stageController.popScene("datetime");
         }
-        
-        
-        
     },
+	
+	saveThisAndFuture: function() {
+		// change end date, add  new event
+		this.newEvent = Object.clone(this.targetEvent);
+		if(this.targetEvent.startTimestamp === this.originalstartTimestamp) {
+			//first event same as series
+			this.saveEvent(undefined);
+			return;
+		}
+		var endtimestamp = new Date(this.targetEvent.endTimestamp);
+		var time = new Date(this.targetModifiedTime.end);
+		time.setHours(endtimestamp.getHours());
+		time.setMinutes(endtimestamp.getMinutes());
+		time.setSeconds(endtimestamp.getSeconds());
+		this.targetEvent.endValidity= time.addDays(-1).getTime();
+		this.recurrenceRule = getRecurrenceRule();
+		this.targetEvent.isRecurringForever = false;
+		if(this.targetEvent.rruleModel.count) {this.targetEvent.rruleModel.count = 0;}
+		this.targetEvent.rruleModel.until= this.recurrenceRule.calculateRecurTime(this.targetEvent.endValidity);
+		this.recurrenceRule.constructRRuleFromModel(this.targetEvent);
+		
+		this.requests.push(this.service.setEvent(this.targetEvent, this.ThisAndFutureCB.bind(this), this.editSceneController));
+	},
+	
+	ThisAndFutureCB: function () {
+		this.newEvent.id = 0;
+		this.newEvent.parentId = undefined;
+		if(this.newEvent.backupID) {this.newEvent.backupID = undefined;}
+		this.targetId = 0;
+		if(!this.newEvent.isRecurringForever) {
+			var time = new Date(this.newEvent.endValidity);
+			var endtimestamp = new Date(this.targetModifiedTime.end);
+			time.setHours(endtimestamp.getHours());
+			time.setMinutes(endtimestamp.getMinutes());
+			time.setSeconds(endtimestamp.getSeconds());
+			this.newEvent.endValidity = time.getTime();
+			this.newEvent.rruleModel.until= this.recurrenceRule.calculateRecurTime(this.newEvent.endValidity);
+		}else if(this.newEvent.isRecurringForever){
+			this.newEvent.endValidity = "Long.MAX_VALUE";
+			if(this.newEvent.rruleModel.until) {delete this.newEvent.rruleModel.until;}
+		}
+		this.newEvent.startTimestamp = this.targetModifiedTime.start;
+		this.newEvent.start = this.targetModifiedTime.start;
+		this.newEvent.endTimestamp = this.targetModifiedTime.end;
+		this.newEvent.end = this.targetModifiedTime.end;
+		
+		this.recurrenceRule.constructRRuleFromModel(this.newEvent);
+		if(this.newEvent.originalstartTimestamp) {this.newEvent.originalstartTimestamp = undefined;}
+		this.requests.push(this.service.setEvent(this.newEvent, this.createdEvent.bind(this), this.editSceneController));
+	},
+	
+	createdEvent: function(response) {
+		if(response.id) {
+			this.newEvent.id = response.id + "";
+			this.newEvent.dirty = false;
+		}
+		if(this.callBackAfterUpdate != undefined) {
+			this.callBackAfterUpdate(this.newEvent.id);
+		}
+		this.targetCallBack(this.newEvent, Object.clone(this.newEvent));
+		this.controller.stageController.popScene("datetime");
+	},
+	
     renderSetEvent: function(response){
         //this callback is called only in the case
         //when we are in the scene and went into cardmode
@@ -431,12 +1469,51 @@ var DatetimeAssistant = Class.create({
     },
     
     activate: function(){
-    },
+		this.markDay(new Date(), this.rtdayimg);
+		this.markDay(this.RMlast.stD, this.stImg , null/*color*/,0/*x adjust*/,null/*y adjust*/ ,2 /*wd adjust*/,this.colHW /*ht adjust*/);
+		this.markDay(this.RMlast.eD, this.eImg , null/*color*/, this.colHW-2/*x adjust*/,null/*y adjust*/ ,2 /*wd adjust*/,this.colHW /*ht adjust*/);
+		this.rmMarkD();
+		if(this.rmdoRec) {this.rmRecur(); }
+		this.rmScrollTo(this.RMlast.stD);
+		//tap handlers
+		this.calTapHandler = this.handleCalTap.bind(this);
+		this.calHoldHandler = this.handleCalHold.bind(this);
+		Mojo.Event.listen(this.left0, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.listen(this.left1, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.listen(this.left2, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.listen(this.right0, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.listen(this.right1, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.listen(this.right2, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.listen(this.left0, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.listen(this.left1, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.listen(this.left2, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.listen(this.right0, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.listen(this.right1, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.listen(this.right2, Mojo.Event.hold, this.calHoldHandler);
+		},
     
     deactivate: function(){
-        //Mojo.Log.info("datetime-assistant:deactivate");	
-        this.controller.stopListening(this.controller.document, Mojo.Event.deactivate, this.blurStage);
-    },
+		Mojo.Event.stopListening(this.popCanvasBtn, Mojo.Event.tap, this.canvasBtnHandler);
+		Mojo.Event.stopListening(this.popCanvasBtn2, Mojo.Event.tap, this.canvasBtnHandler);
+		Mojo.Event.stopListening(this.popTimezoneBtn, Mojo.Event.tap, this.timezoneBtnHandler);
+		Mojo.Event.stopListening(this.popTimezoneBtn2, Mojo.Event.tap, this.timezoneBtnHandler);
+        this.controller.get(this.duraBtn).stopObserving('mojo-tap', this.durationClickHandler);
+		this.controller.get(this.duraBtn).stopObserving('mojo-hold', this.durationClickHandler);
+		//Mojo.Log.info("datetime-assistant:deactivate");	
+		this.controller.stopListening(this.controller.document, Mojo.Event.deactivate, this.blurStage);
+		Mojo.Event.stopListening(this.left0, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.stopListening(this.left1, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.stopListening(this.left2, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.stopListening(this.right0, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.stopListening(this.right1, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.stopListening(this.right2, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.stopListening(this.left0, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.stopListening(this.left1, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.stopListening(this.left2, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.stopListening(this.right0, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.stopListening(this.right1, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.stopListening(this.right2, Mojo.Event.hold, this.calHoldHandler);
+	},
     	
 	//When the start date of the event is changed, WEEKLY:single day, WEEKLY:custom, MONTHLY repeating events 
 	//must update their rruleModel. DAILY, YEARLY, and WEEKLY:weekdays repeating events do not need to be changed.
@@ -493,15 +1570,32 @@ var DatetimeAssistant = Class.create({
                 
             case 'MONTHLY': // Do NOT Localize
                 //Monthly by date
+				if(oldDate.getDate() === newDate.getDate() && oldDate.getMonth() === newDate.getMonth() && oldDate.getFullYear() === newDate.getFullYear()) {
+					return; // no reason to change - just changed time
+				}
+				var ucLastDay = getIsLastProps(newDate.getTime());
                 if (this.targetEvent.rruleModel.bymonthday.length > 0) {
-                    this.targetEvent.rruleModel.bymonthday = [];
-                    this.targetEvent.rruleModel.bymonthday.push(newDate.toString("d"));
-                }
-                else {
-                    var nth = getDOWCount(this.targetEvent.startTimestamp);
-                    this.targetEvent.rruleModel.byday = [];
-                    var byday = this.recurrenceRule.dayMap[newDate.getDay()];
-                    this.targetEvent.rruleModel.byday.push(nth + byday);
+					var ord = parseInt(this.targetEvent.rruleModel.bymonthday[0], 10);
+                    if(ord >0 || (ord < 0 && ucLastDay.lastweek === false) ) {
+						this.targetEvent.rruleModel.bymonthday = [];
+						this.targetEvent.rruleModel.bymonthday.push(newDate.toString("d"));
+					} else if(ord < 0 && ucLastDay.lastweek) { //was a last day of month type
+						this.targetEvent.rruleModel.bymonthday = [];
+						this.targetEvent.rruleModel.bymonthday.push(ucLastDay.lastday);
+					}
+                } else {
+					var ord = this.targetEvent.rruleModel.byday.length > 0 ? parseInt(this.targetEvent.rruleModel.byday[0], 10) : -1;
+					if(ord >0 || (ord < 0 && ucLastDay.lastweek === false) ) {
+						var nth = getDOWCount(this.targetEvent.startTimestamp);
+						this.targetEvent.rruleModel.byday = [];
+						var byday = this.recurrenceRule.dayMap[newDate.getDay()];
+						this.targetEvent.rruleModel.byday.push(nth + byday);
+					} else if(ord < 0 && ucLastDay.lastweek) { //was a last day, week, weekend type
+						var nth = -1;
+						this.targetEvent.rruleModel.byday = [];
+						var byday = this.recurrenceRule.dayMap[newDate.getDay()];
+						this.targetEvent.rruleModel.byday.push(nth + byday);
+					}
                 }
 				changed = true;
                 break;
@@ -553,6 +1647,7 @@ var DatetimeAssistant = Class.create({
             this.targetEvent.alldayReservedStartTimestamp = this.targetModifiedTime.start;
             this.targetEvent.alldayReservedEndTimestamp = this.targetModifiedTime.end;
         }
+		this.rmHandleUpdate();
     },
     
     endDateSet: function(isOnBack){
@@ -561,7 +1656,7 @@ var DatetimeAssistant = Class.create({
         if (this.datetimeoutID) {
             var date = this.tentativeEndDate;
             var newTimeStamp = new Date(this.targetModifiedTime.end);
- 			var prevEndYear = newTimeStamp.getFullYear();
+			var prevEndYear = newTimeStamp.getFullYear();
             newTimeStamp.setFullYear(date.getFullYear());
             newTimeStamp.setDate(date.getDate());
             newTimeStamp.setMonth(date.getMonth());
@@ -642,8 +1737,10 @@ var DatetimeAssistant = Class.create({
 				}
             }
             
-            if (isOnBack == false) 
+            if (isOnBack == false) {
                 this.calcDuration();
+				this.rmHandleUpdate();
+			}
             this.targetModifiedTime.changed = true;
             if (this.datetimeoutID) {
                 this.controller.window.clearTimeout(this.datetimeoutID);
@@ -751,6 +1848,7 @@ var DatetimeAssistant = Class.create({
         this.controller.modelChanged(this.startTimeModel);
         this.controller.modelChanged(this.endTimeModel);
         this.targetModifiedTime.changed = false;
+		this.rmHandleUpdate();
         //Mojo.Log.info("Old event all day %o, new Event all day %o",this.oldEvent.allDay,this.allDayCheckboxModel);
         if (this.oldEvent.allDay != this.allDayCheckboxModel.value) {
         
@@ -761,6 +1859,215 @@ var DatetimeAssistant = Class.create({
         this.targetCallBack(this.targetEvent, null);
         
     },
-
+	
+	eventDurationChoose: function(value){
+		if (value !== undefined && value != this.uberEventDuration) {
+			if(this.duraOnEnd){
+				var startTS = this.targetModifiedTime.start;
+				var eDate = new Date(startTS + value*60*1000);
+				//first time
+				this.targetModifiedTime.end = eDate.getTime();
+				this.endTimeModel.time = new Date(eDate);
+				this.controller.modelChanged(this.endTimeModel);
+				this.dateTimeoutID = 0;
+				//now date
+				this.targetModifiedTime.end = eDate.getTime();
+				this.endDateModel.date = new Date(this.targetModifiedTime.end);
+				this.controller.modelChanged(this.endDateModel);
+				Mojo.Event.send(this.controller.get('edit_endDate'), 'mojo-property-change', {value: this.endDateModel.date} );
+				this.targetModifiedTime.changed = true;
+				this.uberEventDuration = value;
+			} else {
+				var oldDura = this.targetModifiedTime.end - this.targetModifiedTime.start;
+				var oldDate = new Date(this.startDateModel.date);
+				var endTS = this.targetModifiedTime.end;
+				var startTS = endTS - value*60*1000;
+				var sDate = new Date(endTS - value*60*1000);
+				if(sDate.getFullYear() === oldDate.getFullYear() && sDate.getMonth() === oldDate.getMonth() && sDate.getDate() === oldDate.getDate() ) {
+					if((startTS < oldDate.getTime()) || ((startTS > oldDate.getTime()) && startTS - oldDate.getTime() < oldDura)){this.targetModifiedTime.start = startTS;}
+					this.startTimeModel.time = new Date(sDate);
+					this.targetModifiedTime.start = startTS;
+					this.controller.modelChanged(this.startTimeModel);
+					Mojo.Event.send(this.controller.get('edit_startTime'), 'mojo-property-change', {value: this.startTimeModel.time} );
+				}else { //leave targetModifiedTime "date" alone until after time switch
+					var newDate = new Date(this.targetModifiedTime.start); 
+					newDate.setHours(sDate.getHours());
+					newDate.setMinutes(sDate.getMinutes());
+					if((startTS < oldDate.getTime()) || ((startTS > oldDate.getTime()) && startTS - oldDate.getTime() < oldDura)){this.targetModifiedTime.start = newDate.getTime();}
+					this.startTimeModel.time = new Date(newDate);
+					this.controller.modelChanged(this.startTimeModel);
+					Mojo.Event.send(this.controller.get('edit_startTime'), 'mojo-property-change', {value: this.startTimeModel.time} );
+					if((startTS < oldDate.getTime()) || ((startTS > oldDate.getTime()) && startTS - oldDate.getTime() < oldDura)){
+						this.targetModifiedTime.start = startTS;
+						this.changingStartDate = true;
+					}
+					this.startDateModel.date = new Date(sDate);
+					this.controller.modelChanged(this.startDateModel);
+					Mojo.Event.send(this.controller.get('edit_startDate'), 'mojo-property-change', {value: this.startDateModel.date} );
+					if(this.changingStartDate){this.changingStartDate = false;}
+				}
+				this.uberEventDuration = value;
+				this.calcDuration();
+			}
+		}
+	},
+	
+	handleDurationClick: function(event){
+		//console.error("event down altKey" + JSON.stringify((event && event.type)));
+		var items = [];
+		if(event && event.type && event.type === 'mojo-tap'){
+			this.duraOnEnd = true;
+		} else {
+			this.duraOnEnd = false;
+		}
+		Event.stop(event);
+		var hrs, mins;
+		//var prefs = this.prefsManager.getPrefs();
+		var startTime = new Date(getPrefs().startTimeOfDay);
+		startTime.addMinutes(startTime.getTimezoneOffset());
+		var utcStartTime = startTime.getTime();
+		var startDate = new Date(utcStartTime);
+		hrs = startDate.getHours();
+		mins = startDate.getMinutes();
+		startDate.setTime(this.targetModifiedTime.start);
+		startDate.clearTime();
+		startDate.setHours(hrs);
+		startDate.setMinutes(mins);
+		var startTS =startDate.getTime(); 
+		var endTime = new Date(getPrefs().endTimeOfDay);
+		endTime.addMinutes(endTime.getTimezoneOffset());
+		var utcEndTime = endTime.getTime();
+		var endDate = new Date(utcEndTime);
+		hrs = endDate.getHours();
+		mins = endDate.getMinutes();
+		endDate.setTime(this.targetModifiedTime.end);
+		endDate.clearTime();
+		endDate.setHours(hrs);
+		endDate.setMinutes(mins);
+		var endTS = endDate.getTime();
+		items = [{
+					label: $L("15 minutes"),
+					command: 15
+				},{
+					label: $L("30 minutes"),
+					command: 30
+				},{
+					label: $L("45 minutes"),
+					command: 45
+				}, {
+					label: $L("1 hour"),
+					command: 60
+				}, {
+				label: $L("90 minutes"),
+					command: 90
+				}, {
+					label: $L("2 hours"),
+					command: 120
+				}, {
+					label: $L("3 hours"),
+					command: 180
+				}, {
+					label: $L("4 hours"),
+					command: 240
+				}, {
+					label: $L("8 hours"),
+					command: 480
+				}];
+		if(this.duraOnEnd){
+			var cmd = (endTS - this.targetModifiedTime.start)/(60*1000);
+			//console.error("cmd end : " + cmd);
+			items.push({label: $L("Until end of day"), command: cmd});
+		} else {
+			var cmd = (this.targetModifiedTime.end - startTS)/(60*1000);
+			//console.error("cmd start : " + cmd);
+			items.push({label: $L("From start of day"), command: cmd});
+		}
+		
+		this.controller.popupSubmenu({
+				onChoose: this.eventDurationChoose.bind(this),
+				toggleCmd: this.uberEventDuration,
+				items: items
+			});
+	},
+	
+	//Calendar Tap Handlers
+	handleCalHold: function(event) {
+		// set the hold var, send to tap handler
+		this.rmcalHold = true;
+		this.handleCalTap(event);
+	},
+	
+	handleCalTap: function(event) {
+		Event.stop(event);
+		var x = event.down.offsetX;
+		var y = event.down.offsetY;
+		//get rid of tap areas not in calendar day area
+		if(x <= 30 || y <= 40 || x>= 241) {
+			this.rmcalHold = false;
+			return;
+		}
+		var rmcan = event.target.id;
+		switch (rmcan) {
+			case 'left0':
+				var rmindex = 0;
+				break;
+			case 'left1':
+				var rmindex = 1;
+				break;
+			case 'left2':
+				var rmindex = 2;
+				break;
+			case 'right0':
+				var rmindex = 3;
+				break;
+			case 'right1':
+				var rmindex = 4;
+				break;
+			case 'right2':
+				var rmindex = 5;
+				break;
+		}
+		// get first day index month year
+		if (x && y && (rmindex !== undefined)) {
+			var calx = x - 30;
+			var caly = y - 40;
+			var cald1idx = this.RM[rmindex].fstDayLidx;
+			var calcol = Math.floor(calx/this.colHW);
+			var calrow = Math.floor(caly/this.colHW);
+			var caldate = ((calrow * 7) + calcol +1) - cald1idx;
+			if((caldate > this.RM[rmindex].maxdays) || (caldate <= 0)) {
+				// tapped an area with invalid date
+				this.rmcalHold = false;
+				return;
+			}
+			var calmon = this.RM[rmindex].month;
+			var calyear = this.RM[rmindex].year;
+			if((calyear !== undefined) && (calmon !== undefined) && (caldate !== undefined)) {
+				if(this.rmlastBtn != null && this.rmlastBtn == "popCanvasBtn2") {
+					// start date
+					this.startDateModel.date = new Date(calyear, calmon, caldate);
+					this.controller.modelChanged(this.startDateModel);
+					Mojo.Event.send(this.controller.get('edit_startDate'), 'mojo-property-change', {value: this.startDateModel.date} )
+				} else if(this.rmlastBtn !== null && this.rmlastBtn == "popCanvasBtn") {
+					// end date
+					this.endDateModel.date = new Date(calyear, calmon, caldate);
+					this.controller.modelChanged(this.endDateModel);
+					Mojo.Event.send(this.controller.get('edit_endDate'), 'mojo-property-change', {value: this.endDateModel.date} )
+				}
+				// check whether drawer should close
+				if(this.rmcalHold == false) {
+					this.ldrawer.mojo.setOpenState(false);
+					this.rmlastBtn = null;
+					if(!this.targetEvent.allDay) {
+						this.slideDown(this.controller.get('start_time_row'), 0.4);		
+						this.slideDown(this.controller.get('end_time_row'), 0.4);
+					}
+				} else {
+					this.rmcalHold = false;
+					return;
+				}
+			}
+		}
+	},
 
 });
diff --git a/usr/palm/applications/com.palm.app.calendar/app/controllers/day-assistant.js b/usr/palm/applications/com.palm.app.calendar/app/controllers/day-assistant.js
index 84263c0..160f789 100644
--- a/usr/palm/applications/com.palm.app.calendar/app/controllers/day-assistant.js
+++ b/usr/palm/applications/com.palm.app.calendar/app/controllers/day-assistant.js
@@ -11,17 +11,131 @@ var DayAssistant = Class.create({
 		this.appMenuModel = { visible:true, 
 									label:$L('Calendar'), 
 									items: [ Mojo.Menu.editItem,
-											{label:$L('New'), items: [{label:$L('Event'), command:'newtimed', disabled:false},
-	                													{label:$L('All day event'), command:'newallday', disabled:false}] 
+											{label:$L('New'), items: [{label:$L('Event'), shortcut:'n', command:'newtimed', disabled:false},
+	                													{label:$L('All day event'), shortcut:'d', command:'newallday', disabled:false}] 
 	                													 				
 											},											
 											{label:$L('Sync Now'), command:'sync', id: 2},
 											{label:$L('Show today'), command:'today', id: 3},
-											{label:$L('Jump to...'), command:'jumpto', id: 4},
+											{label:$L('Jump to...')+ '/' + $L("Templates"), command:'jumpto', id: 4},
 											{label:$L('Missed reminders...'), command:'reminders', id: 5},
 											{label:$L('Preferences & Accounts'), command:Mojo.Menu.prefsCmd, disabled: false},
+											//this.compressedMenuItem = {label:$L('Compressed View'), command:'compressed', chosen: true},
 											{label:$L('Help'), command:Mojo.Menu.helpCmd, disabled:false}]
 								};
+		
+		this.uberCategories = [
+				{'name': 'birthday'}, // Do NOT Localize these
+				{'name': 'car'},
+				{'name': 'doctor'},
+				{'name': 'holiday'},
+				{'name': 'kids'},
+				{'name': 'party'},
+				{'name': 'plane'},
+				{'name': 'vacation'},
+			];
+		
+		this.compressedView = false;
+		this.enhancedView = false;
+		this.dayViewShrink = "none";
+		this.dayViewIcons = true;
+		this.uberBackGesture = 'last';
+		this.weekNumOffset = 0;
+		this.useISOweekNum = false;
+		this.prefStartDoW = 0;
+		this.weekModulusNum = 1;
+		this.weekNumberTitle = true;
+		this.ucGroupsFirst = false;
+		this.dayMinutePopup = false;
+		this.dayMinInterval = 15;
+		this.dayCookie = new Mojo.Model.Cookie('DayEnhanced');
+		if (this.dayCookie !== undefined) {
+			var daycookie = this.dayCookie.get();
+			if(daycookie !== undefined) {
+				if(daycookie.dayviewcompressed !== undefined) {
+					this.compressedView = daycookie.dayviewcompressed;
+				} else {
+					this.compressedView = false;
+				}
+				if(daycookie.dayviewenhanced !== undefined) {
+					this.enhancedView = daycookie.dayviewenhanced;
+				} else {
+					this.enhancedView = false;
+				}
+				if(daycookie.dayviewshrink !== undefined) {
+					this.dayViewShrink = daycookie.dayviewshrink;
+				} else {
+					this.dayViewShrink = "none";
+				}
+				if(daycookie.dayviewicons !== undefined) {
+					this.dayViewIcons = daycookie.dayviewicons;
+				} else {
+					this.dayViewIcons = true;
+				}
+				if(daycookie.weeknumoffset !== undefined) {
+					this.weekNumOffset = parseInt(daycookie.weeknumoffset,10);
+				} else {
+					this.weekNumOffset = 0;
+				}
+				if(daycookie.weekmodulusnum !== undefined) {
+					this.weekModulusNum = parseInt(daycookie.weekmodulusnum, 10);
+				} else {
+					this.weekModulusNum = 1;
+				}
+				if(daycookie.weeknumbertitle !== undefined) {
+						this.weekNumberTitle = daycookie.weeknumbertitle;
+				} else {
+						this.weekNumberTitle = true;
+				}
+				if(daycookie.uberbackgesture !== undefined) {
+						this.uberBackGesture = daycookie.uberbackgesture;
+				} else {
+						this.uberBackGesture = 'last';
+				}
+				if (daycookie.useisoweeknum !== undefined) {
+					this.useISOweekNum = daycookie.useisoweeknum;
+				} else {
+					this.useISOweekNum = false;
+				}
+				if (daycookie.prefsstartofweek !== undefined) {
+					this.prefStartDoW = parseInt(daycookie.prefsstartofweek, 10) -1;
+				} else {
+					this.prefStartDoW = 0;
+				}
+				if (daycookie.ucgroupsfirst !== undefined) {
+					this.ucGroupsFirst = daycookie.ucgroupsfirst;
+				} else {
+					this.ucGroupsFirst = false;
+				}
+				if(daycookie.dayminutepopup !== undefined) {
+						this.dayMinutePopup = daycookie.dayminutepopup;
+				} else {
+						this.dayMinutePopup = false;
+				}
+				if(daycookie.daymininterval !== undefined) {
+						this.dayMinInterval = parseInt(daycookie.daymininterval, 10);
+				} else {
+						this.dayMinInterval = 15;
+				}
+			}
+		}
+		this.userUberCats = [];
+		this.catCookie = new Mojo.Model.Cookie("userUberCats");
+		if(this.catCookie) {
+			var catcookie = this.catCookie.get();
+			if(catcookie) {
+				if(catcookie.userubercats && catcookie.userubercats.length > 0){
+					this.userUberCats = catcookie.userubercats;
+				} else {
+					this.userUberCats = this.uberCategories;
+				}
+			} else {
+				this.userUberCats = this.uberCategories;
+			}
+		} else {
+				this.userUberCats = this.uberCategories;
+		}
+
 		this.colors = {
 				'cal-color-blue': 	{background: 'rgb(145, 211, 234)', border: 'rgb(99, 165, 188)',	text: 'rgb(5, 32, 41)'},
 				'cal-color-green': 	{background: 'rgb(140, 240, 140)', border: 'rgb(77, 206, 77)',	text: 'rgb(1, 52, 1)'},
@@ -31,7 +145,7 @@ var DayAssistant = Class.create({
 				'cal-color-pink': 	{background: 'rgb(245, 156, 188)', border: 'rgb(209, 104, 147)',text: 'rgb(40, 0, 0)'},
 				'cal-color-red': 	{background: 'rgb(255, 151, 151)', border: 'rgb(224, 98, 98)',	text: 'rgb(45, 8, 21)'},
 				'cal-color-purple': {background: 'rgb(217, 183, 255)', border: 'rgb(177, 128, 232)',text: 'rgb(38, 22, 56)'},
-				'cal-color-teal': 	{background: 'rgb(114, 223, 210)', border: 'rgb(68, 177, 164)',	text: 'rgb(0, 42, 36)'},
+				'cal-color-teal': 	{background: 'rgb(114, 223, 210)', border: 'rgb(68, 177, 164)',	text: 'rgb(0, 42, 36)'}
 			};
 			
 		this.PREV_DAY = 1;
@@ -42,11 +156,23 @@ var DayAssistant = Class.create({
 		this.pendingCalendarSettingsUpdate = false;
 		//this.pendingOpenScratchEventInDetails = false;
 		this.snapEffectCount = 0;
-
-		
-		this.hourHeight = 48;
-		this.halfHourHeight = 24;
-		this.fifteenMinuteHeight = 12;
+		this.imgAlarm = new Image();
+		this.imgAlarm.src = "/media/internal/.scrims/ubercalendar/alarm-icon.png";
+		this.imgIcons = new Object();
+		
+		if(this.enhancedView && this.dayViewShrink == "strong") {
+			this.hourHeight = 16;
+			this.halfHourHeight = Math.round(this.hourHeight / 2);
+			this.fifteenMinuteHeight = Math.round(this.hourHeight / 4);
+		} else if(this.enhancedView && this.dayViewShrink == "medium") {
+			this.hourHeight = 24;
+			this.halfHourHeight = Math.round(this.hourHeight / 2);
+			this.fifteenMinuteHeight = Math.round(this.hourHeight / 4);
+		} else {
+			this.hourHeight = 48;
+			this.halfHourHeight = 24;
+			this.fifteenMinuteHeight = 12;
+		}
 		
 		this.totalWidth = 320;
 		this.totalHeight = this.hourHeight * 24;
@@ -170,6 +296,28 @@ var DayAssistant = Class.create({
 		this.hideFastScrollView();
 	},
 	
+	getUCGroupsProps: function() {
+		// check for UC groups
+		if(this.uberGroups && this.uberGroups.inUse === true && this.userUberCalGroups && this.userUberCalGroups.length > 0 && this.userUberCalGroups[0].rId !== undefined) {
+			var rID = this.uberGroups.rId;
+			if(rID) {
+				var len = this.userUberCalGroups.length;
+				var idx;
+				for(var i=0; i < len; i++){
+					if(rID === this.userUberCalGroups[i].rId) {
+						var idx = i;
+						break;
+					}
+				}
+				if(idx !== undefined && this.userUberCalGroups[idx].includes && this.userUberCalGroups[idx].includes.length >0) {
+					this.ucGroupIdx = idx;
+				}
+			}
+		} else {
+			this.ucGroupIdx = undefined;
+		}
+	},
+	
 	isDayDisplayed: function(day) {
 		if (this.listeningToScroller)
 			return 0;
@@ -211,18 +359,46 @@ var DayAssistant = Class.create({
 		
 	buildDayTitle: function(doScrim) {
 		var today = Date.today().clearTime();
+		var year = new Date(this.dayDate).getFullYear();
+		var month = new Date(this.dayDate).getMonth();
+		var maxwkn = this.useISOweekNum === true ? new Date((month != 0 ? year : year -1), 11, 28).getISO8601Week() : new Date((month != 0 ? year : year -1), 11, 28).getWeekOfYear(this.prefStartDoW);
 		var dayDateNoTime = new Date(this.dayDate).clearTime();
+		var weekNumber = this.useISOweekNum === true ? new Date(this.dayDate).getISO8601Week() : new Date(this.dayDate).getWeekOfYear(this.prefStartDoW);
+		maxwkn = maxwkn == 0 ? 53 : maxwkn;
+		weekNumber = weekNumber == 0 ? maxwkn : weekNumber;
+		if(this.weekNumOffset !== undefined && this.weekNumOffset !=0) {
+			var wkNum = parseInt(weekNumber,10) + this.weekNumOffset;
+			weekNumber = wkNum > maxwkn ? (wkNum - maxwkn) : wkNum;
+			weekNumber = weekNumber < 10 ? '0' + weekNumber : weekNumber;
+		}
+		if(this.weekModulusNum != undefined && this.weekModulusNum <= 52 && this.weekModulusNum != 1) {
+			modNumber = (parseInt(weekNumber, 10) % this.weekModulusNum);
+			modNumber = modNumber !== 0 ? modNumber : this.weekModulusNum;
+			weekNumber = weekNumber + ' (' + modNumber +')';
+		}
 		
 		if (dayDateNoTime.compareTo(today) == 0) {
-			var template = new Template($L("#{todayStr}, #{dateStr}"));
-			var todayStr= Mojo.Format.formatRelativeDate(today, {date: "short"}).capitalize();
-			
 			var templateModel = {};
+			if(this.weekNumberTitle) {
+				var template = new Template($L("#{todayStr}, #{dateStr}") + ", " + $L("W#{weekStr}"));
+				templateModel.weekStr = weekNumber;
+			} else {
+				var template = new Template($L("#{todayStr}, #{dateStr}"));
+			}
+			var todayStr= Mojo.Format.formatRelativeDate(today, {date: "short"}).capitalize();
 			templateModel.todayStr = todayStr;
 			templateModel.dateStr = Mojo.Format.formatDate(this.dayDate, $L("EEE MMM d"));
 			this.controller.get('dv_title').update(template.evaluate(templateModel)); // Localize this date format string
 		} else {
-			this.controller.get('dv_title').update(Mojo.Format.formatDate(this.dayDate, $L("EEE MMM d, yyyy"))); // Localize this date format string
+			if(this.weekNumberTitle) {
+				var template = new Template($L("#{dateStr}") + ", " + $L("W#{weekStr}"));
+				var templateModel = {};
+				templateModel.weekStr = weekNumber;
+				templateModel.dateStr = Mojo.Format.formatDate(this.dayDate, $L("EEE MMM d, yyyy"));
+				this.controller.get('dv_title').update(template.evaluate(templateModel)); // Localize this date format string
+			} else {
+				this.controller.get('dv_title').update(Mojo.Format.formatDate(this.dayDate, $L("EEE MMM d, yyyy"))); // Localize this date format string
+			}
 		}
 		
 		if (doScrim) {
@@ -281,8 +457,10 @@ var DayAssistant = Class.create({
 		
 		var scrollerHeight = this.controller.window.innerHeight-spacerHeight;
 
-		if (newHeight < scrollerHeight)
+		if (newHeight < scrollerHeight) {
 			newHeight = scrollerHeight;
+		}
+		newHeight += 48;
 		
 		if (this.divs[whichDay].eventsCanvas.offsetHeight != newHeight) {
 			this.divs[whichDay].eventsCanvas.setAttribute('height', newHeight+'px');
@@ -344,8 +522,14 @@ var DayAssistant = Class.create({
 	},
 	getXIndexForTimeText:function(ctx,i,text)
 	{		
-			
-			ctx.font = "bold 14px Prelude";
+			if(this.enhancedView && this.dayViewShrink == "strong") {
+				ctx.font = "bold 10px Prelude";
+			} else if(this.enhancedView && this.dayViewShrink == "medium") {
+				ctx.font = "bold 12px Prelude";
+			} else {
+				ctx.font = "bold 14px Prelude";
+			}
+		
 			
 
 			var metrics = ctx.measureText(text);
@@ -381,14 +565,37 @@ var DayAssistant = Class.create({
 				}
 				
 				if (i < 24) {
-					var text = String(i);
-					if (this.currentTimeFormat == "HH12") {
-						if (i == 0) 
-							text = '12';
-						if (i > 12) 
-							text = String(i - 12);
+					if(this.enhancedView && this.dayViewShrink != "none") {
+						// replace the time labels on the left with just three labels
+						var text = "";
+						if ( i == 12 ) {
+							text = (this.currentTimeFormat == "HH12") ? $L("noon") : "12";
+							ctx.strokeText(text, this.getXIndexForTimeText(ctx, i, text), top + (this.dayViewShrink == "strong" ? 7 : 11));
+						} else if ( i == 6  || i == 18 ) {
+							text = "";
+							if (this.currentTimeFormat == "HH12") {
+								if ( i > 12 ) {
+									text = String(i - 12) + "pm";
+								}
+								else {
+									text = i + "am";
+								}
+							} else {
+								i = i<10 ? '0' + i : i;
+								text = String(i);
+							}
+						}
+						ctx.strokeText(text, this.getXIndexForTimeText(ctx, i, text), top + (this.dayViewShrink == "strong" ? 7 : 11));
+					} else {
+						var text = String(i);
+						if (this.currentTimeFormat == "HH12") {
+							if (i == 0) 
+								text = '12';
+							if (i > 12) 
+								text = String(i - 12);
+						}
+						ctx.strokeText(text, this.getXIndexForTimeText(ctx, i, text), top + 15);
 					}
-					ctx.strokeText(text, this.getXIndexForTimeText(ctx, i, text), top + 15);
 				}
 			}
 		}
@@ -504,7 +711,7 @@ var DayAssistant = Class.create({
 		return {left: left, top: top, width: width, height: height};
 	},
 
-		chopText:function(buf1,maxWidth,context){
+	chopText:function(buf1,maxWidth,context){
 		var buf2;
 		var index=0;
 		
@@ -646,7 +853,6 @@ var DayAssistant = Class.create({
 			container.addEllipsis = false;
 		}
 		
-	
 	},
 
 	fillText:function(text, context,x,y,width,bottom,lineHeight){
@@ -696,12 +902,12 @@ var DayAssistant = Class.create({
 		}
 	},
 	
-	
-	
 	renderEvent: function(whichDay, event, selected, ghost) {
 		//Mojo.Log.info("day-assistant: renderEvent");
 		if (this.animating && !event.animatible)
 			return;
+
+//Mojo.Log.error(Object.toJSON(event));
 	
 		var ctx = this.divs[whichDay].ctxEvents;
 		var marginLeft = 28;
@@ -743,21 +949,100 @@ var DayAssistant = Class.create({
 		ctx.fillRect(left+1, top+height-3, width-2, 1);
 		
 		var textTop = top + 30;
-		
+
+		// get more details
+		if (!event.subject && event.gotFullDetails === undefined) {
+			// get more infos for this event
+			getCalendarService().getEvent(event.id,
+				this.getEventDetails.bind(this, whichDay, event, selected, ghost),
+				function(response) {Mojo.Log.error(response.errorText);},
+				this.controller);
+		}
 		// Subject
 		ctx.fillStyle = this.colors[event.calendarColor].text;
-		if (selected)
-			ctx.fillStyle = "rgb(255, 255, 255)";
-		ctx.font = "bold 14px Prelude";
-		bottom = textTop;
-		var subjectTop = top+15;
-		if (bottom >= (top + height))
-			subjectTop = top+17;	// no room for location or note, therefore vertically center subject text
-		this.fillText(event.subject, ctx, left+4, subjectTop, width, bottom, 15 /*line height*/);	
-		
+		if (selected) {
+			ctx.fillStyle = "rgb(255, 255, 255)"; }
+		if(this.enhancedView && this.dayViewShrink != "none") {
+			ctx.font = (this.dayViewShrink == "strong") ? "bold 10px Prelude" : "bold 12px Prelude";
+			var bottom = textTop;
+			// prepend the subject with a human readable time stamp
+			var subjectTop = top+12;
+			var timeText = "";
+			var d = new Date(event.start);
+			var timeH = d.getHours();
+			var timeM = d.getMinutes();
+			timeM = timeM <10 ? '0' + String(timeM) : String(timeM);
+			if (this.currentTimeFormat == "HH12") {
+				if ( timeM > 0 ) {
+					if ( timeH == 0 ) {
+						timeText = "12:" + timeM + "a";
+					} else if ( timeH == 12 ) {
+						timeText = timeH + ":" + timeM + "p";
+					} else if ( timeH < 12 ) {
+						timeText = timeH + ":" + timeM + "a";
+					} else {
+						timeText = String(timeH - 12) + ":" + timeM + "p";
+					}
+				}
+				else {
+					if ( timeH == 0 ) {
+						timeText = "12a";
+					} else if ( timeH == 12 ) {
+						timeText = timeH + "p";
+					} else if ( timeH < 12 ) {
+						timeText = timeH + "a";
+					} else {
+						timeText = String(timeH - 12) + "p";
+					}
+				}
+			} else {
+				timeText = timeH + ":" + timeM;
+			}
+			//var str = Object.toJSON(event);
+			//console.error(str);
+			this.fillText(timeText + " " + event.subject, ctx, left+4, subjectTop, width, bottom, 15 /*line height*/);	
+		} else {
+			ctx.font = "bold 14px Prelude";
+			var bottom = textTop;
+			var subjectTop = top+15;
+			if (bottom >= (top + height))
+				subjectTop = top+17;	// no room for location or note, therefore vertically center subject text
+			this.fillText(event.subject, ctx, left+4, subjectTop, width-30, bottom, 15 /*line height*/);	
+		}
+		if(this.enhancedView) {
+			// Alarm
+			if ((event.alarm !== undefined) && (event.alarm != "none")) {
+				if(this.dayViewShrink != "none") {
+					try{ ctx.drawImage(this.imgAlarm, left+4+width-18, subjectTop-10, 12, 12); }catch(e) {}
+				} else {
+				try{ ctx.drawImage(this.imgAlarm, left+4+width-18, subjectTop+1, 12, 12); }catch(e) {}
+				}
+			}
+			// Icon
+			if (event.note !== undefined && this.dayViewIcons) {
+				try {
+					var start = getNotesIconParts(event.note);
+					if (start && start[1]) {
+						var icon = start[1];
+						if(this.dayViewShrink != "none") {
+							this.imgIcons[icon] && ctx.drawImage(this.imgIcons[icon], left+4+width-30, subjectTop-10, 12, 12);
+						} else {
+							this.imgIcons[icon] && ctx.drawImage(this.imgIcons[icon], left+4+width-30, subjectTop+12, 12, 12);
+						}
+					}
+				} catch(e) {}
+			}
+		}
 		// Location
 		if (event.location && (event.location.length > 0) && (textTop < (top + height))) {
-			ctx.font = "italic bold 14px Prelude";
+			if(this.enhancedView && this.dayViewShrink == "strong") {
+				ctx.font = "italic bold 10px Prelude";
+			} else if(this.enhancedView && this.dayViewShrink == "medium") {
+				ctx.font = "italic bold 12px Prelude";
+			} else {
+				ctx.font = "italic bold 14px Prelude";
+			}
+			//ctx.font = (this.enhancedView && this.dayViewShrink) ? "italic bold 10px Prelude" : "italic bold 14px Prelude";
 			bottom = textTop+15;
 			this.fillText(event.location,ctx,left+4,textTop,width,bottom,15 /*line height*/);		
 			textTop += 15;
@@ -765,11 +1050,20 @@ var DayAssistant = Class.create({
 		
 		// Notes
 		if (event.note && (event.note.length > 0) && (textTop < (top + height))) {
+			if(this.enhancedView && this.dayViewIcons){
+				if(start && start[1]) {
+					var uberNoteTxt = start[0] + start[2];
+				} else {
+					var uberNoteTxt = event.note;
+				}
+			} else {
+				var uberNoteTxt = event.note;
+			}
 			ctx.font = "12px Prelude";
 			bottom = top+height;
-			this.fillText(event.note, ctx, left+4, textTop-2, width, bottom-2, 12 /*line height*/);			
+			this.fillText(uberNoteTxt, ctx, left+4, textTop-2, width, bottom-2, 12 /*line height*/);			
 		}
-		
+
 		if (ghost) {
 			var selectedColor = "rgba(228, 228, 226, 0.85)"
 			ctx.fillStyle = selectedColor;
@@ -789,17 +1083,24 @@ var DayAssistant = Class.create({
 		  ctx.fillRect(left, top, width, height);
 		}
 	},
+
+	getEventDetails: function(whichDay, event, selected, ghost, details) {
+		event.alarm = details.alarm;
+		event.note = details.note;
+		event.gotFullDetails = true;
+		this.renderEvent(whichDay, event, selected, ghost);
+	},
 	
 	getAllDayDimensions: function(index, event) {
 		var marginLeft = 4;
 		var marginRight = 4;
 		//Incorporates the padding-top of the first all day event 
 		//from the old css style .dv-allday-event:first-child
-		var marginTop = 10;
-		var eventHeight = 24;
+		var marginTop = (this.enhancedView && this.dayViewShrink != "none") ? 8 : 10;
+		var eventHeight = (this.enhancedView && this.dayViewShrink != "none") ? 18 : 24;
 		// Incorporates the padding-top 1px + padding-bottom 9px from 
 		// the old css style dv-allday-event
-		var totalHeight = 34;
+		var totalHeight = (this.enhancedView && this.dayViewShrink != "none") ? 26 : 34;
 		
 		return {
 			top : (totalHeight * index + marginTop),
@@ -822,29 +1123,93 @@ var DayAssistant = Class.create({
 					   dim.top, 
 					   dim.width, 
 					   this.colors[event.calendarColor].allday.syCenter);
+
+		// get more details
+		if (!event.subject && event.gotFullDetails === undefined) {
+			// get more infos for this event
+			getCalendarService().getEvent(event.id,
+					this.getAllDayEventDetails.bind(this, whichDay, index, event, selected),
+					function(response) {Mojo.Log.error(response.errorText);},
+					this.controller);
+		}
 		
 		// Subject
 		ctx.fillStyle = this.colors[event.calendarColor].text;
 		if (selected)
 			ctx.fillStyle = "rgb(255, 255, 255)";
-		ctx.font = "bold 14px Prelude";
-		this.fillText(event.subject, ctx, dim.left+10, dim.top+17, dim.width-10, dim.top+30, 15 /*line height*/);
-		
+		if(this.enhancedView && this.dayViewShrink == "strong") {
+				ctx.font = "bold 10px Prelude";
+			} else if(this.enhancedView && this.dayViewShrink == "medium") {
+				ctx.font = "bold 12px Prelude";
+			} else {
+				ctx.font = "bold 14px Prelude";
+			}
+		//ctx.font = (this.enhancedView && this.dayViewShrink) ? "bold 10px Prelude" : "bold 14px Prelude";
+		if(this.enhancedView && this.dayViewShrink != "none") {
+			this.fillText(event.subject, ctx, dim.left+10, dim.top+17, dim.width-30, dim.top+27, 13 /*line height*/);
+		} else {
+			this.fillText(event.subject, ctx, dim.left+10, dim.top+17, dim.width-30, dim.top+30, 15 /*line height*/);
+		}
+		if(this.enhancedView) {
+			// Alarm
+			if ((event.alarm !== undefined) && (event.alarm != "none")) {
+				try{ ctx.drawImage(this.imgAlarm, dim.left+dim.width-18, dim.top+(dim.height-12)/2, 12, 12); }catch(e) {}
+			}
+			// Icon
+			if (event.note !== undefined && this.dayViewIcons) {
+				try {
+					var start = getNotesIconParts(event.note);
+					if (start && start[1]) {
+						var icon = start[1];
+						this.imgIcons[icon] && ctx.drawImage(this.imgIcons[icon], dim.left+dim.width-30, dim.top+(dim.height-12)/2, 12, 12);
+					}
+				} catch(e) {}
+			}
+		}
 		if (selected) {
-			var selectedColor = "rgba(4, 4, 4, 0.5)"
+			var selectedColor = "rgba(4, 4, 4, 0.5)";
 			ctx.fillStyle = selectedColor;
 			ctx.fillRect(dim.left, dim.top, dim.width, dim.height);
 		}
 	},
 	
+	getAllDayEventDetails: function(whichDay, index, event, selected, details) {
+		event.alarm = details.alarm;
+		event.note = details.note;
+		event.gotFullDetails = true;
+		this.renderAllDayEvent(whichDay, index, event, selected);
+	},
+
 	calcEventCompression: function(day) {
 		var i;
 		
 		// Make sure that free times, busy times, and events are sorted by start times
-		day.freeTimes = day.freeTimes.sortBy(function(f) { return f.start_decimal; })
+		//day.freeTimes = day.freeTimes.sortBy(function(f) { return f.start_decimal; })
 		day.events = day.events.sortBy(function(e) { return e.start_decimal; })
 		day.busyTimes = day.busyTimes.sortBy(function(b) { return b.start_decimal; })
 
+		if (this.compressedView && this.enhancedView) {
+			if (day.events.length == 0 && day.busyTimes.length == 0) {
+				day.freeTimes.push({start_decimal: 0, end_decimal: 2400, duration: 2400});
+			} else {
+				if ((day.events.length >0 && day.events[0].start_decimal > 0 )|| (day.busyTimes.length > 0 && day.busyTimes[0].start_decimal > 0)) {
+					var startDecimal = (day.events[0] ? day.events[0].start_decimal : 2400) < (day.busyTimes[0] ? day.busyTimes[0].start_decimal : 2400) ? day.events[0].start_decimal : day.busyTimes[0].start_decimal;
+					day.freeTimes.push({start_decimal: 0, end_decimal: startDecimal, duration: startDecimal});
+				}
+				// sort by end times to get last time
+				var last = day.events.sortBy(function(f) { return f.end_decimal; });
+				var lastBusy = day.busyTimes.sortBy(function(f) { return f.end_decimal; });
+				if ((last.length >0 && last[last.length-1].end_decimal < 2400 )||(lastBusy.length > 0 && lastBusy[lastBusy.length-1].end_decimal < 2400)) {
+					var endDecimal = (last[last.length-1] ? last[last.length-1].end_decimal : 0) > (lastBusy[lastBusy.length-1] ? lastBusy[lastBusy.length-1].end_decimal : 0) ? last[last.length-1].end_decimal : lastBusy[lastBusy.length-1].end_decimal;
+					day.freeTimes.push({start_decimal: endDecimal, end_decimal: 2400, duration: 2400 - endDecimal});
+				}
+			}
+		}
+		// Make sure that free times, busy times, and events are sorted by start times
+		day.freeTimes = (this.enhancedView && this.dayViewShrink != "none") ? day.freeTimes = [] : day.freeTimes.sortBy(function(f) { return f.start_decimal; });
+		day.busyTimes = day.busyTimes.sortBy(function(b) { return b.start_decimal; });
+
+
 		day.animationTop = 0;
 		
 		var compressDelta = 0;
@@ -975,7 +1340,7 @@ var DayAssistant = Class.create({
 				// ** ALL DAY EVENTS
 				// Determine whether there are any all day events
 				if (day.allDayEvents.size() > 0) {
-					var newHeight = 34 * day.allDayEvents.size();
+					var newHeight = (this.enhancedView && this.dayViewShrink != "none") ? 29 * day.allDayEvents.size() : 34 * day.allDayEvents.size();
 					
 					// Set the height of the canvas
 					if (this.divs[whichDay].alldayevents_list.offsetHeight != newHeight) {
@@ -1108,7 +1473,7 @@ var DayAssistant = Class.create({
 				}
 				//now that we have finished rendering the timelines and number 
 				//render am pm
-				if (this.currentTimeFormat == "HH12") {
+				if (this.currentTimeFormat == "HH12" && ((!this.enhancedView) || (this.enhancedView === true && this.dayViewShrink == "none")) ) {
 				//now show the am/pm indicators
 					this.calculatePosToDrawAmPm(Math.abs(this.tds[this.THIS_DAY].scroller.mojo.getScrollPosition().top));
 					this.controller.get('ampm_indicator').show();
@@ -1160,6 +1525,18 @@ var DayAssistant = Class.create({
 											 this.handleEventsDragging.bind(this),
 											 this.handleEventsDragEnd.bind(this));
 
+
+
+
+
+
+
+
+
+
+
+
+
 				eventDim = this.getEventDimensions(event, event.topCompress);
 				this.tapHandlerCompressed.addHandler(eventDim.left, 
 											 eventDim.top, 
@@ -1254,7 +1631,18 @@ var DayAssistant = Class.create({
 	
 	currentCalendarUpdated: function() {
 		var calMgr = getCalendarsManager();
-		if (calMgr.currentCal == 'all') {
+		
+		// update UC groups, calendars changed
+		this.userUberCalGroups = [];
+		this.userUberCalGroups = getUserUberCalGroups();
+		this.uberGroups = getUberGroups();
+		this.getUCGroupsProps();
+		
+		if(this.ucGroupIdx !== undefined) {
+			var name = this.userUberCalGroups[this.ucGroupIdx].groupname;
+			this.controller.get ("dv_current_calendar")	.update			(name);
+			this.controller.get ("dv_calendar_source")	.setAttribute	("class", "header-cal-source");
+		} else if (calMgr.currentCal == 'all') {
 			this.controller.get('dv_current_calendar').update($L("All"));
 			this.controller.get('dv_calendar_source').setAttribute('class', 'header-cal-source');
 		} else {
@@ -1466,7 +1854,12 @@ var DayAssistant = Class.create({
 		this.controller.get('current_time').setStyle({	
 			top: yPixel+'px'
 		}).show();
-
+		if(this.enhancedView === true && this.dayViewShrink != "none") {
+			var curtimediv = this.controller.get('current_time');
+			curtimediv.innerHTML ='<img id="uber_current_time_image" src="images/current-time-indicator.png" />';
+			this.controller.get('uber_current_time_image').style.height = this.hourHeight+'px';
+			this.controller.get('uber_current_time_image').style.width = img.width+'px';
+		}
 	},
 	
 	calculatePosWithCompression:function(day,hour)
@@ -1500,31 +1893,44 @@ var DayAssistant = Class.create({
 	
 	
 	scrollToDefault: function(whichDay) {
-		if (this.tds[whichDay].scroller && this.tds[whichDay].scroller.mojo) {
-			//Mojo.Log.info('BEFORE SCROLL TOP', this.tds[whichDay].scroller.mojo.getScrollPosition().top);
-			var ctx = this.divs[whichDay].ctxEvents;
-			//get the day from the cache, so we can access its timelines
-			var data = this.getFromCache(this.days[whichDay].defaultTime);
-			if(!data) {
-				//if we don't have the day in the cache yet, use the default time
-				this.tds[whichDay].scroller.mojo.scrollTo(undefined, -this.days[whichDay].defaultTime.getHours() * this.hourHeight);
-				
-				return;
-			}
+		if(this.enhancedView && this.dayViewShrink != "none") {
+			// disable the auto scrolling and just always follow the bottom of the page
+			var prefs = getPrefs();
+				if (prefs) {
+					var startTime = new Date(prefs.startTimeOfDay);
+					var uberDateTime = getCurrentDateTime();
+					uberDateTime.setHours(startTime.getUTCHours());
+					uberDateTime.setMinutes(startTime.getUTCMinutes());
+				}
+			this.tds[whichDay].scroller.mojo.scrollTo(undefined, -((uberDateTime.getHours()* this.hourHeight)-3));
+			this.updateTimer(false);
+		} else {
+			if (this.tds[whichDay].scroller && this.tds[whichDay].scroller.mojo) {
+				//Mojo.Log.info('BEFORE SCROLL TOP', this.tds[whichDay].scroller.mojo.getScrollPosition().top);
+				var ctx = this.divs[whichDay].ctxEvents;
+				//get the day from the cache, so we can access its timelines
+				var data = this.getFromCache(this.days[whichDay].defaultTime);
+				if(!data) {
+					//if we don't have the day in the cache yet, use the default time
+					this.tds[whichDay].scroller.mojo.scrollTo(undefined, -this.days[whichDay].defaultTime.getHours() * this.hourHeight);
+					
+					return;
+				}
+					
+				//get the default hour's timeline position
+				var day = data.days[0];
+				var hour = this.days[whichDay].defaultTime.getHours();
+				var scrollToPos = day.timelines[hour].top;
 				
-			//get the default hour's timeline position
-			var day = data.days[0];
-			var hour = this.days[whichDay].defaultTime.getHours();
-			var scrollToPos = day.timelines[hour].top;
-			
-			if (this.compressed) {
-				scrollToPos = this.calculatePosWithCompression(day, hour);	
+				if (this.compressed) {
+					scrollToPos = this.calculatePosWithCompression(day, hour);	
+				}
+		
+						
+				this.tds[whichDay].scroller.mojo.scrollTo(undefined, -scrollToPos);
+				this.updateTimer(false);
+				//Mojo.Log.info('AFTER SCROLL TOP', this.tds[whichDay].scroller.mojo.getScrollPosition().top);	
 			}
-	
-					
-			this.tds[whichDay].scroller.mojo.scrollTo(undefined, -scrollToPos);
-			this.updateTimer(false);
-			//Mojo.Log.info('AFTER SCROLL TOP', this.tds[whichDay].scroller.mojo.getScrollPosition().top);	
 		}
 	},
 	
@@ -1556,10 +1962,25 @@ var DayAssistant = Class.create({
 		this.dvScratchEventsDiv = this.controller.get('dv_scratch_events');
 		this.scratchEventActive = false;
 		this.scratchEvent = null;
+		this.copyEvt = null;
+		
+		for(var i=0; i<this.userUberCats.length; i++) {
+			var catName = this.userUberCats[i].name;
+			this.imgIcons[catName] = new Image();
+			this.imgIcons[catName].src = "/media/internal/.scrims/ubercalendar/icon-" + catName + ".png";
+		}
 		
+		// setup UC groups
+		this.userUberCalGroups = [];
+		this.userUberCalGroups = getUserUberCalGroups();
+		this.uberGroups = getUberGroups();
+		this.getUCGroupsProps();
 		// Used to detect Orange key + tap to delete inline events
 		this.orangeKeyDown = false;
-	
+		
+		//Used to detect gesture area hold
+		this.metaKeyDown = false;
+		
 		this.firstActivated = true;
 		
 		this.buildViewHeader();
@@ -1677,6 +2098,11 @@ var DayAssistant = Class.create({
 		this.divs[this.NEXT_DAY].ctxAllDayEvents = this.divs[this.NEXT_DAY].alldayevents_list.getContext('2d');
 		this.divs[this.THIS_DAY].ctxAllDayEvents = this.divs[this.THIS_DAY].alldayevents_list.getContext('2d');
 		
+		if(this.enhancedView && this.dayViewShrink != "none") {
+			this.controller.get('all-day-events-canvas-wrapper_prev').setAttribute('class', 'alldayeventsListshrink');
+			this.controller.get('all-day-events-canvas-wrapper_next').setAttribute('class', 'alldayeventsListshrink');
+			this.controller.get('all-day-events-canvas-wrapper').setAttribute('class', 'alldayeventsListshrink');
+		}
 		this.fastScrollScrim = this.controller.get('dv_scroll_scrim');
 		this.fastScrollAnimateDiv = this.controller.get('dv_scrim_animate');
 		this.fastScrollScrim.hide();
@@ -1824,17 +2250,20 @@ var DayAssistant = Class.create({
 		this.menuModel = {
 			visible:true,
 			items: [
-					{},
+					{label: $L('Event'), icon: 'new-timed', command: 'newtimed'},
 						{label:$L('Views'), 
 						toggleCmd:'day', 
 						items:[
+							{label:$L('Agenda'), icon: 'menu-agenda', command:'agenda'},
 							{label:$L('Day'), icon: 'menu-day', command:'day'}, 
 							{label:$L('Week'), icon: 'menu-week', command:'week'}, 
 							{label:$L('Month'), icon: 'menu-month', command:'month'}
 					 ]},
-					{},
+					{label: $L('All day event'), icon: 'new-allday', command: 'newallday'},
 					]};
-			
+
+		//this.compressedMenuItem.chosen = this.compressedView;
+
 		this.controller.setupWidget(Mojo.Menu.commandMenu, undefined, this.menuModel);
 		this.controller.setupWidget(Mojo.Menu.appMenu, {omitDefaultItems:true}, this.appMenuModel);
 		this.remindersUpdated(); 	// Update missed reminders menu item
@@ -1854,6 +2283,9 @@ var DayAssistant = Class.create({
 		this.controller.setupWidget(this.divs[this.PREV_DAY].alldayevents_scroller, undefined, {mode: 'vertical'});
 		this.controller.setupWidget(this.divs[this.NEXT_DAY].alldayevents_scroller, undefined, {mode: 'vertical'});
 
+		//var cookie = new Mojo.Model.Cookie("LastView");
+		//cookie.put("day");
+
    		this.CalSelectorHandler = this.calSelector.bindAsEventListener(this);
 		
 		// IMPORTANT: Set up the height of the scrollers.  If this is not done
@@ -1868,6 +2300,7 @@ var DayAssistant = Class.create({
 		//and needs to be updated in the day view
 		this.updatingEventHandler =this.setEventUpdated.bind(this);
    },
+   
   	vertScrollerListener:function(event){
 		var indicator =	this.controller.get('ampm_indicator');
 		indicator.setStyle({color:'rgba(0,0,0,0)'});
@@ -2008,6 +2441,7 @@ var DayAssistant = Class.create({
 		// Find all the EAS accounts if there are any
 		this.easAccountIds = null;
 		response.list.each(function(acct){
+//Mojo.Log.error("accid", acct.accountId, Object.toJSON(acct));
 			//Mojo.Log.info("acct domain %s", acct.domain);
 			if (acct.domain == 'eas') {
 				// Keep track of the list of eas accounts for Sync Accounts button
@@ -2075,11 +2509,11 @@ var DayAssistant = Class.create({
 				this.maybeCommitScratchEvent();
 			} else if(event.command =="newtimed"){
 				Event.stop(event);
-				this.controller.stageController.pushScene('edit', 0, 0, false,this.getCalId()/*calendarId*/,0/*subject*/);
+				this.controller.stageController.pushScene('edit', 0, 0, false, this.getCalId()/*calendarId*/,0/*subject*/);
 				this.maybeCommitScratchEvent();
 			} else if(event.command=="newallday"){
 				Event.stop(event);
-				this.controller.stageController.pushScene('edit', 0, 0, true,this.getCalId(),0/*subject*/);
+				this.controller.stageController.pushScene('edit', 0, 0, true, this.getCalId(),0/*subject*/);
 				this.maybeCommitScratchEvent();
 			} else if(event.command == Mojo.Menu.helpCmd){
 				this.maybeCommitScratchEvent(true);
@@ -2087,6 +2521,13 @@ var DayAssistant = Class.create({
 			} else if (event.command == 'jumpto') {
 				Event.stop(event);
 				this.showJumpTo(); // this may also commit the scratch event
+			//} else if (event.command == 'compressed') {
+			//	Event.stop(event);
+			//	this.compressedView = !this.compressedView;
+			//	var cookie = new Mojo.Model.Cookie('DayViewCompressed');
+			//	cookie.put(this.compressedView);
+			//	this.compressedMenuItem.chosen = this.compressedView;
+			//	this.controller.modelChanged(this.appMenuModel);
 			} else if (event.command == 'reminders') {
 				Event.stop(event);
 				this.maybeCommitScratchEvent();
@@ -2095,15 +2536,39 @@ var DayAssistant = Class.create({
 				Event.stop(event);
 				this.maybeCommitScratchEvent(true);
 				this.syncAllCalendars();
+			} else if (event.command == 'agenda') {
+				Event.stop(event);
+				this.maybeCommitScratchEvent(true);
+				this.controller.serviceRequest('palm://com.palm.applicationManager', {
+					method: 'launch',
+					parameters: {
+						id: 'com.palm.app.agenda'
+					}
+				});
+				this.menuModel.items[1].toggleCmd = 'day';
+				this.controller.modelChanged(this.menuModel, this);
 			}				
 		} else if(event.type == Mojo.Event.commandEnable && event.command == Mojo.Menu.prefsCmd) {
 			// Enable prefs menuitem for this scene.
 			event.stopPropagation();
-		} else if(event.type == Mojo.Event.back){
+		} else if (event.type == Mojo.Event.back) {
 			// If there's a scratch event, possibly commit it, and then override default back handling.
-			if (this.maybeCommitScratchEvent(true)) {
+			if(this.uberBackGesture == 'month' || (this.uberBackGesture == 'last' && this.uberLastView == 'month' )) {
+				event.preventDefault();
+				event.stopPropagation();
+				this.maybeCommitScratchEvent(true);
+				this.handleMonthView();
+			} else if(this.uberBackGesture == 'week' || (this.uberBackGesture == 'last' && this.uberLastView == 'week' )) {
+				event.preventDefault();
+				event.stopPropagation();
+				this.maybeCommitScratchEvent(true);
+				this.handleWeekView();
+			} else if(this.uberBackGesture == 'day' || (this.uberBackGesture == 'last' && this.uberLastView == 'day' )) {
+				if(this.maybeCommitScratchEvent(true)) {
 				Event.stop(event);
-			}
+				}
+				//back should minimize here
+			} 
 		}
 			
 	},
@@ -2256,9 +2721,41 @@ var DayAssistant = Class.create({
 		Event.stop(e);
 	    var listItems = buildCalendarsMenu(true /*includeAll*/, true /*includeReadOnly*/, true /*includeExcludedFromAll*/);
 	 
+		// UC groups items
+		if(this.userUberCalGroups && this.userUberCalGroups.length > 0) {
+			var viewOptionsItem = listItems.splice(-1,1);
+			var len = this.userUberCalGroups.length;
+			if(this.ucGroupsFirst){
+				var allCals = listItems.splice(0,1);
+				for(var i=len-1; i>-1; i--) {
+					var grp = this.userUberCalGroups[i];
+					if(grp && grp.rId && grp.groupname) {
+						listItems.unshift( {label: grp.groupname, command: "rId:" + grp.rId, secondaryIcon: 'menu_all'} );
+					}
+				}
+				listItems.unshift( {label: $L("UberCalendar Groups")} );
+				listItems.unshift({label: $L("All calendars"),
+									command: 'all',
+									secondaryIcon: 'menu_all'
+								});
+			} else {
+				listItems.push( {label: $L("UberCalendar Groups")} );
+				for(var i=0; i<len; i++) {
+					var grp = this.userUberCalGroups[i];
+					if(grp && grp.rId && grp.groupname) {
+						listItems.push( {label: grp.groupname, command: "rId:" + grp.rId, secondaryIcon: 'menu_all'} );
+					}
+				}
+			}
+			listItems.push({
+				label: $L("Calendar View Options..."),
+				command: "viewOptions"
+			});
+		}
+		
 	    this.controller.popupSubmenu({
 	      onChoose: this.calendarChoose.bind(this),
-	    	toggleCmd: getCurrentCal(), 
+	    	toggleCmd: uberToggleGroupsCmd(this.uberGroups.inUse, "rId:" + this.uberGroups.rId), 
 	      // placeNear: e.target,
 		  manualPlacement:true,
 		  popupClass:"cal-selector-popup",
@@ -2271,10 +2768,32 @@ var DayAssistant = Class.create({
 		if (value) {
 			if(value=="viewOptions")
 			{
+				this.getUCGroupsProps();
+				if(this.ucGroupIdx != undefined) {
+					buildUberExcludes(false);
+				}
 				this.controller.stageController.pushScene("prefs-options",this.acctsModel);
 				return;
 			}
 			
+			//uc groups setup
+			if(value.indexOf("rId:") !== -1) {
+				var idx = value.indexOf(":") + 1;
+				rID = value.slice(idx);
+				setUberGroups(rID);
+				this.uberGroups = {inUse: true, rId: rID};
+				value = 'all';
+				this.getUCGroupsProps();
+				if(this.ucGroupIdx != undefined) {
+					buildUberExcludes(this.userUberCalGroups[this.ucGroupIdx].includes);
+				}
+			} else {
+				setUberGroups(false);
+				this.uberGroups = {inUse: false, rId: ""};
+				this.getUCGroupsProps();
+				buildUberExcludes(false);
+			}
+			
 			this.maybeCommitScratchEvent(true);
 			
 			setCurrentCal(value);
@@ -2309,6 +2828,7 @@ var DayAssistant = Class.create({
   activate: function() {
 		
 		this.active = true;
+		this.metaKeyDown = false;
 		//this.resetPos(); // TEMP
 		
 		if (this.compressed)
@@ -2337,6 +2857,13 @@ var DayAssistant = Class.create({
 		this.calendarTapHandler = this.CalSelectorHandler.bindAsEventListener(this);
 	 	this.controller.get('dv_calendar_source').observe(Mojo.Event.tap, this.calendarTapHandler);
 		
+		this.userUberCalGroups = [];
+		this.userUberCalGroups = getUserUberCalGroups();
+		this.uberGroups = getUberGroups();
+		this.getUCGroupsProps();
+		if(this.ucGroupIdx != undefined) {
+			buildUberExcludes(this.userUberCalGroups[this.ucGroupIdx].includes);
+		}
 		// The colors have been updated, so we clear the cache and update everything
 		if (this.pendingCalendarSettingsUpdate == true) {
 			this.clearCache();
@@ -2369,13 +2896,28 @@ var DayAssistant = Class.create({
 		
 		this.keyDownHandler = this.handleKeyDown.bind(this);
 		this.controller.listen(this.controller.sceneElement, Mojo.Event.keydown, this.keyDownHandler);
+		this.miniHandler = this.handleMini.bindAsEventListener(this);
+		this.controller.listen(this.controller.sceneElement, Mojo.Event.stageActivate, this.miniHandler);
+		this.uberLastView = "day";
+		var cookie = new Mojo.Model.Cookie("BackGesture");
+		try {
+			if(cookie){
+				var lview = cookie.get();
+				if(lview && lview.lastview) {
+					this.uberLastView = lview.lastview;
+				}
+				cookie.put({lastview: "day"});
+			}
+		} catch (e) {}
+		if ((this.uberLastView != "month") && (this.uberLastView != "week")) {
+			this.uberLastView = "day";
+		}
 		this.updateTimer(); 	
   },
   
   deactivate: function() {
-		
 		this.active = false;
-		
+		this.metaKeyDown = false;
 		this.tapHandler.deactivate();
 		this.tapHandlerCompressed.deactivate();
 		this.tapHandlerAllDay.deactivate();
@@ -2396,6 +2938,7 @@ var DayAssistant = Class.create({
                 this.controller.window.clearTimeout(this.updateUITimeoutID);
 				this.updateUITimeoutID=0;
          } 	
+		this.controller.stopListening(this.controller.sceneElement, Mojo.Event.stageActivate, this.miniHandler);
 	},
 	
 	
@@ -2406,7 +2949,12 @@ var DayAssistant = Class.create({
 		if (event.originalEvent.altKey || event.originalEvent.keyCode === 129) {
     	//Mojo.Log.info("handleKeyUp detected ORANGE key");
 			this.orangeKeyDown = false;
- 		} 
+ 		}
+		// getsure area up
+		if (event.originalEvent.metaKey || event.originalEvent.keyCode === 231) {
+		//Mojo.Log.info("handleKeyUp detected gesture up key");
+			this.metaKeyDown = false;
+		}		
 	},
 	
 	handleKeyDown: function(event) {
@@ -2414,9 +2962,25 @@ var DayAssistant = Class.create({
 		if (event.originalEvent.altKey || event.originalEvent.keyCode === 129) {
     	//Mojo.Log.info("handleKeyDown detected ORANGE key");
 			this.orangeKeyDown = true;
- 		} 
+ 		}
+		// getsure area down
+		if (this.active && (event.originalEvent.metaKey || event.originalEvent.keyCode === 231)) {
+    	//Mojo.Log.info("handleKeyUp detected gesture key");
+			this.metaKeyDown = true;
+		}		
+	},
+	
+	handleMini: function() {
+		this.metaKeyDown = false;
+	},
+	
+	editFromTemplate: function(event, editingTemplate) {
+		// going from template to edit new event
+		this.fromEditEventsCallBack = true;
+		this.controller.stageController.pushScene('edit', event.id, new Date(event.startTimestamp), event.allDay, event.calendarId, event.subject, false, this.updatingEventHandler, editingTemplate);
 	},
 	
+	
 	updateSceneScrollerSize: function(event) {
 		//Mojo.Log.info("*** updateSceneScrollerSize");
 		this.updateEmptySpacer(this.THIS_DAY,false);
@@ -2577,6 +3141,14 @@ var DayAssistant = Class.create({
 		}
 	},
 	
+	uberPopMinuteChoose: function(min){
+		if(min !== undefined){
+			min = parseInt(min);
+			this.ucEventTop += Math.floor((min/60)*this.hourHeight);
+			this.preCheckBeforeScratchEvent(this.ucNewHour, min, this.ucEventTop);
+		}
+	},
+	
 	preCheckBeforeScratchEvent:function(newHour, newMinutes, eventTop) {
 		// Only allow creation of inline events if a non readonly calendar is selected or All
 		if (this.readOnlyCalendar == false) {
@@ -2849,7 +3421,30 @@ var DayAssistant = Class.create({
 			}
 			*/
 		}
-		
+		if(this.enhancedView && this.dayMinutePopup && !this.scratchEvent){
+			this.ucNewHour = newHour;
+			this.ucEventTop = eventTop;
+			var hr = newHour;
+			if(this.currentTimeFormat == "HH12") {
+				if(hr === 0){
+					hr = 12;
+				} else {
+					hr = hr > 12 ? hr -12 : hr;
+				}
+			}
+			var items =[], itemNum, interval = this.dayMinInterval;
+			itemNum = Math.floor(60/interval);
+			items.push({label: hr+":00", command:0});
+			for(var i=1;i<itemNum;i++){
+				items.push({label: hr+":" + (interval*i), command:(interval*i)});
+			}
+			this.controller.popupSubmenu({
+					onChoose: this.uberPopMinuteChoose,
+					items: items,
+					placeNear: event.target
+					});
+			return;
+		}
 	  	if (!this.scratchEvent) {
 			this.preCheckBeforeScratchEvent(newHour, newMinute, eventTop);
  	 	} else {
@@ -2865,14 +3460,14 @@ var DayAssistant = Class.create({
 	
 	handleAllDayTap: function(index, event) {
 		this.deletedeventId = undefined;
-		if (this.orangeKeyDown == true) {
+		if (this.metaKeyDown == true) {
 			// Confirm with the user they want to delete the event
 			this.eventToBeDeleted = event;
 			this.allDayEventToBeDeletedIndex = index;
 			this.deletedeventId = event.id;
-			// Reset the orangeKeyDown to handle the case the user lets go
-			// of the Orange key when the Delete confirmation dialog is up
-			this.orangeKeyDown = false;
+			// Reset the metaKeyDown to handle the case the user lets go
+			// of the meta key when the Delete confirmation dialog is up
+			this.metaKeyDown = false;
 			getCalendarService().getEvent(event.id, this.gotEventInlineDelete.bind(this),this.gotEventInlineDeleteFailed.bind(this), this.controller);
 		} else {
 			// Show the Event Details for the tapped all day event
@@ -2941,6 +3536,18 @@ var DayAssistant = Class.create({
 			getReminderManager().removeReminder(this.deletedeventId);
 	},
 	
+	copiedEvent: function(response) {
+		//copied event saved open in edit scene
+		if(this.copyEvt) {
+			if(response.id == this.copyEvt.id || this.copyEvt.id == undefined || this.copyEvt.id.match(response.id)) {
+		  
+				// NOTE: Event Ids are strings NOT longs
+				if (this.copyEvt.id == undefined)	this.copyEvt.id = response.id + "";	// Do NOT Localize
+				this.controller.stageController.pushScene('edit', this.copyEvt.id, new Date(this.copyEvt.startTimestamp), false, this.copyEvt.calendarId, this.copyEvt.subject, false, this.updatingEventHandler);
+			}
+		}
+	},
+	
 	handleEventsTap: function(event, tapEvent) {
 		//Mojo.Log.info("day-assistant: handleEventsTap event_being_held " + Object.toJSON(this.event_being_held));
 		
@@ -2967,18 +3574,41 @@ var DayAssistant = Class.create({
 				}
 			}
 		} else {
-			if (this.orangeKeyDown == true) {
+			if (this.metaKeyDown == true) {
 				// Confirm with the user they want to delete the event
-				//Mojo.Log.info("handleEventsTap: Orange key + tap = Delete event " + Object.toJSON(event));
+				//Mojo.Log.info("handleEventsTap: meta key + tap = Delete event " + Object.toJSON(event));
 				// Retrieve the event from the calendar service so we can figure
 				// out whether it's recurring or not
 				this.eventToBeDeleted = event;
 				this.deletedeventId = event.id;
-				// Reset the orangeKeyDown to handle the case the user lets go
-				// of the Orange key when the Delete confirmation dialog is up
-				this.orangeKeyDown = false;
+				// Reset the metaKeyDown to handle the case the user lets go
+				// of the meta key when the Delete confirmation dialog is up
+				this.metaKeyDown = false;
 				getCalendarService().getEvent(event.id, this.gotEventInlineDelete.bind(this),this.gotEventInlineDeleteFailed.bind(this), this.controller);
 			} else {
+				if (this.orangeKeyDown == true) {
+					//create new from old
+					var start = new Date();
+					start.set({	minute: 0, second: 0, millisecond: 0 });
+					var startTS = start.getTime(); //set it up on today's current hour
+					var duration = event.end - event.start;
+					var endTS = startTS + duration;
+					this.orangeKeyDown = false;
+					var tfParams = {
+								subject: event.subject,
+								allday: false,
+								location: event.location,
+								startTimestamp: startTS,
+								endTimestamp: endTS,
+								note: event.note
+							};
+					this.copyEvt = new CalendarEvent(tfParams);
+					this.copyEvt.calendarId = event.calendarId;
+					getCalendarService().setEvent(this.copyEvt, 
+										this.copiedEvent.bind(this),
+										this.controller,
+										function(response) {Mojo.Log.error(response.errorText)});
+				} else {
 				this.controller.stageController.pushScene('edit', 
 													  event.id, 
 													  new Date(event.startTimestamp), 
@@ -2987,6 +3617,7 @@ var DayAssistant = Class.create({
 													  event.subject, 
 													  false, 
 													  this.updatingEventHandler);
+				}
 			}
 		}
 	},
@@ -3182,6 +3813,7 @@ var DayAssistant = Class.create({
 			this.event_being_dragged = this.controller.get("dragging_event");
 			// Keep track of the initial hit point
 			this.dragLastPointY = event.down.y;
+			this.dragLastPointX = event.down.X;
 			Event.stop(event);
 			return Mojo.Gesture.CONSUMED_EVENT;
 		}
@@ -3197,6 +3829,21 @@ var DayAssistant = Class.create({
 		return newTop;
 	},
 	
+	// Move the element... NOTE: This assumes that the element is 
+	// positioned absolutely
+	moveElementX: function(element, dx) {
+		var newLeft = parseInt(element.getStyle('left'), 10) + dx;
+		//Mojo.Log.info("day-assistant: moveElement: %s %d",element.id,newTop)
+		
+		element.setStyle({left: newLeft + 'px'});
+		if (newLeft > 100) {
+			element.setStyle({opacity: 0.5});
+		} else {
+			element.setStyle({opacity: 1.0});
+		}
+		return newLeft;
+	},
+	
 	handleEventsDragging: function(event) {
 		//Mojo.Log.info("day-assistant handleEventsDragging");
 		if (this.event_being_dragged) {
@@ -3213,6 +3860,15 @@ var DayAssistant = Class.create({
 				this.dragLastPointY = pointerY;
 			}
 		
+			var pointerX = event.move.x;
+	    if (this.dragLastPointX != pointerX) {
+				// Calculate the delta of the current point and the last point
+		  	var newOffsetX = pointerX - this.dragLastPointX;
+				// Move the element based off of the delta
+		  	this.moveElementX(target, newOffsetX);
+				this.dragLastPointX = pointerX;
+			}
+		
 			return Mojo.Gesture.CONSUMED_EVENT;
 		}
 	},
@@ -3314,6 +3970,69 @@ var DayAssistant = Class.create({
 
 	},
 	
+	saveThisAndFuture: function() {
+		// change end date, add exception, new event
+		var currentRecurrenceInstanceTimes = parseFromId(this.event_being_held.id);	
+		if(this.toBeSavedEvent.startTimestamp === currentRecurrenceInstanceTimes.start) {
+			//this is the first event so, this and future is the whole series
+			this.saveEvent(undefined);
+			return;
+		}
+		this.newEvent = Object.clone(this.toBeSavedEvent);
+		
+		this.toBeSavedEvent.endValidity = (new Date(currentRecurrenceInstanceTimes.end)).addDays(-1).getTime();
+		this.toBeSavedEvent.isRecurringForever = false;
+		if(this.toBeSavedEvent.rruleModel.count) {this.toBeSavedEvent.rruleModel.count = undefined;}
+		this.recurrenceRule = getRecurrenceRule();
+		this.toBeSavedEvent.rruleModel.until= this.recurrenceRule.calculateRecurTime(this.toBeSavedEvent.endValidity);
+		this.recurrenceRule.constructRRuleFromModel(this.toBeSavedEvent);
+		getCalendarService().setEvent(this.toBeSavedEvent, this.ThisAndFutureCB.bind(this), this.controller);
+	},
+	
+	ThisAndFutureCB: function () {
+		 // Reset the dragging state
+		var currentRecurrenceInstanceTimes = parseFromId(this.event_being_held.id);
+		var originalStart = currentRecurrenceInstanceTimes.start;
+		this.resetEventBeingDragged();
+		//we also need to assign the start and end time stamp 
+		var startTime = new Date(originalStart);
+		var duration = this.toBeSavedEvent.endTimestamp - this.toBeSavedEvent.startTimestamp;
+        
+		if (this.newHour === undefined && this.newMinutes === undefined) {
+			// Calculate the new start time using the delta
+			startTime.addMinutes(this.newTimeDeltaInMinutes);
+		} else {
+			// Set the new startTimestamp 
+			startTime.set(
+			{	hour	: this.newHour
+			,	minute	: this.newMinutes
+			});
+		}
+		delete this.newEvent.id;
+		if(this.newEvent.backupID) {this.newEvent.backupID = undefined;}
+		this.newEvent.parentId = undefined;
+		this.newEvent.startTimestamp = +startTime;
+		this.newEvent.start = +startTime;
+		this.newEvent.endTimestamp = +startTime + duration;
+		this.newEvent.end = +startTime + duration;
+		if(this.newEvent.originalstartTimestamp) {this.newEvent.originalstartTimestamp = undefined;}
+		if(!this.newEvent.isRecurringForever) {
+			var time = new Date(this.newEvent.endValidity);
+			var endtime = new Date(this.newEvent.endTimestamp);
+			time.setHours(endtime.getHours());
+			time.setMinutes(endtime.getMinutes());
+			time.setSeconds(endtime.getSeconds());
+			this.newEvent.endValidity = time.getTime();
+			this.newEvent.rruleModel.until= this.recurrenceRule.calculateRecurTime(this.newEvent.endValidity);
+		}else if(this.newEvent.isRecurringForever){
+			this.newEvent.endValidity = "Long.MAX_VALUE";
+			if(this.newEvent.rruleModel.until) {delete this.newEvent.rruleModel.until;}
+		}
+		this.recurrenceRule.constructRRuleFromModel(this.newEvent);
+		this.toBeSavedEvent = Object.clone(this.newEvent);
+		getCalendarService().setEvent(this.toBeSavedEvent, this.updatedEventTime.bind(this), this.controller);
+	},
+	
 	recurrenceCancel:function(){
 		//Mojo.Log.info('inside day- recurrene canceled %o',this.draggedEventTop);
 		this.event_being_held.top = this.event_being_held.origDragTop;
@@ -3362,31 +4081,43 @@ var DayAssistant = Class.create({
 		//Mojo.Log.info("day-assistant handleEventsDragEnd");
 		
 		if (this.event_being_dragged) {
-			var itemTop = this.event_being_dragged.positionedOffset().top;
-			
-			// Calculate how much "time" the user has moved the event.  When the event is retrieved
-			// we use this delta to calculate the new start time.  Can not calculate the new start
-			// time here, because for events that overlap days, this.dragStartHour may not reflect
-			// the actual start time of the event
-			this.newTimeDeltaInMinutes = this.ptToHalfHour(itemTop-this.event_being_held.top) * 30;
-			
-			// Set these to undefined since we use newTimeDeltaInMinutes to determing the new start time
-			// in gotEventForUpdateTime
-			this.newHour = undefined;
-			this.newMinutes = undefined;
-			
-			// Show the event in its new position.  At this point, the CalendarEvent in the
-			// database hasn't been updated with the new time, but we can move the event
-			// visually first
-			this.event_being_held.origDragTop = this.event_being_held.top;
-			
-			this.event_being_held.top = itemTop;
-			this.renderEvent(this.THIS_DAY, this.event_being_held, false);
+			var itemLeft = this.event_being_dragged.positionedOffset().left;
+			if (itemLeft > 100) {
+				this.eventToBeDeleted = this.event_being_held;
+				this.deletedeventId = this.event_being_held.id;
+				getCalendarService().getEvent(this.event_being_held.id, this.gotEventInlineDelete.bind(this),this.gotEventInlineDeleteFailed.bind(this), this.controller);
+				// Reset the dragging state
+				this.resetEventBeingDragged();
 
-			// Retrieve the event from the calendar service so we can set the new start time
-			getCalendarService().getEvent(this.event_being_held.id, this.gotEventForUpdateTime.bind(this),this.gotEventFailed.bind(this), this.controller);
-			
-			return Mojo.Gesture.CONSUMED_EVENT;
+				return Mojo.Gesture.CONSUMED_EVENT;
+			} else {
+				var itemTop = this.event_being_dragged.positionedOffset().top;
+				
+				// Calculate how much "time" the user has moved the event.  When the event is retrieved
+				// we use this delta to calculate the new start time.  Can not calculate the new start
+				// time here, because for events that overlap days, this.dragStartHour may not reflect
+				// the actual start time of the event
+				this.newTimeDeltaInMinutes = this.ptToHalfHour(itemTop-this.event_being_held.top) * 30;
+				
+				// Set these to undefined since we use newTimeDeltaInMinutes to determing the new start time
+				// in gotEventForUpdateTime
+				this.newHour = undefined;
+				this.newMinutes = undefined;
+				
+				// Show the event in its new position.  At this point, the CalendarEvent in the
+				// database hasn't been updated with the new time, but we can move the event
+				// visually first
+				this.event_being_held.origDragTop = this.event_being_held.top;
+				
+				this.event_being_held.top = itemTop;
+				this.event_being_held.left = 0;
+				this.renderEvent(this.THIS_DAY, this.event_being_held, false);
+	
+				// Retrieve the event from the calendar service so we can set the new start time
+				getCalendarService().getEvent(this.event_being_held.id, this.gotEventForUpdateTime.bind(this),this.gotEventFailed.bind(this), this.controller);
+				
+				return Mojo.Gesture.CONSUMED_EVENT;
+			}
 		}
 	},
 	
@@ -3587,10 +4318,12 @@ var DayAssistant = Class.create({
 			Mojo.Animation.animateValue(Mojo.Animation.queueForElement(this.scrollDataDiv), 'bezier', function(value) {
 					this.animationValue = value;
 					this.renderDay(this.THIS_DAY, day, false);
-					if (this.compressed) {
-						this.tds[this.THIS_DAY].scroller.mojo.scrollTo(undefined, Math.round(currentTop + scrollOffset * value));
-					} else {
-						this.tds[this.THIS_DAY].scroller.mojo.scrollTo(undefined, Math.round(currentTop - scrollOffset * value));
+					if(!this.enhancedView || (this.enhancedView && this.dayViewShrink == "none")) {
+						if (this.compressed) {
+							this.tds[this.THIS_DAY].scroller.mojo.scrollTo(undefined, Math.round(currentTop + scrollOffset * value));
+						} else {
+							this.tds[this.THIS_DAY].scroller.mojo.scrollTo(undefined, Math.round(currentTop - scrollOffset * value));
+						}
 					}
 				}.bind(this), 
 				{
diff --git a/usr/palm/applications/com.palm.app.calendar/app/controllers/edit-assistant.js b/usr/palm/applications/com.palm.app.calendar/app/controllers/edit-assistant.js
index 9ba9c70..ac9e0c1 100644
--- a/usr/palm/applications/com.palm.app.calendar/app/controllers/edit-assistant.js
+++ b/usr/palm/applications/com.palm.app.calendar/app/controllers/edit-assistant.js
@@ -8,13 +8,16 @@ var EditAssistant = Class.create({
 	                											 {label:$L('Get Directions'), command:'direction', disabled:false}] 
 	                													 				
 							},
+							{label:$L('Edit event as new'), command:'editAsNewEvent', disabled:false},
+							{label:$L('Save as Template'), command:'saveAsTemplate', disabled:false},
 							{label:$L('Delete event'), command:'deleteEvent', disabled:false},
 							{label:$L('Preferences & Accounts'), command:Mojo.Menu.prefsCmd, disabled: true},
 							{label:$L('Help'), command:Mojo.Menu.helpCmd, disabled:false}]
 				  },
 	
-	initialize: function(targetId, targetDate, targetAllDay,calendarId,subject,forceCommit,callBackAfterUpdate) {
+	initialize: function(targetId, targetDate, targetAllDay,calendarId,subject,forceCommit,callBackAfterUpdate, editingTemplate) {
 		this.targetId = targetId;
+		this.editingTemplate = editingTemplate;
 		this.targetModifiedTime ={start:0,end:0,id:0};
 		//Mojo.Log.info('>>>>>>>>>>>>>>>>>>>>>>>>>>>>targetId ,%s',targetId);
 		if(targetId)
@@ -31,7 +34,33 @@ var EditAssistant = Class.create({
 		this.forceCommit=forceCommit;
 		this.callBackAfterUpdate =callBackAfterUpdate;
 		this.formatter = getFormatterService();
-		
+		this.uberCategories = [
+				{'name': 'birthday'}, // Do NOT Localize these
+				{'name': 'car'},
+				{'name': 'doctor'},
+				{'name': 'holiday'},
+				{'name': 'kids'},
+				{'name': 'party'},
+				{'name': 'plane'},
+				{'name': 'vacation'},
+			];
+		this.userUberCats = [];
+		this.catCookie = new Mojo.Model.Cookie("userUberCats");
+		if(this.catCookie) {
+			var catcookie = this.catCookie.get();
+			if(catcookie) {
+				if(catcookie.userubercats && catcookie.userubercats.length > 0){
+					this.userUberCats = catcookie.userubercats;
+				} else {
+					this.userUberCats = this.uberCategories;
+				}
+			} else {
+				this.userUberCats = this.uberCategories;
+			}
+		} else {
+				this.userUberCats = this.uberCategories;
+		}
+		this.imgIcons = new Object();
 	},
 	
 	renderEvent: function(response) {
@@ -102,6 +131,7 @@ var EditAssistant = Class.create({
 		this.controller.get('edit_repeatrow').stopObserving(Mojo.Event.tap, this.edit_repeatHander);
 		this.controller.get('edit_alarmrow').stopObserving(Mojo.Event.tap, this.edit_alarmHandler);	
 		this.controller.get('edit_calendartypeParent').stopObserving(Mojo.Event.tap,this.event_calendarTypeHandler );
+		this.controller.get('edit-uber-icon-picker').stopObserving(Mojo.Event.tap, this.edit_userUberCats)
 		
 	},
 	
@@ -239,6 +269,66 @@ var EditAssistant = Class.create({
 		this.updateRepeatButton(this.repeatOptions[this.repeatFreqChoice-1],this.repeatFreqChoice);
 	},
 	
+	getUberCatValue: function(note) {
+		var wholeNote = note !== "\n" ? note : "";
+		var last = this.userUberCats.length;
+		if(wholeNote && wholeNote !== "\n" && wholeNote.length > 0) {
+			var result = getNotesIconParts(wholeNote);
+			if(result && result[1]) {
+				this.uberNotePrefix = result[0];
+				this.uberNoteSuffix = result[2];
+				this.uberNoteCat = result[1];
+				if(this.uberNoteCat) {
+					this.uberHasCat = true;
+					for(var i=0; i < this.userUberCats.length; i++) {
+						if(this.userUberCats[i].name === this.uberNoteCat) {
+							this.uberCatChoice = i;
+							this.updateUberIconPicker(this.uberNoteCat);
+						}
+					}
+				} else { // has "ICON=" & ";" but it's not a fit
+						this.uberHasCat = false;
+						this.uberNotePrefix = "";
+						this.uberNoteSuffix = wholeNote;
+						this.uberCatChoice = last;
+				}
+			} else { //no icon, but has note
+				this.uberHasCat = false;
+				this.uberNotePrefix = "";
+				this.uberNoteSuffix = wholeNote;
+				this.uberCatChoice = last;
+			}
+		} else {
+			// no note
+			this.uberHasCat = false;
+			this.uberNotePrefix = "";
+			this.uberNoteSuffix = wholeNote;
+			this.uberCatChoice = last;
+		}
+	},
+	
+	setUberCatValue: function(value) {
+		if(this.notemodel.disabled===true) {
+			//read only, do nothing
+			return;
+		}
+		// take a category & add it to the start of the note, unless already there.
+		if(this.uberHasCat && value) {
+			if(this.uberNotePrefix !== undefined && this.uberNoteSuffix !== undefined) {
+				this.editnotediv.mojo.value = this.uberNotePrefix + "ICON=" + value + ";" + this.uberNoteSuffix;
+				this.targetEvent.note = this.editnotediv.mojo.value;
+				this.targetEvent.dirty =true;
+			}
+		} else if(this.uberHasCat === false && value) {
+			// assigning new cat
+			this.editnotediv.mojo.value = this.uberNotePrefix + "ICON=" + value + ";" + this.uberNoteSuffix;
+			this.targetEvent.note = this.editnotediv.mojo.value;
+			this.targetEvent.dirty =true;
+			this.uberHasCat = true;
+		}
+		this.updateUberIconPicker(value);
+	},
+	
 	renderAlarmStrings: function(response) {
 		
 		this.alarmOptions = response;
@@ -248,6 +338,11 @@ var EditAssistant = Class.create({
 	
 	},
 	
+	renderUberCat: function() {
+		if (!this.isReadOnlyEvent)
+			this.controller.get('edit-uber-icon-picker').observe(Mojo.Event.tap, this.edit_userUberCats);	
+	},
+	
 	updateEventInfo: function(info) {
 		Mojo.Log.info("updateEventInfo");
 		var stylingClass = "all-day-single";
@@ -280,6 +375,11 @@ var EditAssistant = Class.create({
 		this.controller.get('edit_alarm').update(button);
 	},
 	
+	updateUberIconPicker: function(option) {
+		var iconImage = 'url(/media/internal/.scrims/ubercalendar/icon-' + option + '.png) center no-repeat';
+		this.controller.get('edit-uber-icon-picker').style.background = iconImage;
+	},
+	
 	repeats:['never','daily','weekday','weekly','custom'], //do not localize
 	
 	
@@ -297,6 +397,12 @@ var EditAssistant = Class.create({
 		
 		// Delete event menu item.  Users can delete new and existing events
 		if(!this.isReadOnlyEvent)
+			this.appMenuModel.items[3].disabled = false;   
+		else
+			this.appMenuModel.items[3].disabled = true; 
+
+		// Edit as new event menu item. Users cannot edit new items as a new item
+		if(this.targetEvent.id > 0)
 			this.appMenuModel.items[2].disabled = false;   
 		else
 			this.appMenuModel.items[2].disabled = true; 
@@ -345,7 +451,7 @@ var EditAssistant = Class.create({
 		else 
 			//this.notemodel.note = "";
 			this.editnotediv.mojo.value = '';
-		
+		this.getUberCatValue(this.editnotediv.mojo.value);
 		this.controller.modelChanged(this.locationmodel);
 		this.controller.modelChanged(this.subjectmodel);
 		this.controller.modelChanged(this.notemodel);
@@ -403,6 +509,7 @@ var EditAssistant = Class.create({
 			this.alarms.list.unshift(this.targetEvent.alarm);
 		}		
 		this.renderAlarmStrings(this.formatter.getAlarmStrings(this.alarms.list));	
+		this.renderUberCat();
 		this.updateContentCalendarType(this.targetEvent.calendarId.sub('id',''));
 	},
 	updateCalendarTypeInfo:function(calendarId){
@@ -434,6 +541,19 @@ var EditAssistant = Class.create({
 		}
 	},		
 	setup: function() {
+		// uberC icon picker setup
+		for(var i=0; i<this.userUberCats.length; i++) {
+			var catName = this.userUberCats[i].name;
+			this.imgIcons[catName] = new Image();
+			this.imgIcons[catName].src = "/media/internal/.scrims/ubercalendar/icon-" + catName + ".png";
+		}
+		var editAlarmDiv = this.controller.get("edit_alarmrow");
+		editAlarmDiv.removeChild(editAlarmDiv.firstChild);
+		editAlarmDiv.innerHTML = '<div class="palm-row-wrapper">' +
+				'<table width="100%"><tr>' +
+					'<td width="90%"><div id="alarm-bell-icon" class="icon left reminder"></div><div id="edit_alarm" class="title"></div></td>' +
+					'<td width=10%" height="40px"><div id="edit-uber-icon-picker" x-mojo-tap-highlight="momentary"></div></td>' +
+				'</tr></table></div>';
 		
 		var subjecthinttext=$L('Event name');
 		this.alarmType= {
@@ -443,18 +563,68 @@ var EditAssistant = Class.create({
 						 '-PT5M', // Do Not Localize
 						 '-PT10M', //Do not localize
 						 '-PT15M', // Do NOT Localize
+						 '-PT20M', // Do NOT Localize
+						 '-PT25M', // Do NOT Localize
 						 '-PT30M', // Do NOT Localize
+						 '-PT35M', // Do NOT Localize
+						 '-PT45M', // Do NOT Localize
 						 '-PT1H', // Do NOT Localize
-						 '-P1D' // Do NOT Localize
+						 '-PT90M', // Do NOT Localize
+						 '-PT2H', // Do NOT Localize
+						 '-PT150M', // Do NOT Localize
+						 '-PT3H', // Do NOT Localize
+						 '-PT220M', // Do NOT Localize
+						 '-PT4H', // Do NOT Localize
+						 '-PT5H', // Do NOT Localize
+						 '-PT6H', // Do NOT Localize
+						 '-PT7H', // Do NOT Localize
+						 '-PT8H', // Do NOT Localize
+						 '-PT10H', // Do NOT Localize
+						 '-PT12H', // Do NOT Localize	
+						 '-PT23H', // Do NOT Localize
+						 '-P1D', // Do NOT Localize
+						'-P36H', // Do NOT Localize
+	 					'-P2D', // Do NOT Localize
+						'-P60H', // Do NOT Localize	
+	 					'-P3D', // Do NOT Localize
+						'-P84H', // Do NOT Localize
+						'-P4D', // Do NOT Localize
+						'-P5D', // Do NOT Localize
+						'-P6D', // Do NOT Localize			
+	 					'-P1W', // Do NOT Localize
+						'-P2W', // Do NOT Localize
+						'-P3W', // Do NOT Localize
+						'-P4W', // Do NOT Localize
+						'-P8W', // Do NOT Localize
+						'-P12W', // Do NOT Localize
+						'-P16W', // Do NOT Localize
+						'-P20W', // Do NOT Localize
+						'-P24W', // Do NOT Localize
+						'-P52W' // Do NOT Localize
 						]
 						},
 			alarmsAllday: {
 				list: [ 'none', // Do NOT Localize
 						'-PT0M',// DO NOT Localize
 	 					'-P1D', // Do NOT Localize
+						'-P36H', // Do NOT Localize
 	 					'-P2D', // Do NOT Localize
+						'-P60H', // Do NOT Localize	
 	 					'-P3D', // Do NOT Localize
+						'-P84H', // Do NOT Localize
+						'-P4D', // Do NOT Localize
+						'-P5D', // Do NOT Localize
+						'-P6D', // Do NOT Localize			
 	 					'-P1W', // Do NOT Localize
+						'-P2W', // Do NOT Localize
+						'-P3W', // Do NOT Localize
+						'-P4W', // Do NOT Localize
+						'-P8W', // Do NOT Localize
+						'-P12W', // Do NOT Localize
+						'-P16W', // Do NOT Localize
+						'-P20W', // Do NOT Localize
+						'-P24W', // Do NOT Localize
+						'-P52W' // Do NOT Localize
 					 ]
 					}
 		};
@@ -490,7 +660,7 @@ var EditAssistant = Class.create({
 		
 		this.edit_repeatHander=this.handleEditRepeat.bind(this);
 		this.edit_alarmHandler = this.handleEditAlarm.bind(this);
-		
+		this.edit_userUberCats = this.handleUberCatIcon.bind(this);
 		var subject = (this.eventSubject)?this.eventSubject:'';
 		//for subject
 		var tfAttrs1 = {
@@ -512,12 +682,14 @@ var EditAssistant = Class.create({
 			modelProperty: 'location',
 			hintText: $L('Event location'),
 			acceptBack:true,
-			runTextLinker:true
+			runTextLinker:true,
+			multiline: true
 	
 		};
 		 this.locationmodel = {
       		'location' : '',
    		 };
+		this.uberLocationIcon = this.controller.get("edit_location");
 		this.controller.setupWidget('edit_location_field', tfAttrs2, this.locationmodel);
 		
 		//for notes
@@ -556,7 +728,7 @@ var EditAssistant = Class.create({
 				start = new Date(this.targetDate);
 				
 				// Clear the minutes, seconds, and ms's.
-				start.set({	minute: 0, second: 0, millisecond: 0 });
+				start.set({second: 0, millisecond: 0 });
 			} else {
 				// Use the current date and time maintained by the calendar... Users will
 				// most likely want to create events on the day they are currently looking
@@ -644,6 +816,19 @@ var EditAssistant = Class.create({
 		if (this.eventCalendarId) {
 			this.updateContentCalendarType(this.eventCalendarId.sub('id',''));
 		}
+		if (!this.isReadOnlyEvent) {
+			this.controller.setupWidget(Mojo.Menu.commandMenu,
+				this.attrCommand = {
+					menuClass: 'fade'
+				},
+				this.modelCommand = {
+					visible: true,
+					items: [
+					{icon: "make-vip", command: 'toggle_participantrow'},
+					{icon: "delete", command:'deleteEvent'}]
+				}
+			);
+		}
 	 },
 	 
 	 setUpWidgetListeners: function(){
@@ -662,24 +847,73 @@ var EditAssistant = Class.create({
 		this.controller.get('edit_note').observe(Mojo.Event.propertyChange, this.noteChanged.bind(this));
 	
 	 },
+	 
+	 saveAsTemplateCallback: function(response) {
+		// done popscene
+		this.controller.stageController.popScene('edit');
+	 },
+	 
 	 handleCommand: function(event) {
 		if(event.type == Mojo.Event.command) {
-			if(event.command == 'deleteEvent') {
-				Event.stop(event);
-				this.deletedeventId = this.targetEvent.id;
-				this.handleDelete(event);
-			} else if (event.command == Mojo.Menu.prefsCmd) {
-				Event.stop(event);
-				this.controller.stageController.pushScene('prefs');
-			}else if(event.command =='copy'){
-				//@todo
-			}else if(event.command == Mojo.Menu.helpCmd){
-				getAppManagerService().launchHelp(this.controller);
-			} else if(event.command == 'map'){
-				getAppManagerService().launchMaps(this.controller,this.targetEvent.location,false);
-			}else if(event.command == 'direction'){
-				getAppManagerService().launchMaps(this.controller,this.targetEvent.location,true);								
-			}
+			try {
+				if(event.command == 'deleteEvent') {
+					Event.stop(event);
+					this.deletedeventId = this.targetEvent.id;
+					this.handleDelete(event);
+				} else if (event.command == Mojo.Menu.prefsCmd) {
+					Event.stop(event);
+					this.controller.stageController.pushScene('prefs');
+				}else if(event.command =='editAsNewEvent'){
+					Event.stop(event);
+					this.targetEvent = Object.clone(this.targetEvent);
+					this.targetId = 0;
+					delete this.targetEvent.id;
+					this.targetEvent.parentId = 0;
+	
+					this.renderEvent(this.targetEvent);
+					this.edit_infoHandler();
+				} else if(event.command =='saveAsTemplate'){
+					Event.stop(event);
+					var targetEvent = Object.clone(this.targetEvent);
+					targetEvent.parentId = 0;
+					if(this.editingTemplate !== true) {
+						targetEvent.id = 0;
+					}
+					var startTS = Date.UTC(2030,0,1,0,0,0,0);
+					var refTS = new Date(targetEvent.startTimestamp).clearTime().getTime();
+					var templateStartTS = targetEvent.startTimestamp;
+					var templateEndTS = targetEvent.endTimestamp;
+					var allDay = targetEvent.allDay;
+					targetEvent.timeZoneId = "Atlantic/Reykjavik";
+					targetEvent.originalstartTimestamp = targetEvent.startTimestamp;
+					targetEvent.rruleModel = Object.clone(recurrence_model);
+					targetEvent.rrule = "";
+					targetEvent.endValidity = 0;
+					if(allDay === true) {
+						startTS = new Date(2030,0,1,0,0,0,0).getTime();
+						targetEvent.start = startTS;
+						targetEvent.startTimestamp = startTS;
+						targetEvent.end = startTS + 23*60*60*1000 + 59*60*1000 + 59*1000;
+						targetEvent.endTimestamp = startTS + 23*60*60*1000 + 59*60*1000 + 59*1000;
+					} else {
+						targetEvent.start = startTS + (templateStartTS - refTS);
+						targetEvent.startTimestamp = startTS + (templateStartTS - refTS);
+						targetEvent.end = startTS + (templateEndTS - refTS);
+						targetEvent.endTimestamp = startTS + (templateEndTS - refTS);
+					}
+					getCalendarService().setEvent(targetEvent, this.saveAsTemplateCallback.bind(this), this.controller);
+				}else if(event.command =='copy'){
+					//@todo
+				}else if(event.command == Mojo.Menu.helpCmd){
+					getAppManagerService().launchHelp(this.controller);
+				} else if(event.command == 'map'){
+					getAppManagerService().launchMaps(this.controller,this.targetEvent.location,false);
+				}else if(event.command == 'direction'){
+					getAppManagerService().launchMaps(this.controller,this.targetEvent.location,true);								
+				}else if(event.command == 'toggle_participantrow'){
+					this.controller.get('edit_participantrow').toggle();
+				}
+			} catch (e) {}
 		}
 		else if(event.type == Mojo.Event.commandEnable && event.command == Mojo.Menu.prefsCmd) {
 			// Enable prefs menuitem for this scene.
@@ -704,11 +938,17 @@ var EditAssistant = Class.create({
 	noteChanged: function(e) {
 		this.targetEvent.dirty =true;
 		
-			 if(e.value!=null)
+		if(e.value!=null) {
 			this.targetEvent.note = e.value;
-		else
+			if(e.value == "\n") {
+				this.getUberCatValue("");
+			} else {
+				this.getUberCatValue(e.value);
+			}
+		}else {
 			this.targetEvent.note = "";
-		
+			this.getUberCatValue("");
+		}
 	},
 	
     
@@ -726,7 +966,7 @@ var EditAssistant = Class.create({
 		this.targetEvent.dirty =true;
 		Mojo.Log.info("edit-assistant:locationChanged");
 		
-		 if (e.value != null && e.value!="") {
+		 if (e.value != null && e.value != "" && e.value !="\r" && e.value != "\n" && e.value != "\n\r") {
 		 	this.targetEvent.location = e.value;
 		 	this.appMenuModel.items[1].items[0].disabled = false;
 			this.appMenuModel.items[1].items[1].disabled = false;
@@ -743,6 +983,51 @@ var EditAssistant = Class.create({
 			
 	},
   
+	saveThisAndFuture: function() {
+		// change end date, add  new event
+		if(this.targetEvent.startTimestamp === this.targetModifiedTime.start) {
+			//first event same as series
+			this.saveEvent(undefined);
+			return;
+		}
+		this.newEvent = Object.clone(this.targetEvent);
+		this.oldEvent.endValidity = (new Date(this.targetModifiedTime.end)).addDays(-1).getTime();
+		this.oldEvent.isRecurringForever = false;
+		if(this.oldEvent.rruleModel.count) {this.oldEvent.rruleModel.count = undefined;}
+		this.oldEvent.rruleModel.until= this.recurrenceRule.calculateRecurTime(this.oldEvent.endValidity);
+		this.recurrenceRule.constructRRuleFromModel(this.oldEvent);
+		delete this.targetEvent.id;
+		this.targetId = 0;
+		this.requests.push(this.service.setEvent(this.oldEvent, this.ThisAndFutureCB.bind(this), this.controller));
+	},
+	
+	ThisAndFutureCB: function () {
+		this.targetEvent.parentId = 0;
+		this.targetEvent.id = 0;
+		if(this.targetEvent.backupID) {this.targetEvent.backupID = undefined;}
+		if(this.targetEvent.originalstartTimestamp) {this.targetEvent.originalstartTimestamp = undefined;}
+		this.targetEvent.startTimestamp = this.targetModifiedTime.start;
+		this.targetEvent.start = this.targetModifiedTime.start;
+		this.targetEvent.endTimestamp = this.targetModifiedTime.end;
+		this.targetEvent.end = this.targetModifiedTime.end;
+		if(!this.targetEvent.isRecurringForever) {
+			var time = new Date(this.targetEvent.endValidity);
+			var endtimestamp = new Date(this.targetModifiedTime.end);
+			time.setHours(endtimestamp.getHours());
+			time.setMinutes(endtimestamp.getMinutes());
+			time.setSeconds(endtimestamp.getSeconds());
+			this.targetEvent.endValidity = time.getTime();
+			this.targetEvent.rruleModel.until= this.recurrenceRule.calculateRecurTime(this.targetEvent.endValidity);
+		} else if(this.targetEvent.isRecurringForever){
+			this.targetEvent.endValidity = "Long.MAX_VALUE";
+			if(this.targetEvent.rruleModel.until) {delete this.targetEvent.rruleModel.until;}
+		}
+		this.recurrenceRule.constructRRuleFromModel(this.targetEvent);
+		this.oldEvent = null;
+		this.setupEvent();
+		this.saveEvent(null);
+	},
+	
   saveEvent: function(parentId,inCardMode){
   		
 		//Mojo.Log.info("edit-assistant:saveEvent");
@@ -812,21 +1097,31 @@ var EditAssistant = Class.create({
 		this.controller.get('edit_repeatrow').stopObserving(Mojo.Event.tap, this.edit_repeatHander);
 		this.controller.get('edit_alarmrow').stopObserving(Mojo.Event.tap, this.edit_alarmHandler);
 		this.controller.get('edit_calendartypeParent').stopObserving(Mojo.Event.tap, this.event_calendarTypeHandler);
+		this.controller.get('edit-uber-icon-picker').stopObserving(Mojo.Event.tap, this.edit_userUberCats)
 		}
 	
 	   this.controller.get('edit_participantrow').stopObserving(Mojo.Event.tap,this.edit_participantHandler);	
 	},
   
-	activate: function() {
+	activate: function(peoplePickResp) {
 		
 		this.controller.listen(this.controller.document, Mojo.Event.deactivate, this.blurStage);
 		if (this.targetEvent != undefined) {
 			this.setupEvent();
 		}
+		this.uberLocationHandler = this.handleUberLocation.bind(this);
+		this.uberLocationHoldHandler = this.handleHoldUberLocation.bind(this);
+		this.controller.listen(this.uberLocationIcon, Mojo.Event.tap, this.uberLocationHandler);
+		this.controller.listen(this.uberLocationIcon, Mojo.Event.hold, this.uberLocationHoldHandler);
+		if(peoplePickResp !== undefined) {
+			this.handleUberPicker(peoplePickResp);
+		}
 	},
 
 	deactivate: function() {
 		this.controller.stopListening(this.controller.document, Mojo.Event.deactivate, this.blurStage);
+		this.controller.stopListening(this.uberLocationIcon, Mojo.Event.tap, this.uberLocationHandler);
+		this.controller.stopListening(this.uberLocationIcon, Mojo.Event.hold, this.uberLocationHoldHandler);
 	},
 	/*
 	//Not relevant anymore - cleanup
@@ -929,6 +1224,7 @@ var EditAssistant = Class.create({
 		else this.repeatFreqChoice = 1; //no repeat
 	
 
+
 	},
 	
 	checktargetEventDirty:function(){
@@ -997,6 +1293,279 @@ var EditAssistant = Class.create({
 		this.controller.stageController.pushScene('datetime', this.targetEvent,this.targetModifiedTime,this.resettargetEvent.bind(this),this.oldEvent,this.setEventCallback,this.controller,this.callBackAfterUpdate,this.targetId);
 		
 	},	
+	
+	handleUberLocation: function(e) {
+		//tap on map icon
+		
+		if(e.srcElement.className === "icon left room"){
+			// Mojo.Log.error(" location icon");
+			if(this.targetEvent.location != undefined && this.targetEvent.location !== "") {
+				var items=[
+					{label: $L("Map"), command: 0},
+					{label: $L("Directions"), command: 1},
+					{label: $L("Insert address"), command: 2},
+					{label: $L("Clear location"), command: 3},
+					{label: $L("Advanced copy"), command: 4}
+					];
+					
+				this.controller.popupSubmenu({
+					onChoose: this.uberLocationChoose,
+					items: items,
+					placeNear: this.controller.get('edit_location_field')
+					});
+				
+			} else if(this.targetEvent.location === undefined || this.targetEvent.location === "") {
+				var items=[
+					{label: $L("Map"), command: 0},
+					{label: $L("Insert address"), command: 2},
+					{label: $L("Advanced copy"), command: 4}
+					];
+				
+				this.controller.popupSubmenu({
+					onChoose: this.uberLocationChoose,
+					items: items,
+					placeNear: this.controller.get('edit_location_field')
+					});
+			}
+		}
+	},
+	
+	uberAdvCopyDone: function (array){
+		if(this.notemodel && this.notemodel.disabled===true) {
+			//read only, do nothing
+			return;
+		}
+		var options = [], len, obj, txt, field, old;
+		options = array;
+		len = options && options.length;
+		if(len && len > 0){
+			for(var i =0; i< len;i++){
+				obj = {};
+				replace = false;
+				txt = "";
+				field = "";
+				old = "";
+				obj = options[i];
+				replace = !!obj.replace;
+				txt = obj.data || "";
+				field = obj.field || "";
+				switch(field){
+					case "note":
+						if(replace && txt){
+							this.editnotediv.mojo.value = txt;
+							this.targetEvent.note = this.editnotediv.mojo.value;
+							this.controller.modelChanged (this.notemodel);
+							this.targetEvent.dirty =true;
+							this.getUberCatValue(this.editnotediv.mojo.value);
+						} else if(txt){
+							old = this.editnotediv.mojo.value;
+							this.editnotediv.mojo.value = old + " " + txt;
+							this.targetEvent.note = this.editnotediv.mojo.value;
+							this.controller.modelChanged (this.notemodel);
+							this.targetEvent.dirty =true;
+							this.getUberCatValue(this.editnotediv.mojo.value);
+						}
+						break;
+						
+					case "loc":
+						if(replace && txt){
+							this.locationmodel.location = txt;
+							this.targetEvent.location = txt;
+							this.controller.modelChanged(this.locationmodel);
+							this.targetEvent.dirty =true;
+						} else if(txt){
+							old = this.locationmodel.location !== "" ? this.locationmodel.location: "";
+							this.targetEvent.location =(old + " " + txt);
+							this.locationmodel.location = old + " " + txt;
+							this.controller.modelChanged(this.locationmodel);
+							this.targetEvent.dirty =true;
+						}
+						break;
+					
+					case "subject":
+						if(replace && txt){
+							this.targetEvent.subject = txt;
+							this.subjectmodel.subject = this.targetEvent.subject;
+							this.controller.modelChanged (this.subjectmodel);
+							this.targetEvent.dirty =true;
+						} else if(txt){
+							old = this.targetEvent.subject;
+							this.targetEvent.subject = old + " " + txt;
+							this.subjectmodel.subject = this.targetEvent.subject;
+							this.controller.modelChanged (this.subjectmodel);
+							this.targetEvent.dirty =true;
+						}
+						break;
+					default:
+					break;
+				}
+			}
+		}
+	},
+	
+	uberLocationChoose: function(val) {
+		var value = parseInt(val);
+		this.advancedCopy = false;
+		this.uberEditLoc = false;
+		if(val !== undefined) {
+			switch (value) {
+				case 0: //map
+					getAppManagerService().launchMaps(this.controller,this.targetEvent.location,false);
+					break;
+					
+				case 1: //directions
+					getAppManagerService().launchMaps(this.controller,this.targetEvent.location,true);
+					break;
+				
+				case 4:
+					this.advancedCopy = true;
+				case 2: //insert address
+					this.uberEditLoc = true;
+					this.controller.stageController.pushScene(
+					{ appId :'com.palm.app.contacts', name: 'list' },
+					{ mode: 'picker', message: $L("Pick a contact")}
+					);
+					break;
+					
+				case 3: //clear
+					this.locationmodel.location = "";
+					this.targetEvent.location = "";
+					this.controller.modelChanged(this.locationmodel);
+					this.targetEvent.dirty =true;
+					break;
+					
+				default: //cancel
+					break;
+			}
+		}
+	},
+	
+	handleHoldUberLocation: function(e) {
+		Event.stop(e);
+		if(e.srcElement.className === "icon left room"){
+			//Mojo.Log.error("hold location icon");
+			if(this.targetEvent.location != undefined && this.targetEvent.location !== "") {
+				getAppManagerService().launchMaps(this.controller,this.targetEvent.location,false);
+			} else if(this.targetEvent.location === undefined || this.targetEvent.location === "") {
+				this.controller.stageController.pushScene(
+					{ appId :'com.palm.app.contacts', name: 'list' },
+					{ mode: 'picker', message: $L("Pick a contact")}
+				);
+			}
+		}
+	},
+	
+	handleUberPicker: function(resp) {
+		if(resp && this.advancedCopy){
+			this.controller.showDialog({
+            template: 'shared/uber-timezone',
+            assistant: new UberAdvancedCopy(this.controller, this, resp),
+			});
+			return;
+		} else if(resp && resp.details && resp.details.record) {
+			var adds = resp.details.record.addresses;
+			var lname = resp.details.record.lastName || "";
+			var fname = resp.details.record.firstName || "";
+			this.uberAdds = [];
+			var prevLoc = this.locationmodel.location !== "" ? this.locationmodel.location + " ": "";
+			if(adds && adds.length && adds.length > 0) {
+				if(adds.length === 1) {
+					if(adds[0].freeformAddress && adds[0].freeformAddress != ""){
+						this.locationmodel.location = this.uberEditLoc === true ? prevLoc + adds[0].freeformAddress : adds[0].freeformAddress;
+						this.targetEvent.location = this.uberEditLoc === true ? prevLoc + adds[0].freeformAddress : adds[0].freeformAddress;
+						this.controller.modelChanged(this.locationmodel);
+						this.targetEvent.dirty =true;
+						return;
+					} else if(adds[0].streetAddress || adds[0].city || adds[0].country || adds[0].state || adds[0].zipCode) {
+						var txt = adds[0].streetAddress ? adds[0].streetAddress : "";
+						txt += adds[0].city ? (txt !== "" ? ", " : "") + adds[0].city : "";
+						txt += adds[0].state ? (txt !== "" ? ", " : "") + adds[0].state : "";
+						txt += adds[0].zipCode ? (txt !== "" ? ", " : "") + adds[0].zipCode: "";
+						txt += adds[0].country ? (txt !== "" ? ", " : "") + adds[0].country  : "";
+						
+						this.locationmodel.location = this.uberEditLoc === true ? prevLoc + txt : txt;
+						this.targetEvent.location = this.uberEditLoc === true ? prevLoc + txt : txt;
+						this.controller.modelChanged(this.locationmodel);
+						this.targetEvent.dirty =true;
+						return;
+					}
+				} else {// have more than one address, setup choices
+					for(var i=0; i < adds.length; i++) {
+						if(adds[i].label != undefined ) { 
+							if(adds[i].freeformAddress && adds[i].freeformAddress != ""){
+								var txt = adds[i].freeformAddress;
+							} else if(adds[i].streetAddress || adds[i].city || adds[i].country || adds[i].state || adds[i].zipCode) {
+								var txt = adds[i].streetAddress ? adds[i].streetAddress : "";
+								txt += adds[i].city ? (txt !== "" ? ", " : "") + adds[i].city : "";
+								txt += adds[i].state ? (txt !== "" ? ", " : "") + adds[i].state : "";
+								txt += adds[i].zipCode ? (txt !== "" ? ", " : "") + adds[i].zipCode : "";
+								txt += adds[i].country ? (txt !== "" ? ", " : "") + adds[i].country  : "";
+							}
+							
+							this.uberAdds.push({
+								label: adds[i].label,
+								address: txt
+							});
+						}
+					}
+				}
+				// double check more than one address, choose
+				var len = this.uberAdds.length;
+				if(len === 1) {
+					var txt = this.uberEditLoc === true ? prevLoc + this.uberAdds[0].address : this.uberAdds[0].address;
+					this.locationmodel.location = txt;
+					this.targetEvent.location = txt;
+					this.controller.modelChanged(this.locationmodel);
+					this.targetEvent.dirty =true;
+					return;
+				} else if(len > 1) {
+					var addChoices = [];
+					for(var i=0; i < len; i++) {
+						var loc;
+						switch(this.uberAdds[i].label){
+							case 0:
+							loc = $L("HOME");
+							break;
+							
+							case 1:
+							loc = $L("WORK");
+							break;
+							
+							case 2:
+							default:
+							loc = $L("OTHER");
+							break;
+						}
+						
+						addChoices.push( {
+							label: loc + ":  " + this.uberAdds[i].address.substring(0, 20),
+							value: i
+						});
+					}
+					//add a cancel
+					addChoices.push( {label: $L("Cancel"), value: "", type: 'dismiss'} );
+					
+					this.controller.showAlertDialog({
+							title: fname + lname !== "" ? fname + " " + lname : $L("Multiple Addresses"),
+							message: $L("Choose an address"),
+							choices: addChoices,
+							onChoose: function(value) {
+								if(value !== undefined && value !== "") {
+									var txt = this.uberEditLoc === true ? prevLoc + this.uberAdds[value].address : this.uberAdds[value].address;
+									this.locationmodel.location = txt;
+									this.targetEvent.location = txt;
+									this.targetEvent.dirty =true;
+									this.controller.modelChanged(this.locationmodel);
+								}
+							}.bind(this)
+						});
+				}
+			}
+			//if we got this far the addresses were empty or cancelled
+			return;
+		}
+	},
+	
 	handleEditRepeat: function(e){
 		Mojo.Log.info("edit-assistant:handleEditRepeat");
 			var items=[];
@@ -1040,7 +1609,7 @@ var EditAssistant = Class.create({
 	repeatChoose: function(val) {
 		//Mojo.Log.info("edit-assistant:repeatChoose");
 	
-		value = parseInt(val);
+		var value = parseInt(val);
 		if (val != undefined && (value != this.repeatFreqChoice) ){			
 			this.targetEvent.onlyRepeatChanged = true;
 			if (this.repeatFreqChoice == 5) {
@@ -1076,6 +1645,52 @@ var EditAssistant = Class.create({
 
 	},
 
+	handleUberCatIcon: function(e) {
+		Event.stop(e);
+		// taps on icon picker
+		var items = [];
+		for (var i=0;i<this.userUberCats.length; i++) {
+			var catName = this.userUberCats[i].name;
+			items.push( {
+				iconPath:'/media/internal/.scrims/ubercalendar/icon-' + catName + '.png',
+				label: $L(catName),
+				command: i
+			});
+		}
+		var last = this.userUberCats.length;
+		items.push( {label: $L("No icon"), command: last});
+		
+		this.controller.popupSubmenu({
+				onChoose: this.uberCatChoose,
+				toggleCmd:this.uberCatChoice,
+				items: items,
+				placeNear: this.controller.get('edit-uber-icon-picker')
+			});
+	},
+	
+	uberCatChoose: function(val) {
+		// picked a cat
+		var value = parseInt(val, 10);
+		var last = this.userUberCats.length;
+		this.uberCatChoice = value;
+		if(val !== undefined && value !== last) {
+			if(!this.uberNoteCat || (this.uberNoteCat && this.uberNoteCat !== this.userUberCats[this.uberCatChoice].name)) {
+				this.uberNoteCat = this.userUberCats[this.uberCatChoice].name;
+				this.setUberCatValue(this.userUberCats[this.uberCatChoice].name);
+			}
+		} else if(val !== undefined && value === last) {
+			if(!this.uberNoteCat && !this.uberHasCat) { // no previous icon chose no icon
+				return;
+			} else if(this.uberHasCat && this.uberNoteCat !== undefined) { // had icon=, match or not
+				this.editnotediv.mojo.value = this.uberNotePrefix + this.uberNoteSuffix;
+				this.targetEvent.note = this.editnotediv.mojo.value;
+				this.targetEvent.dirty =true;
+				var iconImage = 'url(/usr/palm/applications/com.palm.app.calendar/images/day-event-info.png) center no-repeat';
+				this.controller.get('edit-uber-icon-picker').style.background = iconImage;
+			}
+		}
+	},
+	
 	handleEditAlarm: function(e){
 		Mojo.Log.info("edit-assistant:handleEditAlarm");
 		var items=[];
@@ -1100,7 +1715,7 @@ var EditAssistant = Class.create({
 
 	alarmChoose: function(val) {
 		
-		var value = parseInt(val);
+		var value = parseInt(val, 10);
 		this.selectedAlarmOption = value;
 		if (val != undefined) {
 			if (value == 999) {
diff --git a/usr/palm/applications/com.palm.app.calendar/app/controllers/month-assistant.js b/usr/palm/applications/com.palm.app.calendar/app/controllers/month-assistant.js
index 747fcb3..f771eac 100644
--- a/usr/palm/applications/com.palm.app.calendar/app/controllers/month-assistant.js
+++ b/usr/palm/applications/com.palm.app.calendar/app/controllers/month-assistant.js
@@ -5,29 +5,172 @@ var MONTH_DAY_ID_FORMAT = 'MMMM dd yyyy';	// IMPORTANT: DO NOT LOCALIZE!
 var MonthAssistant = Class.create({
 				
 	reminderMenuItemId: 3,
+	//fullEvts: null,
+	 
 	
 	initialize: function() {
  		this.appMenuModel = { visible:true, 
 					label:$L('Calendar'), 
 					items: [
 						Mojo.Menu.editItem,
+						{label:$L('New'), items: [{label:$L('Event'), shortcut:'n', command:'newtimed', disabled:false},
+	                								{label:$L('All day event'), shortcut:'d', command:'newallday', disabled:false}] 
+						},
 						{label:$L('Sync Now'), command:'sync', id: 0},
 						{label:$L('Show today'), command:'today', id: 1},
-						{label:$L('Jump to...'), command:'jumpto', id: 2},
+						{label:$L('Jump to...')+ '/' + $L("Templates"), command:'jumpto', id: 2},
 						{label:$L('Missed reminders...'), command:'reminders', id: 3},
 						{label:$L('Preferences & Accounts'), command:Mojo.Menu.prefsCmd, checkEnabled: true},
+						//this.enhancedMenuItem = {label:$L('Enhanced View'), command:'enhanced', chosen: true},
 						{label:$L('Help'), command:Mojo.Menu.helpCmd, disabled:false}
 					]
 				};
 				
 		this.scrollerModel = { scrollbars: false, mode: "vertical-snap", snapIndex: 0, snapElements: { y: [] } };
+		this.enhancedView = false;
+		this.monthAllDayColors = false;
+		this.weekNumberTitle = true;
+		this.updateFromScroll = false;
+		this.weekNumOffset = 0;
+		this.weekModulusNum = 1;
+		this.useISOweekNum = false;
+		this.prefStartDoW = 0;
+		this.monthViewIcons = true;
+		this.monthVerticalIcons = false;
+		this.monthUseBusy = true;
+		this.uberBackGesture = 'last';
+		this.ucGroupsFirst = false;
+		this.monthCookie = new Mojo.Model.Cookie('MonthViewEnhanced');
+		if (this.monthCookie) {
+			var monthcookie = this.monthCookie.get();
+			if(monthcookie) {
+				if(monthcookie.monthalldaycolors !== undefined) {
+					this.monthAllDayColors = monthcookie.monthalldaycolors;
+				} else {
+					this.monthAllDayColors = false;
+				}
+				if(monthcookie.monthviewenhanced !== undefined) {
+					this.enhancedView = monthcookie.monthviewenhanced;
+				} else {
+					this.enhancedView = false;
+				}
+				if(monthcookie.weeknumoffset !== undefined) {
+						this.weekNumOffset = parseInt(monthcookie.weeknumoffset, 10);
+				} else {
+						this.weekNumOffset = 0;
+				}
+				if(monthcookie.weekmodulusnum !== undefined) {
+						this.weekModulusNum = parseInt(monthcookie.weekmodulusnum, 10);
+				} else {
+						this.weekModulusNum = 1;
+				}
+				if(monthcookie.weeknumbertitle !== undefined) {
+						this.weekNumberTitle = monthcookie.weeknumbertitle;
+				} else {
+						this.weekNumberTitle = true;
+				}
+				if(monthcookie.monthviewicons !== undefined) {
+						this.monthViewIcons = monthcookie.monthviewicons;
+				} else {
+						this.monthViewIcons = true;
+				}
+				if(monthcookie.monthverticalicons !== undefined) {
+						this.monthVerticalIcons = monthcookie.monthverticalicons;
+				} else {
+						this.monthVerticalIcons = false;
+				}
+				if(monthcookie.uberbackgesture !== undefined) {
+						this.uberBackGesture = monthcookie.uberbackgesture;
+				} else {
+						this.uberBackGesture = 'last';
+				}
+				if (monthcookie.useisoweeknum !== undefined) {
+					this.useISOweekNum = monthcookie.useisoweeknum;
+				} else {
+					this.useISOweekNum = false;
+				}
+				if (monthcookie.prefsstartofweek !== undefined) {
+					this.prefStartDoW = parseInt(monthcookie.prefsstartofweek, 10) -1;
+				} else {
+					this.prefStartDoW = 0;
+				}
+				if (monthcookie.monthusebusy !== undefined) {
+					this.monthUseBusy = monthcookie.monthusebusy;
+				} else {
+					this.monthUseBusy = true;
+				}
+				if (monthcookie.ucgroupsfirst !== undefined) {
+					this.ucGroupsFirst = monthcookie.ucgroupsfirst;
+				} else {
+					this.ucGroupsFirst = false;
+				}
+			}
+		}
 	},
+
+	colors: {"cal-color-blue": "rgba(145,211,234,0.4)",
+		"cal-color-green": "rgba(140,240,140,0.4)",
+		"cal-color-yellow": "rgba(232,227,124,0.4)",
+		"cal-color-gray": "rgba(194,194,194,0.4)",
+		"cal-color-orange": "rgba(251,180,116,0.4)",
+		"cal-color-pink": "rgba(245,156,188,0.4)",
+		"cal-color-red": "rgba(255,151,151,0.4)",
+		"cal-color-purple": "rgba(217,183,255,0.4)",
+		"cal-color-teal": "rgba(114,223,210,0.4)"},
+
+	placements: {"0": "top left",
+		"1": "top center",
+		"2": "top right",
+		"3": "center left",
+		"4": "center right",
+		"5": "bottom left",
+		"6": "bottom center",
+		"7": "bottom right"},
+	
+	verticalplacements: {"0": "top left",
+		"1": "center left",
+		"2": "bottom left",
+		"3": "top center",
+		"4": "bottom center",
+		"5": "top right",
+		"6": "center right",
+		"7": "bottom right"},
 														
  	setupMonth: function(startDate, endDate, callbackfn) 
 	{
+		if (this.enhancedView) getCalendarService().getEvents(getCurrentCal(), startDate.getTime(), endDate.getTime(), this.getEventsCallback.bind(this), this.controller, this.getEventsFailCallback/*, {useSlices: true}*/);
 		getCalendarService().getBusyDays(getCurrentCal(), startDate.getTime(), endDate.getTime(), callbackfn, this.controller);
 	},
+
+	
+	getUCGroupsProps: function() {
+		// check for UC groups
+		if(this.uberGroups && this.uberGroups.inUse === true && this.userUberCalGroups && this.userUberCalGroups.length > 0 && this.userUberCalGroups[0].rId !== undefined) {
+			var rID = this.uberGroups.rId;
+			if(rID) {
+				var len = this.userUberCalGroups.length;
+				var idx;
+				for(var i=0; i < len; i++){
+					if(rID === this.userUberCalGroups[i].rId) {
+						var idx = i;
+						break;
+					}
+				}
+				if(idx !== undefined && this.userUberCalGroups[idx].includes && this.userUberCalGroups[idx].includes.length >0) {
+					this.ucGroupIdx = idx;
+				}
+			}
+		} else {
+			this.ucGroupIdx = undefined;
+		}
+	},
 	
+	getEventsCallback: function(resp)
+	{
+		this.fullEvts = new Hash();
+		this.fullEvts = resp.days;
+	},
+
 	buildViewHeader: function() 
 	{
 		//Mojo.Log.info("month-assistant: buildViewHeader");
@@ -37,7 +180,37 @@ var MonthAssistant = Class.create({
 	
 	buildMonthTitle: function() 
 	{
-		this.mvTitle.innerText = Mojo.Format.formatDate(this.monthDate, $L("MMM yyyy")); // Localize this date format string
+		var wn = new Date(this.monthDate);
+		wn.setDate(1);
+		var year = wn.getFullYear();
+		var month = wn.getMonth();
+		var maxwkn = this.useISOweekNum === true ? new Date((month != 0 ? year : year -1), 11, 28).getISO8601Week() : new Date((month != 0 ? year : year -1), 11, 28).getWeekOfYear(this.prefStartDoW);
+		var firstWeek = this.useISOweekNum === true ? wn.getISO8601Week() : wn.getWeekOfYear(this.prefStartDoW);
+		maxwkn = maxwkn == 0 ? 53 : maxwkn;
+		firstWeek = firstWeek == 0 ? maxwkn : firstWeek;
+		if(this.weekNumOffset !== undefined && this.weekNumOffset !=0) {
+			var wkNum = parseInt(firstWeek,10) + this.weekNumOffset;
+			firstWeek = wkNum > maxwkn ? (wkNum - maxwkn) : wkNum;
+			firstWeek = firstWeek < 10 ? '0' + firstWeek : firstWeek;
+		}
+		wn.setMonth(wn.getMonth()+1);
+		wn.setDate(wn.getDate()-1);
+		var year = wn.getFullYear();
+		var month = wn.getMonth();
+		var maxwkn = new Date((month != 0 ? year : year -1), 11, 28).getISO8601Week();
+		var lastWeek = this.useISOweekNum === true ? wn.getISO8601Week() : wn.getWeekOfYear(this.prefStartDoW);
+		maxwkn = maxwkn == 0 ? 53 : maxwkn;
+		lastWeek = lastWeek == 0 ? maxwkn : lastWeek;
+		if(this.weekNumOffset !== undefined && this.weekNumOffset !=0) {
+			var wkNum = parseInt(lastWeek,10) + this.weekNumOffset;
+			lastWeek = wkNum > maxwkn ? (wkNum - maxwkn) : wkNum;
+			lastWeek = lastWeek < 10 ? '0' + lastWeek : lastWeek;
+		}
+		if(this.weekNumberTitle) { 
+			this.mvTitle.innerText = Mojo.Format.formatDate(this.monthDate, $L("MMM yyyy")) + ", " + $L("Week") + " " + firstWeek + "-" + lastWeek; // Localize this date format string
+		} else {
+			this.mvTitle.innerText = Mojo.Format.formatDate(this.monthDate, $L("MMM yyyy"));
+		}
   	},
 
  	buildDayHeader: function() {
@@ -161,6 +334,7 @@ var MonthAssistant = Class.create({
 			// Don't set CSS if the value is the same.  You'd think this wouldn't do anything
 			// but WebKit considers all attribute changes to have potential side effects - so this
 			// does much damage to performance and is best avoided
+			
 			for (var i = 0; i < 3; i++)
 			{
 				var cn = ochild.className;
@@ -171,6 +345,14 @@ var MonthAssistant = Class.create({
 				child = child.nextSibling;
 				ochild = ochild.nextSibling;
 			}
+			if (this.updateFromScroll && this.enhancedView && this.monthAllDayColors) {
+					if (!oday.style || (oday.style.length == 0)) {
+						day.style.backgroundColor = "";
+					} else if (oday.style.length > 0) {
+						var bgcolor = oday.style.backgroundColor;
+						day.style.backgroundColor = bgcolor;
+					}
+				}
 			child.innerText = thisday;
 			
 			var cls = 'day ' + (thisday <= 7 ? this._days[thisday - 1] : '');
@@ -181,11 +363,20 @@ var MonthAssistant = Class.create({
 					cls += ' weekend';
 				}
 			}
+			if (this.updateFromScroll && this.enhancedView && this.monthViewIcons) {
+				if (!oday.style || (oday.style.length == 0)) {
+					day.setStyle({backgroundImage: "", backgroundPosition: "", backgroundRepeat: ""});
+				} else if (oday.style.length > 0) {
+					day.setStyle({backgroundImage: oday.getStyle("backgroundImage")});
+					day.setStyle({backgroundPosition: oday.getStyle("backgroundPosition")});
+					day.setStyle({backgroundRepeat: oday.getStyle("backgroundRepeat")});
+				}
+			}
 			if (day.className != cls) 
 			{
 				day.className = cls;
 			}
-			
+
 			// Move the day forwards, allowing for month endings
 			if (thisday < mday.limit)
 			{
@@ -227,7 +418,6 @@ var MonthAssistant = Class.create({
 			var child = day.firstChild;
 			var ochild = oday.firstChild;
 			var thisday = mday.day;
-			
 			for (var i = 0; i < 3; i++)
 			{
 				var cn = ochild.className;
@@ -238,6 +428,14 @@ var MonthAssistant = Class.create({
 				child = child.nextSibling;
 				ochild = ochild.nextSibling;
 			}
+			if (this.updateFromScroll && this.enhancedView && this.monthAllDayColors) {
+				if (!oday.style || (oday.style.length == 0)) {
+					day.style.backgroundColor = "";
+				} else if (oday.style.length > 0) {
+					var bgcolor = oday.style.backgroundColor;
+					day.style.backgroundColor = bgcolor;
+				}
+			}
 			child.innerText = thisday;
 			
 			var cls = 'day ' + (thisday <= 7 ? this._days[thisday - 1] : '');
@@ -248,6 +446,15 @@ var MonthAssistant = Class.create({
 					cls += ' weekend';
 				}
 			}
+			if (this.updateFromScroll && this.enhancedView && this.monthViewIcons) {
+				if (!oday.style || (oday.style.length == 0)) {
+					day.setStyle({backgroundImage: "", backgroundPosition: "", backgroundRepeat: ""});
+				} else if (oday.style.length > 0) {
+					day.setStyle({backgroundImage: oday.getStyle("backgroundImage")});
+					day.setStyle({backgroundPosition: oday.getStyle("backgroundPosition")});
+					day.setStyle({backgroundRepeat: oday.getStyle("backgroundRepeat")});
+				}
+			}
 			if (day.className != cls) 
 			{
 				day.className = cls;
@@ -308,6 +515,7 @@ var MonthAssistant = Class.create({
 			var mday = { day: date.getDate(), limit: 0, month: date.getMonth() };
 			mday.limit = this._monthDays[mday.month];
 			mday.dayOfWeek = date.getDay();
+			this.updateFromScroll = true;
 		
 			for (r = 0; r < 18 - wdiff; r++) 
 			{
@@ -324,6 +532,7 @@ var MonthAssistant = Class.create({
 			var mday = { day: date.getDate(), limit: 0, month: date.getMonth() };
 			mday.limit = this._monthDays[mday.month];
 			mday.dayOfWeek = date.getDay();
+			this.updateFromScroll = true;
 		
 			for (r = 17; r > -wdiff; r--)
 			{
@@ -340,6 +549,7 @@ var MonthAssistant = Class.create({
 			var mday = { day: date.getDate(), limit: 0, month: date.getMonth() };
 			mday.limit = this._monthDays[mday.month];
 			mday.dayOfWeek = date.getDay();
+			this.updateFromScroll = false;
 		
 			for (var r = 0; r < 18; r++) 
 			{
@@ -362,23 +572,39 @@ var MonthAssistant = Class.create({
 		var weekCell = this._months.rows[0];
 		var dayCell = weekCell.cells[0];
 		
+		var cls;
 		var days = response.days;
 		var daylen = days.length - 1; // We get back more days of info that we want - 1 more in fact, because its inclusive, rather than exclusive
 		for (var d = 0; d < daylen; d++) 
 		{
 			var day = this._token2state(days.charCodeAt(d));
-			
+			var bgcolor = "";
+			if (this.enhancedView && this.monthAllDayColors) {
+				var bgcolor = "";
+				for (var k=0; k<this.fullEvts[d].allDayEvents.length; k++)
+				{
+					if (bgcolor == "")
+					{
+						bgcolor = this.colors[this.fullEvts[d].allDayEvents[k].calendarColor];
+					}
+					else if (bgcolor != this.colors[this.fullEvts[d].allDayEvents[k].calendarColor])
+					{
+						bgcolor = "rgba(169,169,169,0.4)";
+						break;
+					}
+				}
+			}
+			if(this.enhancedView && this.monthAllDayColors) {dayCell.style.backgroundColor = bgcolor; }
 			var child = dayCell.firstChild;
-			var cls;
 			for (var i = 1; i < 8; i <<= 1)
 			{
-				if (day & (i << 3)) 
+				if (day & (i << 3) && ((this.enhancedView && this.monthUseBusy) || !this.enhancedView))
 				{
-					cls = "monthview-busy-time " + calStyle;
+					cls = ((child.offsetHeight > 12) ? "monthview-partly-busy-time " : "monthview-partly-busy-time-pixi ") + calStyle;
 				}
-				else if (day & i) 
+				else if (day & i && ((this.enhancedView && this.monthUseBusy) || !this.enhancedView)) 
 				{
-					cls = "monthview-busy-time";
+					cls = (child.offsetHeight > 12) ? "monthview-partly-busy-time" : "monthview-partly-busy-time-pixi";
 				}
 				else 
 				{
@@ -390,7 +616,23 @@ var MonthAssistant = Class.create({
 				}
 				child = child.nextSibling;
 			}
-			
+
+			//Mojo.Log.error(Object.toJSON(this.fullEvts[d]));
+			if (this.enhancedView) {
+				for (var k=0; k<this.fullEvts[d].events.length; k++) {
+					// get more details
+					if (!this.fullEvts[d].events[k].subject && this.fullEvts[d].events[k].gotFullDetails === undefined) {
+						// get more infos for this event
+						getCalendarService().getEvent(this.fullEvts[d].events[k].id,
+								this.getEventDetails.bind(this, this.fullEvts[d].events, k, dayCell),
+								function(response) {Mojo.Log.error(response.errorText);},
+								this.controller);
+					}
+				}
+	
+				if(this.monthViewIcons) {this.renderIcons(this.fullEvts[d].events, dayCell); }
+			}
+
 			// Advance the dayCell
 			if (d % 7 == 6) 
 			{
@@ -404,6 +646,46 @@ var MonthAssistant = Class.create({
 			}
 		}
 	},
+
+	getEventDetails: function(events, k, dayCell, details) {
+		events[k].alarm = details.alarm;
+		events[k].note = details.note;
+		events[k].gotFullDetails = true;
+		if (k == (events.length-1)) {
+			this.renderIcons(events, dayCell);
+		}
+	},
+	
+	renderIcons: function(events, dayCell) {
+		var bgimage = "";
+		var bgrepeat = "";
+		var bgplacement = "";
+		var imgIdx = 0;
+		for (var k=0; k<events.length; k++) {
+			if (events[k].note !== undefined) {
+				try {
+					var start = getNotesIconParts(events[k].note);
+					if (start && start[1]) {
+						var icon = start[1];
+						if (bgimage != "") { bgimage += ", "; }
+						bgimage += "url(/media/internal/.scrims/ubercalendar/icon-" + icon + ".png)";
+						if (bgrepeat != "") { bgrepeat += ", "; }
+						bgrepeat += "no-repeat";
+						if (bgplacement != "") { bgplacement += ", "; }
+						bgplacement += this.monthVerticalIcons === false ? this.placements[imgIdx] : this.verticalplacements[imgIdx];
+						imgIdx++;
+						if (imgIdx >= this.placements.length) {
+							break;
+						}
+					}
+				} catch(e) {Mojo.Log.error(bgimage);
+							Mojo.Log.error(bgrepeat);
+						Mojo.Log.error(bgplacement);
+				}
+			}
+		}
+		dayCell.setStyle({backgroundImage: bgimage, backgroundRepeat: bgrepeat, backgroundPosition: bgplacement});
+	},
 	
  	buildDays: function() 
 	{
@@ -523,7 +805,18 @@ var MonthAssistant = Class.create({
 	currentCalendarUpdated: function() {
 		//Mojo.Log.info("month-assistant: currentCalendarUpdated");
 		var calMgr = getCalendarsManager();
-		if (calMgr.currentCal == 'all') {
+		
+		// update UC groups, calendars changed
+		this.userUberCalGroups = [];
+		this.userUberCalGroups = getUserUberCalGroups();
+		this.uberGroups = getUberGroups();
+		this.getUCGroupsProps();
+		
+		if(this.ucGroupIdx !== undefined) {
+			var name = this.userUberCalGroups[this.ucGroupIdx].groupname;
+			this.controller.get ("mv_current_calendar")	.update			(name);
+			this.controller.get ("mv_calendar_source")	.setAttribute	("class", "header-cal-source");
+		} else if (calMgr.currentCal == 'all') {
 			this.controller.get('mv_current_calendar').update($L("All"));
 			this.controller.get('mv_calendar_source').setAttribute('class', 'header-cal-source');
 		} else {
@@ -578,9 +871,42 @@ var MonthAssistant = Class.create({
 	{
 		//var time = new Date().getTime();
 		//Mojo.Log.info("month-assistant:setup " + time);
-		
+		this.service = getCalendarService();
 		this.monthDate = getCurrentDateTime();
-		
+		if(this.enhancedView){
+			var headDiv = this.controller.get("mv_header_container1");
+			var scrimDiv = document.createElement('div');
+			scrimDiv.setAttribute('id', "uber-month-panel-scrim");
+			scrimDiv.setAttribute('class', "palm-scrim menu-panel");
+			scrimDiv.setAttribute('x-mojo-menupanel-scrim', "");
+			
+			var panDiv = document.createElement('div');
+			panDiv.setAttribute('id', "uber-month-mp-cont");
+			panDiv.innerHTML = '<div id="uber-month-menu-panel" class="palm-menu-panel" x-mojo-menupanel="">' +
+				'<div class="palm-menu-panel-wrapper" x-mojo-element="Scroller"><div class="palm-list">' +
+		        	'<div class="palm-row first" id="uber-month-panel-event"></div>' +
+					'<div class="palm-row last" ><div class="palm-row-wrapper"><div ><table width="100%" ><tr>' +
+								'<td width="25%" style="padding:0px;margin:0px;"><div id="uber-month-mp-back" class="palm-button" x-mojo-tap-highlight="momentary" style="overflow:hidden;padding:0px;margin:0px;" x-mojo-loc=""><-</div></td>' +
+								'<td width="25%" style="padding:0px;margin:0px;"><div id="uber-month-mp-map" class="palm-button secondary disabled" x-mojo-tap-highlight="momentary" style="overflow:hidden;padding:0px;margin:0px;" x-mojo-loc="">'+$L("Map")+'</div></td>' +
+								'<td width="25%" style="padding:0px;margin:0px;"><div id="uber-month-mp-delete" class="palm-button negative" x-mojo-tap-highlight="momentary" style="overflow:hidden;padding:0px;margin:0px;" x-mojo-loc="">'+$L("Delete")+'</div></td>' +
+								'<td width="25%" style="padding:0px;margin:0px;"><div id="uber-month-mp-next" class="palm-button" x-mojo-tap-highlight="momentary" style="overflow:hidden;padding:0px;margin:0px;" x-mojo-loc="">-></div></td>' +
+					'</tr></table></div></div>' +
+				'</div></div></div>';
+			
+			this.controller.get("month_view").insertBefore(scrimDiv, headDiv);
+			var scrollDiv = this.controller.get("wv_scroll_container");
+			this.controller.get("month_view").insertBefore(panDiv, scrollDiv);
+			this.uberMenuPanel = this.controller.get("uber-month-menu-panel");
+			this.uberScrim = this.controller.get("uber-month-panel-scrim");
+			this.uberMenuPanel.hide();
+			this.uberScrim.hide();
+			this.prevListener = this.handleHeldPrev.bind(this);
+			this.nextListener = this.handleHeldNext.bind(this);
+			this.mapListener = this.handleHeldMap.bind(this);
+			this.heldEvtListener = this.handleHeldEvent.bind(this);
+			this.handleEventsHold = this.handleEventsHold.bind(this);
+			this.deleteListener = this.handleHeldDelete.bind(this);
+		}
 		this.scrollContainer = this.controller.get('mv_scroll_container');
 		this.scrollData = this.controller.get('mv_scroll_data');
 		this.dvCurrentDay = this.controller.get('dv_current_day');
@@ -592,6 +918,7 @@ var MonthAssistant = Class.create({
 		observeCurrentDateTime('month', this);
 		observeTimeChange('month,',this);
 		observeDayChange('month', this);
+		this.eventChangedRequest = getCalendarService().getEventChange(this.getEventChangeCallback.bind(this), this.controller);
 		
 		var prefs = getPrefs();
 		this.savedPrefs = undefined;
@@ -637,11 +964,16 @@ var MonthAssistant = Class.create({
         this.menuModel = 
         {
             visible: true,
-            items: [{}, 
+            items: [{label: $L('Event'), icon: 'new-timed', command: 'newtimed'}, 
             {
                 label: $L('Views'),
                 toggleCmd: 'month',
                 items: [
+				{
+					label:$L('Agenda'),
+					icon: 'menu-agenda',
+					command:'agenda'
+				},
                 {
                     label: $L('Day'),
                     icon: 'menu-day',
@@ -657,13 +989,16 @@ var MonthAssistant = Class.create({
                     icon: 'menu-month',
                     command: 'month'
                 }]
-            }, {}, ]
+            }, {label: $L('All day event'), icon: 'new-allday', command: 'newallday'}, ]
         };
 		
 		this.controller.setupWidget(Mojo.Menu.commandMenu, undefined, this.menuModel);
 		this.controller.setupWidget(Mojo.Menu.appMenu, {omitDefaultItems:true}, this.appMenuModel);
 		this.remindersUpdated(); 	// Update missed reminders menu item
 		
+		//var cookie = new Mojo.Model.Cookie("LastView");
+		//cookie.put("month");
+		
 		this.CalSelectorHandler = this.calSelector.bindAsEventListener(this);
   	},
   
@@ -715,6 +1050,12 @@ var MonthAssistant = Class.create({
 			} else if (event.command == Mojo.Menu.prefsCmd) {
 				Event.stop(event);
 				this.controller.stageController.pushScene('prefs');
+			} else if(event.command =="newtimed"){
+				Event.stop(event);
+				this.controller.stageController.pushScene('edit', 0, 0, false, this.getCalId()/*calendarId*/,0/*subject*/);
+			} else if(event.command=="newallday"){
+				Event.stop(event);
+				this.controller.stageController.pushScene('edit', 0, 0, true, this.getCalId(),0/*subject*/);
 			}else if(event.command == Mojo.Menu.helpCmd){
 				getAppManagerService().launchHelp(this.controller);
 			} else if (event.command == 'sync') {
@@ -729,11 +1070,44 @@ var MonthAssistant = Class.create({
 			} else if (event.command == 'reminders') {
 				Event.stop(event);
 				this.controller.stageController.pushScene('reminder-list');
+			} else if (event.command == 'agenda') {
+				Event.stop(event);
+				this.controller.serviceRequest('palm://com.palm.applicationManager', {
+					method: 'launch',
+					parameters: {
+						id: 'com.palm.app.agenda'
+					}
+				});
+				this.menuModel.items[1].toggleCmd = 'month';
+				this.controller.modelChanged(this.menuModel, this);
 			}				
 		}
 		else if(event.type == Mojo.Event.commandEnable && event.command == Mojo.Menu.prefsCmd) {
 			// Enable prefs menuitem for this scene.
 			event.stopPropagation();
+		} else if (event.type == Mojo.Event.back) {
+			if(this.uberHolding){
+				if(this.uberHoldTimeout){
+					this.controller.window.clearTimeout(this.uberHoldTimeout);
+					this.uberHoldTimeout = 0;
+				}
+				this.uberMenuPanel.hide();
+				this.uberHolding = false;
+				event.preventDefault();
+				event.stopPropagation();
+				return;
+			}
+			if(this.uberBackGesture == 'week' || (this.uberBackGesture == 'last' && this.uberLastView == 'week' )) {
+				event.preventDefault();
+				event.stopPropagation();
+				this.handleWeekView();
+			} else if(this.uberBackGesture == 'day' || (this.uberBackGesture == 'last' && this.uberLastView == 'day' )) {
+				event.preventDefault();
+				event.stopPropagation();
+				this.handleDayView();
+			} else if(this.uberBackGesture == 'month' || (this.uberBackGesture == 'last' && this.uberLastView == 'month' )) {
+				// default back gesture
+			}
 		}
 	},
 
@@ -752,7 +1126,28 @@ var MonthAssistant = Class.create({
   activate: function() {
 		//var time = new Date().getTime();
 		//Mojo.Log.info("month-assistant:activate " + time);
-		
+		this.uberLastView = "month";
+		var cookie = new Mojo.Model.Cookie("BackGesture");
+		try {
+			if(cookie) {
+				var lview = cookie.get();
+				if(lview && lview.lastview) {
+					this.uberLastView = lview.lastview;
+				}
+				cookie.put({lastview: "month"});
+			}
+		} catch (e) {}
+		if ((this.uberLastView != "week") && (this.uberLastView != "day")) {
+			this.uberLastView = "month";
+		}
+		if(this.enhancedView){
+			this.month_days.observe (Mojo.Event.hold, this.handleEventsHold);
+			this.controller.get ('uber-month-mp-back').observe(Mojo.Event.tap, this.prevListener);
+			this.controller.get ('uber-month-mp-next').observe(Mojo.Event.tap, this.nextListener);
+			this.controller.get ('uber-month-mp-map').observe(Mojo.Event.tap, this.mapListener);
+			this.controller.get ('uber-month-panel-event').observe(Mojo.Event.tap, this.heldEvtListener);
+			this.controller.get ('uber-month-mp-delete').observe(Mojo.Event.tap, this.deleteListener);
+		}
 		// Month View - Flick
 	  this.flickHandler = this.handleFlickEvents.bindAsEventListener(this);
 	  this.scrollData.observe(Mojo.Event.flick, this.flickHandler);
@@ -774,6 +1169,14 @@ var MonthAssistant = Class.create({
 	  	this.controller.get('mv_calendar_source').observe(Mojo.Event.tap, this.calendarTapHandler);
 		
 		this.scrollerModel.snapIndex = 0;
+		// setup UC groups
+		this.userUberCalGroups = [];
+		this.userUberCalGroups = getUserUberCalGroups();
+		this.uberGroups = getUberGroups();
+		this.getUCGroupsProps();
+		if(this.ucGroupIdx != undefined) {
+			buildUberExcludes(this.userUberCalGroups[this.ucGroupIdx].includes);
+		}
 		this.buildMonth();
 		
 		// The colors have been updated, so we clear the cache and update everything
@@ -788,6 +1191,7 @@ var MonthAssistant = Class.create({
 			DayAssistant.dayCache = new Hash();
 			DayAssistant.cacheSubscribed = new Hash();
 			this.pendingCalendarSettingsUpdate = false;
+			//this.fullEvts = new Hash();
 		}
 	},
 
@@ -860,6 +1264,19 @@ var MonthAssistant = Class.create({
 		this.buildMonth();
 	},
 	
+	getEventChangeCallback: function(response) {
+		if (response.changed) {
+			this.buildMonth();
+			WeekAssistant.cacheSize = 0;
+			WeekAssistant.weekCache = new Hash();
+			WeekAssistant.cacheSubscribed = new Hash();
+			DayAssistant.cacheSize = 0;
+			DayAssistant.dayCache = new Hash();
+			DayAssistant.cacheSubscribed = new Hash();
+			this.pendingCalendarSettingsUpdate = false;
+		}
+	},
+	
   deactivate: function() 
 	{
 		this.month_days.stopObserving('mojo-tap', this.daysTapHandler);
@@ -868,12 +1285,38 @@ var MonthAssistant = Class.create({
 		
 		this.controller.get('mv_view_header').stopObserving(Mojo.Event.tap, this.headerTapHandler);
 		this.controller.get('mv_calendar_source').stopObserving(Mojo.Event.tap, this.calendarTapHandler);
-  	},
+				if(this.enhancedView){
+			this.month_days.stopObserving (Mojo.Event.hold, this.handleEventsHold);
+			this.controller.get ('uber-month-mp-back').stopObserving(Mojo.Event.tap, this.prevListener);
+			this.controller.get ('uber-month-mp-next').stopObserving(Mojo.Event.tap, this.nextListener);
+			this.controller.get ('uber-month-mp-map').stopObserving(Mojo.Event.tap, this.mapListener);
+			this.controller.get ('uber-month-panel-event').stopObserving(Mojo.Event.tap, this.heldEvtListener)
+			this.controller.get ('uber-month-mp-delete').stopObserving(Mojo.Event.tap, this.deleteListener);
+			if(this.uberHoldTimeout){
+				this.controller.window.clearTimeout(this.uberHoldTimeout);
+				this.uberHoldTimeout = 0;
+			}
+			this.uberMenuPanel.hide();
+			this.uberHolding = false;
+		}
+
+	},
 	
 	// *** EVENT HANDLERS ***
 	
 	handleDaysTap: function(event) {
 		if (this._scrolling) return;
+		if(this.uberHolding){
+			if(this.uberHoldTimeout){
+				this.controller.window.clearTimeout(this.uberHoldTimeout);
+				this.uberHoldTimeout = 0;
+			}
+			this.uberMenuPanel.hide();
+			this.uberHolding = false;
+			event.preventDefault();
+			event.stopPropagation();
+			return;
+		}
 		//Mojo.Log.info('month-assistant: handleDaysTap');
 		var targetDay = this.controller.get(event.target);
 		
@@ -904,11 +1347,42 @@ var MonthAssistant = Class.create({
 	{
         e.stop();
         var listItems = buildCalendarsMenu(true /*includeAll*/, true /*includeReadOnly*/, true /*includeExcludedFromAll*/);
-        
+        // UC groups items
+		if(this.userUberCalGroups && this.userUberCalGroups.length > 0) {
+			var viewOptionsItem = listItems.splice(-1,1);
+			var len = this.userUberCalGroups.length;
+			if(this.ucGroupsFirst){
+				var allCals = listItems.splice(0,1);
+				for(var i=len-1; i>-1; i--) {
+					var grp = this.userUberCalGroups[i];
+					if(grp && grp.rId && grp.groupname) {
+						listItems.unshift( {label: grp.groupname, command: "rId:" + grp.rId, secondaryIcon: 'menu_all'} );
+					}
+				}
+				listItems.unshift( {label: $L("UberCalendar Groups")} );
+				listItems.unshift({label: $L("All calendars"),
+									command: 'all',
+									secondaryIcon: 'menu_all'
+								});
+			} else {
+				listItems.push( {label: $L("UberCalendar Groups")} );
+				for(var i=0; i<len; i++) {
+					var grp = this.userUberCalGroups[i];
+					if(grp && grp.rId && grp.groupname) {
+						listItems.push( {label: grp.groupname, command: "rId:" + grp.rId, secondaryIcon: 'menu_all'} );
+					}
+				}
+			}
+			listItems.push({
+				label: $L("Calendar View Options..."),
+				command: "viewOptions"
+			});
+		}
+		
         this.controller.popupSubmenu(
         {
             onChoose: this.calendarChoose.bind(this),
-            toggleCmd: getCurrentCal(),
+            toggleCmd: uberToggleGroupsCmd(this.uberGroups.inUse, "rId:" + this.uberGroups.rId),
             // placeNear: e.target,
             manualPlacement: true,
             popupClass: "cal-selector-popup",
@@ -921,9 +1395,31 @@ var MonthAssistant = Class.create({
 		if (value) {
 			if(value=="viewOptions")
 			{
+				this.getUCGroupsProps();
+				if(this.ucGroupIdx != undefined) {
+					buildUberExcludes(false);
+				}
 				this.controller.stageController.pushScene("prefs-options",this.acctsModel);
 				return;
 			}
+			
+			//uc groups setup
+			if(value.indexOf("rId:") !== -1) {
+				var idx = value.indexOf(":") + 1;
+				rID = value.slice(idx);
+				setUberGroups(rID);
+				this.uberGroups = {inUse: true, rId: rID};
+				value = 'all';
+				this.getUCGroupsProps();
+				if(this.ucGroupIdx != undefined) {
+					buildUberExcludes(this.userUberCalGroups[this.ucGroupIdx].includes);
+				}
+			} else {
+				setUberGroups(false);
+				this.uberGroups = {inUse: false, rId: ""};
+				this.getUCGroupsProps();
+				buildUberExcludes(false);
+			}
 			setCurrentCal(value);
 
 			// Force another service call.
@@ -935,7 +1431,31 @@ var MonthAssistant = Class.create({
 			DayAssistant.cacheSize = 0;
 			DayAssistant.dayCache = new Hash();
 			DayAssistant.cacheSubscribed = new Hash();
+			//this.fullEvts = new Hash();
+		}
+	},
+	
+	getCalId :function(){
+		var defaultCalId;
+		if (getCurrentCal() == 'all') {
+			// Create an event in the calendar specified by the defaultCalId preference
+			defaultCalId = getPrefsManager().getDefaultCalendar();
+			
+			if (defaultCalId == 0) {
+				defaultCalId = getCalendarsManager().getLocalCalendarId();
+			}
+			
+			// Check to see if the calendarId is a valid one
+			if (getCalendarsManager().getCalName("id"+defaultCalId) == undefined) {
+				// The default calendar doesn't exist anymore so let's just create it
+				// in Local
+				defaultCalId = getCalendarsManager().getLocalCalendarId();
+			}
+			
+		}else{
+			defaultCalId =getCurrentCal();
 		}
+		return "id"+defaultCalId;
 	},
 	
 	// ** MENU **
@@ -969,7 +1489,358 @@ var MonthAssistant = Class.create({
 		sController.popScene();
 		sController.pushScene({name: "week", transition: Mojo.Transition.crossFade, disableSceneScroller: true});
   	},
- 
+	
+	
+	handleEventsHold: function(holdEvent, whichDay, eIdx, Evt) {
+		//Mojo.Event.stop(tapEvent);
+		//Mojo.Log.error("Holding Event!!!!!!!" + (event && event.subject) + " , day: " + whichDay + " , idx: " + eIdx);
+		var daycount,event;
+		if(holdEvent && holdEvent.target){
+			holdEvent.stopPropagation();
+			holdEvent.preventDefault();
+			//Mojo.Log.error("holdEvent keys: " + Object.keys(holdEvent.target));
+			var targetDay = this.controller.get (holdEvent.target);
+
+			if (targetDay.hasClassName ('monthview-day-numeral')) {
+				targetDay = targetDay.parentNode;
+			}
+
+			//Mojo.Log.error ("onDayTapped: %s" , Object.keys(targetDay));
+			if (targetDay.hasClassName ('day')) {
+				daycount= targetDay.parentNode.rowIndex * 7 + targetDay.cellIndex;
+				//Mojo.Log.error("target daycount: " + daycount);
+			}
+		}
+		daycount = (daycount !== undefined && daycount <= 125 && daycount > -1) ? daycount : 125;
+		if(Evt){
+			event = Evt;
+			this.uberHeldDay = whichDay;
+			this.uberHeldIdx = eIdx;
+		} else {
+			if(this.fullEvts[daycount] && this.fullEvts[daycount].allDayEvents && this.fullEvts[daycount].allDayEvents.length){
+				event = this.fullEvts[daycount].allDayEvents[0];
+				this.uberHeldIdx =0;
+				this.uberHeldDay = daycount;
+			} else if(this.fullEvts[daycount] && this.fullEvts[daycount].events && this.fullEvts[daycount].events.length){
+				event = this.fullEvts[daycount].events[0];
+				this.uberHeldIdx = 0;
+				this.uberHeldDay = daycount;
+			}
+		}
+		if(!event){
+			Mojo.Log.error("No events on daycount: " + daycount + ", date: " + (this.fullEvts[daycount] && this.fullEvts[daycount].date));
+			return;
+		}	
+		this.uberMenuPanel.show();
+		this.uberHolding = true;
+		this.uberHeldEvent = false;
+		if(event){
+			var tEvt = {}, item, rtdate;
+			item = event;
+			this.uberHeldEvent = event;
+			if(item.id) {
+				tEvt.id = item.id;
+			}
+			if(item.startTimestamp || item.start) {
+				var formatObj = {};
+				rtdate = new Date(item.startTimestamp || item.start);
+				// formatString = "EEE MMM d";
+				formatObj.date = "medium";
+				formatObj.weekday = "medium";
+				formatObj.dateComponents = "md"
+				var templateModel = {};
+				var template = new Template($L("#{dateStr}"));
+				//var todayStr= Mojo.Format.formatRelativeDate(rtdate.clearTime(), {date: "short"}).capitalize();
+				//templateModel.todayStr = todayStr;
+				templateModel.dateStr = Mojo.Format.formatDate(rtdate, formatObj);
+				var dateTxt = template.evaluate(templateModel);
+				if(!item.allDay) {
+					
+					var h = rtdate.getHours();
+					var m = rtdate.getMinutes();
+					tEvt.startT = (h<10 ? '0'+h: h) + ':' + (m<10 ? '0'+m : m);
+				} else if (item.allDay === true) {
+					tEvt.startT = $L("all ");
+				}
+			}
+			if(item.subject) {
+				tEvt.subject = dateTxt + " - " + item.subject;
+			}
+			if(item.location && item.location !== "") {
+				tEvt.location = item.location;
+				this.controller.get("uber-month-mp-map").removeClassName("disabled");
+			} else {
+				this.controller.get("uber-month-mp-map").addClassName("disabled");
+			}
+			if(item.calendarColor) {
+				tEvt.bgcolor = this.colors[item.calendarColor];
+			}
+			if(item.endTimestamp || item.end) {
+				if(!item.allDay) {
+					rtdate = new Date(item.endTimestamp || item.end);
+					var h = rtdate.getHours();
+					var m = rtdate.getMinutes();
+					tEvt.endT = (h<10 ? '0'+h: h) + ':' + (m<10 ? '0'+m : m);
+				} else if (item.allDay === true) {
+					tEvt.endT = $L("day ");
+				}
+			}
+			if(item.note) {
+				var wholeNote = item.note !== "\n" ? item.note : "";
+				//var patt = /((.|\n|\r)*?)ICON=([a-z0-9_-]{1,20});((.|\n|\r)*)/;
+				if(wholeNote && wholeNote !== "\n" && wholeNote.length > 0) {
+					var result = getNotesIconParts(wholeNote);
+					if(result && result[1]) {
+						tEvt.cat = result[1];
+						if(tEvt.cat){
+							tEvt.catFormatted = 'url(/media/internal/.scrims/ubercalendar/icon-' + tEvt.cat + '.png) no-repeat center right;'
+						}
+						tEvt.note = result[0] + result[2];
+					} else {
+						tEvt.note = wholeNote;
+					}
+				}
+			}
+			var tEvtHtml = Mojo.View.render({object: tEvt, template: 'shared/ubertemplateitem'});
+			this.controller.get('uber-month-panel-event').update(tEvtHtml);
+		}
+		if(!this.uberHoldTimeout){
+			this.uberHoldTimeout = this.controller.window.setTimeout(function(){this.uberHeldEvent = false;this.uberHolding=false;this.uberMenuPanel.hide();}.bind(this), 5000);
+		} else {
+			this.controller.window.clearTimeout(this.uberHoldTimeout);
+			this.uberHoldTimeout = this.controller.window.setTimeout(function(){this.uberHeldEvent = false;this.uberHolding=false;this.uberMenuPanel.hide();}.bind(this), 5000);
+		}
+	},
+	
+	findUberNextEvent: function(want){
+		if(this.uberHeldEvent && this.uberHeldDay !== undefined && this.uberHeldIdx !== undefined && want !== undefined){
+			var ended, data, day, aLen, eLen, maxD, nDay, nIdx;
+			var event;
+			//beginWeekNoTime = this.getFirstDayOfWeek(this.app.getCurrentDateTime()).set({hour: 0, minute: 0, second: 0, millisecond: 0});
+			data = this.fullEvts;
+			nDay = this.uberHeldDay;
+			day = data[nDay];
+			aLen = day.allDayEvents.length;
+			eLen = day.events.length;
+			maxD = 125;
+			var needNewDay = (aLen + eLen) < 2;//true = only 1 event that day
+			if(!needNewDay) {
+				if(this.uberHeldEvent.allDay){
+					if(want === "prev"){
+						if(this.uberHeldIdx -1 <0){
+							needNewDay = true;
+						} else {
+							nIdx = this.uberHeldIdx -1;
+							event = day.allDayEvents[nIdx];
+						}
+					} else {// want next
+						if(aLen > this.uberHeldIdx+1){
+							nIdx = this.uberHeldIdx+1;
+							event = day.allDayEvents[nIdx];
+						} else { //check events
+							if(eLen > 0){
+								nIdx = 0;
+								event = day.events[nIdx];
+							} else {
+								needNewDay = true;
+							}
+						}
+					}
+					if(event){
+						var params = {event: event, whichDay: nDay, eIdx: nIdx};
+						return params;
+					}
+				} else {//events
+					if(want === "prev"){
+						if(this.uberHeldIdx -1 <0){//check all days
+							if(aLen === 0){
+								needNewDay = true;
+							} else {
+								nIdx = aLen -1;
+								event = day.allDayEvents[nIdx];
+							}
+						} else {
+							nIdx = this.uberHeldIdx -1;
+							event = day.events[nIdx];
+						}
+					} else {// want next
+						if(eLen > this.uberHeldIdx+1){
+							nIdx = this.uberHeldIdx+1;
+							event = day.events[nIdx];
+						} else {
+							needNewDay = true;
+						}
+					}
+					if(event){
+						var params = {event: event, whichDay: nDay, eIdx: nIdx};
+						return params;
+					}
+				}
+			}
+			
+			if(needNewDay){ //next or prev day
+				do {
+					if(want === "next"){//next should go to next all day event
+						nDay += 1;
+						if(nDay >= maxD){//no next this week
+							ended = true;
+							break;
+						}
+					} else {
+						nDay -= 1;
+						if(nDay < 0){//no prev this week
+							ended = true;
+							break;
+						}
+					}
+					day = data[nDay];
+					aLen = day.allDayEvents.length;
+					eLen = day.events.length;
+				} while(aLen + eLen <1);
+				if(!ended){
+					if(want === "next"){
+						if(aLen > 0){
+							event = day.allDayEvents[0];
+						} else {
+							event = day.events[0];
+						}
+						nIdx = 0;
+					} else {
+						if(eLen < 1){
+							nIdx = aLen-1;
+							event = day.allDayEvents[nIdx];
+						} else {
+							nIdx = eLen-1;
+							event = day.events[nIdx];
+						}
+					}
+					var params = {event: event, whichDay: nDay, eIdx: nIdx};
+					return params;
+				} else {// no event to be found
+					Mojo.Log.error("No next or previous event found");
+					return false;
+				}
+			}
+		}
+	},
+	
+	handleHeldPrev: function(){
+		if(this.uberHoldTimeout){
+			this.controller.window.clearTimeout(this.uberHoldTimeout);
+			this.uberHoldTimeout = 0;
+		}
+		var args = this.findUberNextEvent("prev");
+		if(args){
+			this.handleEventsHold(null, args.whichDay, args.eIdx, args.event);
+		}
+	},
+	
+	handleHeldNext: function(){
+		if(this.uberHoldTimeout){
+			this.controller.window.clearTimeout(this.uberHoldTimeout);
+			this.uberHoldTimeout = 0;
+		}
+		var args = this.findUberNextEvent("next");
+		if(args){
+			this.handleEventsHold(null, args.whichDay, args.eIdx, args.event);
+		}
+	},
+	
+	handleHeldEvent: function(){
+		if(this.uberHoldTimeout){
+			this.controller.window.clearTimeout(this.uberHoldTimeout);
+			this.uberHoldTimeout = 0;
+		}
+		this.uberMenuPanel.hide();
+		//Mojo.Log.error("held event - launch edit");
+		this.uberHolding = false;
+		if(this.uberHeldEvent){
+			if(this.uberHeldEvent.id){
+				var event = this.uberHeldEvent;
+				//var idString = event._id+"-"+event.currentLocalStart+"-"+event.currentLocalEnd;
+				this.controller.stageController.pushScene('edit', event.id, new Date(event.startTimestamp), false, event.calendarId, event.subject);
+			}
+			//this.handleEventsTap(this.uberHeldEvent, false);
+		}
+	},
+	
+	handleHeldMap: function(){
+		if(this.uberHoldTimeout){
+			this.controller.window.clearTimeout(this.uberHoldTimeout);
+			this.uberHoldTimeout = 0;
+		}
+		this.uberMenuPanel.hide();
+		//Mojo.Log.error("held map - launch map");
+		this.uberHolding = false;
+		if(this.uberHeldEvent && this.uberHeldEvent.location && this.uberHeldEvent.location !==""){
+			getAppManagerService().launchMaps (this.controller, this.uberHeldEvent.location, false);
+		}
+		return;
+	},
+	
+	handleHeldDelete: function(){
+		if(this.uberHoldTimeout){
+			this.controller.window.clearTimeout(this.uberHoldTimeout);
+			this.uberHoldTimeout = 0;
+		}
+		this.uberMenuPanel.hide();
+		//Mojo.Log.error("held delete ");
+		this.uberHolding = false;
+		if(this.uberHeldEvent){
+			this.fromDefaultTap = false;
+			this.eventToBeDeleted = this.uberHeldEvent;
+			this.deletedeventId = this.uberHeldEvent.id;
+			//this.gotEventInlineDelete(this.uberHeldEvent);
+			getCalendarService().getEvent(this.uberHeldEvent.id, this.gotEventInlineDelete.bind(this),this.gotEventInlineDeleteFailed.bind(this), this.controller);
+		}
+	},
+
+	gotEventInlineDelete: function(response) {
+		//Mojo.Log.info("gotEventInlineDelete");
+		var targetEvent = response;
+		// If the user is trying to delete a new event (cancelling the new event) 
+		// [new event's parentId equals 0]
+		// or
+		// if the event is NOT a recurring event, show the standard delete warning
+		if ((!targetEvent.rrule || targetEvent.rrule == "") && targetEvent.parentId <=0){
+			this.controller.showDialog({
+				template: 'shared/confirm-deleteevent',
+				assistant: new DeleteEventConfirmDialogAssistant(this, targetEvent, targetEvent.startTimestamp),
+				preventCancel: true
+			});
+		} else {
+			// If the event is a recurring event, show the warning allowing users to
+			// delete the series, the single event, or cancel
+			var eventToBeDeletedStartime = parseFromId(this.deletedeventId);
+			this.controller.showDialog({
+				template: 'shared/confirm-deleterecurringevent',
+				assistant: new DeleteEventConfirmDialogAssistant(this, targetEvent, eventToBeDeletedStartime.start),
+				preventCancel: true
+			});
+		}
+		// Re-render the week
+		this.eventToBeDeleted = null;
+		//this.editEventsCallBack();
+	},
+	
+	gotEventInlineDeleteFailed: function(response) {
+		this.eventToBeDeleted = null;
+		this.deletedeventId = undefined;
+		//this.editEventsCallBack();
+	},
+	
+	deletedEvent: function(response) {
+		if (response.returnValue === false) {
+			//Mojo.Log.error("Failed to delete event: %j", response);
+			return;
+		}
+				
+		// Remove the reminder for this event
+		if (this.deletedeventId !== undefined) {
+			getReminderManager().removeReminder([this.deletedeventId]);
+		}
+	},
+	
  	showCurrentDay: function() 
 	{
 		var style = this.dvCurrentDay.style;
@@ -990,7 +1861,23 @@ var MonthAssistant = Class.create({
 		}
 	},
 	
+	editFromTemplate: function(event, editingTemplate) {
+		// going from template to edit new event
+		this.controller.stageController.pushScene('edit', event.id, new Date(event.startTimestamp), event.allDay, event.calendarId, event.subject, false, undefined, editingTemplate);
+	},
+	
 	handleCurrentDayTap: function(event) {
+		if(this.uberHolding){
+			if(this.uberHoldTimeout){
+				this.controller.window.clearTimeout(this.uberHoldTimeout);
+				this.uberHoldTimeout = 0;
+			}
+			this.uberMenuPanel.hide();
+			this.uberHolding = false;
+			event.preventDefault();
+			event.stopPropagation();
+			return;
+		}
 		this.gotoDayView(new Date());
 	},
 	
diff --git a/usr/palm/applications/com.palm.app.calendar/app/controllers/prefs-assistant.js b/usr/palm/applications/com.palm.app.calendar/app/controllers/prefs-assistant.js
index cebe803..9f0f9f0 100644
--- a/usr/palm/applications/com.palm.app.calendar/app/controllers/prefs-assistant.js
+++ b/usr/palm/applications/com.palm.app.calendar/app/controllers/prefs-assistant.js
@@ -3,7 +3,7 @@
 var THIRTY_MINUTES = $L("30 minutes");
 var ONE_HOUR = $L("1 hour");
 var TWO_HOURS = $L("2 hours");
-var numTimedAlarm = 7;		
+var numTimedAlarm = 42;	
 var PrefsAssistant = Class.create({
 				 
 	initialize: function() {
@@ -43,12 +43,22 @@ var PrefsAssistant = Class.create({
 	renderNewEventDuration: function() {
 		var ned = {};
 		
-		if (this.prefs.defaultEventDuration == 30) {
+		if (this.prefs.defaultEventDuration <= 30) {
 			ned.duration = THIRTY_MINUTES;
-		} else if (this.prefs.defaultEventDuration == 60) {
+		} else if (this.prefs.defaultEventDuration <= 60) {
 			ned.duration = ONE_HOUR;
-		} else {
+		} else if (this.prefs.defaultEventDuration <= 75) {
+			ned.duration = "75 minutes";
+		} else if (this.prefs.defaultEventDuration <= 90) {
+			ned.duration = "90 minutes";
+		} else if (this.prefs.defaultEventDuration <= 120) {
 			ned.duration = TWO_HOURS;
+		} else if (this.prefs.defaultEventDuration <= 180) {
+			ned.duration = "3 hours";
+		} else if (this.prefs.defaultEventDuration <= 240) {
+			ned.duration = "4 hours";
+		} else {
+			ned.duration = "8 hours";
 		}
 		
 		this.controller.get('pv_new_event_duration').update(ned.duration);
@@ -189,19 +199,21 @@ var PrefsAssistant = Class.create({
 	
 	getCurrentAllDayAlarmString: function() {
 		var index = 0;
-		for (index = 0; index < this.alarms.size(); index++) {
+		for (index = 0; index < this.allDayAlarms.size(); index++) {
 			if (this.allDayAlarms[index].command == this.prefs.defaultAllDayEventReminder)
 				return this.allDayAlarms[index].label;
 		}
 	},
 	
+//This should be one function that takes an array for the values needed and the array that is to be updated and the defaultPref
+//returns the default str value	
 	formatAlarmStringsCallback: function(response) {
 		//Mojo.Log.info('prefs-assistant: formatAlarmStringsCallback');
 		var index = 0;
 		var currentTimedAlarmStr = "";
 		var currentAllDayAlarmStr = "";
-		
-		
+
+		numTimedAlarm = this.alarms.size();
 		for (index = 0; index < this.alarms.size() + this.allDayAlarms.size() - 1; index++) {
 			alarmStr = response[index];
 			
@@ -234,6 +246,7 @@ var PrefsAssistant = Class.create({
 	
 	buildAlarmsMenu: function() {
 		//Mojo.Log.info('prefs-assistant: buildAlarmsMenu');
+		/*
 		var params =[this.alarms[0].command, 
 					 this.alarms[1].command, 
 					 this.alarms[2].command,
@@ -247,7 +260,14 @@ var PrefsAssistant = Class.create({
 					 this.allDayAlarms[2].command,
 					 this.allDayAlarms[3].command,
 					 this.allDayAlarms[4].command];
-		
+		*/
+		var params = [];
+		for (var i=0; i<this.alarms.size(); i++) {
+			params.push(this.alarms[i].command);
+		}
+		for (var i=1; i<this.allDayAlarms.size(); i++) {
+			params.push(this.allDayAlarms[i].command);
+		}
 		/*this.request = new Mojo.Service.Request(CalendarMojoService.identifier + '/formatter', {
 			method: 'formatAlarmStrings',
 			parameters: params,
@@ -377,6 +397,1114 @@ var PrefsAssistant = Class.create({
 	setup: function() {
 		// Retrieve the prefs from the service
 		this.prefs = getPrefs();
+
+		//get default snooze duration from cookie
+		this.showSnoozedForBanner = true;
+		this.showReminderDashboard = true;
+		this.useISOweekNum = false;
+		this.stopAutoClose = false;
+		this.uberOpenInView = 'last';
+		this.uberBackGesture = 'last';
+		this.dayViewCompressed = false;
+		this.dayViewIcons = true;
+		this.dayViewEnhanced = false;
+		this.weekNumOffset = 0;
+		this.weekModulusNum = 1;
+		this.weekNumberTitle = true;
+		this.ucGroupsFirst = false;
+		this.dayMinutePopup = false;
+		this.dayMinInterval = 15;
+		this.dayViewShrink = "none";
+		this.userUberCats = [];
+		this.catCookie = new Mojo.Model.Cookie("userUberCats");
+		if(this.catCookie) {
+			var catcookie = this.catCookie.get();
+			if(catcookie) {
+				if(catcookie.userubercats && catcookie.userubercats.length > 0){
+					this.userUberCats = catcookie.userubercats;
+				} else {
+					this.userUberCats = this.uberCategories;
+				}
+			}else {
+				this.userUberCats = this.uberCategories;
+			}
+		}else {
+			this.userUberCats = this.uberCategories;
+		}
+		this.dayCookie = new Mojo.Model.Cookie("DayEnhanced");
+		if (this.dayCookie) {
+			var daycookie = this.dayCookie.get();
+			if (daycookie) {
+				if(daycookie.dayviewcompressed !== undefined) {
+						this.dayViewCompressed = daycookie.dayviewcompressed;
+				} else {
+						this.dayViewCompressed = false;
+				}
+				if(daycookie.dayviewenhanced !== undefined) {
+						this.dayViewEnhanced = daycookie.dayviewenhanced;
+				} else {
+						this.dayViewEnhanced = false;
+				}
+				if(daycookie.dayminutepopup !== undefined) {
+						this.dayMinutePopup = daycookie.dayminutepopup;
+				} else {
+						this.dayMinutePopup = false;
+				}
+				if(daycookie.daymininterval !== undefined) {
+						this.dayMinInterval = parseInt(daycookie.daymininterval, 10);
+				} else {
+						this.dayMinInterval = 15;
+				}
+				if(daycookie.dayviewshrink !== undefined) {
+						this.dayViewShrink = daycookie.dayviewshrink;
+				} else {
+						this.dayViewShrink = "none";
+				}
+				if(daycookie.dayviewicons !== undefined) {
+						this.dayViewIcons = daycookie.dayviewicons;
+				} else {
+						this.dayViewIcons = true;
+				}
+				if (daycookie.uberbackgesture !== undefined) {
+					this.uberBackGesture = daycookie.uberbackgesture;
+				} else {
+					this.uberBackGesture = 'last';
+				}
+			}
+		}
+		this.monthViewEnhanced = false;
+		this.monthAllDayColors = false;
+		this.monthViewIcons = true;
+		this.monthVerticalIcons = false;
+		this.monthUseBusy = true;
+		this.monthCookie = new Mojo.Model.Cookie("MonthViewEnhanced");
+		if (this.monthCookie) {
+			var monthcookie = this.monthCookie.get();
+			if (monthcookie) {
+				if(monthcookie.monthalldaycolors !== undefined) {
+						this.monthAllDayColors = monthcookie.monthalldaycolors;
+				} else {
+						this.monthAllDayColors = false;
+				}
+				if(monthcookie.monthviewenhanced !== undefined) {
+						this.monthViewEnhanced = monthcookie.monthviewenhanced;
+				} else {
+						this.monthViewEnhanced = false;
+				}
+				if(monthcookie.monthviewicons !== undefined) {
+						this.monthViewIcons = monthcookie.monthviewicons;
+				} else {
+						this.monthViewIcons = true;
+				}
+				if(monthcookie.monthverticalicons !== undefined) {
+						this.monthVerticalIcons = monthcookie.monthverticalicons;
+				} else {
+						this.monthVerticalIcons = false;
+				}
+				if (monthcookie.monthusebusy !== undefined) {
+					this.monthUseBusy = monthcookie.monthusebusy;
+				} else {
+					this.monthUseBusy = true;
+				}
+				if (monthcookie.ucgroupsfirst !== undefined) {
+					this.ucGroupsFirst = monthcookie.ucgroupsfirst;
+				} else {
+					this.ucGroupsFirst = false;
+				}
+			}
+		}
+		this.weekViewEnhanced = false;
+		this.weekShowSubject = true;
+		this.weekViewIcons = true;
+		this.weekViewShrink = "none";
+		this.uberMinuteInterval = 5;
+		this.workWeekOnly = false;
+		this.duraBtnOnTop = false;
+		this.weekTimeDay = 0;
+		this.gotoEditFromTemplate = true;
+		this.weekCookie = new Mojo.Model.Cookie("WeekViewEnhanced");
+		if (this.weekCookie) {
+			var weekcookie = this.weekCookie.get();
+			if (weekcookie) {
+				if(weekcookie.weekviewenhanced !== undefined) {
+						this.weekViewEnhanced = weekcookie.weekviewenhanced;
+				} else {
+						this.weekViewEnhanced = false;
+				}
+				if(weekcookie.weeknumoffset !== undefined) {
+						this.weekNumOffset = weekcookie.weeknumoffset;
+				} else {
+						this.weekNumOffset = 0;
+				}
+				if(weekcookie.weekmodulusnum !== undefined) {
+						this.weekModulusNum = weekcookie.weekmodulusnum;
+				} else {
+						this.weekModulusNum = 1;
+				}
+				if(weekcookie.weeknumbertitle !== undefined) {
+						this.weekNumberTitle = weekcookie.weeknumbertitle;
+				} else {
+						this.weekNumberTitle = true;
+				}
+				if(weekcookie.weekshowsubject !== undefined) {
+						this.weekShowSubject = weekcookie.weekshowsubject;
+				} else {
+						this.weekShowSubject = true;
+				}
+				if(weekcookie.weekviewicons !== undefined) {
+						this.weekViewIcons = weekcookie.weekviewicons;
+				} else {
+						this.weekViewIcons = true;
+				}
+				if(weekcookie.weekviewshrink !== undefined) {
+						this.weekViewShrink = weekcookie.weekviewshrink;
+				} else {
+						this.weekViewShrink = "none";
+				}
+				if(weekcookie.weektimeday !== undefined) {
+						this.weekTimeDay = weekcookie.weektimeday;
+				} else {
+						this.weekTimeDay = 0;
+				}
+				if (weekcookie.useisoweeknum !== undefined) {
+					this.useISOweekNum = weekcookie.useisoweeknum;
+				} else {
+					this.useISOweekNum = false;
+				}
+				if (weekcookie.uberminuteinterval !== undefined) {
+					this.uberMinuteInterval = parseInt(weekcookie.uberminuteinterval, 10);
+				} else {
+					this.uberMinuteInterval = 5;
+				}
+				if (weekcookie.gotoeditfromtemplate !== undefined) {
+					this.gotoEditFromTemplate = weekcookie.gotoeditfromtemplate;
+				} else {
+					this.gotoEditFromTemplate = true;
+				}
+				if (weekcookie.workweekonly !== undefined) {
+					this.workWeekOnly = weekcookie.workweekonly;
+				} else {
+					this.workWeekOnly = false;
+				}
+				if (weekcookie.durabtnontop !== undefined) {
+					this.duraBtnOnTop = weekcookie.durabtnontop;
+				} else {
+					this.duraBtnOnTop = false;
+				}
+			}
+		}
+		this.snoozeCookie = new Mojo.Model.Cookie("snoozeCookie");
+		if (this.snoozeCookie) {
+			var snzcookie = this.snoozeCookie.get();
+			if (snzcookie) {			
+				if (snzcookie.defaultSnoozeDuration !== undefined) {
+					this.prefs.defaultSnoozeDuration = snzcookie.defaultSnoozeDuration;
+				}
+				if(snzcookie.showSnoozedForBanner !== undefined) {
+						this.showSnoozedForBanner = snzcookie.showSnoozedForBanner;
+				} else {
+						this.showSnoozedForBanner = true;
+				}
+				if(snzcookie.showReminderDashboard !== undefined) {
+					this.showReminderDashboard = snzcookie.showReminderDashboard;
+				} else {
+					this.showReminderDashboard = true;
+				}
+				if (snzcookie.stopAutoClose !== undefined) {
+					this.stopAutoClose = snzcookie.stopAutoClose;
+				} else {
+					//set default value to true
+					this.stopAutoClose = false;
+				}
+				if (snzcookie.uberopeninview !== undefined) {
+					this.uberOpenInView = snzcookie.uberopeninview;
+				} else {
+					this.uberOpenInView = 'last';
+				}
+				if (snzcookie.snoozethrob !== undefined) {
+					this.snoozeThrob = snzcookie.snoozethrob;
+				} else {
+					this.snoozeThrob = false;
+				}
+			}
+		}
+
+		//get notification repeat interval and max repeat values from cookie
+		this.notificationCookie = new Mojo.Model.Cookie("notificationCookie");
+		if (this.notificationCookie) {
+			var notificationCookie = this.notificationCookie.get();
+			if (notificationCookie) {
+				if(notificationCookie.notificationRepeatInterval !== undefined) {
+					this.prefs.notificationRepeatInterval = notificationCookie.notificationRepeatInterval;
+				} else {
+					//set default value to 2 minutes
+					this.prefs.notificationRepeatInterval = '2';
+				}
+				
+				if (notificationCookie.notificationMaxRepeat !== undefined) {
+					this.prefs.notificationMaxRepeat = notificationCookie.notificationMaxRepeat;
+				} else {
+					//set default value to unlimited
+					this.prefs.notificationMaxRepeat = '99999';
+				}
+			}
+		}
+
+		// prepare some additional widgets (on the fly to prevent editing of translated resources)
+		var newGroup1 = document.createElement('div');
+		var newGroup2 = document.createElement('div');
+		newGroup1.setAttribute('class', 'palm-group');
+		newGroup1.setAttribute('id', 'pv_ubercalendar_div');
+		newGroup2.setAttribute('class', 'palm-group-title');
+		newGroup2.setAttribute('x-mojo-loc', '""');
+		newGroup2.innerHTML = $L('Enhanced Features');
+		newGroup1.appendChild(newGroup2);
+		
+		var newList1 = document.createElement('div');
+		var dList = document.createElement('div');
+		dList.setAttribute('class', "palm-list");
+		newList1.setAttribute('class', "palm-list");
+		var newDiv01 = document.createElement('div');
+		var newDiv02 = document.createElement('div');
+		var newDiv03 = document.createElement('div');
+		var newDiv04 = document.createElement('div');
+		newDiv01.setAttribute('class', 'palm-row single');
+		newDiv01.setAttribute('id', 'uberCprefsbutton');
+		newDiv01.setAttribute('x-mojo-tap-highlight', "momentary");
+		newDiv02.setAttribute('class', 'palm-row-wrapper');
+		newDiv03.setAttribute('style', 'float:left; border-width: 24px 20px; max-width:80%; padding-top:15px; padding-left:20px; margin:0; font-size:18px;');
+		newDiv03.innerHTML=$L('UberCalendar Prefs');
+		newDiv04.setAttribute('style', 'float:right; margin-top:25px; margin-right:15px; width:10px; height:10px; background: ' +'url(/usr/palm/frameworks/mojo/submissions/'+Mojo.Environment.build+'/images/list-selector-triangle.png)' + ' top no-repeat;');
+		newDiv02.appendChild(newDiv03);
+		newDiv02.appendChild(newDiv04);
+		newDiv01.appendChild(newDiv02);	// create button row
+		newList1.appendChild(newDiv01);	// add button to first list  
+		var newDrawer1 = document.createElement('div');
+		newDrawer1.setAttribute('class', 'drawer');
+		newDrawer1.setAttribute('id', 'uberCaldrawer');
+		newDrawer1.setAttribute('x-mojo-element', 'Drawer');
+		
+		var newDiv12 = document.createElement('div');
+		var newDiv13 = document.createElement('div');
+		var newDiv14 = document.createElement('div');
+		newDiv12.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('x-mojo-tap-highlight', "momentary");
+		newDiv13.setAttribute('class', "palm-row-wrapper");
+		newDiv14.setAttribute('id', "pv_default_snooze_duration");
+		newDiv14.setAttribute('x-mojo-element', "ListSelector");
+		newDiv13.appendChild(newDiv14);
+		newDiv12.appendChild(newDiv13);
+		dList.appendChild(newDiv12); // add snooze dur to drawer list
+
+		var newDiv12 = document.createElement('div');
+		var newDiv13 = document.createElement('div');
+		var newDiv14 = document.createElement('div');
+		newDiv12.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('x-mojo-tap-highlight', "momentary");
+		newDiv13.setAttribute('class', "palm-row-wrapper");
+		newDiv14.setAttribute('id', "pv_notification_repeat_interval");
+		newDiv14.setAttribute('x-mojo-element', "ListSelector");
+		newDiv13.appendChild(newDiv14);
+		newDiv12.appendChild(newDiv13);
+		dList.appendChild(newDiv12); // add repeat to drawer list
+
+		var newDiv12 = document.createElement('div');
+		var newDiv13 = document.createElement('div');
+		var newDiv14 = document.createElement('div');
+		newDiv12.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('x-mojo-tap-highlight', "momentary");
+		newDiv13.setAttribute('class', "palm-row-wrapper");
+		newDiv14.setAttribute('id', "pv_notification_max_repeat");
+		newDiv14.setAttribute('x-mojo-element', "ListSelector");
+		newDiv13.appendChild(newDiv14);
+		newDiv12.appendChild(newDiv13);
+		dList.appendChild(newDiv12); // add max repeat to drawer list
+		
+		var newDiv12 = document.createElement('div');
+		var newDiv13 = document.createElement('div');
+		var newDiv14 = document.createElement('div');
+		newDiv12.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('x-mojo-tap-highlight', "momentary");
+		newDiv13.setAttribute('class', "palm-row-wrapper");
+		newDiv14.setAttribute('id', "pv_uber_open_in_view");
+		newDiv14.setAttribute('x-mojo-element', "ListSelector");
+		newDiv13.appendChild(newDiv14);
+		newDiv12.appendChild(newDiv13);
+		dList.appendChild(newDiv12); // add open in view to drawer list
+
+		var newDiv12 = document.createElement('div');
+		var newDiv13 = document.createElement('div');
+		var newDiv14 = document.createElement('div');
+		newDiv12.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('x-mojo-tap-highlight', "momentary");
+		newDiv13.setAttribute('class', "palm-row-wrapper");
+		newDiv14.setAttribute('id', "pv_uber_back_gesture");
+		newDiv14.setAttribute('x-mojo-element', "ListSelector");
+		newDiv13.appendChild(newDiv14);
+		newDiv12.appendChild(newDiv13);
+		dList.appendChild(newDiv12); // add open in view to drawer list
+		
+		var newDiv12 = document.createElement('div');
+		var newDiv13 = document.createElement('div');
+		var newDiv14 = document.createElement('div');
+		newDiv12.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('x-mojo-tap-highlight', "momentary");
+		newDiv13.setAttribute('class', "palm-row-wrapper");
+		newDiv14.setAttribute('id', "pv_uber_minute_interval");
+		newDiv14.setAttribute('x-mojo-element', "ListSelector");
+		newDiv13.appendChild(newDiv14);
+		newDiv12.appendChild(newDiv13);
+		dList.appendChild(newDiv12); // add minute interval to drawer list
+
+		var newDiv12 = document.createElement('div');
+		var newDiv13 = document.createElement('div');
+		var newDiv14 = document.createElement('div');
+		newDiv12.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('x-mojo-tap-highlight', "momentary");
+		newDiv13.setAttribute('class', "palm-row-wrapper");
+		newDiv14.setAttribute('id', "pv_uber_weeknumber_offset");
+		newDiv14.setAttribute('x-mojo-element', "ListSelector");
+		newDiv13.appendChild(newDiv14);
+		newDiv12.appendChild(newDiv13);
+		dList.appendChild(newDiv12); // add weeknumber offset to drawer list
+
+		var newDiv12 = document.createElement('div');
+		var newDiv13 = document.createElement('div');
+		var newDiv14 = document.createElement('div');
+		newDiv12.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('x-mojo-tap-highlight', "momentary");
+		newDiv13.setAttribute('class', "palm-row-wrapper");
+		newDiv14.setAttribute('id', "pv_uber_weeknumber_modulus");
+		newDiv14.setAttribute('x-mojo-element', "ListSelector");
+		newDiv13.appendChild(newDiv14);
+		newDiv12.appendChild(newDiv13);
+		dList.appendChild(newDiv12); // add weeknumber modulus to drawer list
+		
+		var newDiv11 = document.createElement('div');
+		var newDiv12 = document.createElement('div');
+		var newDiv13 = document.createElement('div');
+		var newDiv14 = document.createElement('div');
+		newDiv11.setAttribute('class', "palm-row ");
+		newDiv12.setAttribute('class', "palm-row-wrapper");
+		newDiv13.setAttribute('x-mojo-element', "ToggleButton");
+		newDiv13.setAttribute('id', "prefs-weeknumbertitle-toggle");
+		newDiv14.setAttribute('class', "title");
+		newDiv14.setAttribute('x-mojo-loc', '""');
+		newDiv14.innerHTML = $L('Show week number');
+		newDiv12.appendChild(newDiv13);
+		newDiv12.appendChild(newDiv14);
+		newDiv11.appendChild(newDiv12);
+		dList.appendChild(newDiv11); // add week number to drawer list
+		
+		var newDiv11 = document.createElement('div');
+		var newDiv12 = document.createElement('div');
+		var newDiv13 = document.createElement('div');
+		var newDiv14 = document.createElement('div');
+		newDiv11.setAttribute('class', "palm-row ");
+		newDiv12.setAttribute('class', "palm-row-wrapper");
+		newDiv13.setAttribute('x-mojo-element', "ToggleButton");
+		newDiv13.setAttribute('id', "prefs-useisoweeknum-toggle");
+		newDiv14.setAttribute('class', "title");
+		newDiv14.setAttribute('x-mojo-loc', '""');
+		newDiv14.innerHTML = $L('Use ISO week number');
+		newDiv12.appendChild(newDiv13);
+		newDiv12.appendChild(newDiv14);
+		newDiv11.appendChild(newDiv12);
+		dList.appendChild(newDiv11); // add iso week number to drawer list
+		
+		var newDiv11 = document.createElement('div');
+		var newDiv12 = document.createElement('div');
+		var newDiv13 = document.createElement('div');
+		var newDiv14 = document.createElement('div');
+		newDiv11.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('class', "palm-row-wrapper");
+		newDiv13.setAttribute('x-mojo-element', "ToggleButton");
+		newDiv13.setAttribute('id', "prefs-showsnoozedforbanner-toggle");
+		newDiv14.setAttribute('class', "title");
+		newDiv14.setAttribute('x-mojo-loc', '""');
+		newDiv14.innerHTML = $L('Snoozed for Banner');
+		newDiv12.appendChild(newDiv13);
+		newDiv12.appendChild(newDiv14);
+		newDiv11.appendChild(newDiv12);
+		dList.appendChild(newDiv11); // add snooze banner to drawer list
+		
+		var newDiv11 = document.createElement('div');
+		var newDiv12 = document.createElement('div');
+		var newDiv13 = document.createElement('div');
+		var newDiv14 = document.createElement('div');
+		newDiv11.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('class', "palm-row-wrapper");
+		newDiv13.setAttribute('x-mojo-element', "ToggleButton");
+		newDiv13.setAttribute('id', "prefs-showreminderdashboard-toggle");
+		newDiv14.setAttribute('class', "title");
+		newDiv14.setAttribute('x-mojo-loc', '""');
+		newDiv14.innerHTML = $L('Reminder Dashboard');
+		newDiv12.appendChild(newDiv13);
+		newDiv12.appendChild(newDiv14);
+		newDiv11.appendChild(newDiv12);
+		dList.appendChild(newDiv11); // add reminder dash to drawer list
+
+		var newDiv11 = document.createElement('div');
+		var newDiv12 = document.createElement('div');
+		var newDiv13 = document.createElement('div');
+		var newDiv14 = document.createElement('div');
+		newDiv11.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('class', "palm-row-wrapper");
+		newDiv13.setAttribute('x-mojo-element', "ToggleButton");
+		newDiv13.setAttribute('id', "prefs-stopautoclose-toggle");
+		newDiv14.setAttribute('class', "title");
+		newDiv14.setAttribute('x-mojo-loc', '""');
+		newDiv14.innerHTML = $L('Stop auto close');
+		newDiv12.appendChild(newDiv13);
+		newDiv12.appendChild(newDiv14);
+		newDiv11.appendChild(newDiv12);
+		dList.appendChild(newDiv11); // add stop auto to drawer list
+		
+		var d2List = document.createElement('div');  // list for 2nd level day drawer
+		d2List.setAttribute('class', "palm-list");
+		var newDiv01 = document.createElement('div'); 
+		newDiv01.setAttribute('class', 'palm-row');
+		newDiv01.setAttribute('x-mojo-tap-highlight', "momentary");
+		newDiv01.setAttribute('id', 'dayuberCprefsbutton'); // button for 2nd level day drawer
+		var newDiv12 = document.createElement('div');
+		var newDiv13 = document.createElement('div');
+		var newDiv14 = document.createElement('div');
+		newDiv12.setAttribute('class', "palm-row-wrapper");
+		newDiv13.setAttribute('x-mojo-element', "ToggleButton");
+		newDiv13.setAttribute('id', "prefs-dayviewenhanced-toggle"); //toggle
+		newDiv14.setAttribute('class', "title");
+		newDiv14.setAttribute('x-mojo-loc', '""');
+		newDiv14.innerHTML = $L('Day views enhanced');
+		newDiv12.appendChild(newDiv13);
+		newDiv12.appendChild(newDiv14); //toggle
+		newDiv01.appendChild(newDiv12); // toggle in btn
+		dList.appendChild(newDiv01); // toggle+day Drawer2 btn to drawer1 list
+		var newDrawer2 = document.createElement('div');
+		newDrawer2.setAttribute('class', 'drawer');
+		newDrawer2.setAttribute('id', 'dayuberCaldrawer');
+		newDrawer2.setAttribute('x-mojo-element', 'Drawer');
+		dList.appendChild(newDrawer2); // add day drawer2 to drawer1 list
+		newDrawer2.appendChild(d2List); // add second list to  day drawer2
+		
+		var newDiv11 = document.createElement('div');
+		var newDiv12 = document.createElement('div');
+		var newDiv13 = document.createElement('div');
+		var newDiv14 = document.createElement('div');
+		newDiv11.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('class', "palm-row-wrapper");
+		newDiv13.setAttribute('x-mojo-element', "ToggleButton");
+		newDiv13.setAttribute('id', "prefs-dayviewcompressed-toggle");
+		newDiv14.setAttribute('class', "title");
+		newDiv14.setAttribute('x-mojo-loc', '""');
+		newDiv14.innerHTML = $L('Day: Compress all free');
+		newDiv12.appendChild(newDiv13);
+		newDiv12.appendChild(newDiv14);
+		newDiv11.appendChild(newDiv12);
+		d2List.appendChild(newDiv11); // add day view compression to second drawer list
+		
+		var newDiv11 = document.createElement('div');
+		var newDiv12 = document.createElement('div');
+		var newDiv13 = document.createElement('div');
+		var newDiv14 = document.createElement('div');
+		newDiv11.setAttribute('class', "palm-row");
+		newDiv11.setAttribute('x-mojo-tap-highlight', "momentary");
+		newDiv12.setAttribute('class', "palm-row-wrapper");
+		newDiv13.setAttribute('x-mojo-element', "ListSelector");
+		newDiv13.setAttribute('id', "pv_uber_dayviewshrink");
+		newDiv12.appendChild(newDiv13);
+		newDiv11.appendChild(newDiv12);
+		d2List.appendChild(newDiv11); // add day view shrink to second drawer list
+		
+		var newDiv11 = document.createElement('div');
+		var newDiv12 = document.createElement('div');
+		var newDiv13 = document.createElement('div');
+		var newDiv14 = document.createElement('div');
+		newDiv11.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('class', "palm-row-wrapper");
+		newDiv13.setAttribute('x-mojo-element', "ToggleButton");
+		newDiv13.setAttribute('id', "prefs-dayviewicons-toggle");
+		newDiv14.setAttribute('class', "title");
+		newDiv14.setAttribute('x-mojo-loc', '""');
+		newDiv14.innerHTML = $L('Day: view icons');
+		newDiv12.appendChild(newDiv13);
+		newDiv12.appendChild(newDiv14);
+		newDiv11.appendChild(newDiv12);
+		d2List.appendChild(newDiv11); // add day view icons to second drawer list
+		
+		var newDiv11 = document.createElement('div');
+		var newDiv12 = document.createElement('div');
+		var newDiv13 = document.createElement('div');
+		var newDiv14 = document.createElement('div');
+		newDiv11.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('class', "palm-row-wrapper");
+		newDiv13.setAttribute('x-mojo-element', "ToggleButton");
+		newDiv13.setAttribute('id', "prefs-dayminutepopup-toggle");
+		newDiv14.setAttribute('class', "title");
+		newDiv14.setAttribute('x-mojo-loc', '""');
+		newDiv14.innerHTML = $L('Minute popup');
+		newDiv12.appendChild(newDiv13);
+		newDiv12.appendChild(newDiv14);
+		newDiv11.appendChild(newDiv12);
+		d2List.appendChild(newDiv11); // add day minute popup to second drawer list
+		
+		var newDiv12 = document.createElement('div');
+		var newDiv13 = document.createElement('div');
+		var newDiv14 = document.createElement('div');
+		newDiv12.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('x-mojo-tap-highlight', "momentary");
+		newDiv13.setAttribute('class', "palm-row-wrapper");
+		newDiv14.setAttribute('id', "pv_uber_day_minute_interval");
+		newDiv14.setAttribute('x-mojo-element', "ListSelector");
+		newDiv13.appendChild(newDiv14);
+		newDiv12.appendChild(newDiv13);
+		d2List.appendChild(newDiv12); // add day minute interval to second drawer list
+		
+		var d3List = document.createElement('div');  // list for 3rd level drawer
+		d3List.setAttribute('class', "palm-list");
+		var newDiv01 = document.createElement('div'); 
+		newDiv01.setAttribute('class', 'palm-row');
+		newDiv01.setAttribute('x-mojo-tap-highlight', "momentary");
+		newDiv01.setAttribute('id', 'monthuberCprefsbutton'); // button for 3rd level drawer
+		var newDiv12 = document.createElement('div');
+		var newDiv13 = document.createElement('div');
+		var newDiv14 = document.createElement('div');
+		newDiv12.setAttribute('class', "palm-row-wrapper");
+		newDiv13.setAttribute('x-mojo-element', "ToggleButton");
+		newDiv13.setAttribute('id', "prefs-monthviewenhanced-toggle"); //toggle
+		newDiv14.setAttribute('class', "title");
+		newDiv14.setAttribute('x-mojo-loc', '""');
+		newDiv14.innerHTML = $L('Month view enhanced');
+		newDiv12.appendChild(newDiv13);
+		newDiv12.appendChild(newDiv14); //toggle
+		newDiv01.appendChild(newDiv12); // toggle in btn
+		dList.appendChild(newDiv01); // toggle+Drawer3 btn to drawer1 list
+		var newDrawer3 = document.createElement('div');
+		newDrawer3.setAttribute('class', 'drawer');
+		newDrawer3.setAttribute('id', 'monthuberCaldrawer');
+		newDrawer3.setAttribute('x-mojo-element', 'Drawer');
+		dList.appendChild(newDrawer3); // add drawer3 to drawer1 list
+		newDrawer3.appendChild(d3List); // add 3 list to 3 drawer
+		
+		var newDiv11 = document.createElement('div');
+		var newDiv12 = document.createElement('div');
+		var newDiv13 = document.createElement('div');
+		var newDiv14 = document.createElement('div');
+		newDiv11.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('class', "palm-row-wrapper");
+		newDiv13.setAttribute('x-mojo-element', "ToggleButton");
+		newDiv13.setAttribute('id', "prefs-monthalldaycolors-toggle");
+		newDiv14.setAttribute('class', "title");
+		newDiv14.setAttribute('x-mojo-loc', '""');
+		newDiv14.innerHTML = $L('Show all-day color');
+		newDiv12.appendChild(newDiv13);
+		newDiv12.appendChild(newDiv14);
+		newDiv11.appendChild(newDiv12);
+		d3List.appendChild(newDiv11); // add all day color to month drawer3 list
+		
+		var newDiv11 = document.createElement('div');
+		var newDiv12 = document.createElement('div');
+		var newDiv13 = document.createElement('div');
+		var newDiv14 = document.createElement('div');
+		newDiv11.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('class', "palm-row-wrapper");
+		newDiv13.setAttribute('x-mojo-element', "ToggleButton");
+		newDiv13.setAttribute('id', "prefs-monthviewicons-toggle");
+		newDiv14.setAttribute('class', "title");
+		newDiv14.setAttribute('x-mojo-loc', '""');
+		newDiv14.innerHTML = $L('Month: show icons');
+		newDiv12.appendChild(newDiv13);
+		newDiv12.appendChild(newDiv14);
+		newDiv11.appendChild(newDiv12);
+		d3List.appendChild(newDiv11); // add show icons to month drawer3 list
+		
+		var newDiv11 = document.createElement('div');
+		var newDiv12 = document.createElement('div');
+		var newDiv13 = document.createElement('div');
+		var newDiv14 = document.createElement('div');
+		newDiv11.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('class', "palm-row-wrapper");
+		newDiv13.setAttribute('x-mojo-element', "ToggleButton");
+		newDiv13.setAttribute('id', "prefs-monthusebusy-toggle");
+		newDiv14.setAttribute('class', "title");
+		newDiv14.setAttribute('x-mojo-loc', '""');
+		newDiv14.innerHTML = $L('Show event markers');
+		newDiv12.appendChild(newDiv13);
+		newDiv12.appendChild(newDiv14);
+		newDiv11.appendChild(newDiv12);
+		d3List.appendChild(newDiv11); // add show icons to month drawer3 list
+		
+		var newDiv11 = document.createElement('div');
+		var newDiv12 = document.createElement('div');
+		var newDiv13 = document.createElement('div');
+		var newDiv14 = document.createElement('div');
+		newDiv11.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('class', "palm-row-wrapper");
+		newDiv13.setAttribute('x-mojo-element', "ToggleButton");
+		newDiv13.setAttribute('id', "prefs-monthverticalicons-toggle");
+		newDiv14.setAttribute('class', "title");
+		newDiv14.setAttribute('x-mojo-loc', '""');
+		newDiv14.innerHTML = $L('Vertical Icon Order');
+		newDiv12.appendChild(newDiv13);
+		newDiv12.appendChild(newDiv14);
+		newDiv11.appendChild(newDiv12);
+		d3List.appendChild(newDiv11); // add vertical icons to month drawer3 list
+		
+		var d4List = document.createElement('div');  // list for week level drawer
+		d4List.setAttribute('class', "palm-list");
+		var newDiv01 = document.createElement('div'); 
+		newDiv01.setAttribute('class', 'palm-row');
+		newDiv01.setAttribute('x-mojo-tap-highlight', "momentary");
+		newDiv01.setAttribute('id', 'weekuberCprefsbutton'); // button for week level 
+		var newDiv12 = document.createElement('div');
+		var newDiv13 = document.createElement('div');
+		var newDiv14 = document.createElement('div');
+		newDiv12.setAttribute('class', "palm-row-wrapper");
+		newDiv13.setAttribute('x-mojo-element', "ToggleButton");
+		newDiv13.setAttribute('id', "prefs-weekviewenhanced-toggle");
+		newDiv14.setAttribute('class', "title");
+		newDiv14.setAttribute('x-mojo-loc', '""');
+		newDiv14.innerHTML = $L('Week view enhanced');
+		newDiv12.appendChild(newDiv13);
+		newDiv12.appendChild(newDiv14);
+		newDiv01.appendChild(newDiv12); // toggle in btn
+		dList.appendChild(newDiv01); // toggle+week Drawer btn to drawer1 list
+		var newDrawer4 = document.createElement('div');
+		newDrawer4.setAttribute('class', 'drawer');
+		newDrawer4.setAttribute('id', 'weekuberCaldrawer');
+		newDrawer4.setAttribute('x-mojo-element', 'Drawer');
+		dList.appendChild(newDrawer4); // add week drawer4 to drawer1 list
+		newDrawer4.appendChild(d4List); // add week list to week drawer
+		
+		var newDiv11 = document.createElement('div');
+		var newDiv12 = document.createElement('div');
+		var newDiv13 = document.createElement('div');
+		var newDiv14 = document.createElement('div');
+		newDiv11.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('class', "palm-row-wrapper");
+		newDiv13.setAttribute('x-mojo-element', "ToggleButton");
+		newDiv13.setAttribute('id', "prefs-weekshowsubject-toggle");
+		newDiv14.setAttribute('class', "title");
+		newDiv14.setAttribute('x-mojo-loc', '""');
+		newDiv14.innerHTML = $L('Show event subject');
+		newDiv12.appendChild(newDiv13);
+		newDiv12.appendChild(newDiv14);
+		newDiv11.appendChild(newDiv12);
+		d4List.appendChild(newDiv11); // add show event subject to week drawer4 list
+		
+		var newDiv11 = document.createElement('div');
+		var newDiv12 = document.createElement('div');
+		var newDiv13 = document.createElement('div');
+		var newDiv14 = document.createElement('div');
+		newDiv11.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('class', "palm-row-wrapper");
+		newDiv13.setAttribute('x-mojo-element', "ToggleButton");
+		newDiv13.setAttribute('id', "prefs-workweekonly-toggle");
+		newDiv14.setAttribute('class', "title");
+		newDiv14.setAttribute('x-mojo-loc', '""');
+		newDiv14.innerHTML = $L('Work week only');
+		newDiv12.appendChild(newDiv13);
+		newDiv12.appendChild(newDiv14);
+		newDiv11.appendChild(newDiv12);
+		d4List.appendChild(newDiv11); // add work week to drawer list
+		
+		var newDiv11 = document.createElement('div');
+		var newDiv12 = document.createElement('div');
+		var newDiv13 = document.createElement('div');
+		var newDiv14 = document.createElement('div');
+		newDiv11.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('class', "palm-row-wrapper");
+		newDiv13.setAttribute('x-mojo-element', "ToggleButton");
+		newDiv13.setAttribute('id', "prefs-weekviewicons-toggle");
+		newDiv14.setAttribute('class', "title");
+		newDiv14.setAttribute('x-mojo-loc', '""');
+		newDiv14.innerHTML = $L('Week: show icons');
+		newDiv12.appendChild(newDiv13);
+		newDiv12.appendChild(newDiv14);
+		newDiv11.appendChild(newDiv12);
+		d4List.appendChild(newDiv11); // add show icons to week drawer4 list
+		
+		var newDiv11 = document.createElement('div');
+		var newDiv12 = document.createElement('div');
+		var newDiv13 = document.createElement('div');
+		newDiv11.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('class', "palm-row-wrapper");
+		newDiv13.setAttribute('x-mojo-element', "ListSelector");
+		newDiv13.setAttribute('id', "pv_uber_weekviewshrink");
+		newDiv12.appendChild(newDiv13);
+		newDiv11.appendChild(newDiv12);
+		d4List.appendChild(newDiv11); // add week view shrink to week drawer4 list
+		
+		var newDiv11 = document.createElement('div');
+		var newDiv12 = document.createElement('div');
+		var newDiv13 = document.createElement('div');
+		newDiv11.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('class', "palm-row-wrapper");
+		newDiv13.setAttribute('x-mojo-element', "ListSelector");
+		newDiv13.setAttribute('id', "pv_uber_weektimeday");
+		newDiv12.appendChild(newDiv13);
+		newDiv11.appendChild(newDiv12);
+		d4List.appendChild(newDiv11); // add week time day to week drawer4 list
+		
+		var d5List = document.createElement('div');  // container for cat level drawer
+		d5List.setAttribute('id', "uber-cat-list-container");
+		d5List.innerHTML = '<div id="uberCatList" x-mojo-element="List" > </div>';
+		var newDiv01 = document.createElement('div'); 
+		newDiv01.setAttribute('class', 'palm-row');
+		newDiv01.setAttribute('x-mojo-tap-highlight', "momentary");
+		newDiv01.setAttribute('id', 'catuberCprefsbutton'); // button for week level 
+		var newDiv14 = document.createElement('div');
+		newDiv14.setAttribute('class', "title");
+		newDiv14.setAttribute('x-mojo-loc', '""');
+		newDiv14.innerHTML = $L('Categories');
+		newDiv01.appendChild(newDiv14); // title in btn
+		dList.appendChild(newDiv01); // cat Drawer btn to drawer1 list
+		var newDrawer5 = document.createElement('div');
+		newDrawer5.setAttribute('class', 'drawer');
+		newDrawer5.setAttribute('id', 'catuberCaldrawer');
+		newDrawer5.setAttribute('x-mojo-element', 'Drawer');
+		dList.appendChild(newDrawer5); // add cat drawer5 to drawer1 list
+		newDrawer5.appendChild(d5List); // add cat list container to cat drawer
+		
+		var newDiv11 = document.createElement('div');
+		var newDiv12 = document.createElement('div');
+		var newDiv13 = document.createElement('div');
+		var newDiv14 = document.createElement('div');
+		newDiv11.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('class', "palm-row-wrapper");
+		newDiv13.setAttribute('x-mojo-element', "ToggleButton");
+		newDiv13.setAttribute('id', "prefs-gotoeditfromtemplate-toggle");
+		newDiv14.setAttribute('class', "title");
+		newDiv14.setAttribute('x-mojo-loc', '""');
+		newDiv14.innerHTML = $L('Goto edit from Template');
+		newDiv12.appendChild(newDiv13);
+		newDiv12.appendChild(newDiv14);
+		newDiv11.appendChild(newDiv12);
+		dList.appendChild(newDiv11); // add Goto edit from Template drawer list
+		
+		var newDiv11 = document.createElement('div');
+		var newDiv12 = document.createElement('div');
+		var newDiv13 = document.createElement('div');
+		var newDiv14 = document.createElement('div');
+		newDiv11.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('class', "palm-row-wrapper");
+		newDiv13.setAttribute('x-mojo-element', "ToggleButton");
+		newDiv13.setAttribute('id', "prefs-durabtnontop-toggle");
+		newDiv14.setAttribute('class', "title");
+		newDiv14.setAttribute('x-mojo-loc', '""');
+		newDiv14.innerHTML = $L('Duration Btn on Top');
+		newDiv12.appendChild(newDiv13);
+		newDiv12.appendChild(newDiv14);
+		newDiv11.appendChild(newDiv12);
+		dList.appendChild(newDiv11); // add duration btn on top drawer list
+		
+		var newDiv11 = document.createElement('div');
+		var newDiv12 = document.createElement('div');
+		var newDiv13 = document.createElement('div');
+		var newDiv14 = document.createElement('div');
+		newDiv11.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('class', "palm-row-wrapper");
+		newDiv13.setAttribute('x-mojo-element', "ToggleButton");
+		newDiv13.setAttribute('id', "prefs-ucgroupsfirst-toggle");
+		newDiv14.setAttribute('class', "title");
+		newDiv14.setAttribute('x-mojo-loc', '""');
+		newDiv14.innerHTML = $L('UC Groups First');
+		newDiv12.appendChild(newDiv13);
+		newDiv12.appendChild(newDiv14);
+		newDiv11.appendChild(newDiv12);
+		dList.appendChild(newDiv11); // add ucgroupsfirst to drawer list
+		
+		var newDiv11 = document.createElement('div');
+		var newDiv12 = document.createElement('div');
+		var newDiv13 = document.createElement('div');
+		var newDiv14 = document.createElement('div');
+		newDiv11.setAttribute('class', "palm-row last");
+		newDiv12.setAttribute('class', "palm-row-wrapper");
+		newDiv13.setAttribute('x-mojo-element', "ToggleButton");
+		newDiv13.setAttribute('id', "prefs-snoozethrob-toggle");
+		newDiv14.setAttribute('class', "title");
+		newDiv14.setAttribute('x-mojo-loc', '""');
+		newDiv14.innerHTML = $L('Blink for Alert');
+		newDiv12.appendChild(newDiv13);
+		newDiv12.appendChild(newDiv14);
+		newDiv11.appendChild(newDiv12);
+		dList.appendChild(newDiv11); // add blink to drawer list
+		
+		
+		newDrawer1.appendChild(dList); // add 1st drawer list to drawer1
+		newList1.appendChild(newDrawer1);  // add drawer1 to first list
+		newGroup1.appendChild(newList1);
+		
+		
+		this.controller.get('pv_alarmsound_div').parentNode.insertBefore(newGroup1, this.controller.get('pv_accounts_div')); //add first list to prefs
+		
+		this.uberCalendarPrefs = {
+			showsnoozedforbanner: { id: "ShowSnoozedForBanner", value: this.showSnoozedForBanner },
+			showreminderdashboard: { id: "ShowReminderDashboard", value: this.showReminderDashboard },
+			stopautoclose: {id: "StopAutoClose", value: this.stopAutoClose},
+			dayviewcompressed: {id: "DayViewCompressed", value: this.dayViewCompressed},
+			dayviewicons: {id: "DayViewIcons", value: this.dayViewIcons},
+			dayminutepopup: {id: "DayMinutePopup", value: this.dayMinutePopup},
+			weekviewenhanced: {id: "WeekViewEnhanced", value: this.weekViewEnhanced},
+			dayviewenhanced: {id: "DayViewEnhanced", value: this.dayViewEnhanced},
+			monthviewenhanced: {id: "MonthViewEnhanced", value: this.monthViewEnhanced},
+			monthalldaycolors: {id: "MonthAllDayColors", value: this.monthAllDayColors},
+			monthviewicons: {id: "MonthViewIcons", value: this.monthViewIcons},
+			monthusebusy: {id: "MonthUseBusy", value: this.monthUseBusy},
+			monthverticalicons: {id: "MonthVerticalIcons", value: this.monthVerticalIcons},
+			weeknumbertitle: {id: "WeekNumberTitle", value: this.weekNumberTitle},
+			useisoweeknum: {id: "UseISOweekNum", value: this.useISOweekNum},
+			ucgroupsfirst: {id: "UcGroupsFirst", value: this.ucGroupsFirst},
+			weekshowsubject: {id: "WeekShowSubject", value: this.weekShowSubject},
+			weekviewicons: {id: "WeekViewIcons", value: this.weekViewIcons},
+			snoozethrob: {id: "SnoozeThrob", value: this.snoozeThrob},
+			gotoeditfromtemplate: {id: "GotoEditFromTemplate", value: this.gotoEditFromTemplate},
+			workweekonly: {id: "WorkWeekOnly", value: this.workWeekOnly},
+			durabtnontop: {id: "DuraBtnOnTop", value: this.duraBtnOnTop}
+		};
+
+		var uberCalendarAttributes = {
+			modelProperty: "value",
+			trueValue: true,
+			falseValue: false
+		};
+		
+		this.controller.setupWidget('prefs-showsnoozedforbanner-toggle', uberCalendarAttributes, this.uberCalendarPrefs.showsnoozedforbanner);
+		this.controller.setupWidget('prefs-showreminderdashboard-toggle', uberCalendarAttributes, this.uberCalendarPrefs.showreminderdashboard);
+		this.controller.setupWidget('prefs-stopautoclose-toggle', uberCalendarAttributes, this.uberCalendarPrefs.stopautoclose);
+		this.controller.setupWidget('prefs-snoozethrob-toggle', uberCalendarAttributes, this.uberCalendarPrefs.snoozethrob);
+		this.controller.setupWidget('prefs-dayviewcompressed-toggle', uberCalendarAttributes, this.uberCalendarPrefs.dayviewcompressed);
+		this.controller.setupWidget('prefs-dayviewicons-toggle', uberCalendarAttributes, this.uberCalendarPrefs.dayviewicons);
+		this.controller.setupWidget('prefs-dayminutepopup-toggle', uberCalendarAttributes, this.uberCalendarPrefs.dayminutepopup);
+		this.controller.setupWidget('prefs-weekviewenhanced-toggle', uberCalendarAttributes, this.uberCalendarPrefs.weekviewenhanced);
+		this.controller.setupWidget('prefs-dayviewenhanced-toggle', uberCalendarAttributes, this.uberCalendarPrefs.dayviewenhanced);
+		this.controller.setupWidget('prefs-monthviewenhanced-toggle', uberCalendarAttributes, this.uberCalendarPrefs.monthviewenhanced);
+		this.controller.setupWidget('prefs-monthalldaycolors-toggle', uberCalendarAttributes, this.uberCalendarPrefs.monthalldaycolors);
+		this.controller.setupWidget('prefs-monthviewicons-toggle', uberCalendarAttributes, this.uberCalendarPrefs.monthviewicons);
+		this.controller.setupWidget('prefs-monthusebusy-toggle', uberCalendarAttributes, this.uberCalendarPrefs.monthusebusy);
+		this.controller.setupWidget('prefs-monthverticalicons-toggle', uberCalendarAttributes, this.uberCalendarPrefs.monthverticalicons);
+		this.controller.setupWidget('prefs-weeknumbertitle-toggle', uberCalendarAttributes, this.uberCalendarPrefs.weeknumbertitle);
+		this.controller.setupWidget('prefs-ucgroupsfirst-toggle', uberCalendarAttributes, this.uberCalendarPrefs.ucgroupsfirst);
+		this.controller.setupWidget('prefs-useisoweeknum-toggle', uberCalendarAttributes, this.uberCalendarPrefs.useisoweeknum);
+		this.controller.setupWidget('prefs-weekshowsubject-toggle', uberCalendarAttributes, this.uberCalendarPrefs.weekshowsubject);
+		this.controller.setupWidget('prefs-weekviewicons-toggle', uberCalendarAttributes, this.uberCalendarPrefs.weekviewicons);
+		this.controller.setupWidget('prefs-gotoeditfromtemplate-toggle', uberCalendarAttributes, this.uberCalendarPrefs.gotoeditfromtemplate);
+		this.controller.setupWidget('prefs-workweekonly-toggle', uberCalendarAttributes, this.uberCalendarPrefs.workweekonly);
+		this.controller.setupWidget('prefs-durabtnontop-toggle', uberCalendarAttributes, this.uberCalendarPrefs.durabtnontop);
+		this.controller.setupWidget('pv_default_snooze_duration',
+									this.snoozeAttrs = {
+										modelProperty: 'command',
+										label: $L("Snooze"),
+								      	choices: this.snoozeDurations
+									},
+									this.snoozeModel = {
+										command: this.prefs.defaultSnoozeDuration
+									}
+		);
+		this.controller.setupWidget('pv_notification_repeat_interval',
+									this.repeatIntervalAttrs = {
+										modelProperty: 'value',
+										label: $L("Repeat Interval"),
+								      	choices: this.notificationRepeatIntervals
+									},
+									this.repeatIntervalModel = {
+										value: this.prefs.notificationRepeatInterval
+									}
+		);
+		this.controller.setupWidget('pv_notification_max_repeat',
+									this.maxRepeatAttrs = {
+										modelProperty: 'value',
+										label: $L("Max. Repeat"),
+								      	choices: this.notificationMaxRepeats
+									},
+									this.maxRepeatModel = {
+										value: this.prefs.notificationMaxRepeat
+									}
+		);
+		this.controller.setupWidget('pv_uber_open_in_view',
+									this.uberOpenInViewAttrs = {
+										modelProperty: 'value',
+										label: $L("Open In View"),
+								      	choices: this.uberOpenInViewOptions
+									},
+									this.uberOpenInViewModel = {
+										value: this.uberOpenInView
+									}
+		);
+		this.controller.setupWidget('pv_uber_back_gesture',
+									this.uberBackGestureAttrs = {
+										modelProperty: 'value',
+										label: $L("Back Gesture"),
+								      	choices: this.uberBackGestureOptions
+									},
+									this.uberBackGestureModel = {
+										value: this.uberBackGesture
+									}
+		);
+		this.controller.setupWidget('pv_uber_dayviewshrink',
+									this.uberShrinkDayViewAttrs = {
+										modelProperty: 'value',
+										label: $L("Shrink Day View"),
+								      	choices: this.uberShrinkDayOptions
+									},
+									this.uberShrinkDayModel = {
+										value: this.dayViewShrink
+									}
+		);
+		this.controller.setupWidget("pv_uber_minute_interval",
+										this.minuteIntervalAttrs = {
+										modelProperty: 'value',
+										label: $L("Event Minute Interval"),
+										choices: this.uberMinuteIntervals
+									},
+									this.minuteIntervalModel = {
+										value: this.uberMinuteInterval
+									}
+		);
+		this.controller.setupWidget("pv_uber_day_minute_interval",
+										this.dayMinIntervalAttrs = {
+										modelProperty: 'value',
+										label: $L("Day Popup Interval"),
+										choices: this.uberDayMinIntervals
+									},
+									this.dayMinIntervalModel = {
+										value: this.dayMinInterval
+									}
+		);
+		this.controller.setupWidget("pv_uber_weeknumber_offset",
+										this.weekNumOffsetAttrs = {
+										modelProperty: 'value',
+										label: $L("Wk-No Shift"),
+										choices: this.uberWeekNumberOffset
+									},
+									this.weekNumOffsetModel = {
+										value: this.weekNumOffset
+									}
+		);
+		this.controller.setupWidget("pv_uber_weeknumber_modulus",
+										this.weekModulusAttrs = {
+										modelProperty: 'value',
+										label: $L("Wk-No Modulo"),
+										choices: this.uberWeekNumberModulo
+									},
+									this.weekModulusModel = {
+										value: this.weekModulusNum
+									}
+		);
+		this.controller.setupWidget('pv_uber_weekviewshrink',
+									this.uberShrinkWeekViewAttrs = {
+										modelProperty: 'value',
+										label: $L("Shrink Week View"),
+								      	choices: this.uberShrinkWeekOptions
+									},
+									this.uberShrinkWeekModel = {
+										value: this.weekViewShrink
+									}
+		);
+		this.controller.setupWidget('pv_uber_weektimeday',
+									this.uberWeekTimeDayAttrs = {
+										modelProperty: 'value',
+										label: $L("Time Mark Day"),
+								      	choices: this.uberWeekTimeDayOptions
+									},
+									this.uberWeekTimeDayModel = {
+										value: this.weekTimeDay
+									}
+		);
+		this.controller.setupWidget("uberCaldrawer",
+									this.uberCalAttrs = {
+										modelProperty: 'open',
+										unstyled: false,
+										drawerOpenerOffset: 0
+									},
+									this.uberCalDrawerModel = {open: false}
+		);
+		this.controller.setupWidget("dayuberCaldrawer",
+									this.uberCalAttrs = {
+										modelProperty: 'open',
+										unstyled: false,
+										drawerOpenerOffset: -600
+									},
+									this.uberCalDrawerModel = {open: false}
+		);
+		this.controller.setupWidget("monthuberCaldrawer",
+									this.uberCalAttrs = {
+										modelProperty: 'open',
+										unstyled: false,
+										drawerOpenerOffset: -650
+									},
+									this.uberCalDrawerModel = {open: false}
+		);
+		this.controller.setupWidget("weekuberCaldrawer",
+									this.uberCalAttrs = {
+										modelProperty: 'open',
+										unstyled: false,
+										drawerOpenerOffset: -650
+									},
+									this.uberCalDrawerModel = {open: false}
+		);
+		this.controller.setupWidget("catuberCaldrawer",
+									this.uberCalAttrs = {
+										modelProperty: 'open',
+										unstyled: false,
+										drawerOpenerOffset: -650
+									},
+									this.uberCalDrawerModel = {open: false}
+		);
+		this.controller.setupWidget("uberCprefsbutton",
+			{},
+			{
+				label : "",
+				disabled: false
+			}
+		);
+		this.controller.setupWidget("dayuberCprefsbutton",
+			{},
+			{
+				label : "",
+				disabled: false
+			}
+		);
+		this.controller.setupWidget("monthuberCprefsbutton",
+			{},
+			{
+				label : "",
+				disabled: false
+			}
+		);
+		this.controller.setupWidget("weekuberCprefsbutton",
+			{},
+			{
+				label : "",
+				disabled: false
+			}
+		);
+		this.controller.setupWidget("catuberCprefsbutton",
+			{},
+			{
+				label : "",
+				disabled: false
+			}
+		);
+		this.uberCatAttrs = {
+			itemTemplate:'shared/ubercategoryitem', 
+			listTemplate:'shared/ubercatlistcontainer',
+			formatters: {
+					name: function(value, model) { 
+						return '/media/internal/.scrims/ubercalendar/icon-' + model.name + '.png';
+					}
+				},
+			addItemLabel:$L("Add Category"), 
+			swipeToDelete:true, 
+			reorderable:true, 
+			emptyTemplate:'shared/ubercatemptylist'
+		};
+		this.uberCatModel = {listTitle: "categories", items:this.userUberCats};
+		this.uberCatList = this.controller.get('uberCatList');
+		this.uberCatListChangeHandler = this.handleUberCatListChange.bind(this);
+		this.uberCatListAddHandler = this.handleUberCatListAdd.bind(this);
+		this.uberCatListDeleteHandler = this.handleUberCatListDelete.bind(this);
+		this.uberCatListReorderHandler = this.handleUberCatListReorder.bind(this);
+		this.controller.setupWidget('uberCatList', this.uberCatAttrs, this.uberCatModel);
 		this.requests = [];
 		this.syncSources = [];
 		this.dirty = false;
@@ -399,7 +1527,7 @@ var PrefsAssistant = Class.create({
 		};
 	    this.controller.setupWidget('pv_startofday_timepicker', {label: $L("Start")}, this.startTimeModel);
 	    this.controller.listen('pv_startofday_timepicker',Mojo.Event.propertyChange, this.startOfDayCallback.bindAsEventListener(this));
-		
+
 		var endTime = new Date(this.prefs.endTimeOfDay);
 		endTime.addMinutes(endTime.getTimezoneOffset());
 		var utcEndTime = endTime.getTime();
@@ -408,7 +1536,7 @@ var PrefsAssistant = Class.create({
 		};
 	    this.controller.setupWidget('pv_endofday_timepicker', {label: $L("End")}, this.endTimeModel);
 	    this.controller.listen('pv_endofday_timepicker',Mojo.Event.propertyChange, this.endOfDayCallback.bindAsEventListener(this));
-				
+		
 		var soundSelections = {
       	modelProperty: 'value',
       	label: $L("Alert"),
@@ -419,7 +1547,6 @@ var PrefsAssistant = Class.create({
 			{label: $L('Mute'),value:"4"}
       		]
       	};
-	
 		
 		this.notificationSoundModel = {
         	value:this.convertSoundDBToPopupVal(this.prefs.alarmSoundOn)
@@ -452,8 +1579,6 @@ var PrefsAssistant = Class.create({
 					{label:$L('Help'), command:Mojo.Menu.helpCmd, disabled:false}]
 		}
 		this.controller.setupWidget(Mojo.Menu.appMenu, {omitDefaultItems:true}, this.appMenuModel);
-
-				
 	},
 
 	setCalendarPrefsCallback: function(response) {
@@ -473,6 +1598,8 @@ var PrefsAssistant = Class.create({
 		
 		if (this.dirty)
 			this.savePrefs();
+			
+
 	},
 	
 	syncAllCallback: function(response) {
@@ -494,9 +1621,9 @@ var PrefsAssistant = Class.create({
 	},
 	
 	activate: function() {
+		this.orangeKeyDown = false;
 		//Mojo.Log.info('prefs-assistant: activate');
 		getPrefsManager().validateDefaultCalPref();
-		
 		this.startOfWeekClickHandler = this.handleStartOfWeekClick.bindAsEventListener(this);
 		this.controller.get('pv_start_of_week').observe('mojo-tap', this.startOfWeekClickHandler);
 		
@@ -504,7 +1631,7 @@ var PrefsAssistant = Class.create({
 		this.controller.get('pv_default_evt_alarm').observe('mojo-tap', this.defaultEventAlarmClickHandler);
 		this.defaultAllDayEventAlarmClickHandler = this.handleDefaultAllDayEventAlarmClick.bindAsEventListener(this);
 		this.controller.get('pv_default_allday_evt_alarm').observe('mojo-tap', this.defaultAllDayEventAlarmClickHandler);
-				
+		
 		this.newEventDurationClickHandler = this.handleNewEventDurationClick.bindAsEventListener(this);
 		this.controller.get('pv_new_event_duration').observe('mojo-tap', this.newEventDurationClickHandler);	
 	
@@ -529,15 +1656,204 @@ var PrefsAssistant = Class.create({
 		this.chooseNotificationRingtone = this.chooseNotificationRingtone.bindAsEventListener(this);
 		this.controller.listen('currentringtonerow',Mojo.Event.tap, this.chooseNotificationRingtone);		
 
+		this.snoozeDurationSelectionHandler = this.handleSnoozeDurationSelection.bindAsEventListener(this);
+		this.controller.get('pv_default_snooze_duration').observe(Mojo.Event.propertyChange, this.snoozeDurationSelectionHandler);
+		this.repeatIntervalSelectionHandler = this.handleRepeatIntervalSelection.bindAsEventListener(this);
+		this.controller.get('pv_notification_repeat_interval').observe(Mojo.Event.propertyChange, this.repeatIntervalSelectionHandler);
+		this.maxRepeatSelectionHandler = this.handleMaxRepeatSelection.bindAsEventListener(this);
+		this.controller.get('pv_notification_max_repeat').observe(Mojo.Event.propertyChange, this.maxRepeatSelectionHandler);
+		this.uberOpenInViewSelectionHandler = this.handleUberOpenInViewSelection.bindAsEventListener(this);
+		this.controller.get('pv_uber_open_in_view').observe(Mojo.Event.propertyChange, this.uberOpenInViewSelectionHandler);
+		this.uberBackGestureSelectionHandler = this.handleUberBackGestureSelection.bindAsEventListener(this);
+		this.controller.get('pv_uber_back_gesture').observe(Mojo.Event.propertyChange, this.uberBackGestureSelectionHandler);
+		this.uberShrinkDaySelectionHandler = this.handleUberShrinkDaySelection.bindAsEventListener(this);
+		this.controller.get('pv_uber_dayviewshrink').observe(Mojo.Event.propertyChange, this.uberShrinkDaySelectionHandler);
+		this.uberMinuteIntervalHandler = this.handleUberMinuteInterval.bindAsEventListener(this);
+		this.controller.get('pv_uber_minute_interval').observe(Mojo.Event.propertyChange, this.uberMinuteIntervalHandler);
+		this.uberDayMinIntervalHandler = this.handleUberDayMinInterval.bindAsEventListener(this);
+		this.controller.get('pv_uber_day_minute_interval').observe(Mojo.Event.propertyChange, this.uberDayMinIntervalHandler);
+		this.uberWkNumOffsetHandler = this.handleUberWkNumOffset.bindAsEventListener(this);
+		this.controller.get('pv_uber_weeknumber_offset').observe(Mojo.Event.propertyChange, this.uberWkNumOffsetHandler);
+		this.uberWkModulusNumHandler = this.handleUberWkModulusNum.bindAsEventListener(this);
+		this.controller.get('pv_uber_weeknumber_modulus').observe(Mojo.Event.propertyChange, this.uberWkModulusNumHandler);
+		this.uberShrinkWeekSelectionHandler = this.handleUberShrinkWeekSelection.bindAsEventListener(this);
+		this.controller.get('pv_uber_weekviewshrink').observe(Mojo.Event.propertyChange, this.uberShrinkWeekSelectionHandler);
+		this.uberWeekTimeDaySelectionHandler = this.handleUberWeekTimeDaySelection.bindAsEventListener(this);
+		this.controller.get('pv_uber_weektimeday').observe(Mojo.Event.propertyChange, this.uberWeekTimeDaySelectionHandler);
 
+		this.uberTogglePrefsHandler = this.handleUberTogglePrefs.bindAsEventListener(this);
+		this.controller.listen('prefs-showsnoozedforbanner-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.listen('prefs-showreminderdashboard-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.listen('prefs-stopautoclose-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.listen('prefs-snoozethrob-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.listen('prefs-dayviewcompressed-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.listen('prefs-dayviewicons-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.listen('prefs-dayminutepopup-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.listen('prefs-weekviewenhanced-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.listen('prefs-dayviewenhanced-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.listen('prefs-monthviewenhanced-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.listen('prefs-monthviewicons-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.listen('prefs-monthusebusy-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.listen('prefs-monthverticalicons-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.listen('prefs-monthalldaycolors-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.listen('prefs-weeknumbertitle-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.listen('prefs-useisoweeknum-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.listen('prefs-ucgroupsfirst-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.listen('prefs-weekshowsubject-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.listen('prefs-weekviewicons-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.listen('prefs-gotoeditfromtemplate-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.listen('prefs-workweekonly-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.listen('prefs-durabtnontop-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		
+		this.ucDrawerBtnHandler = this.toggleUCdrawer.bindAsEventListener(this);
+		this.controller.get('uberCprefsbutton').observe('mojo-tap', this.ucDrawerBtnHandler);
+		this.controller.get('dayuberCprefsbutton').observe('mojo-tap', this.ucDrawerBtnHandler);
+		this.controller.get('monthuberCprefsbutton').observe('mojo-tap', this.ucDrawerBtnHandler);
+		this.controller.get('weekuberCprefsbutton').observe('mojo-tap', this.ucDrawerBtnHandler);
+		this.controller.get('catuberCprefsbutton').observe('mojo-tap', this.ucDrawerBtnHandler);
+		this.controller.listen(this.uberCatList, Mojo.Event.listChange, this.uberCatListChangeHandler);
+		this.controller.listen(this.uberCatList, Mojo.Event.listAdd, this.uberCatListAddHandler);
+		this.controller.listen(this.uberCatList, Mojo.Event.listDelete, this.uberCatListDeleteHandler);
+		this.controller.listen(this.uberCatList, Mojo.Event.listReorder, this.uberCatListReorderHandler);
+		
+		this.keyUpHandler = this.handleKeyUp.bind(this);
+		this.controller.listen(this.controller.sceneElement, Mojo.Event.keyup, this.keyUpHandler);
+		this.keyDownHandler = this.handleKeyDown.bind(this);
+		this.controller.listen(this.controller.sceneElement, Mojo.Event.keydown, this.keyDownHandler);
+	},
+	
+	getUCGroupsProps: function() {
+		this.userUberCalGroups = [];
+		this.userUberCalGroups = getUserUberCalGroups();
+		this.uberGroups = getUberGroups();
+		// check for UC groups
+		if(this.uberGroups && this.uberGroups.inUse === true && this.userUberCalGroups && this.userUberCalGroups.length > 0 && this.userUberCalGroups[0].rId !== undefined) {
+			var rID = this.uberGroups.rId;
+			if(rID) {
+				var len = this.userUberCalGroups.length;
+				var idx;
+				for(var i=0; i < len; i++){
+					if(rID === this.userUberCalGroups[i].rId) {
+						var idx = i;
+						break;
+					}
+				}
+				if(idx !== undefined && this.userUberCalGroups[idx].includes && this.userUberCalGroups[idx].includes.length >0) {
+					this.ucGroupIdx = idx;
+				}
+			}
+		} else {
+			this.ucGroupIdx = undefined;
+		}
 	},
 	
 	handleViewOptionBtnTap :function(){
-		
+		this.getUCGroupsProps();
+		if(this.ucGroupIdx != undefined) {
+			buildUberExcludes(false);
+		}
 		this.controller.stageController.pushScene("prefs-options",this.acctsModel);
 	},
 	
+	handleKeyUp: function(event) {
+		// Check for Orange key
+		if (event.originalEvent.altKey || event.originalEvent.keyCode === 129) {
+    	//Mojo.Log.info("handleKeyUp detected ORANGE key");
+			this.orangeKeyDown = false;
+ 		}	
+	},
+	
+	handleKeyDown: function(event) {
+		// Check for Orange key
+		if (event.originalEvent.altKey || event.originalEvent.keyCode === 129) {
+    	//Mojo.Log.info("handleKeyDown detected ORANGE key");
+			this.orangeKeyDown = true;
+ 		}
+	},
+	
 	deactivate: function() {
+		//save default snooze duration to cookie
+		
+		if (this.catCookie) {
+			var cats = this.userUberCats.clone();
+			this.userUberCats = [];
+			cats.each(function(item) {
+				if(item.name !== "newcategory") {
+						this.userUberCats.push(item);
+					}
+				}, this);
+			this.catCookie.put({userubercats: this.userUberCats});
+		}
+		if (this.snoozeCookie) {
+			this.snoozeCookie.put({ 
+									defaultSnoozeDuration: this.prefs.defaultSnoozeDuration,
+									showSnoozedForBanner: this.showSnoozedForBanner,
+									showReminderDashboard: this.showReminderDashboard,
+									stopAutoClose: this.stopAutoClose,
+									uberopeninview: this.uberOpenInView,
+									snoozethrob: this.snoozeThrob
+									});
+		}
+		if (this.dayCookie) {
+			this.dayCookie.put({ 
+									dayviewcompressed: this.dayViewCompressed,
+									dayviewenhanced: this.dayViewEnhanced,
+									dayviewshrink: this.dayViewShrink,
+									weeknumoffset: this.weekNumOffset,
+									weeknumbertitle: this.weekNumberTitle,
+									useisoweeknum: this.useISOweekNum,
+									ucgroupsfirst: this.ucGroupsFirst,
+									prefsstartofweek: this.prefs.startOfWeek,
+									weekmodulusnum: this.weekModulusNum,
+									uberbackgesture: this.uberBackGesture,
+									dayminutepopup: this.dayMinutePopup,
+									daymininterval: this.dayMinInterval,
+									dayviewicons: this.dayViewIcons
+									});
+		}
+		if (this.monthCookie) {
+			this.monthCookie.put({ 
+									monthalldaycolors: this.monthAllDayColors,
+									monthviewenhanced: this.monthViewEnhanced,
+									monthviewicons: this.monthViewIcons,
+									monthusebusy: this.monthUseBusy,
+									monthverticalicons: this.monthVerticalIcons,
+									weeknumoffset: this.weekNumOffset,
+									weeknumbertitle: this.weekNumberTitle,
+									useisoweeknum: this.useISOweekNum,
+									ucgroupsfirst: this.ucGroupsFirst,
+									prefsstartofweek: this.prefs.startOfWeek,
+									weekmodulusnum: this.weekModulusNum,
+									uberbackgesture: this.uberBackGesture
+									});
+		}
+		if (this.weekCookie) {
+			this.weekCookie.put({ 
+									weekviewenhanced: this.weekViewEnhanced,
+									weeknumoffset: this.weekNumOffset,
+									weeknumbertitle: this.weekNumberTitle,
+									useisoweeknum: this.useISOweekNum,
+									ucgroupsfirst: this.ucGroupsFirst,
+									prefsstartofweek: this.prefs.startOfWeek,
+									weekshowsubject: this.weekShowSubject,
+									weekviewicons: this.weekViewIcons,
+									weekviewshrink: this.weekViewShrink,
+									weektimeday: this.weekTimeDay,
+									weekmodulusnum: this.weekModulusNum,
+									uberbackgesture: this.uberBackGesture,
+									uberminuteinterval: this.uberMinuteInterval,
+									gotoeditfromtemplate: this.gotoEditFromTemplate,
+									durabtnontop: this.duraBtnOnTop,
+									workweekonly: this.workWeekOnly
+									});
+		}
+		//save notification repeat preferences
+		if (this.notificationCookie) {
+			this.notificationCookie.put({
+										notificationRepeatInterval: this.prefs.notificationRepeatInterval,
+										notificationMaxRepeat: this.prefs.notificationMaxRepeat
+										});
+		}
 		//Mojo.Log.info('prefs-assistant: deactivate');
 		this.controller.get('pv_start_of_week').stopObserving('mojo-tap', this.startOfWeekClickHandler);
 		
@@ -562,6 +1878,53 @@ var PrefsAssistant = Class.create({
 		
 		this.controller.stopListening('currentringtonerow',Mojo.Event.tap, this.chooseNotificationRingtone);		
 
+		this.controller.get('pv_default_snooze_duration').stopObserving(Mojo.Event.propertyChange, this.snoozeDurationSelectionHandler);
+		this.controller.get('pv_notification_repeat_interval').stopObserving(Mojo.Event.propertyChange, this.repeatIntervalSelectionHandler);
+		this.controller.get('pv_notification_max_repeat').stopObserving(Mojo.Event.propertyChange, this.maxRepeatSelectionHandler);
+		this.controller.get('pv_uber_open_in_view').stopObserving(Mojo.Event.propertyChange, this.uberOpenInViewSelectionHandler);
+		this.controller.get('pv_uber_back_gesture').stopObserving(Mojo.Event.propertyChange, this.uberBackGestureSelectionHandler);
+		this.controller.get('pv_uber_dayviewshrink').stopObserving(Mojo.Event.propertyChange, this.uberShrinkDaySelectionHandler);
+		this.controller.get('pv_uber_minute_interval').stopObserving(Mojo.Event.propertyChange, this.uberMinuteIntervalHandler);
+		this.controller.get('pv_uber_day_minute_interval').stopObserving(Mojo.Event.propertyChange, this.uberDayMinIntervalHandler);
+		this.controller.get('pv_uber_weeknumber_offset').stopObserving(Mojo.Event.propertyChange, this.uberWkNumOffsetHandler);
+		this.controller.get('pv_uber_weeknumber_modulus').stopObserving(Mojo.Event.propertyChange, this.uberWkModulusNumHandler);
+		this.controller.get('pv_uber_weekviewshrink').stopObserving(Mojo.Event.propertyChange, this.uberShrinkWeekSelectionHandler);
+		this.controller.get('pv_uber_weektimeday').stopObserving(Mojo.Event.propertyChange, this.uberWeekTimeDaySelectionHandler);
+		
+		this.controller.stopListening('prefs-showsnoozedforbanner-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.stopListening('prefs-showreminderdashboard-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.stopListening('prefs-stopautoclose-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.stopListening('prefs-snoozethrob-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.stopListening('prefs-dayviewcompressed-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.stopListening('prefs-dayviewicons-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.stopListening('prefs-dayminutepopup-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.stopListening('prefs-weekviewenhanced-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.stopListening('prefs-dayviewenhanced-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.stopListening('prefs-monthviewenhanced-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.stopListening('prefs-monthalldaycolors-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.stopListening('prefs-monthviewicons-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.stopListening('prefs-monthusebusy-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.stopListening('prefs-monthverticalicons-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.stopListening('prefs-weekviewicons-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.stopListening('prefs-weeknumbertitle-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.stopListening('prefs-useisoweeknum-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.stopListening('prefs-ucgroupsfirst-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.stopListening('prefs-weekshowsubject-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.stopListening('prefs-gotoeditfromtemplate-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.stopListening('prefs-workweekonly-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.stopListening('prefs-durabtnontop-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.get('uberCprefsbutton').stopObserving('mojo-tap', this.ucDrawerBtnHandler);
+		this.controller.get('dayuberCprefsbutton').stopObserving('mojo-tap', this.ucDrawerBtnHandler);
+		this.controller.get('monthuberCprefsbutton').stopObserving('mojo-tap', this.ucDrawerBtnHandler);
+		this.controller.get('weekuberCprefsbutton').stopObserving('mojo-tap', this.ucDrawerBtnHandler);
+		this.controller.get('catuberCprefsbutton').stopObserving('mojo-tap', this.ucDrawerBtnHandler);
+		this.controller.stopListening(this.uberCatList, Mojo.Event.listChange, this.uberCatListChangeHandler);
+		this.controller.stopListening(this.uberCatList, Mojo.Event.listAdd, this.uberCatListAddHandler);
+		this.controller.stopListening(this.uberCatList, Mojo.Event.listDelete, this.uberCatListDeleteHandler);
+		this.controller.stopListening(this.uberCatList, Mojo.Event.listReorder, this.uberCatListReorderHandler);
+		
+		this.controller.stopListening(this.controller.sceneElement, Mojo.Event.keyup, this.keyUpHandler);
+		this.controller.stopListening(this.controller.sceneElement, Mojo.Event.keydown, this.keyDownHandler);
 	},
 	
 	// *** EVENT HANDLERS ***
@@ -595,6 +1958,215 @@ var PrefsAssistant = Class.create({
 			//this.renderDefaultCalendar();
 		}
 	},
+
+	handleSnoozeDurationSelection: function(event) {
+		this.prefs.defaultSnoozeDuration = this.snoozeModel.command;
+		Mojo.Log.info("this.prefs.defaultSnoozeDuration", this.prefs.defaultSnoozeDuration);
+	},
+	
+	handleRepeatIntervalSelection: function(event) {
+		this.prefs.notificationRepeatInterval = this.repeatIntervalModel.value;
+		Mojo.Log.info("this.prefs.notificationRepeatInterval", this.prefs.notificationRepeatInterval);
+	},
+	
+	handleMaxRepeatSelection: function(event) {
+		this.prefs.notificationMaxRepeat = this.maxRepeatModel.value;
+		Mojo.Log.info("this.prefs.notificationMaxRepeat", this.prefs.notificationMaxRepeat);
+	},
+	
+	handleUberOpenInViewSelection: function(event) {
+		this.uberOpenInView = this.uberOpenInViewModel.value;
+		Mojo.Log.info("this.uberOpenInView", this.uberOpenInView);
+	},
+	
+	handleUberBackGestureSelection: function(event) {
+		this.uberBackGesture = this.uberBackGestureModel.value;
+		Mojo.Log.info("this.uberBackGesture", this.uberBackGesture);
+	},
+	
+	handleUberShrinkDaySelection: function(event) {
+		this.dayViewShrink = this.uberShrinkDayModel.value;
+		Mojo.Log.info("this.dayViewShrink", this.dayViewShrink);
+	},
+	
+	handleUberWeekTimeDaySelection: function(event) {
+		this.weekTimeDay = this.uberWeekTimeDayModel.value;
+		Mojo.Log.info("this.weekTimeDay", this.weekTimeDay);
+	},
+	
+	handleUberShrinkWeekSelection: function(event) {
+		this.weekViewShrink = this.uberShrinkWeekModel.value;
+		Mojo.Log.info("this.weekViewShrink", this.weekViewShrink);
+	},
+	
+	handleUberWkNumOffset: function(event) {
+		this.weekNumOffset = this.weekNumOffsetModel.value;
+	},
+	
+	handleUberMinuteInterval: function(event) {
+		this.uberMinuteInterval = this.minuteIntervalModel.value;
+	},
+	
+	handleUberDayMinInterval: function(event) {
+		this.dayMinInterval = this.dayMinIntervalModel.value;
+	},
+	
+	handleUberWkModulusNum: function(event) {
+		this.weekModulusNum = this.weekModulusModel.value;
+	},
+	
+	handleUberTogglePrefs: function(event) {
+		//this.dirty = true;
+		if(event.model.id == "ShowSnoozedForBanner") {
+			this.showSnoozedForBanner = event.model.value;
+		} else if(event.model.id == "ShowReminderDashboard") {
+			this.showReminderDashboard = event.model.value;
+			getAppAssistant().showReminderDashboard = this.showReminderDashboard;
+		} else if(event.model.id == "StopAutoClose") {
+			this.stopAutoClose = event.model.value;
+		} else if(event.model.id == "SnoozeThrob") {
+			this.snoozeThrob = event.model.value;
+			getAppAssistant().snoozeThrob = this.snoozeThrob;
+		} else if(event.model.id == "DayViewCompressed") {
+			this.dayViewCompressed = event.model.value;
+		} else if(event.model.id == "DayViewIcons") {
+			this.dayViewIcons = event.model.value;
+		} else if(event.model.id == "DayMinutePopup") {
+			this.dayMinutePopup = event.model.value;
+		} else if(event.model.id == "DayViewEnhanced") {
+			this.dayViewEnhanced = event.model.value;
+			if(event.model.value) {
+				// true open drawer
+				this.controller.get('dayuberCaldrawer').mojo.setOpenState(true);
+			} else {
+				// close the drawer and turn off day features
+				this.controller.get('dayuberCaldrawer').mojo.setOpenState(false);
+			}
+		} else if(event.model.id == "MonthAllDayColors") {
+			this.monthAllDayColors = event.model.value;
+		} else if(event.model.id == "MonthViewIcons") {
+			this.monthViewIcons = event.model.value;
+		} else if(event.model.id == "MonthUseBusy") {
+			this.monthUseBusy = event.model.value;
+		} else if(event.model.id == "MonthVerticalIcons") {
+			this.monthVerticalIcons = event.model.value;
+		} else if(event.model.id == "WeekNumberTitle") {
+			this.weekNumberTitle = event.model.value;
+		} else if(event.model.id == "UseISOweekNum") {
+			this.useISOweekNum = event.model.value;
+		} else if(event.model.id == "UcGroupsFirst") {
+			this.ucGroupsFirst = event.model.value;
+		} else if(event.model.id == "WeekShowSubject") {
+			this.weekShowSubject = event.model.value;
+		} else if(event.model.id == "WeekViewIcons") {
+			this.weekViewIcons = event.model.value;
+		} else if(event.model.id == "GotoEditFromTemplate") {
+			this.gotoEditFromTemplate = event.model.value;
+		} else if(event.model.id == "WorkWeekOnly") {
+			this.workWeekOnly = event.model.value;
+		} else if(event.model.id == "DuraBtnOnTop") {
+			this.duraBtnOnTop = event.model.value;
+		} else if(event.model.id == "MonthViewEnhanced") {
+			this.monthViewEnhanced = event.model.value;
+			if(event.model.value) {
+				// true open drawer
+				this.controller.get('monthuberCaldrawer').mojo.setOpenState(true);
+			} else {
+				// close the drawer and turn off day features
+				this.controller.get('monthuberCaldrawer').mojo.setOpenState(false);
+			}
+		}else if(event.model.id == "WeekViewEnhanced") {
+			this.weekViewEnhanced = event.model.value;
+			if(event.model.value) {
+				// true open drawer
+				this.controller.get('weekuberCaldrawer').mojo.setOpenState(true);
+			} else {
+				// close the drawer and turn off day features
+				this.controller.get('weekuberCaldrawer').mojo.setOpenState(false);
+			}
+		}
+	},
+	
+	handleUberCatListAdd: function(event) {
+		var catCookieChrs = Object.toJSON(this.userUberCats).length;
+		if(catCookieChrs >1490) {
+			this.controller.showAlertDialog({
+				title: $L("Warning: ") + catCookieChrs + $L(" characters"),
+				message: $L("Close to max number of categories, no more names can be added."),
+				choices:[
+				{label: $L("OK"), value:"", type:'dismiss'}   
+				]
+			});
+			return;
+		} else {
+			var newItem = {name:"newcategory"};
+			this.uberCatModel.items.push(newItem);
+			var catLength = this.uberCatModel.items.length;
+			
+			this.uberCatList.mojo.noticeAddedItems(catLength, [newItem]);
+			this.uberCatList.mojo.focusItem(this.uberCatModel.items[catLength-1]);
+		}
+	},
+	
+	handleUberCatListDelete: function(event) {
+		this.uberCatModel.items.splice(this.uberCatModel.items.indexOf(event.item), 1);
+	},
+	
+	handleUberCatListReorder: function(event) {
+		this.uberCatModel.items.splice(this.uberCatModel.items.indexOf(event.item), 1);
+		this.uberCatModel.items.splice(event.toIndex, 0, event.item);
+	},
+	
+	handleUberCatListChange: function(event) {
+		if(event.originalEvent.target.tagName == "INPUT") {
+			//event.item.name = event.originalEvent.target.value;
+			var testStr = event.originalEvent.target.value;
+			if(testStr === "newcategory" || testStr === "") {
+				// added a new category but left default name
+				// or deleted all the text
+				this.uberCatModel.items.splice(event.index, 1);
+				this.uberCatList.mojo.noticeRemovedItems(event.index, 1);
+			} else if(testStr && testStr !== "") {
+				//take out illegal key codes & caps
+				// limit chars
+				testStr = testStr.replace(/[^\w\-]/g,"");
+				testStr = testStr.substring(0, 20);
+				event.item.name = testStr.toLowerCase();
+				this.uberCatList.mojo.noticeUpdatedItems(0, this.uberCatModel.items);
+			}
+		}
+	},
+	
+	uberClearCookies: function() {
+		// clear cookies
+		//Event.stop(event);
+		this.catCookie = new Mojo.Model.Cookie("userUberCats");
+		if(this.catCookie) { this.catCookie.remove(); }
+		this.catCookie = new Mojo.Model.Cookie("userUberCats");
+		this.dayCookie = new Mojo.Model.Cookie("DayEnhanced");
+		if(this.dayCookie) { this.dayCookie.remove(); }
+		this.dayCookie = new Mojo.Model.Cookie("DayEnhanced");
+		this.monthCookie = new Mojo.Model.Cookie("MonthViewEnhanced");
+		if(this.monthCookie) { this.monthCookie.remove(); }
+		this.monthCookie = new Mojo.Model.Cookie("MonthViewEnhanced");
+		this.weekCookie = new Mojo.Model.Cookie("WeekViewEnhanced");
+		if(this.weekCookie) { this.weekCookie.remove(); }
+		this.weekCookie = new Mojo.Model.Cookie("WeekViewEnhanced");
+		this.snoozeCookie = new Mojo.Model.Cookie("snoozeCookie");
+		if(this.snoozeCookie) { this.snoozeCookie.remove(); }
+		this.snoozeCookie = new Mojo.Model.Cookie("snoozeCookie");
+		this.notificationCookie = new Mojo.Model.Cookie("notificationCookie");
+		if(this.notificationCookie) { this.notificationCookie.remove(); }
+		this.notificationCookie = new Mojo.Model.Cookie("notificationCookie");
+		var cookie = new Mojo.Model.Cookie("BackGesture");
+		if(cookie) {cookie.remove()};
+		var cookie = new Mojo.Model.Cookie("ucGroupsCookie");
+		if(cookie) {cookie.remove()};
+		var cookie = new Mojo.Model.Cookie("uberGrpsCookie");
+		if(cookie) {cookie.remove()};
+		var cookie = new Mojo.Model.Cookie("origExCookie");
+		if(cookie) {cookie.remove()};
+	},
 	
 	handleAcctsListSelection: function(event) {
 		var id = event.item.accountId;
@@ -698,8 +2270,23 @@ var PrefsAssistant = Class.create({
 					label: ONE_HOUR,
 					command: 60
 				}, {
+				label: $L("75 minutes"),
+					command: 75
+				}, {
+				label: $L("90 minutes"),
+					command: 90
+				}, {
 					label: TWO_HOURS,
 					command: 120
+				}, {
+					label: $L("3 hours"),
+					command: 180
+				}, {
+					label: $L("4 hours"),
+					command: 240
+				}, {
+					label: $L("8 hours"),
+					command: 480
 				}]
 			});
 	},
@@ -744,34 +2331,343 @@ var PrefsAssistant = Class.create({
 			});
 	},
 	
+	toggleUCdrawer: function(e) {
+		var curBtn = e.currentTarget.id;
+		if(curBtn == "uberCprefsbutton") {
+			if(this.orangeKeyDown === true) {
+				this.orangeKeyDown = false;
+				this.uberClearCookies();
+			} else {
+				this.controller.get('uberCaldrawer').mojo.setOpenState(!this.controller.get('uberCaldrawer').mojo.getOpenState());
+			}
+		} else if(curBtn == "dayuberCprefsbutton") {
+			this.controller.get('dayuberCaldrawer').mojo.setOpenState(!this.controller.get('dayuberCaldrawer').mojo.getOpenState());
+		} else if(curBtn == "monthuberCprefsbutton") {
+			this.controller.get('monthuberCaldrawer').mojo.setOpenState(!this.controller.get('monthuberCaldrawer').mojo.getOpenState());
+		} else if(curBtn == "weekuberCprefsbutton") {
+			this.controller.get('weekuberCaldrawer').mojo.setOpenState(!this.controller.get('weekuberCaldrawer').mojo.getOpenState());
+		} else if(curBtn == "catuberCprefsbutton") {
+			this.controller.get('catuberCaldrawer').mojo.setOpenState(!this.controller.get('catuberCaldrawer').mojo.getOpenState());
+		}
+	},
+
 	// *** WIDGET ATTRS & MODELS
 
 	
 	acctsListAttrs : {
 		itemTemplate: 'prefs/prefs-account',
-		listTemplate: 'shared/group_container',
+		listTemplate: 'shared/group_container'
 	},
 	
 	acctsModel : {
 		listTitle: $L('Accounts'),
-		items: [],
+		items: []
 	},
 	
+	snoozeDurations: [
+		{label:$L('30 Minutes before start'), value:'-30'},
+		{label:$L('15 Minutes before start'), value:'-15'},
+		{label:$L('10 Minutes before start'), value:'-10'},
+		{label:$L('5 Minutes before start'), value:'-5'},
+		{label:$L('At start time'), value:'0'},
+		{label:$L('5 Minutes'), value:'5'},
+		{label:$L('10 Minutes'), value:'10'},
+		{label:$L('15 Minutes'), value:'15'},
+		{label:$L('30 Minutes'), value:'30'},
+		{label:$L('1 Hour'), value:'60'},
+		{label:$L('2 Hours'), value:'120'},
+		{label:$L('4 Hours'), value:'240'},
+		{label:$L('8 Hours'), value:'480'},
+		{label:$L('10 Hours'), value:'600'},
+		{label:$L('12 Hours'), value:'720'},
+		{label:$L('1 Day'), value:'1440'},
+		{label:$L('2 Days'), value:'2880'},
+		{label:$L('3 Days'), value:'4320'},
+		{label:$L('4 Days'), value:'5760'},
+		{label:$L('5 Days'), value:'7200'},
+		{label:$L('6 Days'), value:'8640'},
+		{label:$L('1 Week'), value:'10080'},
+		{label:$L('2 Weeks'), value:'20160'}		
+	],
+
+	notificationRepeatIntervals: [
+		{label:$L('Disabled'), value:'0'},
+		{label:$L('5 Seconds'), value:'.083'},
+		{label:$L('10 Seconds'), value:'.167'},
+		{label:$L('15 Seconds'), value:'.25'},
+		{label:$L('20 Seconds'), value:'.333'},
+		{label:$L('25 Seconds'), value:'.417'},
+		{label:$L('30 Seconds'), value:'.5'},
+		{label:$L('1 Minutes'), value:'1'},
+		{label:$L('2 Minutes'), value:'2'},
+		{label:$L('3 Minutes'), value:'3'},
+		{label:$L('4 Minutes'), value:'4'},
+		{label:$L('5 Minutes'), value:'5'},
+		{label:$L('10 Minutes'), value:'10'},
+		{label:$L('15 Minutes'), value:'15'}
+	],
+	uberMinuteIntervals: [
+		{label:$L('1'), value:1},
+		{label:$L('5'), value:5},
+		{label:$L('10'), value:10},
+		{label:$L('15'), value:15},
+		{label:$L('20'), value:20},
+		{label:$L('30'), value:30},
+	],
+	
+	uberDayMinIntervals: [
+		{label:$L('10'), value:10},
+		{label:$L('15'), value:15},
+		{label:$L('20'), value:20},
+		{label:$L('30'), value:30},
+	],
+	
+	uberShrinkDayOptions: [
+		{label:$L('None'), value:'none'},
+		{label:$L('Medium'), value:'medium'},
+		{label:$L('Strong'), value:'strong'}
+	],
+	uberWeekTimeDayOptions: [
+		{label:$L('1'), value:0},
+		{label:$L('2'), value:1},
+		{label:$L('3'), value:2},
+		{label:$L('4'), value:3},
+		{label:$L('5'), value:4},
+		{label:$L('6'), value:5},
+		{label:$L('7'), value:6}
+	],
+	uberShrinkWeekOptions: [
+		{label:$L('None'), value:'none'},
+		{label:$L('Medium'), value:'medium'},
+		{label:$L('Strong'), value:'strong'}
+	],
+	uberOpenInViewOptions: [
+		{label:$L('Last'), value:'last'},
+		{label:$L('Day'), value:'day'},
+		{label:$L('Week'), value:'week'},
+		{label:$L('Month'), value:'month'}
+	],
+	uberBackGestureOptions: [
+		{label:$L('Last'), value:'last'},
+		{label:$L('Day'), value:'day'},
+		{label:$L('Week'), value:'week'},
+		{label:$L('Month'), value:'month'}
+	],
+	notificationMaxRepeats: [
+		{label:$L('Unlimited'), value:'99999'}, //this should be a large enough value to be conisdered unlimited for our purpose.
+		{label:$L('1'), value:'1'},
+		{label:$L('2'), value:'2'},
+		{label:$L('3'), value:'3'},
+		{label:$L('4'), value:'4'},
+		{label:$L('5'), value:'5'},
+		{label:$L('10'), value:'10'},
+		{label:$L('15'), value:'15'},
+		{label:$L('20'), value:'20'},
+		{label:$L('25'), value:'25'},
+		{label:$L('30'), value:'30'},
+		{label:$L('35'), value:'35'},
+		{label:$L('40'), value:'40'},
+		{label:$L('45'), value:'45'},
+		{label:$L('50'), value:'50'},
+		{label:$L('55'), value:'55'},
+		{label:$L('60'), value:'60'},
+		{label:$L('65'), value:'65'},
+		{label:$L('70'), value:'70'},
+		{label:$L('75'), value:'75'},
+		{label:$L('80'), value:'80'},
+		{label:$L('85'), value:'85'},
+		{label:$L('90'), value:'90'},
+		{label:$L('95'), value:'95'},
+		{label:$L('100'), value:'100'}
+	],
+	uberWeekNumberModulo: [
+		{label:$L('1'), value:'1'},
+		{label:$L('2'), value:'2'},
+		{label:$L('3'), value:'3'},
+		{label:$L('4'), value:'4'},
+		{label:$L('5'), value:'5'},
+		{label:$L('6'), value:'6'},
+		{label:$L('7'), value:'7'},
+		{label:$L('8'), value:'8'},
+		{label:$L('9'), value:'9'},
+		{label:$L('10'), value:'10'},
+		{label:$L('11'), value:'11'},
+		{label:$L('12'), value:'12'},
+		{label:$L('13'), value:'13'},
+		{label:$L('14'), value:'14'},
+		{label:$L('15'), value:'15'},
+		{label:$L('16'), value:'16'},
+		{label:$L('17'), value:'17'},
+		{label:$L('18'), value:'18'},
+		{label:$L('19'), value:'19'},
+		{label:$L('20'), value:'20'},
+		{label:$L('21'), value:'21'},
+		{label:$L('22'), value:'22'},
+		{label:$L('23'), value:'23'},
+		{label:$L('24'), value:'24'},
+		{label:$L('25'), value:'25'},
+		{label:$L('26'), value:'26'},
+		{label:$L('27'), value:'27'},
+		{label:$L('28'), value:'28'},
+		{label:$L('29'), value:'29'},
+		{label:$L('30'), value:'30'},
+		{label:$L('31'), value:'31'},
+		{label:$L('32'), value:'32'},
+		{label:$L('33'), value:'33'},
+		{label:$L('34'), value:'34'},
+		{label:$L('35'), value:'35'},
+		{label:$L('36'), value:'36'},
+		{label:$L('37'), value:'37'},
+		{label:$L('38'), value:'38'},
+		{label:$L('39'), value:'39'},
+		{label:$L('40'), value:'40'},
+		{label:$L('41'), value:'41'},
+		{label:$L('42'), value:'42'},
+		{label:$L('43'), value:'43'},
+		{label:$L('44'), value:'44'},
+		{label:$L('45'), value:'45'},
+		{label:$L('46'), value:'46'},
+		{label:$L('47'), value:'47'},
+		{label:$L('48'), value:'48'},
+		{label:$L('49'), value:'49'},
+		{label:$L('50'), value:'50'},
+		{label:$L('51'), value:'51'},
+		{label:$L('52'), value:'52'}
+	],
+	uberWeekNumberOffset: [
+		{label:$L('0'), value:'0'},
+		{label:$L('1'), value:'1'},
+		{label:$L('2'), value:'2'},
+		{label:$L('3'), value:'3'},
+		{label:$L('4'), value:'4'},
+		{label:$L('5'), value:'5'},
+		{label:$L('6'), value:'6'},
+		{label:$L('7'), value:'7'},
+		{label:$L('8'), value:'8'},
+		{label:$L('9'), value:'9'},
+		{label:$L('10'), value:'10'},
+		{label:$L('11'), value:'11'},
+		{label:$L('12'), value:'12'},
+		{label:$L('13'), value:'13'},
+		{label:$L('14'), value:'14'},
+		{label:$L('15'), value:'15'},
+		{label:$L('16'), value:'16'},
+		{label:$L('17'), value:'17'},
+		{label:$L('18'), value:'18'},
+		{label:$L('19'), value:'19'},
+		{label:$L('20'), value:'20'},
+		{label:$L('21'), value:'21'},
+		{label:$L('22'), value:'22'},
+		{label:$L('23'), value:'23'},
+		{label:$L('24'), value:'24'},
+		{label:$L('25'), value:'25'},
+		{label:$L('26'), value:'26'},
+		{label:$L('27'), value:'27'},
+		{label:$L('28'), value:'28'},
+		{label:$L('29'), value:'29'},
+		{label:$L('30'), value:'30'},
+		{label:$L('31'), value:'31'},
+		{label:$L('32'), value:'32'},
+		{label:$L('33'), value:'33'},
+		{label:$L('34'), value:'34'},
+		{label:$L('35'), value:'35'},
+		{label:$L('36'), value:'36'},
+		{label:$L('37'), value:'37'},
+		{label:$L('38'), value:'38'},
+		{label:$L('39'), value:'39'},
+		{label:$L('40'), value:'40'},
+		{label:$L('41'), value:'41'},
+		{label:$L('42'), value:'42'},
+		{label:$L('43'), value:'43'},
+		{label:$L('44'), value:'44'},
+		{label:$L('45'), value:'45'},
+		{label:$L('46'), value:'46'},
+		{label:$L('47'), value:'47'},
+		{label:$L('48'), value:'48'},
+		{label:$L('49'), value:'49'},
+		{label:$L('50'), value:'50'},
+		{label:$L('51'), value:'51'},
+		{label:$L('52'), value:'52'}
+	],
+
 	alarms: [
 		{label: '', command: 'none'},			// Do NOT Localize
-		{label: '', command: '-PT5M'},		//Do Not localize
-		{label: '', command: '-PT10M'},		//Do Not localize
-		{label: '', command: '-PT15M'},		// Do NOT Localize
-		{label: '', command: '-PT30M'},		// Do NOT Localize
-		{label: '', command: '-PT1H'},		// Do NOT Localize
-		{label: '', command: '-P1D'}			// Do NOT Localize	
+		{label: '', command:  '-PT0M'}, //DO NOT Localize
+		{label: '', command:  '-PT5M'}, // Do Not Localize
+		{label: '', command:  '-PT10M'}, //Do not localize
+		{label: '', command:  '-PT15M'}, // Do NOT Localize
+		{label: '', command:  '-PT20M'}, // Do NOT Localize
+		{label: '', command:  '-PT25M'}, // Do NOT Localize
+		{label: '', command:  '-PT30M'}, // Do NOT Localize
+		{label: '', command:  '-PT35M'}, // Do NOT Localize
+		{label: '', command:  '-PT45M'}, // Do NOT Localize
+		{label: '', command:  '-PT1H'}, // Do NOT Localize
+		{label: '', command:  '-PT90M'}, // Do NOT Localize
+		{label: '', command:  '-PT2H'}, // Do NOT Localize
+		{label: '', command:  '-PT150M'}, // Do NOT Localize
+		{label: '', command:  '-PT3H'}, // Do NOT Localize
+		{label: '', command:  '-PT220M'}, // Do NOT Localize
+		{label: '', command:  '-PT4H'}, // Do NOT Localize
+		{label: '', command:  '-PT5H'}, // Do NOT Localize
+		{label: '', command:  '-PT6H'}, // Do NOT Localize
+		{label: '', command:  '-PT7H'}, // Do NOT Localize
+		{label: '', command:  '-PT8H'}, // Do NOT Localize
+		{label: '', command:  '-PT10H'}, // Do NOT Localize
+		{label: '', command:  '-PT12H'}, // Do NOT Localize	
+		{label: '', command:  '-PT23H'}, // Do NOT Localize
+		{label: '', command:  '-P1D'}, // Do NOT Localize
+		{label: '', command: '-P36H'}, // Do NOT Localize
+		{label: '', command: '-P2D'}, // Do NOT Localize
+		{label: '', command: '-P60H'}, // Do NOT Localize	
+		{label: '', command: '-P3D'}, // Do NOT Localize
+		{label: '', command: '-P84H'}, // Do NOT Localize
+		{label: '', command: '-P4D'}, // Do NOT Localize
+		{label: '', command: '-P5D'}, // Do NOT Localize
+		{label: '', command: '-P6D'}, // Do NOT Localize			
+		{label: '', command: '-P1W'}, // Do NOT Localize
+		{label: '', command: '-P2W'}, // Do NOT Localize
+		{label: '', command: '-P3W'}, // Do NOT Localize
+		{label: '', command: '-P4W'}, // Do NOT Localize
+		{label: '', command: '-P8W'}, // Do NOT Localize
+		{label: '', command: '-P12W'}, // Do NOT Localize
+		{label: '', command: '-P16W'}, // Do NOT Localize
+		{label: '', command: '-P20W'}, // Do NOT Localize
+		{label: '', command: '-P24W'}, // Do NOT Localize
+		{label: '', command: '-P52W'} // Do NOT Localize
 	],
 	
 	allDayAlarms: [
 		{label: '', command: 'none'},			// Do NOT Localize
-		{label: '', command: '-P1D'},			// Do NOT Localize
-		{label: '', command: '-P2D'},			// Do NOT Localize
-		{label: '', command: '-P3D'},			// Do NOT Localize
-		{label: '', command: '-P1W'}			// Do NOT Localize		
+		{label: '', command: '-PT0M'},// DO NOT Localize
+		{label: '', command: '-P1D'}, // Do NOT Localize
+		{label: '', command: '-P36H'}, // Do NOT Localize
+		{label: '', command: '-P2D'}, // Do NOT Localize
+		{label: '', command: '-P60H'}, // Do NOT Localize	
+		{label: '', command: '-P3D'}, // Do NOT Localize
+		{label: '', command: '-P84H'}, // Do NOT Localize
+		{label: '', command: '-P4D'}, // Do NOT Localize
+		{label: '', command: '-P5D'}, // Do NOT Localize
+		{label: '', command: '-P6D'}, // Do NOT Localize			
+		{label: '', command: '-P1W'}, // Do NOT Localize
+		{label: '', command: '-P2W'}, // Do NOT Localize
+		{label: '', command: '-P3W'}, // Do NOT Localize
+		{label: '', command: '-P4W'}, // Do NOT Localize
+		{label: '', command: '-P8W'}, // Do NOT Localize
+		{label: '', command: '-P12W'}, // Do NOT Localize
+		{label: '', command: '-P16W'}, // Do NOT Localize
+		{label: '', command: '-P20W'}, // Do NOT Localize
+		{label: '', command: '-P24W'}, // Do NOT Localize
+		{label: '', command: '-P52W'} // Do NOT Localize
+	],
+	
+	uberCategories: [
+		{name: 'birthday'}, // Do NOT Localize these
+		{name: 'car'},
+		{name: 'doctor'},
+		{name: 'holiday'},
+		{name: 'kids'},
+		{name: 'party'},
+		{name: 'plane'},
+		{name: 'vacation'},
 	]
 });
\ No newline at end of file
diff --git a/usr/palm/applications/com.palm.app.calendar/app/controllers/prefs-options-assistant.js b/usr/palm/applications/com.palm.app.calendar/app/controllers/prefs-options-assistant.js
index 5b1e36f..ab173e1 100644
--- a/usr/palm/applications/com.palm.app.calendar/app/controllers/prefs-options-assistant.js
+++ b/usr/palm/applications/com.palm.app.calendar/app/controllers/prefs-options-assistant.js
@@ -10,11 +10,56 @@ var PrefsOptionsAssistant = Class.create({
 	calendarCategory:function(modelItem) {
 		return modelItem.category;
 	},	
+	
+	randId: function() {
+		var chars = "0123456789abcdefghiklmnopqrstuvwxyz";
+		var string_length = 4;
+		var randomstring = '';
+		for (var i=0; i<string_length; i++) {
+			var rnum = Math.floor(Math.random() * chars.length);
+			randomstring += chars.substring(rnum,rnum+1);
+		}
+		return randomstring;
+	},
+	
 	setup: function() {
 		this.number = Math.random();
 		
 		this.calList =[];
 		this.calsModel = {listTitle: $L('Accounts'), items:this.calList};
+		this.uberDefaultCalId	= getPrefsManager().getDefaultCalendar();
+		this.userUberCalGroups = [];
+		this.uberGroups = getUberGroups();
+		this.userUberCalGroups = getUserUberCalGroups();
+		if(!this.userUberCalGroups || !this.userUberCalGroups[0] || (this.userUberCalGroups[0] && this.userUberCalGroups[0].rId === undefined)) {
+			this.userUberCalGroups = [{rId:"1234", groupname: $L('Default Group'), includes: [this.uberDefaultCalId], workWeek:false}];
+		}
+		this.uberMod = [];
+		this.uberCalGroups = [];
+		//build uberCalGroups from userUberCalGroups
+		if(this.userUberCalGroups &&  this.userUberCalGroups.length > 0 ) {
+			for(var i=0; i< this.userUberCalGroups.length; i++) {
+				this.uberCalGroups[i] = [];
+				this.uberCalGroups[i].rId = this.userUberCalGroups[i].rId;
+				this.uberCalGroups[i].groupname = this.userUberCalGroups[i].groupname;
+				this.uberCalGroups[i].category = this.userUberCalGroups[i].groupname;
+				this.uberCalGroups[i].workWeek = this.userUberCalGroups[i].workWeek;
+				this.uberCalGroups[i].workWeekTitle = $L('Work week');
+			}
+		}
+		
+		this.uberCalList = [];
+		this.userUberCalList = [];
+		this.uberCalGroupsModel = {listTitle: $L("UberCalendar Groups"), items: this.uberCalGroups};
+		var scroller1 = document.createElement('div');
+		scroller1.setAttribute('x-mojo-element', "Scroller");
+		scroller1.setAttribute('id', 'ubercalscroller');
+		scroller1.setAttribute('style', 'height:390px; width:320px');
+		var pavDiv = this.controller.get('pav_body');
+		var newPav = pavDiv.cloneNode(true);
+		this.controller.get('prefs_options_view').removeChild(pavDiv);
+		scroller1.appendChild(newPav);
+		this.controller.get('prefs_options_view').appendChild(scroller1);
 		this.controller.setupWidget('pav_calendars_list', 
 									{
 										itemTemplate: 'prefs-options/prefs-options-calendar',
@@ -28,6 +73,11 @@ var PrefsOptionsAssistant = Class.create({
 											this.colorPickerCallback.bind(this),
 											this.controller);
 											
+		var newDiv1 = document.createElement('div');
+		newDiv1.setAttribute('class', "palm-list");
+		newDiv1.innerHTML = '<div class="pav-calendars-list" id="uber_calgroup_list" x-mojo-element="List"</div>'
+		scroller1.appendChild(newDiv1);
+		
 		this.controller.setupWidget('pav-cal-exclude-tb', {modelProperty : 'displayInAll', disabledProperty: 'displayDisabled'});
 			
 		
@@ -40,6 +90,18 @@ var PrefsOptionsAssistant = Class.create({
 				getAccountsService().getAllAccountsForCalendarService(this.getCalendarAccountsCallback.bind(this), this.controller);
 				
 			}
+		this.uberSetupCalGroupsList();
+		this.controller.setupWidget('uber_calgroup_list', 
+									this.uberCalGrpAttrs = {itemTemplate: 'prefs-options/ubercalgroupitem',
+										addItemLabel: $L("Add Calendar Group"),
+										swipeToDelete: true,
+										dividerTemplate: 'prefs-options/divider',
+										dividerFunction: this.calendarCategory
+										},
+									this.uberCalGroupsModel);
+		this.controller.setupWidget("ubercalscroller",{mode: 'vertical'});
+		
+		this.controller.setInitialFocusedElement(null);
 	},
 	getCalendarAccountsCallback: function(response) {
 		//Mojo.Log.info('prefs-assistant: getCalendarSyncAccountsCallback');
@@ -67,6 +129,7 @@ var PrefsOptionsAssistant = Class.create({
 		this.calsModel.items =[];
 		var defaultCalId = getPrefsManager().getDefaultCalendar();		
 		var accounts =response.result;
+		this.uberCalList = [];
 		if(accounts.size()>0)
 		{
 			
@@ -104,9 +167,14 @@ var PrefsOptionsAssistant = Class.create({
 							// allow the user to exclude the default calendar from the "All
 							// Calendars view"
 							cal.displayDisabled = true;
+							if(cal.excludeFromAll){
+								cal.excludeFromAll = false;
+								cal.dirty = true;
+							}
 							cal.showExcludeTb = 'none';
 							cal.hideExcludeTb = 'inline-block';
 							cal.disableExcludeTb = 'disabled';
+							
 						}
 				
 						cal.colorStyle = 'cal-color-' + cal.color;	// Do NOT Localize
@@ -115,6 +183,9 @@ var PrefsOptionsAssistant = Class.create({
 						cal.category =category;
 						cal.noCalStyle="display:none";
 						this.calsModel.items.push(cal);
+						this.uberCalList.push(
+						{id: cal.id, name: cal.name, color: cal.color, displayInAll: cal.displayInAll}
+					);
 					}
 				}
 				else
@@ -127,9 +198,75 @@ var PrefsOptionsAssistant = Class.create({
 				}
 			}
 		}
+		this.buildUserUberCalList();
+		this.controller.modelChanged(this.calsModel);
+	},
+	
+	buildUserUberCalList: function() {
+		//take the cal list, build properties for toggle buttons
+		var len = this.userUberCalGroups.length;
+		//this.userUberCalList = [];
+		var cals = [];
+		var validCals = [];
+		cals = this.uberCalList.clone();
 		
+		for (var i=0; i < len; i++) {
+			this.uberMod[i].items = [];
+			cals.each(function(item) {
+				this.uberMod[i].items.push(Object.clone(item));
+				validCals.push(item.id);
+				}, this);
+			var includedLength = this.userUberCalGroups[i].includes.length;
+			var includes = [];
+			var testList = [];
+			testList = this.userUberCalGroups[i].includes.clone();
+			//verify includes have not been removed
+			if(testList && testList.length >0) {
+				for(var z=0; z< testList.length; z++){
+					if(validCals.indexOf(testList[z]) !== -1) {
+						includes.push(testList[z]);
+					}
+				}
+			}
+			this.userUberCalGroups[i].includes = [];
+			this.userUberCalGroups[i].includes = includes.clone();
+			if(includes && this.uberMod[i].items && cals) {
+				for(var k = 0; k < cals.length; k++) {
+					this.uberMod[i].items[k].displayDisabled = false;
+					this.uberMod[i].items[k].displayInAll = false;
+					this.uberMod[i].items[k].rId = this.userUberCalGroups[i].rId;
+					this.uberMod[i].items[k].type = "toggle";
+					for(var j=0; j < includes.length; j++) {
+						if(cals[k].id == includes[j]) {
+							this.uberMod[i].items[k].displayInAll = true;
+						}
+					}
+				}
+			}
+			this.controller.modelChanged(this.uberMod[i]);
+		}
+	},
+	
+	uberSetupCalGroupsList: function () {
+		var len = this.userUberCalGroups.length;
+		if(len > 0) {
+			this.uberMod = [];
+			for(var i=0; i <len; i++) {
+				this.userUberCalList[i] = [];
+				var rID = this.userUberCalGroups[i].rId
+				this.controller.setupWidget("ubercalscroller" + rID,{mode: 'vertical'});
+				this.controller.setupWidget('ubercalgroup-text' + rID,
+										this.txtAttr ={inputName: 'groupname', maxLength: 18, enterSubmits: true, preventResize: true, multiline: false, autoFocus: false, hintText: $L('Enter a group name'), modelProperty: 'value'},
+										this.model = {type: "textfield", rId: rID, value: this.userUberCalGroups[i].groupname});
+				this.controller.setupWidget('uber-cal-workweek-toggle'+rID, this.workAttr={modelProperty:'value'}, this.workModel={type:"workweek", rId: rID, value: this.userUberCalGroups[i].workWeek});
+				this.controller.setupWidget('ubercallist' + rID, 
+										this.uberCalAttrs = {itemTemplate: 'prefs-options/ubercalitem'},
+										this.uberMod[i] = {rId: rID, listTitle: $L("Calendar List"), items: this.userUberCalList[i]});
+
+			}
+			this.controller.setupWidget('uber-cal-list-toggle', {modelProperty : 'displayInAll', disabledProperty: 'displayDisabled'});
+		}
 		
-		this.controller.modelChanged(this.calsModel);
 	},
 	
 	colorPickerCallback: function(color) {
@@ -167,14 +304,59 @@ var PrefsOptionsAssistant = Class.create({
 
 			this.listPropertyChangeHandler = this.handleListPropertyChange.bindAsEventListener(this);
 			this.controller.listen('pav_calendars_list', Mojo.Event.propertyChange, this.listPropertyChangeHandler);
-
+			this.uberCalGroupsChangeHandler = this.handleUberCalGroupsChange.bindAsEventListener(this);
+		this.controller.listen('uber_calgroup_list' , Mojo.Event.propertyChange, this.uberCalGroupsChangeHandler);
+		this.uberCalGroupsAddHandler = this.handleUberCalGroupsAdd.bindAsEventListener(this);
+		this.controller.listen('uber_calgroup_list' , Mojo.Event.listAdd, this.uberCalGroupsAddHandler);
+		this.uberCalGroupsDeleteHandler = this.handleUberCalGroupsDelete.bindAsEventListener(this);
+		this.controller.listen('uber_calgroup_list' , Mojo.Event.listDelete, this.uberCalGroupsDeleteHandler);
+		
 	},
 	
 	deactivate: function() {
-			
-			this.controller.get('pav_calendars_list').stopObserving(Mojo.Event.listTap, this.acctsListSelectionHandler);
-			this.controller.stopListening('pav_calendars_list', Mojo.Event.propertyChange, this.listPropertyChangeHandler);
-
+		// read the orig excludes cookie
+		var uberOrigCookie = new Mojo.Model.Cookie("origExCookie");
+		var uberOrigEx = [];
+		if(uberOrigCookie) {
+			this.calsModel.items.each(function(cal){
+						uberOrigEx.push({id: cal.id, excludeFromAll: !cal.displayInAll});
+				});
+			if(uberOrigEx && uberOrigEx.length > 0) {
+				uberOrigCookie.put({excludes: uberOrigEx});
+				//Mojo.Log.error("Orig excludes:   " + Object.toJSON(uberOrigEx));
+			}
+		}
+		if(this.userUberCalGroups && this.userUberCalGroups.length > 0) {
+			var tempGroups = [];
+			var idx = 0;
+			for(var i=0; i< this.userUberCalGroups.length; i++) {
+				if(this.userUberCalGroups[i] && this.userUberCalGroups[i].includes && this.userUberCalGroups[i].includes.length >0) {
+					// group is defined with at least one include
+					tempGroups[idx] = {};
+					tempGroups[idx].rId = this.userUberCalGroups[i].rId;
+					tempGroups[idx].groupname = (this.userUberCalGroups[i].groupname !== undefined && this.userUberCalGroups[i].groupname !== "") ? this.userUberCalGroups[i].groupname : $L("Default Group") + idx.toString();
+					tempGroups[idx].includes = this.userUberCalGroups[i].includes;
+					tempGroups[idx].workWeek = this.userUberCalGroups[i].workWeek;
+					idx++;
+				}
+			}
+			if(tempGroups) {
+				var userCalGrpsCookie = new Mojo.Model.Cookie("ucGroupsCookie");
+				if(userCalGrpsCookie) {
+					userCalGrpsCookie.put({usercalgroups: tempGroups});
+				}
+			}
+		} else { // user deleted all the groups
+			var userCalGrpsCookie = new Mojo.Model.Cookie("ucGroupsCookie");
+			if(userCalGrpsCookie) {
+				userCalGrpsCookie.remove();
+			}
+		}
+		this.controller.get('pav_calendars_list').stopObserving(Mojo.Event.listTap, this.acctsListSelectionHandler);
+		this.controller.stopListening('pav_calendars_list', Mojo.Event.propertyChange, this.listPropertyChangeHandler);
+		this.controller.stopListening('uber_calgroup_list' , Mojo.Event.propertyChange, this.uberCalGroupsChangeHandler);
+		this.controller.stopListening('uber_calgroup_list' , Mojo.Event.listAdd, this.uberCalGroupsAddHandler);
+		this.controller.stopListening('uber_calgroup_list' , Mojo.Event.listDelete, this.uberCalGroupsDeleteHandler);
 
 	},
 	
@@ -205,6 +387,175 @@ var PrefsOptionsAssistant = Class.create({
 			}
 		}
 	},
+	// fix this.app ref fix alert dialog
+	handleUberCalGroupsChange: function(event) {
+		if(event.model !== undefined && event.target.id !== undefined) {
+			var model = event.model;
+			var targetId = event.target.id;
+			if(targetId === "uber-cal-list-toggle" && model.rId !== undefined) {
+				//toggled a calendar entry
+				var rID = model.rId;
+				var grpLen = this.userUberCalGroups.length;
+				for(var i=0; i< grpLen; i++) {
+					if(this.userUberCalGroups[i].rId === rID) {
+						var grpIndex = i;
+						break;
+					}
+				}
+				var includes = this.userUberCalGroups[grpIndex].includes.clone();
+				if(model.id !== undefined && model.displayInAll !== undefined && model.displayInAll === false) {
+					if(includes !== undefined && includes !== '') { // not empty remove
+						if(includes.length === 1) {
+							this.controller.showAlertDialog({
+								onChoose: function(value){return;},
+								title: $L("Warning: 0 calendars selected"),
+								message: $L("Groups without 1 included calendar will not be saved"),
+								choices:[
+								{label: $L("OK"), value:"cancel", type:'dismiss'}   
+								]
+							});
+						}
+						if(includes.indexOf(model.id) !== -1){
+							var inIdx = includes.indexOf(model.id);
+							includes.splice(inIdx, 1);
+							this.userUberCalGroups[grpIndex].includes = [];
+							includes.each(function(item) {
+								this.userUberCalGroups[grpIndex].includes.push(item);
+							}, this);
+						}
+					}
+				} else if(model.id !== undefined && model.displayInAll !== undefined && model.displayInAll === true) {
+					if(includes !== undefined && includes !== '') { // not empty add
+						if(includes.indexOf(model.id) === -1){
+							includes.push(model.id);
+							this.userUberCalGroups[grpIndex].includes = [];
+							includes.each(function(item) {
+								this.userUberCalGroups[grpIndex].includes.push(item);
+							}, this);
+						}
+					} else if(includes !== undefined && includes === '') { // previously empty
+						includes.push(id);
+							this.userUberCalGroups[grpIndex].includes = [];
+							includes.each(function(item) {
+								this.userUberCalGroups[grpIndex].includes.push(item);
+							}, this);
+					}
+				}
+				//Mojo.Log.error("includes:   " + Object.toJSON(includes));
+			}
+			if(model.rId !== undefined && targetId === "ubercalgroup-text" + model.rId  && model.value !== undefined) {
+				var rID = model.rId;
+				if(model.value === '') { // empty is not allowed for group name
+					return;
+				} else { //changed  the group name
+					var grpLen = this.userUberCalGroups.length;
+					for(var i=0; i< grpLen; i++) {
+						if(this.userUberCalGroups[i].rId === rID) {
+							var grpIndex = i;
+							break;
+						}
+					}
+					this.userUberCalGroups[grpIndex].groupname = model.value;
+					this.uberCalGroupsModel.items[grpIndex].groupname = model.value;
+					this.uberCalGroupsModel.items[grpIndex].category = model.value;
+					this.controller.get('uber_calgroup_list').mojo.noticeUpdatedItems(0, this.uberCalGroupsModel.items);
+				}
+			}
+			if(model.rId !== undefined && targetId === "uber-cal-workweek-toggle" + model.rId  && model.value !== undefined) {
+				var rID = model.rId;
+				 //changed  work group property
+					var grpLen = this.userUberCalGroups.length;
+					for(var i=0; i< grpLen; i++) {
+						if(this.userUberCalGroups[i].rId === rID) {
+							var grpIndex = i;
+							break;
+						}
+					}
+					this.userUberCalGroups[grpIndex].workWeek = model.value;
+					//this.controller.get('uber_calgroup_list').mojo.noticeUpdatedItems(0, this.uberCalGroupsModel.items);
+			}
+			//Mojo.Log.error("model:  " + Object.toJSON(model));
+			//Mojo.Log.error("target.id:   " + Object.toJSON(targetId));
+		}
+	},
+	
+	handleUberCalGroupsAdd: function(event) {
+		var groupCookieChrs = Object.toJSON(this.userUberCalGroups).length;
+		if(groupCookieChrs >1300) {
+			this.controller.showAlertDialog({
+				onChoose: function(value) { return;},
+				title: $L("Warning: ") + groupCookieChrs + $L(" characters"),
+				message: $L("Close to max number of groups, no more groups can be added."),
+				choices:[
+				{label: $L("OK"), value:"cancel", type:'dismiss'}   
+				]
+			});
+			return;
+		} else {
+			var targetId = event.target.id;
+			var len = this.userUberCalList.length;
+			var rID = this.randId();
+			var newUberCalGroup = {rId: rID, groupname:$L("New Group") + len, _id: "", category:$L("New Group"), workWeekTitle:$L('Work week'), workWeek:false};
+			var newUberCal = {rId: rID, groupname:"", includes: [this.uberDefaultCalId], workWeek: false};
+			this.userUberCalGroups.push(newUberCal); //set for cookie not in list model
+			var cals = [];
+			cals = this.uberCalList.clone();
+			this.userUberCalList[len] = []; // build for toggles
+			cals.each(function(item) {
+					this.userUberCalList[len].push(Object.clone(item));
+					}, this);
+			if(this.userUberCalList[len] && cals && this.uberDefaultCalId) {
+				for(var k = 0; k < cals.length; k++) {
+					this.userUberCalList[len][k].displayDisabled = false;
+					this.userUberCalList[len][k].displayInAll = false;
+					this.userUberCalList[len][k].rId = rID;
+					this.userUberCalList[len][k].type = "toggle";
+					if(cals[k].id == this.uberDefaultCalId) {
+						this.userUberCalList[len][k].displayInAll = true;
+					}
+				}
+			}
+			//add group to group list model items
+			this.uberCalGroupsModel.items.push(newUberCalGroup);
+			var grpLength = this.uberCalGroupsModel.items.length;
+			//setup new toggles
+			this.uberMod[len] = [];
+			this.controller.setupWidget("ubercalscroller" + rID, {mode: 'vertical'});
+			this.controller.setupWidget('ubercalgroup-text' + rID,
+									this.txtAttr ={inputName: 'groupname', preventResize: true, multiline: false, enterSubmits: true, maxLength: 18, autoFocus: false, hintText: $L('Enter a group name'), modelProperty: 'value'},
+									this.model = {type: "textfield", rId: rID, value: ""});
+			this.controller.setupWidget('uber-cal-workweek-toggle'+rID, this.workAttr={modelProperty:'value'}, this.workModel={type:"workweek", rId: rID, value: newUberCalGroup.workWeek});
+			this.controller.setupWidget('ubercallist' + rID, 
+									this.uberCalAttrs = {itemTemplate: 'prefs-options/ubercalitem'},
+									this.uberMod[len] = {listTitle: $L("Calendar List"), items: this.userUberCalList[len]});
+			
+			this.controller.get('uber_calgroup_list').mojo.noticeAddedItems(grpLength, [newUberCalGroup]);
+			this.controller.get('uber_calgroup_list').mojo.focusItem(this.uberCalGroupsModel.items[grpLength -1]);
+		}
+	},
+	
+	handleUberCalGroupsDelete: function(event) {
+		var rID = event.item.rId;
+		var grpIdx = event.index;
+		if(rID !== undefined) {
+			// remove grp from model and userUberCalGroups
+			var grpLen = this.uberCalGroupsModel.items.length;
+			for(var i=0; i< grpLen; i++) {
+				if(this.userUberCalGroups[i] && this.userUberCalGroups[i].rId === rID) {
+					//Mojo.Log.error("user group:  " + Object.toJSON(this.userUberCalGroups[i]));
+					this.userUberCalGroups.splice(i, 1); // remove from the cookie array
+					break;
+				}
+			}
+			//Mojo.Log.error("model items:  " + Object.toJSON(this.uberCalGroupsModel.items));
+			this.uberCalGroupsModel.items.splice(grpIdx, 1); // group model
+			if(rID === this.uberGroups.rId){ //deleted selected group
+				this.uberGroups = {inUse: false, rId: ""};
+				setUberGroups(false);
+				setCurrentCal('all');
+			}
+		}
+	},
 	
 	handleListPropertyChange: function(event) {
 	
diff --git a/usr/palm/applications/com.palm.app.calendar/app/controllers/reminder-assistant.js b/usr/palm/applications/com.palm.app.calendar/app/controllers/reminder-assistant.js
index d190fd1..d933af5 100644
--- a/usr/palm/applications/com.palm.app.calendar/app/controllers/reminder-assistant.js
+++ b/usr/palm/applications/com.palm.app.calendar/app/controllers/reminder-assistant.js
@@ -1,7 +1,35 @@
 /* Copyright 2009 Palm, Inc.  All rights reserved. */
 
+g_notificationRepeatCount = 0;
 
 var ReminderAssistant = Class.create({
+
+	snoozeDurationOptions: [
+		{label:$L('30 minutes before') + ' ' +$L('start'), value:'-30'},
+		{label:$L('15 minutes before') + ' ' +$L('start'), value:'-15'},
+		{label:$L('10 minutes before') + ' ' +$L('start'), value:'-10'},
+		{label:$L('5 minutes before') + ' ' +$L('start'), value:'-5'},
+		{label:$L('At Start Time'), value:'0'},
+		{label:$L('5 minutes'), value:'5'},
+		{label:$L('10 minutes'), value:'10'},
+		{label:$L('15 minutes'), value:'15'},
+		{label:$L('30 minutes'), value:'30'},
+		{label:$L('1 hour'), value:'60'},
+		{label:$L('2 hours'), value:'120'},
+		{label:$L('4 hours'), value:'240'},
+		{label:$L('8 hours'), value:'480'},
+		{label:$L('10 hours'), value:'600'},
+		{label:$L('12 hours'), value:'720'},
+		{label:$L('1 day'), value:'1440'},
+		{label:$L('2 days'), value:'2880'},
+		{label:$L('3 days'), value:'4320'},
+		{label:$L('4 days'), value:'5760'},
+		{label:$L('5 days'), value:'7200'},
+		{label:$L('6 days'), value:'8640'},
+		{label:$L('1 week'), value:'10080'},
+		{label:$L('2 weeks'), value:'20160'}
+	],
+
 	initialize: function(eventId,needThrobbing) {
 		Mojo.Log.info("$$$$$$$$ Reminder-assistant initialize: start: "+eventId);
 		this.DEFAULT_SNOOZE = 5;
@@ -13,20 +41,183 @@ var ReminderAssistant = Class.create({
 		this.eventId = eventId;	
 		this.doThrob =needThrobbing;
 		this.autoSnoozed = false;
+		this.snoozeThrob = false;
 		
+		//get default snooze duration from cookie
+		this.snoozeCookie = new Mojo.Model.Cookie("snoozeCookie");
+
+		if (this.snoozeCookie) {
+			var snzcookie = this.snoozeCookie.get();
+			if (snzcookie) {
+				if(snzcookie.defaultSnoozeDuration !== undefined) {
+					this.DEFAULT_SNOOZE = parseInt(snzcookie.defaultSnoozeDuration, 10);
+				} else {
+					this.DEFAULT_SNOOZE = 5;
+				}
+				if(snzcookie.showSnoozedForBanner !== undefined)	{
+					this.showSnoozedForBanner = snzcookie.showSnoozedForBanner;
+				} else {
+					this.showSnoozedForBanner = false;
+				}
+				if(snzcookie.stopAutoClose !== undefined)	{
+					this.stopAutoClose = snzcookie.stopAutoClose;
+				} else {
+					this.stopAutoClose = true;
+				}
+				if(snzcookie.snoozethrob)	{
+					this.snoozeThrob = snzcookie.snoozethrob;
+				} else {
+					this.snoozeThrob = false;
+				}
+			}
+		}
+
+		//load the notification repeat preferences.
+		//doing this here instead of in initialze to avoid conflict with snooze duration patch
+		//get notification repeat interval and max repeat values from cookie
+		this.notificationCookie = new Mojo.Model.Cookie("notificationCookie");
+		if (this.notificationCookie) {
+			var notificationCookie = this.notificationCookie.get();
+			if (notificationCookie) {
+				if(notificationCookie.notificationRepeatInterval !== undefined) {
+					this.notificationRepeatInterval = notificationCookie.notificationRepeatInterval;
+				} else {
+					//set default value to 2 minutes
+					this.notificationRepeatInterval = '2';
+				}
+			
+				if(notificationCookie.notificationMaxRepeat !== undefined) {
+					this.notificationMaxRepeat = notificationCookie.notificationMaxRepeat;
+				} else {
+					//set default value to unlimited
+					this.notificationMaxRepeat = '99999';
+				}
+			}
+		}
+
+		//logic to not pic a default snooze that has already past
+
+		//set the snoozeOptions to the master set otherwise as we remove items we also remove them
+		//for any additonal reminders.
+		this.snoozeOptions = this.snoozeDurationOptions.slice(0);
+
+		this.reminder = this.reminders.getReminder(this.eventId);
+		
+		var curDate = new Date();
+		var curDateTS = curDate.getTime();
+		var defSnooze = this.snoozeOptions[0].value;
+		var defSnoozeTS = defSnooze * 60*1000; //put in millisec
+		//var testDate = new Date(this.reminder.time).addMinutes(defSnooze);
+		var testDateTS = this.reminder.time + defSnoozeTS;
+		while(testDateTS <= curDateTS && defSnooze <= 0)
+		{
+			//remove the invalid option
+			var tmp = this.snoozeOptions.shift();
+			defSnooze = parseInt(this.snoozeOptions[0].value);
+			defSnoozeTS = defSnooze * 60*1000;
+			testDateTS = this.reminder.time + defSnoozeTS;
+		}
+		if(this.reminder.lastSnooze != undefined || this.reminder.lastSnooze != null) {
+			this.DEFAULT_SNOOZE = parseInt(this.reminder.lastSnooze, 10);
+		}
+		for(var i=0; i<this.snoozeOptions.length; i++) {
+			if(this.snoozeOptions[i].value == parseInt(this.DEFAULT_SNOOZE, 10)) {
+				this.snzIndex = i;
+				return;
+			}
+		}
+		//if the DEFAULT_SNOOZE < defSnooze then it is no longer a valid snooze option so use the next valide value
+		if( this.DEFAULT_SNOOZE < defSnooze )
+		{
+			this.DEFAULT_SNOOZE = defSnooze;
+			this.snzIndex= 0;
+		}
+
 		Mojo.Log.info("$$$$$$$$ Reminder-assistant initialize:end");
 	},
 
 	activate:function(){
 		Mojo.Log.info("$$$$$$$$ Reminder-assistant activate:start");
 		if (this.doThrob) {
-			Mojo.Log.info("$$$$$$$$ Reminder-assistant doThrob:true");
+			//Mojo.Log.info("$$$$$$$$ Reminder-assistant doThrob:true");
 			this.controller.stageController.indicateNewContent(true);
 		}
 		Mojo.Log.info("$$$$$$$$ Reminder-assistant activate:end");
 	},
 	
 	setup: function() {
+		
+		// prepare an additional widget (on the fly to prevent editing of translated resources)
+		var newTextDiv = document.createElement('div');
+		newTextDiv.setAttribute('class', "palm-dashboard-text");
+		newTextDiv.setAttribute('style', "margin-top: 10px position:relative -webkit-palm-mouse-target:ignore");
+		newTextDiv.setAttribute('id', "reminder-chosen-snz-text");
+		newTextDiv.innerHTML = this.snoozeOptions[this.snzIndex].label;
+		// first button row
+		var newButtonRow1 = document.createElement('div');
+		newButtonRow1.setAttribute('id', "reminder-snz-button-row1");
+		newButtonRow1.setAttribute('style', "position:relative; width:100%");
+		var setSnoozeBtn = document.createElement('div');
+		setSnoozeBtn.setAttribute('id', "reminder-setsnooze");
+		var ssbtnwrapper = document.createElement('div');
+		ssbtnwrapper.setAttribute('x-mojo-loc', '""');
+		ssbtnwrapper.setAttribute('class', "button-wrapper");
+		ssbtnwrapper.innerHTML = '+/-';
+		setSnoozeBtn.appendChild(ssbtnwrapper);
+		var remSnooze = this.controller.get('reminder-snooze').cloneNode(true); 
+		var remDismiss = this.controller.get('reminder-dismiss').cloneNode(true);
+		this.controller.get('reminder-dismiss').parentNode.removeChild(this.controller.get('reminder-dismiss'));
+		this.controller.get('reminder-snooze').parentNode.removeChild(this.controller.get('reminder-snooze'));
+		newButtonRow1.appendChild(remDismiss);
+		newButtonRow1.appendChild(remSnooze);
+		newButtonRow1.appendChild(setSnoozeBtn);
+		
+		// second row of buttons
+		var newButtonRow2 = document.createElement('div');
+		newButtonRow2.setAttribute('id', "reminder-snz-button-row2");
+		newButtonRow2.setAttribute('style', "position:relative; width:100%");
+		var newBtnWrapDiv1 = document.createElement('div');
+		var newBtnWrapDiv2 = document.createElement('div');
+		var newBtnWrapDiv3 = document.createElement('div');
+		newBtnWrapDiv1.setAttribute('class', "button-wrapper");
+		newBtnWrapDiv2.setAttribute('class', "button-wrapper");
+		newBtnWrapDiv3.setAttribute('class', "button-wrapper");
+		newBtnWrapDiv1.setAttribute('x-mojo-loc', '""');
+		newBtnWrapDiv2.setAttribute('x-mojo-loc', '""');
+		newBtnWrapDiv3.setAttribute('x-mojo-loc', '""');
+		newBtnWrapDiv1.innerHTML = '+';
+		newBtnWrapDiv2.innerHTML = '-';
+		newBtnWrapDiv3.innerHTML = $L("Snooze");
+		var snzAdvanceBtn = document.createElement('div');
+		var snzPreviousBtn = document.createElement('div');
+		var snzChosenBtn = document.createElement('div');
+		snzAdvanceBtn.setAttribute('id', "reminder-snz-advance-button");
+		snzPreviousBtn.setAttribute('id', "reminder-snz-previous-button");
+		snzChosenBtn.setAttribute('id', "reminder-snz-chosen-button");
+		snzAdvanceBtn.appendChild(newBtnWrapDiv1);
+		snzPreviousBtn.appendChild(newBtnWrapDiv2);
+		snzChosenBtn.appendChild(newBtnWrapDiv3);
+		newButtonRow2.appendChild(snzPreviousBtn);
+		newButtonRow2.appendChild(snzChosenBtn);
+		newButtonRow2.appendChild(snzAdvanceBtn);
+
+		
+
+		var panelDiv = this.controller.get('reminder-email').parentNode;
+		panelDiv.appendChild(newTextDiv);
+		panelDiv.appendChild(newButtonRow1);
+		panelDiv.appendChild(newButtonRow2);
+		newButtonRow2.setAttribute('style', "display:none");
+		//setup the snooze duration selector list
+		this.selectorChoices = this.snoozeOptions;
+		this.selectorAttributes = {label: "Snooze", modelProperty:'value' };
+		//this.setSnzBtn = this.controller.get('reminder-setsnooze');
+		//this.buttonRow1 = this.controller.get('reminder-snz-button-row1');
+		//this.buttonRow2 = this.controller.get('reminder-snz-button-row2');
+		this.controller.get('reminder-snz-button-row2').style.display = 'none';
+		//this.snzChosenText = this.controller.get('reminder-chosen-snz-text');
+		this.onSnoozeDurationChangedHandler = this.onSnoozeDurationChanged.bindAsEventListener(this);
+
 		Mojo.Log.info("$$$$$$$$ Reminder-assistant setup:start");
 		this.service = getCalendarService();
 
@@ -36,13 +227,18 @@ var ReminderAssistant = Class.create({
 		this.onDismissHandler = this.onDismiss.bindAsEventListener(this);
 		this.onEmailHandler = this.onEmail.bindAsEventListener(this);
 		this.onSnoozeHandler = this.onSnooze.bindAsEventListener(this);
-	
+		this.setSnoozeHandler = this.handleSetSnoozeTap.bindAsEventListener(this);
+		this.snzPlusMinusHandler = this.handleSnzPlusMinus.bindAsEventListener(this);
 		this.updateMostRecentReminder();
 		Mojo.Log.info("$$$$$$$$ Reminder-assistant setup:end");
 	},
     
 	cleanup: function() {
 		Mojo.Log.info("$$$$$$$$ Reminder-assistant cleanup:start:");
+
+		//store the reminders in a cookie so they survive reboot		
+		this.reminders.saveReminders();
+
 		this.reminders.stopObservingReminders('alert');
 		
 		getAppAssistant().openReminderAlert = null;
@@ -60,6 +256,9 @@ var ReminderAssistant = Class.create({
 			}
 		}
 		Mojo.Log.info("$$$$$$$$ Reminder-assistant cleanup:end:");
+
+		//remove the Notification repeat task
+		this.removePlayAlarmSoundTask();
 	},
 	
 	remindersUpdated: function() {
@@ -78,6 +277,8 @@ var ReminderAssistant = Class.create({
 			this.updateMostRecentReminder();
 		}
 		Mojo.Log.info("$$$$$$$$ Reminder-assistant remindersUpdated: end");
+		//setup the notification repeat task
+		this.schedulePlayAlarmSoundTask();
 	},
 
 	updateMostRecentReminder: function() {
@@ -95,6 +296,9 @@ var ReminderAssistant = Class.create({
 		this.scheduleAutoCloseTask();
 		this.updateDisplay();
 		Mojo.Log.info("$$$$$$$$ Reminder-assistant updateMostRecentReminder:end");
+
+		//setup the notification repeat task
+		this.schedulePlayAlarmSoundTask();
 	},
 
 	updateDisplay: function() {
@@ -142,6 +346,35 @@ var ReminderAssistant = Class.create({
 		Mojo.Log.info("$$$$$$$$ Reminder-assistant updateDisplay:end");
 	},
 	
+	handleSetSnoozeTap: function() {
+		//deactivate & animate
+		var btnR1 = this.controller.get('reminder-snz-button-row1');
+		btnR1.absolutize();
+		var btnR2 = this.controller.get('reminder-snz-button-row2');;
+		Mojo.Animation.animateStyle(btnR1, 'left', 'bezier', {
+				from:0,
+					to: 530,
+					duration: 0.2,
+					curve:'over-easy',
+					onComplete: function() {btnR2.style.display="";}
+				}
+		);
+	},
+	
+	handleSnzPlusMinus: function(e) {
+		var targetBtn = e.currentTarget.id;
+		var length = this.snoozeOptions.length;
+		if(targetBtn == 'reminder-snz-advance-button') {
+			//advance in time in snz options
+			this.snzIndex = (this.snzIndex + 1) < length ? (this.snzIndex + 1) : 0;
+			this.controller.get('reminder-chosen-snz-text').innerHTML = this.snoozeOptions[this.snzIndex].label;
+		} else if(targetBtn == 'reminder-snz-previous-button') {
+			//back in time in snz options
+			this.snzIndex = (this.snzIndex - 1) < 0 ? (length - 1) :(this.snzIndex - 1);
+			this.controller.get('reminder-chosen-snz-text').innerHTML = this.snoozeOptions[this.snzIndex].label;
+		}
+	},
+	
 	addListeners: function() {
 		this.controller.get('notification-event-title').addEventListener(Mojo.Event.tap, this.onEventHandler);
 		this.controller.get('notification-event-subtitle').addEventListener(Mojo.Event.tap, this.onEventHandler);
@@ -150,6 +383,10 @@ var ReminderAssistant = Class.create({
 		
 		this.controller.get('reminder-dismiss').addEventListener(Mojo.Event.tap, this.onDismissHandler);
 		this.controller.get('reminder-snooze').addEventListener(Mojo.Event.tap, this.onSnoozeHandler);
+		this.controller.get('reminder-setsnooze').addEventListener(Mojo.Event.tap, this.setSnoozeHandler);
+		this.controller.get('reminder-snz-advance-button').addEventListener(Mojo.Event.tap, this.snzPlusMinusHandler);
+		this.controller.get('reminder-snz-previous-button').addEventListener(Mojo.Event.tap, this.snzPlusMinusHandler);
+		this.controller.get('reminder-snz-chosen-button').addEventListener(Mojo.Event.tap, this.onSnoozeDurationChangedHandler);
 	},
 
 	removeListeners: function() {
@@ -167,6 +404,15 @@ var ReminderAssistant = Class.create({
 		if (email) email.removeEventListener(Mojo.Event.tap, this.onEmailHandler);
 		var snooze = this.controller.get('reminder-snooze');
 		if (snooze) snooze.removeEventListener(Mojo.Event.tap, this.onSnoozeHandler);
+		//remove snoozeDuration event listners
+		var setSnooze = this.controller.get('reminder-setsnooze');
+		if (setSnooze) setSnooze.removeEventListener(Mojo.Event.tap, this.setSnoozeHandler);
+		var snoozeAdvance = this.controller.get('reminder-snz-advance-button');
+		if (snoozeAdvance) snoozeAdvance.removeEventListener(Mojo.Event.tap, this.snzPlusMinusHandler);
+		var snoozePrevious = this.controller.get('reminder-snz-previous-button');
+		if (snoozePrevious) snoozePrevious.removeEventListener(Mojo.Event.tap, this.snzPlusMinusHandler);
+		var snoozeChosen = this.controller.get('reminder-snz-chosen-button');
+		if (snoozeChosen) snoozeChosen.removeEventListener(Mojo.Event.tap, this.onSnoozeDurationChangedHandler);
 	},
 	
 	
@@ -271,7 +517,10 @@ var ReminderAssistant = Class.create({
 
 	onDismiss: function(event) {		
 		Mojo.Log.info("$$$$$$$$ Reminder-assistant onDismiss: start: " + this.reminder.id);
-		
+		if (event.down.altKey) {
+			this.reminders.removeAllReminders();
+			return;
+		}
 		this.dismissed = true;
 		this.closeAlert();
 		this.removeReminder();
@@ -304,9 +553,34 @@ var ReminderAssistant = Class.create({
 		this.reminder.userClosed = true;
 		this.reminder.scheduleStartTime = true;
 		this.reissueAutoSnoozedAlerts();
+		
+		//Since we are using the Power TimeOut instead of the taskscheduler we need to remove the 
+		//AtStartTime alarm that was scheduled.
+		this.removeAtStartTime();
 		Mojo.Log.info("$$$$$$$$ Reminder-assistant onSnooze: end: " + this.reminder.id);
 	},
 	
+	/* handle the change event for the snooze duration.
+	 * set the default snooze value to the selection value
+	 * need to figure out how to save this value for reuse when the snooze duration
+	 * expires so that we can set the selection to the same value prevously selected
+	 */
+	onSnoozeDurationChanged: function(event) {
+		Mojo.Log.info("$$$$$$$$ Reminder-assistant onSnoozeDurationChanged: start: " + this.reminder.id);
+		this.DEFAULT_SNOOZE = parseInt(this.snoozeOptions[this.snzIndex].value, 10);
+		this.snoozed =true;
+		this.closeAlert();
+		this.autoSnoozed = false;
+		this.reminder.userClosed = true;
+		this.reminder.scheduleStartTime = true;
+		this.reissueAutoSnoozedAlerts();
+		
+		//Since we are using the Power TimeOut instead of the taskscheduler we need to remove the 
+		//AtStartTime alarm that was scheduled.
+		this.removeAtStartTime();
+		Mojo.Log.info("$$$$$$$$ Reminder-assistant onSnoozeDurationChanged: end: " + this.reminder.id);
+	},
+
 	removeReminder: function() {
 		Mojo.Log.info("$$$$$$$$ Reminder-assistant removeReminder: start: " + this.reminder.id);
 		this.reminders.removeReminder(this.reminder.id);
@@ -333,6 +607,17 @@ var ReminderAssistant = Class.create({
 		this.reminder.scheduleStartTime = false;
 	},
 	
+	removeAtStartTime: function() {
+		Mojo.Log.info("$$$$$$$$ Reminder-assistant removeAtStartTime: start " + this.reminder.id);
+		
+		Mojo.Log.info("$$$$$$$$ Reminder-assistant snooze: removeAtStartTime: calendar-snooze-" + this.reminder.id);
+		this.controller.serviceRequest('palm://com.palm.taskScheduler', {
+					                    method: 'removeTask',
+					                    parameters: {key: 'calendar-snooze-' + this.reminder.id}
+					                	});
+		Mojo.Log.info("$$$$$$$$ Reminder-assistant removeAtStartTime: end " + this.reminder.id);
+	},
+	
 	snooze: function(minutes) {
 		Mojo.Log.info("$$$$$$$$ Reminder-assistant snooze: start: " + this.reminder.id);
 		
@@ -342,13 +627,31 @@ var ReminderAssistant = Class.create({
 			return;
 		}	
 		
-		var snooze = new Date().addMinutes(minutes);
+		var snooze;
+		if(this.snoozed && this.reminder.userClosed == true) {
+			this.reminder.lastSnooze = minutes;
+		}
+		if( minutes == 0) {
+			if( this.snoozed ) {
+				//snoozed as at start time
+				snooze = new Date(this.reminder.time);
+			} else {
+				//this is for the notification repeat
+				snooze = new Date().addMinutes(minutes);
+			}
+		} else if( minutes > 0 ) {
+			snooze = new Date().addMinutes(minutes);
+		} else {
+			snooze = new Date(this.reminder.time).addMinutes(minutes);
+		}
+		
 		Mojo.Log.info("$$$$$$$$ Reminder-assistant snooze: updateTask: calendar-snooze-" + this.reminder.id + "   date = " + snooze.toUTCString());
+	/*		
 		
 		this.controller.serviceRequest('palm://com.palm.taskScheduler', {
 					                    method: 'updateTask',
 					                    parameters: {uri: 'palm://com.palm.applicationManager/open',
-													 arguments: {'id': 'com.palm.app.calendar',
+													 arguments: {'id': 'com.palm.app.calendar2',
 													 			 'params': {'alarmsnooze': this.reminder.id}},
 													 key: 'calendar-snooze-' + this.reminder.id,
 													 start: {date: snooze.toUTCString()},
@@ -356,15 +659,45 @@ var ReminderAssistant = Class.create({
 													 misfirePolicy: {executeNow: true}}
 					                	});
 
+	*/
+
+		//use a powered/timeout alarm so that the reminder survives a reboot
+		var alarmLaunchParams = '{"id":"com.palm.app.calendar","params":{"alarmsnooze":"' + this.reminder.id + '"}}';
 
-		var templateModel = {};
-		var templateStr = $L("Snoozed for #{num} minutes");
-		templateModel.num =minutes;
-		var template = new Template(templateStr);
-		var snoozeText=template.evaluate(templateModel);
-		Mojo.Log.info("$$$$$$$$ Reminder-assistant snooze: showBanner" + this.reminder.id);
-		Mojo.Controller.appController.showBanner({messageText: snoozeText}, null /*launchArguments*/, "calendar-snooze");
+		var newParams = alarmLaunchParams.evalJSON();
+		newParams.params.id = this.reminder.id;
 
+		var newParamsJSON = Object.toJSON(newParams);
+
+		var at = this.dateFormatForScheduler(snooze);
+
+        this.controller.serviceRequest("luna://com.palm.power/timeout/", {
+			method: "set",
+			parameters: {
+				"wakeup": true,
+				"key": 'calendar-snooze-' + this.reminder.id,
+				"uri": "luna://com.palm.applicationManager/launch",
+				"params": newParamsJSON,
+				"at": at
+			},
+			onSuccess: function(payload) {
+				Mojo.Log.info("****************** Reminder-assistant snooze succeeded. ");
+			}.bind(this),
+			onFailure: function() {
+				Mojo.Log.error("****************** Reminder-assistant snooze failed: " );
+			}.bind(this)
+		});
+
+		//Disable the Snoozed For Banner
+		if(this.showSnoozedForBanner) {
+			var templateModel = {};
+			var templateStr = $L("Snoozed for #{num} minutes");
+			templateModel.num =this.snoozeOptions[this.snzIndex].value;
+			var template = new Template(templateStr);
+			var snoozeText=template.evaluate(templateModel);
+			Mojo.Log.info("$$$$$$$$ Reminder-assistant snooze: showBanner" + this.reminder.id);
+			Mojo.Controller.appController.showBanner({messageText: snoozeText}, null /*launchArguments*/, "calendar-snooze");
+		}
 		Mojo.Log.info("$$$$$$$$ Reminder-assistant snooze: end" + this.reminder.id);
 	},
 	
@@ -374,6 +707,11 @@ var ReminderAssistant = Class.create({
 		Mojo.Log.info("$$$$$$$$ Reminder-assistant closeAlert: window.close() ");
 		this.controller.window.close();
 		Mojo.Log.info("$$$$$$$$ Reminder-assistant closeAlert: end ");
+		
+		//reset the notification repeat counter
+		if( this.dismissed || this.snoozed ) {
+			g_notificationRepeatCount = 0;
+		}
 	},
 	
 	autoCloseAlert: function() {
@@ -383,6 +721,14 @@ var ReminderAssistant = Class.create({
 		Mojo.Log.info("$$$$$$$$ Reminder-assistant autoCloseAlert: end " + this.reminder.id);
 	},
 	
+	playAlarmSound: function() {
+		//temporarily set the snooze to 0 will immediately re-trigger allert to get our attention.
+		this.showSnoozedForBanner = false; // banner is disabled because we are not snoozing
+		this.dismissed = false;
+		this.DEFAULT_SNOOZE = 0;
+		this.closeAlert();
+	},
+	
 	specialCleanup:function(){
 		//we need to do this so that cleanup cleans the reminder rightaway		
 		Mojo.Log.info("$$$$$$$$ Reminder-assistant specialCleanup: window Name:" + this.controller.window.name);
@@ -402,7 +748,18 @@ var ReminderAssistant = Class.create({
 					                	});
 	},
 	
+	//taken from com.palm.app.clock/app/models/alarm.js
+	// returns date in format suitable for scheduler service
+	dateFormatForScheduler: function(d) {
+		function twoChars(x) { return ((x>9)?"":"0")+x; }
+		
+		return twoChars(d.getUTCMonth()+1) + "/" + twoChars(d.getUTCDate()) + "/" + twoChars(d.getUTCFullYear()) 
+					+ " " + twoChars(d.getUTCHours()) + ":" + twoChars(d.getUTCMinutes()) + ":00" ;
+	},
+	
 	scheduleAutoCloseTask: function() {
+		//disable autoclose, we want to know what we missed.
+		if(this.stopAutoClose) {return;}	
 		Mojo.Log.info("$$$$$$$$ Reminder-assistant scheduleAutoCloseTask: start " + this.reminder.id);
 		var minCloseTime = new Date(this.reminder.time).addMinutes(15);
 		var closeTime = new Date(this.reminder.time + this.reminder.duration);
@@ -432,6 +789,34 @@ var ReminderAssistant = Class.create({
 		Mojo.Log.info("$$$$$$$$ Reminder-assistant removeAutoCloseTask: end " + this.reminder.id);
 	},
 	
+	schedulePlayAlarmSoundTask: function() {
+		//retrigger reminder every X minutes until we acknowledge it.
+		//notificationRepeatInterval disables the notification repeat
+		//also check to make sure we have not exceeded the max repeat value
+		if( parseFloat(this.notificationRepeatInterval) != 0 && g_notificationRepeatCount < parseInt(this.notificationMaxRepeat)) {
+			g_notificationRepeatCount++;
+			
+			var playSoundTime = new Date();
+			playSoundTime = new Date(playSoundTime.getTime() + parseFloat(this.notificationRepeatInterval)*60*1000);
+
+			this.controller.serviceRequest('palm://com.palm.taskScheduler', {
+				method: 'updateTask',
+				parameters: {uri: 'palm://com.palm.applicationManager/open',
+				arguments: {'id': 'com.palm.app.calendar',
+						'params': {'playalarmsound': 'true'}},
+				key: 'calendar-playalarmsound',
+				start: {date: playSoundTime.toUTCString()}}
+			});
+		}
+	},
+
+	removePlayAlarmSoundTask: function() {
+		this.controller.serviceRequest('palm://com.palm.taskScheduler', {
+			method: 'removeTask',
+			parameters: {key: 'calendar-playalarmsound'}
+		});
+	},
+
   	replaceHTML: function(element, content) {
 		Mojo.Log.info("$$$$$$$$ Reminder-assistant replaceHTML:start");
       	var range = element.ownerDocument.createRange();
diff --git a/usr/palm/applications/com.palm.app.calendar/app/controllers/repeat-assistant.js b/usr/palm/applications/com.palm.app.calendar/app/controllers/repeat-assistant.js
index d6a9c95..c2cc327 100644
--- a/usr/palm/applications/com.palm.app.calendar/app/controllers/repeat-assistant.js
+++ b/usr/palm/applications/com.palm.app.calendar/app/controllers/repeat-assistant.js
@@ -19,6 +19,9 @@ var RepeatAssistant = Class.create({
 		{name: $L('Monthly on (by date)'), units: $L('month(s)')},
 		{name: $L('Monthly on (by week)'), units: $L('month(s)')},
 		{name: $L('Yearly on (by month)...)'), units: $L('year(s)')},
+		{name: $L('Monthly on (by last DoW)...)'), units: $L('month(s)')},
+		{name: $L('Monthly on (by last DofMonth)...)'), units: $L('month(s)')},
+		{name: $L('Monthly custom external'), units: $L('month(s)')}
 	],
 	
 	
@@ -136,15 +139,28 @@ var RepeatAssistant = Class.create({
 		 	this.repeatFreqIndex=2;
 		else if(this.targetEvent.rruleModel.frequency=='MONTHLY')
 		{
+			if(this.targetEvent.rruleModel.byday && this.targetEvent.rruleModel.byday.length > 0) {
+				var ucByDay = parseInt(this.targetEvent.rruleModel.byday[0], 10);
+			}
+			if(this.targetEvent.rruleModel.bymonthday && this.targetEvent.rruleModel.bymonthday.length >0 && this.targetEvent.rruleModel.bymonthday[0] <0) {
+				var ucByLastDay = parseInt(this.targetEvent.rruleModel.bymonthday[0], 10);
+			}
 			var theDate = new Date(this.targetEvent.startTimestamp);
 		    var checkday = getDOWCount(this.targetEvent.startTimestamp).toString();
 			checkday += this.recurrenceRule.dayMap[theDate.getDay()];
-			if ((this.targetEvent.rruleModel.byday) &&
-				(this.targetEvent.rruleModel.byday.length > 0) &&
-				(this.targetEvent.rruleModel.byday[0] == checkday ))
-			 	this.repeatFreqIndex = 4;
-			else
+			if (this.targetEvent.rruleModel.byday && this.targetEvent.rruleModel.byday.length > 0) {
+				if(this.targetEvent.rruleModel.byday.length >1){
+					this.repeatFreqIndex = 8;
+				} else if(this.targetEvent.rruleModel.byday[0] == checkday ){
+					this.repeatFreqIndex = 4;
+				} else if(ucByDay && ucByDay < 0) {
+					this.repeatFreqIndex = 6;
+				}
+			} else if(ucByLastDay && ucByLastDay < 0 ){
+					this.repeatFreqIndex = 7;
+			} else {
 			 	this.repeatFreqIndex = 3;
+			}
 		}
 		else if(this.targetEvent.rruleModel.frequency=='YEARLY')
 		  	this.repeatFreqIndex=5;
@@ -247,8 +263,643 @@ var RepeatAssistant = Class.create({
 				
 	},	
 	
+	// From monthview (Feb is fixed up by hand as necessary)
+	// We try to avoid the DateJS stuff because it's indescribably slow.
+	_monthDays: [ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ],
+	
+	rdayNames: function() {
+		var stday = 0;
+		if(this.startOfWeek==null || this.startOfWeek == 'undefined')
+			this.startOfWeek = 1;
+		stday = this.startOfWeek - 1;
+		var tday = new Date();
+		tday.moveToDayOfWeek(stday);
+		for (var i = 0; i < 7; i++) {
+			this._rdNames[i] = Mojo.Format.formatDate(tday, "E");
+			tday.addDays(1);
+		}
+	},
+	
+	radvanceWk: function(wk, month, year, maxwkn) {
+		var wkn = parseInt(wk, 10);
+		if(this.weekModulusNum != undefined && this.weekModulusNum <= 52 && this.weekModulusNum != 1) {
+			var maxwkn = this.weekModulusNum;
+		}
+		if((wkn > 8) && (wkn < maxwkn)) {
+			return (wkn + 1);
+		} else if((wkn <= 8) && (wkn < maxwkn)) {
+			wkn +=1;
+			var zd = '0';
+			return zd + wkn.toString();
+		} else if(wkn == maxwkn || wkn > maxwkn) {
+			var zd = '01';
+			return zd;
+		}
+	},
+	
+	// draw month function, expects numbers 0 based month
+	canvasRM: function(month, year, context) {
+		// date object
+		var rmon = new Date(year, month, 1);
+		
+		//setup number of days, 1st day(day of week), week number, number of weeks
+		var rd1dayOfMon = rmon.getDay();
+		var rwkNum = this.useISOweekNum === true ? rmon.getISO8601Week() : rmon.getWeekOfYear(this.prefStartDoW);
+		var maxwkn = this.useISOweekNum === true ? new Date((month != 0 ? year : year -1), 11, 28).getISO8601Week() : new Date((month != 0 ? year : year -1), 11, 28).getWeekOfYear(this.prefStartDoW);
+		maxwkn = maxwkn == 0 ? 53 : maxwkn;
+		rwkNum = rwkNum == 0 ? maxwkn : rwkNum;
+		if(this.weekNumOffset !== undefined && this.weekNumOffset !=0) {
+			var wkNum = parseInt(rwkNum,10) + this.weekNumOffset;
+			rwkNum = wkNum > maxwkn ? (wkNum - maxwkn) : wkNum;
+			rwkNum = rwkNum < 10 ? '0' + rwkNum : rwkNum;
+		}
+		if(this.weekModulusNum != undefined && this.weekModulusNum <= 52 && this.weekModulusNum != 1) {
+			rwkNum = (parseInt(rwkNum, 10) % this.weekModulusNum);
+			rwkNum = rwkNum !== 0 ? rwkNum : this.weekModulusNum;
+			rwkNum = rwkNum < 10 ? '0' + rwkNum : rwkNum;
+		}
+		var r1offset = rd1dayOfMon - (this.startOfWeek - 1);
+		if (r1offset < 0) {r1offset += 7;}  //num of days of prev mon
+		if(isLeapYear(year)) {
+			this._monthDays[1] = 29;
+		} else {
+			this._monthDays[1] = 28;
+		}
+		this.RM[context].maxdays = this._monthDays[month];		
+		//setup fonts and spacing
+		this.mthctx[context].fillStyle = "rgb(0, 0, 0)";
+		this.mthctx[context].font = "bold 14px Prelude";
+		this.mthctx[context].textAlign = "left";
+		this.mthctx[context].textBaseline = "top";
+		var top = 2;
+		var leftmargin = 2;
+		var left = 0 + leftmargin;
+		var txt = "";
+		this.colHW = 30;
+		var maxW = 30;
+		this.topCor = 42 + (this.colHW/2); //top margin + half-cell
+		this.leftCor = this.colHW;
+		this.RM[context].fstDayLidx = r1offset;
+		this.RM[context].fstDayTidx = 1;
+		// setup title and week header
+		var titleTxt = Mojo.Format.formatDate(rmon, $L("MMM yyyy"));
+		this.mthctx[context].strokeText(titleTxt, left + 90, top);
+		this.mthctx[context].textAlign = "center";
+		for (var i = 0; i < 7; i++) {
+			txt = this._rdNames[i];
+			left = (i * this.colHW) + this.leftCor + 13;//13 is for font &txt to ctr
+			top = 22;
+			this.mthctx[context].strokeText(txt, left, top);	
+		}
+		this.mthctx[context].fillStyle = "rgb(104, 104, 104)";
+		this.mthctx[context].font = "14px Prelude";
+		this.mthctx[context].textAlign = "left";
+		this.mthctx[context].textBaseline = "alphabetic";
+		for (var j = 0; j < 6; j++) {
+			txt = rwkNum;
+			left = leftmargin;
+			top = (j * this.colHW) + this.topCor + 3; // 3 is for font correction
+			this.mthctx[context].strokeText(txt, left, top);
+			rwkNum = this.radvanceWk(rwkNum, month, year, maxwkn);
+		}
+		//iterate through the date rows
+		var num = 1;
+		this.mthctx[context].fillStyle = "rgb(0, 0, 0)";
+		this.mthctx[context].font = "bold 14px Prelude";
+		this.mthctx[context].textAlign = "center";
+		for (var j=0; j<6; j++) {
+			if (num > this.RM[context].maxdays) {
+				break; }
+			top = (j * this.colHW) + this.topCor + 3;
+			for (var i=0; i<7; i++) {
+				if (j==0 && i ==0) {i = r1offset;}
+				txt = num;
+				left =  (i * this.colHW) + this.leftCor + 13;
+				this.mthctx[context].strokeText(txt, left, top);
+				num +=1;
+				if (num > this.RM[context].maxdays) {
+					break; }
+			}
+		}
+	},
+	
+	RMnextM: function(index) {
+		this.RM[index].month = this.RM[index - 1].month;
+		this.RM[index].year = this.RM[index - 1].year;
+		if(this.RM[index].month == 11) {
+			this.RM[index].month = 0;
+			this.RM[index].year += 1;
+		} else {
+			this.RM[index].month += 1;
+		}
+	},
+	
+	RMprevM: function(index) {
+		this.RM[index].month = this.RM[index + 1].month;
+		this.RM[index].year = this.RM[index + 1].year;
+		if(this.RM[index].month == 0) {
+			this.RM[index].month = 11;
+			this.RM[index].year -= 1;
+		} else {
+			this.RM[index].month -= 1;
+		}
+	},
+	
+	// determin calendar order for the canvas's
+	orderRM: function( stDate, eDate, isAllDay) {
+		//check first
+		if(stDate.getTime() > eDate.getTime) {
+			Mojo.Log.error ("start after end");
+			return;
+		}
+		for(var i=0; i<6; i++) {
+			this.RM[i] = {};
+			this.RM[i].month = "";
+			this.RM[i].year = "";
+			this.RM[i].fstDayLidx = 1;
+			this.RM[i].fstDayTidx = 1;
+			this.RM[i].maxdays = 1;
+		}
+		// date objects
+		var curD = new Date();
+		var curMY = {month: curD.getMonth(), year: curD.getFullYear() };
+		var stMY = {month: stDate.getMonth(), year: stDate.getFullYear() };
+		var eMY = {month: eDate.getMonth(), year: eDate.getFullYear() };
+		this.RMlast.duration = getTimePeriodParts(stDate, eDate, isAllDay);
+		var rwhen = {};
+		rwhen = getTimePeriodParts(curD, stDate, isAllDay);
+		var dura = this.RMlast.duration;
+		// determine duration case
+		if ( (dura.years == 0) && (((dura.months == 6) && (dura.days == 0)) || (dura.months <= 5)) ) {
+			if ( (dura.months <=1) && ((rwhen.months <= 3) && (rwhen.years <=0)) ){
+				// we can fit in 6 months try to get today in the 6 months
+				if(curD.getTime() < stDate.getTime()) {
+					//close future start with curDate 
+					this.redlineSplit.setStyle({borderRight: '1px solid black'});
+					this.RM[0].month = curMY.month;
+					this.RM[0].year = curMY.year;
+					for (var i = 1; i < 6; i++) {
+						this.RMnextM(i);
+					}
+				} else {
+					// in close past start with stDate
+					this.redlineSplit.setStyle({borderRight: '1px solid black'});
+					this.RM[0].month = stMY.month;
+					this.RM[0].year = stMY.year;
+					for (var i = 1; i < 6; i++) {
+						this.RMnextM(i);
+					}
+				}
+			} else {
+				if((curD.getTime() < stDate.getTime()) && (((dura.months == 4) && (dura.days == 0) && (dura.years ==0)) || ((dura.months <4) && (dura.years==0)))){
+					// in 6 months, too far away for today, in future do prev 
+					this.redlineSplit.setStyle({borderRight: '1px solid black'});
+					this.RM[1].month = stMY.month;
+					this.RM[1].year = stMY.year;
+					this.RMprevM(0);
+					this.RMnextM(2);
+					this.RMnextM(3);
+					this.RMnextM(4);
+					this.RMnextM(5);
+				} else {
+					// in past or could be 6 cal months do start + 5
+					this.redlineSplit.setStyle({borderRight: '1px solid black'});
+					this.RM[0].month = stMY.month;
+					this.RM[0].year = stMY.year;
+					for (var i = 1; i < 6; i++) {
+						this.RMnextM(i);
+					}
+				}
+			}
+		} else { //duration won't fit in 6 months
+			if( ((stMY.year == curMY.year) && (stMY.month == curMY.month)) ||
+			  ((stMY.year < curMY.year) ||  ((stMY.year == curMY.year) && (stMY.month < curMY.month))) ){
+			//past or present month - do start + next + next redline split then -- prev + end + next
+				this.redlineSplit.setStyle({borderRight: '2px solid red'});
+				this.RM[0].month = stMY.month;
+				this.RM[0].year = stMY.year;
+				this.RMnextM(1);
+				this.RMnextM(2);
+				this.RM[4].month = eMY.month;
+				this.RM[4].year = eMY.year;
+				this.RMprevM(3);
+				this.RMnextM(5);
+			} else if((stMY.year > curMY.year) ||  ((stMY.year == curMY.year) && (stMY.month > curMY.month))) {
+			// future - do prev + start + next redline split prev + end + next
+				this.redlineSplit.setStyle({borderRight: '2px solid red'});
+				this.RM[1].month = stMY.month;
+				this.RM[1].year = stMY.year;
+				this.RMprevM(0);
+				this.RMnextM(2);
+				this.RM[4].month = eMY.month;
+				this.RM[4].year = eMY.year;
+				this.RMprevM(3);
+				this.RMnextM(5);
+			}
+		}	
+		// call canvasRM
+		for(var k=0; k<6; k++){
+			this.canvasRM(this.RM[k].month, this.RM[k].year, k);
+		}
+
+		// record for next time comparisons
+		this.RMlast.stMY = stMY;
+		this.RMlast.eMY = eMY;
+		this.RMlast.curMY = curMY;
+	},
+	
+	risRendered: function( year, month) {
+		for(var i=0; i<6; i++) {
+			if((this.RM[i].month == month) && (this.RM[i].year == year)) {
+				return i;
+			}
+		}
+		return -1;
+	},
+	
+	//mark days in calendar
+	markDay: function(rdate, imgsrc, color, rx, ry, rwt, rht) {
+		// determine which month, year, date
+		if (rdate instanceof Date == true) { 
+			var whatMn = rdate.getMonth();
+			var whatYr = rdate.getFullYear();
+			var whatDt = rdate.getDate();
+		} else if(rdate !== undefined) {
+			this.rtdate = new Date(rdate);
+			var whatMn = this.rtdate.getMonth();
+			var whatYr = this.rtdate.getFullYear();
+			var whatDt = this.rtdate.getDate();
+		}
+		var rmimgsrc = imgsrc;
+		var idx = this.risRendered(whatYr, whatMn);
+		if(idx == -1) { return; }
+		var fstDayLidx = this.RM[idx].fstDayLidx;
+		var fstDayTidx = this.RM[idx].fstDayTidx;
+		var rRow = Math.floor((whatDt + fstDayLidx -1) / 7);
+		var col = (whatDt + fstDayLidx - 1) % 7;
+		var itop = (rRow * this.colHW) + 40;
+		var ileft = (col * this.colHW) + this.colHW;
+		itop = (ry !== undefined) ? itop + ry : itop;
+		ileft = (rx !== undefined) ? ileft + rx : ileft;
+		if (rmimgsrc !== undefined) {
+			this.mthctx[idx].drawImage(rmimgsrc, ileft, itop, (rwt !== undefined)? rwt : this.colHW,(rht !== undefined)? rht : this.colHW);
+		} else if(color !== undefined) {
+			this.mthctx[idx].fillStyle = color;
+			this.mthctx[idx].fillRect(ileft, itop, this.colHW-2, this.colHW-2);
+		} else {
+			this.mthctx[idx].fillStyle = "rgba(232,227,124,0.5)";
+			this.mthctx[idx].fillRect(ileft, itop, this.colHW-2, this.colHW-2);
+		}
+	},
+	
+	rmMarkD: function() {
+		this.RMlast.duration = getTimePeriodParts(this.RMlast.stD, this.RMlast.eD, this.targetEvent.allDay);
+		var daylen = 3600000*24;
+		if(this.RMlast.duration.months > 7 || this.RMlast.duration.years > 0) {
+			return;
+		}
+		if(Math.floor((this.targetEvent.startTimestamp - this.targetEvent.endTimestamp)/daylen) <=1) {
+			this.RMlast.HMDB = 1;
+			return;
+		}
+		var stTS = new Date(this.RMlast.stMY.year, this.RMlast.stMY.month, this.RMlast.stD.getDate(), 12).getTime();
+		
+		var end = howManyDaysBetween(this.RMlast.stD, this.RMlast.eD) +1;
+		this.RMlast.HMDB = end;
+		this.RMlast.stTS = stTS;
+		for (var z = 0; z < end; z++) {
+			this.markDay(stTS + (z*daylen),
+							this.dImg, 
+							null/*color*/,
+							null/*x adjust*/,
+							this.colHW-2/*y adjust*/ ,
+							this.colHW/*wd adjust*/,
+							2 /*ht adjust*/)
+		}
+	},
+	
+	rmRecur: function() {
+		// this function is after it is a known recurrent model
+		// time of when -- occuring each
+		var rcfrequency = this.targetEvent.rruleModel.frequency;
+		var rccount = this.targetEvent.rruleModel.count;
+		// this is week day names array
+		var rcbyday =  this.targetEvent.rruleModel.byday;
+		// end day
+		var rcuntil = this.targetEvent.rruleModel.until;
+		// howmany times between
+		var rcint = this.targetEvent.rruleModel.interval;
+		// take stTS and duradays to create the base event from the curent event
+		var rcduraD = this.RMlast.HMDB;
+		var rcstTS = this.targetEvent.startTimestamp;
+		var rcstDy = new Date(rcstTS);
+		var rcstD = new Date(Date.UTC(rcstDy.getFullYear(), rcstDy.getMonth(), rcstDy.getDate(), 12));
+		rcstTS = rcstD.getTime();
+		var stDoW = rcstD.getDay();
+		var dlen = 3600000*24;
+		var rcdaysofwk = [];
+		this.recTS = []; // array of timestamps of the recurring evt
+		switch (rcfrequency) {
+				case 'DAILY':
+					var recfreqTS = dlen;
+					break;
+				case 'WEEKLY':
+					var recfreqTS = dlen * 7;
+					break;
+				case 'MONTHLY':
+					var recfreqTS = -1;
+					break;
+				case 'YEARLY':
+					var recfreqTS = -1;
+					break;
+		}
+		this.RMlast.recD.setUTCHours(12);	// set end to noon UTC to match start, UTC get's the right day
+		this.RMlast.recD.setUTCMinutes(0);
+		var recHMDB = howManyDaysBetween(rcstD, this.RMlast.recD) +1;
+		// detect recurr model
+		switch (rcfrequency) {
+			case 'DAILY' : // Do Not Localize
+				// get how many intervals
+				var rcdays = 1 + Math.floor((recHMDB*dlen) / (recfreqTS*rcint));
+				for(var k=0; k < rcdays; k++) { // cycle through intervals
+					this.recTS.push((dlen*k*rcint) + rcstTS);	
+				}
+				while(this.recTS[this.recTS.length -1] > this.RMlast.recD.getTime()){
+					this.recTS.pop();
+				}
+				break;
+				
+            case 'WEEKLY': // Do NOT Localize
+				// find the day numbers from their names
+				var rci = this.targetEvent.rruleModel.byday.length;
+				var rcSundayTS = rcstTS - (stDoW*dlen); 
+				for(var i=0; i < rci; i++) {
+					rcdaysofwk[i] = this.recurrenceRule.dayMap.indexOf(rcbyday[i]);
+				}
+				if(rci > 1) {
+				// get start day dow because it has to be in rcdaysofwk
+					var rcpos = rcdaysofwk.indexOf(stDoW);
+					//need to get to the last of the array before start of next week
+					if(rcpos !== rci - 1){
+						for(var i = rcpos; i <= rci; i++) {
+							for(var j = 0; j < rcduraD; j++) {
+							// array's TS = duration days *milliseconds in a day + (sundays TS + day of week adjustment) 
+							this.recTS.push((dlen*j) + (rcSundayTS + dlen*rcdaysofwk[i]));	
+							}
+						}
+					}
+				}
+				//should be at the first day of the week after start day's week
+				// need to get how many intervals until GetHowManyDays / 7*interval
+				var rcwks = 1 + Math.floor((recHMDB*dlen) / (recfreqTS*rcint)); 
+				for(var k=1; k <= rcwks; k++) { // cycle through intervals
+					var rcwkSunTS = rcSundayTS + (rcint * recfreqTS * k);
+					for(var i = 0; i < rci; i++) { // cycle through days of week
+						for(var j = 0; j < rcduraD; j++) { //cycle duration
+						this.recTS.push((dlen*j) + (rcwkSunTS + dlen*rcdaysofwk[i]));	
+						}
+					}
+				}
+				while(this.recTS[this.recTS.length -1] > this.RMlast.recD.getTime()){
+					this.recTS.pop();
+				}
+            	break;
+                
+            case 'MONTHLY': // Do NOT Localize
+                //Monthly by date
+				var rcmonths = 1 + Math.floor(howManyMonthsBetween(rcstD ,this.RMlast.recD)/rcint);
+                if (this.targetEvent.rruleModel.bymonthday.length > 0) {
+					var rcmonthday = parseInt(this.targetEvent.rruleModel.bymonthday[0], 10);
+					if(rcmonthday > 0) {
+						var rcstmon = rcstD.getMonth();
+						var rcstyear = rcstD.getFullYear();
+						for(var i=0; i<rcmonths; i++) { //cycle through intervals
+							var rcmon = (rcstmon + (i*rcint)) > 11 ? rcstmon + (i*rcint) - 12 : rcstmon + (i*rcint);
+							var rcyear = (rcstmon + (i*rcint)) > 11 ? rcstyear + 1 : rcstyear; 
+							var rcmonTS = Date.UTC(rcyear, rcmon, rcmonthday, 12);
+							var rcmonChk = new Date(rcmonTS);
+							if(rcmonChk.getMonth() === rcmon) { // test valid date in the month
+								for(var j=0; j<rcduraD; j++) { // cycle through duration
+									this.recTS.push(rcmonTS + (j*dlen));
+								}
+							}
+						}
+					} else if(rcmonthday < 0) {
+						var rcstmon = rcstD.getMonth();
+						var rcstyear = rcstD.getFullYear();
+						for(var i=0; i<rcmonths; i++) { //cycle through intervals
+							var rcmon = (rcstmon + (i*rcint)) > 11 ? rcstmon + (i*rcint) - 12 : rcstmon + (i*rcint);
+							var rcmonLast = (rcstmon + 1 + (i*rcint)) > 11 ? rcstmon +1 + (i*rcint) - 12 : rcstmon + 1 +(i*rcint);
+							var rcyear = (rcstmon + 1 + (i*rcint)) > 11 ? rcstyear + 1 : rcstyear; 
+							var rcmonTS = Date.UTC(rcyear, rcmonLast, 1, 12) + rcmonthday*dlen;
+							var rcmonChk = new Date(rcmonTS);
+							if(rcmonChk.getMonth() === rcmon) { // test valid date in the month
+								for(var j=0; j<rcduraD; j++) { // cycle through duration
+									this.recTS.push(rcmonTS + (j*dlen));
+								}
+							}
+						}
+					}
+				} else {
+					// check for multiple by days and last week type set
+					var byDayLen = this.targetEvent.rruleModel.byday.length;
+					var byDayDefault = true;
+					if(byDayLen && byDayLen > 1) {
+						var byDayArray = [];
+						var ford = parseInt(this.targetEvent.rruleModel.byday[0], 10);
+						for(var i=0; i<byDayLen; i++) {
+							var ord = parseInt(this.targetEvent.rruleModel.byday[i], 10);
+							if(ord && ord !== ford) {//we only care about matching bysetpos type repeat
+								byDayDefault = true; //default to just using first byday
+								break; //cal doesn't support multiple pos days in monthly repeat 
+							} else if(ord && ord === ford) {
+								var DoW = this.recurrenceRule.dayMap.indexOf(this.targetEvent.rruleModel.byday[i].substring((ford<0?2:1)));
+								if(byDayArray.indexOf(DoW) === -1) {//not in previously
+									byDayArray.push(DoW);
+								}
+								byDayDefault = false;
+							}
+						} //should have an array with the last days wanted
+						if(!byDayDefault && byDayArray.length > 1) {
+							if(ford<0){
+								var rcmonthday = -1;
+							} else if(ford>0) {
+								var rcmonthday = 1;
+							}
+							var rcstmon = rcstD.getMonth();
+							var rcstyear = rcstD.getFullYear();
+							for(var i=0; i<rcmonths; i++) { //cycle through intervals
+								var rcmon = (rcstmon + (i*rcint)) > 11 ? rcstmon + (i*rcint) - 12 : rcstmon + (i*rcint);
+								if(ford<0){
+									var rcmonLast = (rcstmon + 1 + (i*rcint)) > 11 ? rcstmon +1 + (i*rcint) - 12 : rcstmon + 1 +(i*rcint);
+									var rcyear = (rcstmon + 1 + (i*rcint)) > 11 ? rcstyear + 1 : rcstyear; 
+									var rcmonTS = new Date(rcyear, rcmonLast, 1, 12).getTime() + rcmonthday*dlen;
+								} else if(ford>0){
+									var rcmonLast = (rcstmon + (i*rcint)) > 11 ? rcstmon + (i*rcint) - 12 : rcstmon +(i*rcint);
+									var rcyear = (rcstmon + (i*rcint)) > 11 ? rcstyear + 1 : rcstyear; 
+									var rcmonTS = new Date(rcyear, rcmonLast, 1, 12).getTime();
+								}
+								var rcDoW = new Date(rcmonTS).getDay();
+								for(var k=0; k< Math.abs(ford); k++) {
+									while(byDayArray.indexOf(rcDoW) === -1) {
+										rcmonTS = rcmonTS + rcmonthday*dlen;
+										rcDoW = new Date(rcmonTS).getDay();
+									}
+									if(k !== Math.abs(ford) - 1){
+										rcmonTS = rcmonTS + rcmonthday*dlen;
+										var rcDoW = new Date(rcmonTS).getDay();
+									}
+								}
+								var rcmonChk = new Date(rcmonTS);
+								if(rcmonChk.getMonth() === rcmon) { // test valid date in the month
+									for(var j=0; j<rcduraD; j++) { // cycle through duration
+										this.recTS.push(rcmonTS + (j*dlen));
+									}
+								}
+							}
+						} else {
+							byDayDefault = true; // just one byday
+						}
+					} else if(byDayLen === 1 || byDayDefault) {
+						var ucoldByDay = parseInt(this.targetEvent.rruleModel.byday[0], 10);
+						if(ucoldByDay && ucoldByDay > 0) {
+							var nth = getDOWCount(this.targetEvent.startTimestamp);
+							var rcmonths = 1 + Math.floor(howManyMonthsBetween(rcstD ,this.RMlast.recD)/rcint);
+							var rcstmon = rcstD.getMonth();
+							var rcstyear = rcstD.getFullYear();
+							var rcwantday = rcstD.getDay();
+							for(var i=0; i<rcmonths; i++) { // cycle through intervals
+								var rcmon = (rcstmon + (i*rcint)) > 11 ? rcstmon + (i*rcint) - 12 : rcstmon + (i*rcint);
+								var rcyear = (rcstmon + (i*rcint)) > 11 ? rcstyear + 1 : rcstyear;
+								var rcmonD = new Date(Date.UTC(rcyear, rcmon, 1, 12));
+								var rcfstday = rcmonD.getDay();
+								var rcaddTS = ((rcwantday - rcfstday) < 0) ? ((rcwantday - rcfstday) + 7)*dlen : (rcwantday - rcfstday)*dlen;
+								var rcmonTS = rcmonD.getTime() + rcaddTS + 7*dlen*(nth-1);
+								var rcmonChk = new Date(rcmonTS);
+								if(rcmonChk.getMonth() === rcmon) { // test valid date in the month
+									for(var j=0; j<rcduraD; j++) { // cycle through duration
+										this.recTS.push(rcmonTS + (j*dlen));
+									}
+								}
+							}
+						} else if(ucoldByDay && ucoldByDay <0) {
+							var nth = ucoldByDay;
+							var rcmonths = 1 + Math.floor(howManyMonthsBetween(rcstD ,this.RMlast.recD)/rcint);
+							var rcstmon = rcstD.getMonth();
+							var rcstyear = rcstD.getFullYear();
+							var rcwantday = rcstD.getDay();
+							for(var i=0; i<rcmonths; i++) { // cycle through intervals
+								var rcmon = (rcstmon + (i*rcint)) > 11 ? rcstmon + (i*rcint) - 12 : rcstmon + (i*rcint);
+								var rcmonLast = (rcstmon + 1 + (i*rcint)) > 11 ? rcstmon +1 + (i*rcint) - 12 : rcstmon + 1 +(i*rcint);
+								var rcyear = (rcstmon + 1 + (i*rcint)) > 11 ? rcstyear + 1 : rcstyear; 
+								var rcmonD = new Date(Date.UTC(rcyear, rcmonLast, 1, 12) - dlen);
+								var rcLstday = rcmonD.getDay();
+								var rcaddTS = ((rcwantday - rcLstday) > 0) ? ((rcwantday - rcLstday) - 7)*dlen : (rcwantday - rcLstday)*dlen;
+								var rcmonTS = rcmonD.getTime() + rcaddTS + 7*dlen*(nth+1);
+								var rcmonChk = new Date(rcmonTS);
+								if(rcmonChk.getMonth() === rcmon) { // test valid date in the month
+									for(var j=0; j<rcduraD; j++) { // cycle through duration
+										this.recTS.push(rcmonTS + (j*dlen));
+									}
+								}
+							}
+						}
+					}
+				}
+				while(this.recTS[this.recTS.length -1] > this.RMlast.recD.getTime()){
+					this.recTS.pop();
+				}
+				break;
+				
+			default:                
+				break;
+		}
+		this.rcexTS = [];
+		// pull out the exceptions
+		if(this.targetEvent.exdates !== undefined) {
+			if(this.targetEvent.exdates !== "") {
+				
+				var rcexstr = this.targetEvent.exdates.split("\r\n");
+				for(var i=0; i<rcexstr.length; i++){
+					var idx = rcexstr[i].indexOf(":");
+					if(idx !== -1) {
+						rcexstr[i] = rcexstr[i].substring(idx +1);
+					}
+				}
+				for(var j=0; j<rcexstr.length; j++) {
+					var rcyear = rcexstr[j].substring(0,4);
+					var rcmon = parseInt(rcexstr[j].substring(4,6), 10) -1;
+					var rcday = parseInt(rcexstr[j].substring(6,8), 10);
+					this.rcexTS.push(Date.UTC(rcyear, rcmon, rcday, 12));
+				}
+				// pull exdates out of array
+				for(var k=0; k<this.rcexTS.length; k++) {
+					var idx = this.recTS.indexOf(this.rcexTS[k]);
+					if(idx !== -1) {
+						this.recTS.splice(idx,1);
+					}
+				}
+			}
+		}
+		// mark the recurrence days
+		var rcstop = this.recTS.length;
+		for(var k=0; k<rcstop; k++){
+			this.markDay(this.recTS[k],
+							this.rImg, 
+							null/*color*/,
+							null/*x adjust*/,
+							this.colHW-2/*y adjust*/ ,
+							this.colHW/*wd adjust*/,
+							2 /*ht adjust*/)
+		}
+		
+	},
+	
+	rmEval: function() {
+		this.RMlast.stD = new Date(this.targetEvent.startTimestamp);
+		this.RMlast.eD = new Date(this.targetEvent.endTimestamp);
+		if(this.repeatForeverChecked != true) {
+			this.RMlast.recD = this.endDateModel.date;
+		} else if(this.repeatForeverChecked == true) {
+			// go out 6 calendar months
+			this.RMlast.recD = new Date(this.RMlast.eD.getMonth() + 5 > 11 ? this.RMlast.eD.getFullYear() + 1 : this.RMlast.eD.getFullYear(), this.RMlast.eD.getMonth() + 5 > 11 ? this.RMlast.eD.getMonth() - 7 : this.RMlast.eD.getMonth() + 5, this.RMlast.eD.getDate());
+		}
+		this.rmdoRec = true;
+		return;
+	},
+	
 	setup: function() {
 		//Mojo.Log.info("repeat-assistant:setup");
+		this.weekModulusNum = 1;
+		this.weekNumOffset = 0;
+		this.useISOweekNum = false;
+		this.prefStartDoW = 0;
+		this.weekCookie = new Mojo.Model.Cookie('WeekViewEnhanced');
+		if (this.weekCookie) {
+			var weekcookie = this.weekCookie.get();
+			if(weekcookie) {
+				if(weekcookie.weeknumoffset !== undefined) {
+						this.weekNumOffset = parseInt(weekcookie.weeknumoffset, 10);
+				} else {
+						this.weekNumOffset = 0;
+				}
+				if(weekcookie.weekmodulusnum !== undefined) {
+						this.weekModulusNum = parseInt(weekcookie.weekmodulusnum, 10);
+				} else {
+						this.weekModulusNum = 1;
+				}
+				if (weekcookie.useisoweeknum !== undefined) {
+					this.useISOweekNum = weekcookie.useisoweeknum;
+				} else {
+					this.useISOweekNum = false;
+				}
+				if (weekcookie.prefsstartofweek !== undefined) {
+					this.prefStartDoW = parseInt(weekcookie.prefsstartofweek, 10) -1;
+				} else {
+					this.prefStartDoW = 0;
+				}
+			}
+		}
 		this.appMenuModel= { visible:true, 
 					label:$L('Calendar'), 
 					items: [ Mojo.Menu.editItem,
@@ -271,6 +922,18 @@ var RepeatAssistant = Class.create({
 		this.service = getCalendarService();
 		this.requests = [];	
 		
+		// setup button & button row
+		var butRowWrapDiv = this.controller.get("dtl_checkbox_div").parentNode;
+		var fevrDiv = this.controller.get("dtl_checkbox_div");
+		butRowWrapDiv.removeChild(fevrDiv);
+		butRowWrapDiv.innerHTML = '<table width="100%"><tr><td width="80%">' +
+					'<div id="dtl_checkbox_div">' +
+						'<div id="dtl_forever_cb" x-mojo-element="CheckBox" class="icon left repeat-checkbox" ></div>' +
+						'<div class="title" x-mojo-loc="">' + $L("Forever") + '</div>' +
+					'</div></td>' + '<td width="20%">' + 
+						'<div x-mojo-element="Button" id="rpDrawerBtn" class="rpDrawerBtnClass"></div>' +
+					'</td></tr></table>';
+		
 		this.foreverCheckboxModel = {
 			value: false
 		};
@@ -348,6 +1011,34 @@ var RepeatAssistant = Class.create({
 		var template = $L("1#Yearly on #{month} 1st|2#Yearly on #{month} 2nd|3#Yearly on #{month} 3rd|21#Yearly on #{month} 21st|22#Yearly on #{month} 22nd|23#Yearly on #{month} 23rd|31#Yearly on #{month} 31st|#Yearly on #{month} #{day}th");	
 		this.freqs[4].name = Mojo.Format.formatChoice(templateModel.day, template, templateModel);
 		
+		var ucLastDay = getIsLastProps(this.targetEvent.startTimestamp);
+		this.hasUClastProps = false;
+		if((ucLastDay && ucLastDay.lastweek) ||
+			(this.targetEvent.rruleModel.byday && this.targetEvent.rruleModel.byday.length > 0 && parseInt(this.targetEvent.rruleModel.byday[0],10) <0) ||
+			(this.targetEvent.rruleModel.bymonthday && this.targetEvent.rruleModel.bymonthday.length >0 && this.targetEvent.rruleModel.bymonthday[0] <0) ) {
+			
+			this.hasUClastProps = true;
+			templateModel = {};
+			templateModel.dayOfWeek = Mojo.Format.formatDate(date, "EEEE");
+			templateModel.dowCount = 1;
+			var template = $L("#Monthly on the last #{dayOfWeek}");	
+			this.freqs[5].name = Mojo.Format.formatChoice(templateModel.dowCount, template, templateModel);
+			
+			templateModel = {};
+			templateModel.dayOfWeek = Mojo.Format.formatDate(date, "EEEE");
+			var num = parseInt(ucLastDay.lastday,10);
+			templateModel.dowCount = Math.abs(num);
+			var template = $L("1#Monthly on the last day|2#Monthly on the 2nd to last day|3#Monthly on the 3rd to last day|#Monthly on the #{dowCount}th to last day");	
+			this.freqs[6].name = Mojo.Format.formatChoice(templateModel.dowCount, template, templateModel);
+		}
+		
+		if(this.repeatFreqIndex === 8) { //case of an unsupported repeat made externally
+			// save the original rrule 
+			this.uberExtRule = {rrule: this.targetEvent.rrule,
+								exdates: this.targetEvent.exdates,
+								rruleModel: Object.clone(this.targetEvent.rruleModel)};
+		}
+		
 		var button = Mojo.View.render({object: {text: this.freqs[this.repeatFreqIndex-1].name,
 									buttonId: 'freqButton'}, template: "edit/popupButton"});
 		this.controller.get('repeat_freq').insert(button);
@@ -383,13 +1074,103 @@ var RepeatAssistant = Class.create({
 			modelProperty:'value'
 		}
 			
-		
+		// setup canvas & drawer
+		var parentDiv = this.controller.get("foreverdiv").parentNode;
+		var repeatUntilDiv = this.controller.get("repeat_until_row");
+		//var rpGroupTitle = this.controller.get("foreverdiv").parentNode.parentNode;
+		//rpGroupTitle.setAttribute("id", "rpDrawerBtn");
+		//rpGroupTitle.setAttribute('x-mojo-tap-highlight', "momentary");
+		var newDiv = this.controller.document.createElement("div");
+        newDiv.setAttribute("id", "rpDrawer");
+        newDiv.setAttribute("x-mojo-element", "Drawer");
+        newDiv.setAttribute("class", "drawerClass");
+        newDiv.setAttribute("name", "RPmonth_view");
+        newDiv.innerHTML = '<div id="RPscrol" x-mojo-element="Scroller"><div id="RPscrolct">' +
+				'<div id="RPmonth_0" class="RPmv">' +
+				'<canvas id="RPleft0" width="240" height="220" left="0"></canvas>' +
+				'</div><div id="RPmonth_1" class="RPmv">' +
+				'<canvas id="RPleft1" width="240" height="220"></canvas>' +
+				'</div><div id="RPmonth_2" class="RPmv">' +
+				'<canvas id="RPleft2" width="240" height="220"></canvas>' +
+				'</div><div id="RPmonth_3" class="RPmv">' +
+				'<canvas id="RPright0" width="240" height="220"></canvas>' +
+				'</div><div id="RPmonth_4" class="RPmv">' +
+				'<canvas id="RPright1" width="240" height="220"></canvas>' +
+				'</div><div id="RPmonth_5" class="RPmv">' +
+				'<canvas id="RPright2" width="280" height="220"></canvas></div></div></div>';
+        parentDiv.insertBefore(newDiv, repeatUntilDiv);
+		// drawer & scroller setup
+		this.controller.setupWidget("RPscrol",{mode: 'horizontal-snap'}, {snapElements: {x:[this.controller.get("RPmonth_0"), this.controller.get("RPmonth_1"), this.controller.get("RPmonth_2"), this.controller.get("RPmonth_3"), this.controller.get("RPmonth_4"), this.controller.get("RPmonth_5")]}});
+		this.dModel = {open:false};
+		this.controller.setupWidget('rpDrawer', {property:'open', drawerBottomOffset: 50}, this.dModel);
+		this.rpdrawer = this.controller.get('rpDrawer');
+		this.controller.setupWidget("rpDrawerBtn",
+			{},
+			{
+				label : "",
+				disabled: false
+			}
+		);
+		// setup month canvas context
+		this.redlineSplit = this.controller.get("RPmonth_2");
+		this.mthctx = [];
+		this.left0 = this.controller.get("RPleft0");
+		this.mthctx[0] = this.left0.getContext('2d');
+		this.left1 = this.controller.get("RPleft1");
+		this.mthctx[1] = this.left1.getContext('2d');
+		this.left2 = this.controller.get("RPleft2");
+		this.mthctx[2] = this.left2.getContext('2d');
+		this.right0 = this.controller.get("RPright0");
+		this.mthctx[3] = this.right0.getContext('2d');
+		this.right1 = this.controller.get("RPright1");
+		this.mthctx[4] = this.right1.getContext('2d');
+		this.right2 = this.controller.get("RPright2");
+		this.mthctx[5] = this.right2.getContext('2d');
+		// setup vars
+		this.startOfWeek = getPrefs().startOfWeek;
+		this._rdNames = [];
+		this.RMlast = {};
+		this.RMlast.duration = {years: 0, months: 0, days: 0, hours: 0, minutes: 0};
+		this.RM = [];
+		this.topCor = "";
+		this.leftCor = "";
+		this.rtdayimg = new Image();
+		this.rtdayimg.src = "./images/week-current-day.png";
+		this.rmdoRec = false;
+		this.rdayNames();
+		this.rmEval();
+		this.orderRM(this.RMlast.stD, this.RMlast.recD, this.targetEvent.allDay);
+		this.stImg = new Image();
+		this.stImg.src = "./images/day-allday-event-green-center.png";
+		this.eImg = new Image();
+		this.eImg.src = "./images/day-allday-event-red-center.png";
+		this.dImg = new Image();
+		this.dImg.src = "./images/day-event-green.png";
+		this.rImg = new Image();
+		this.rImg.src = "./images/day-event-yellow.png";
+		this.rmScroller = this.controller.get('RPscrol');
+		this.rtDate = new Date();
+		this.rmcalHold = false;
+		this.rmUpdate = false;
 	},
 	
+	rmScrollTo: function(x) {
+		if (x instanceof Date == true) { 
+			var whatMn = x.getMonth();
+			var whatYr = x.getFullYear();
+			var idx = this.risRendered(whatYr, whatMn);
+		} else if(x >= 0 && x <= 6) {
+			var idx = x;
+		}
+		//idx = idx * 241;
+		//idx = -idx;
+		this.controller.get('RPscrol').mojo.setSnapIndex(idx, true);
+	},
 	
 	intervalConstruct:function(event){
 		//Mojo.Log.info("in interval construct");
 		this.targetEvent.rruleModel.interval = event.value;
+		this.rmUpdate = true;
 		this.constructRecurrenceString();
 		
 	},
@@ -408,6 +1189,7 @@ var RepeatAssistant = Class.create({
 	
 	endDateUpdate: function(event) {
 		this.recurConstruct(new Date(event.value),true);
+		this.rmUpdate = true;
 	},
 	
 	recurConstruct:function(time,setdefaultEndValidity){
@@ -427,7 +1209,6 @@ var RepeatAssistant = Class.create({
 		this.targetEvent.rruleModel.until= this.recurrenceRule.calculateRecurTime(this.targetEvent.endValidity);
 		//calculate the number of occurences from start date
 		this.constructRecurrenceString();
-		
 	},
 	
 	constructRecurrenceString:function(){
@@ -444,11 +1225,13 @@ var RepeatAssistant = Class.create({
 			this.recurrenceRule.constructRRuleFromModel(this.targetEvent);
 			this.service.getOccurenceCount(this.targetEvent.startTimestamp, this.targetEvent.rrule,this.targetEvent.endValidity,this.buildRepeatInfo.bind(this), this.controller);
 		}
+		if (this.rmUpdate) {this.rmHandleUpdate();}
 	},
 	
 	handleForeverTap: function() {
 		Mojo.Log.info('repeat-assistant: handleForeverTap');
-    	if(this.repeatForeverChecked)
+    	this.rmUpdate = true;
+		if(this.repeatForeverChecked)
 			this.repeatForeverChecked = false;
 		else
 			this.repeatForeverChecked = true;
@@ -458,6 +1241,26 @@ var RepeatAssistant = Class.create({
 	handleWeekTap: function() {
 		//Mojo.Log.info('repeat-assistant: handleWeekTap');
     	this.constructRecurrenceString();
+		this.rmUpdate = true;
+	},
+	
+	rmHandleUpdate: function() {
+		// date picker model changed do redraw
+		for(var i = 0;i<6; i++) {
+			this.mthctx[i].clearRect(0, 0, 240,220);
+		}
+		this.rmEval();
+		this.orderRM(this.RMlast.stD, this.RMlast.recD, this.targetEvent.allDay);
+		this.markDay(new Date(), this.rtdayimg);
+		this.markDay(this.RMlast.stD, this.stImg , null/*color*/, 1/*x adjust*/,null/*y adjust*/ ,2 /*wd adjust*/,this.colHW /*ht adjust*/);
+		if(this.repeatForeverChecked != true) {this.markDay(this.RMlast.recD, this.eImg , null/*color*/, this.colHW-2/*x adjust*/,null/*y adjust*/ ,2 /*wd adjust*/,this.colHW /*ht adjust*/);}
+		this.rmMarkD();
+		if(this.rmdoRec) {this.rmRecur(); }
+		if(this.repeatForeverChecked != true) {
+			this.rmScrollTo(this.RMlast.recD);
+		} else {
+			this.rmScrollTo(this.RMlast.stD);
+		}
 	},
 	
 	updateRecurUntil: function(transition) {
@@ -478,18 +1281,17 @@ var RepeatAssistant = Class.create({
 		} else {
 			if (this.repeatForeverChecked == false) {
 				this.slideDown(this.controller.get('repeat_until_row'), 0.4);
-			
+				this.controller.get('rpDrawer').mojo.setOpenState(true);
 				this.foreverCheckboxModel.value = false;
 				this.controller.modelChanged(this.foreverCheckboxModel);
 				this.controller.get('foreverdiv').removeClassName('last');
 					
 			} else {
 				this.slideUp(this.controller.get('repeat_until_row'), 0.4);
-				
+				this.controller.get('rpDrawer').mojo.setOpenState(false);
 				this.foreverCheckboxModel.value = true;
 				this.controller.modelChanged(this.foreverCheckboxModel);
 				this.controller.get('foreverdiv').addClassName('last');
-
 			}
 		}
 		this.updateEndvalidity();
@@ -498,7 +1300,9 @@ var RepeatAssistant = Class.create({
 	
 	updateRecurrence:function(){
 		//Mojo.Log.info("repeat-assistant:UpdateRecurrence");
+		if(this.repeatFreqIndex === 8) {return;} //custom external don't modify
 		var num=0;
+		var nth;
 		
 		var date = new Date(this.targetEvent.startTimestamp);
 		var until= this.targetEvent.rruleModel.until;
@@ -542,6 +1346,29 @@ var RepeatAssistant = Class.create({
 			this.targetEvent.rruleModel.frequency ='YEARLY'; // Do NOT Localize
 			break;
 			
+			case 6:
+			// monthly last DoW
+			this.targetEvent.rruleModel.frequency ='MONTHLY'; // Do NOT Localize
+			nth = "-1";
+			this.targetEvent.rruleModel.byday = [];
+			var date = new Date(this.targetEvent.startTimestamp);
+			var byday=this.recurrenceRule.dayMap[date.getDay()];
+			
+			this.targetEvent.rruleModel.byday.push(nth + byday);
+			break;
+			
+			case 7:
+			// monthly last days
+			this.targetEvent.rruleModel.frequency ='MONTHLY'; // Do NOT Localize
+			this.targetEvent.rruleModel.bymonthday = [];
+			var ucbymonthday = getIsLastProps(date);
+			this.targetEvent.rruleModel.bymonthday.push(ucbymonthday.lastday); 
+			break;
+			
+			case 8:
+			//custom bymonthdays 
+			break;
+			
 		}
 		if(interval>1)
 			this.targetEvent.rruleModel.interval =interval;
@@ -665,26 +1492,63 @@ var RepeatAssistant = Class.create({
 	},
 
 	activate: function() {
+		this.rpDrawerBtnHandler = this.toggleRPdrawer.bindAsEventListener(this);
+		this.controller.get('rpDrawerBtn').observe('mojo-tap', this.rpDrawerBtnHandler);
+		this.markDay(new Date(), this.rtdayimg);
+		this.markDay(this.RMlast.stD, this.stImg , null/*color*/,0/*x adjust*/,null/*y adjust*/ ,2 /*wd adjust*/,this.colHW /*ht adjust*/);
+		if(this.repeatForeverChecked != true) {this.markDay(this.RMlast.recD, this.eImg , null/*color*/, this.colHW-2/*x adjust*/,null/*y adjust*/ ,2 /*wd adjust*/,this.colHW /*ht adjust*/);}
+		this.rmMarkD();
+		if(this.rmdoRec) {this.rmRecur(); }
+		if(this.repeatForeverChecked != true) {
+			this.rmScrollTo(this.RMlast.recD);
+		} else {
+			this.rmScrollTo(this.RMlast.stD);
+		}
+		//tap handlers
+		this.calTapHandler = this.handleCalTap.bind(this);
+		this.calHoldHandler = this.handleCalHold.bind(this);
+		Mojo.Event.listen(this.left0, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.listen(this.left1, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.listen(this.left2, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.listen(this.right0, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.listen(this.right1, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.listen(this.right2, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.listen(this.left0, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.listen(this.left1, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.listen(this.left2, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.listen(this.right0, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.listen(this.right1, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.listen(this.right2, Mojo.Event.hold, this.calHoldHandler);
 	},
 	
 	deactivate: function() {
 		//Mojo.Log.info("repeat-assistant:deactivate");
 		this.controller.stopListening(this.controller.document, Mojo.Event.deactivate, this.blurStage);
-
+		this.controller.get('rpDrawerBtn').stopObserving('mojo-tap', this.rpDrawerBtnHandler);
+		Mojo.Event.stopListening(this.left0, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.stopListening(this.left1, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.stopListening(this.left2, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.stopListening(this.right0, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.stopListening(this.right1, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.stopListening(this.right2, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.stopListening(this.left0, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.stopListening(this.left1, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.stopListening(this.left2, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.stopListening(this.right0, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.stopListening(this.right1, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.stopListening(this.right2, Mojo.Event.hold, this.calHoldHandler);
 	},
 
 	handleRepeatFreq: function(e){
-		
+		var items = [];
+		var len = this.hasUClastProps === true ? 7 : 5;
+		for(var i=0; i<len; i++) {
+			items.push( {label: this.freqs[i].name, command: i+1} );
+		}
 		
 			this.controller.popupSubmenu({onChoose:this.freqChoose, placeNear:e.target,
 			toggleCmd:this.repeatFreqIndex,
-			    items: [
-				    {label: this.freqs[0].name, command: 1}, 
-				    {label: this.freqs[1].name, command: 2}, 
-				    {label: this.freqs[2].name, command: 3}, 
-				    {label: this.freqs[3].name, command: 4}, 
-				    {label: this.freqs[4].name, command: 5}, 
-				]});
+			    items: items});
 			
 		
 	},
@@ -707,7 +1571,7 @@ var RepeatAssistant = Class.create({
 			
 			
 			//update the repeatuntil and reset it to forever
-			
+			this.rmUpdate = true;
 			this.updateEndvalidity();
 		
 			
@@ -717,9 +1581,7 @@ var RepeatAssistant = Class.create({
 				units: this.freqs[this.repeatFreqIndex-1].units,
 			}
 		}));
-		this.updateInterval();
-
-			
+		this.updateInterval();		
 		}
 	},
 	
@@ -749,6 +1611,13 @@ var RepeatAssistant = Class.create({
 		}
 	},
 	
+	toggleRPdrawer: function(e) {
+		var curBtn = e.currentTarget.id;
+		if (curBtn == "rpDrawerBtn") {
+			this.controller.get('rpDrawer').mojo.setOpenState(!this.controller.get('rpDrawer').mojo.getOpenState());
+		}
+	},
+	
 	slideDown: function(div, duration) {
 		div.show();
  		var divDimensions = div.getDimensions();
@@ -779,7 +1648,123 @@ var RepeatAssistant = Class.create({
 	    this.controller.modelChanged(this.endDateModel);
 		this.recurConstruct(this.defaultendValidity,false);
 		
-	}
+	},
+		//Calendar Tap Handlers
+	handleCalHold: function(event) {
+		// set the hold var, send to tap handler
+		this.rmcalHold = true;
+		this.handleCalTap(event);
+	},
+	
+	handleCalTap: function(event) {
+		Event.stop(event);
+		var x = event.down.offsetX;
+		var y = event.down.offsetY;
+		//get rid of tap areas not in calendar day area
+		if(x <= 30 || y <= 40 || x>= 241) {
+			this.rmcalHold = false;
+			return;
+		}
+		var rmcan = event.target.id;
+		switch (rmcan) {
+			case 'RPleft0':
+				var rmindex = 0;
+				break;
+			case 'RPleft1':
+				var rmindex = 1;
+				break;
+			case 'RPleft2':
+				var rmindex = 2;
+				break;
+			case 'RPright0':
+				var rmindex = 3;
+				break;
+			case 'RPright1':
+				var rmindex = 4;
+				break;
+			case 'RPright2':
+				var rmindex = 5;
+				break;
+		}
+		// get first day index month year
+		if (x && y && (rmindex !== undefined)) {
+			var calx = x - 30;
+			var caly = y - 40;
+			var cald1idx = this.RM[rmindex].fstDayLidx;
+			var calcol = Math.floor(calx/this.colHW);
+			var calrow = Math.floor(caly/this.colHW);
+			var caldate = ((calrow * 7) + calcol +1) - cald1idx;
+			if((caldate > this.RM[rmindex].maxdays) || (caldate <= 0)) {
+				// tapped an area with invalid date
+				this.rmcalHold = false;
+				return;
+			}
+			var calmon = this.RM[rmindex].month;
+			var calyear = this.RM[rmindex].year;
+			if((calyear !== undefined) && (calmon !== undefined) && (caldate !== undefined)) {
+				var rpTestDate = new Date(Date.UTC(calyear, calmon, caldate, 12));
+				var rpTestTS = rpTestDate.getTime();
+				if(rpTestTS <= this.targetEvent.startTimestamp || rpTestTS == this.RMlast.recD.getTime() ||  rpTestTS <= this.targetEvent.endTimestamp) {
+					// do nothing - invalid date
+					this.rmcalHold = false;
+					return;
+				}
+				if(this.rmcalHold === false && this.repeatForeverChecked != true) {
+					// setting end date
+					var rpEnd = new Date(this.endDateModel.date.getTime());
+					rpEnd.setFullYear(calyear);
+					rpEnd.setMonth(calmon);
+					rpEnd.setDate(caldate);
+					this.endDateModel.date = rpEnd;
+					this.rmUpdate = true;
+					this.controller.modelChanged(this.endDateModel);
+					Mojo.Event.send(this.controller.get('untilDate'), 'mojo-property-change', {value: this.endDateModel.date} )
+				} else if(this.rmcalHold == true) {
+					// toggling a repeat date
+					if(this.recTS.indexOf(rpTestTS) !== -1 && (this.rcexTS.indexOf(rpTestTS) == -1) || this.rcexTS.length == 0) {
+						// is a recurring event date, put in an exception
+						this.rcexTS.push(rpTestTS);
+						this.rcexTS.sort(function(a,b){return a - b});
+						var rptxt = "";
+						for(var i=0; i<this.rcexTS.length; i++) {
+							var rcyear = new Date(this.rcexTS[i]).getFullYear();
+							var rcmon =  new Date(this.rcexTS[i]).getMonth();
+							var rcday = new Date(this.rcexTS[i]).getDate();
+							rcmon = parseInt(rcmon,10) + 1;
+							rcmon = rcmon <10 ? '0' + rcmon : rcmon.toString();
+							rcday = parseInt(rcday,10) <10 ? '0' + rcday : rcday.toString();
+							if(i>0) { rptxt += "\r\n"; }
+							rptxt += "EXDATE;VALUE=DATE:" + rcyear.toString() + rcmon + rcday;
+						}
+						this.targetEvent.exdates = rptxt;
+						this.rmcalHold = false;
+						this.rmHandleUpdate();
+					} else if (this.recTS.indexOf(rpTestTS) == -1 && (this.rcexTS.indexOf(rpTestTS) != -1) || this.rcexTS.length == 0) {
+						// is an exception, remove exception
+						var idx = this.rcexTS.indexOf(rpTestTS);
+						this.rcexTS.splice(idx,1);
+						this.rcexTS.sort(function(a,b){return a - b});
+						var rptxt = "";
+						for(var i=0; i<this.rcexTS.length; i++) {
+							var rcyear = new Date(this.rcexTS[i]).getFullYear();
+							var rcmon =  new Date(this.rcexTS[i]).getMonth();
+							var rcday = new Date(this.rcexTS[i]).getDate();
+							rcmon = parseInt(rcmon,10) + 1;
+							rcmon = rcmon <10 ? '0' + rcmon : rcmon.toString();
+							rcday = parseInt(rcday,10) <10 ? '0' + rcday : rcday.toString();
+							if(i>0) { rptxt += "\r\n"; }
+							rptxt += "EXDATE;VALUE=DATE:" + rcyear.toString() + rcmon + rcday;
+						}
+						this.targetEvent.exdates = rptxt;
+						this.rmcalHold = false;
+						this.rmHandleUpdate();
+					}
+					this.rmcalHold = false;
+				}
+			}
+		}
+		return;
+	},
 	
 });
 
diff --git a/usr/palm/applications/com.palm.app.calendar/app/controllers/week-assistant.js b/usr/palm/applications/com.palm.app.calendar/app/controllers/week-assistant.js
index 217a467..c993f97 100644
--- a/usr/palm/applications/com.palm.app.calendar/app/controllers/week-assistant.js
+++ b/usr/palm/applications/com.palm.app.calendar/app/controllers/week-assistant.js
@@ -8,11 +8,15 @@ var WeekAssistant = Class.create({
 		this.appMenuModel = { visible:true, 
 									label:$L('Calendar'), 
 									items: [ Mojo.Menu.editItem,
+											{label:$L('New'), items: [{label:$L('Event'), shortcut:'n', command:'newtimed', disabled:false},
+	                													{label:$L('All day event'), shortcut:'d', command:'newallday', disabled:false}] 
+											},
 											{label:$L('Sync Now'), command:'sync', id: 0},
 											{label:$L('Show today'), command:'today', id: 1},
-											{label:$L('Jump to...'), command:'jumpto', id: 2},
+											{label:$L('Jump to...')+ '/' + $L("Templates"), command:'jumpto', id: 2},
 											{label:$L('Missed reminders...'), command:'reminders', id: 3},
 											{label:$L('Preferences & Accounts'), command:Mojo.Menu.prefsCmd, checkEnabled: true},
+											//this.enhancedMenuItem = {label:$L('Enhanced View'), command:'enhanced', chosen: true},
 											{label:$L('Help'), command:Mojo.Menu.helpCmd, disabled:false}]
 								};
 
@@ -31,6 +35,17 @@ var WeekAssistant = Class.create({
 				'cal-color-teal': 	{background: 'rgb(114, 223, 210)', border: 'rgb(68, 177, 164)',	text: 'rgb(0, 42, 36)'},
 			};
 
+		this.uberCategories = [
+				{'name': 'birthday'}, // Do NOT Localize these
+				{'name': 'car'},
+				{'name': 'doctor'},
+				{'name': 'holiday'},
+				{'name': 'kids'},
+				{'name': 'party'},
+				{'name': 'plane'},
+				{'name': 'vacation'},
+			];
+		
 		this.PREV_WEEK = 1;
 		this.THIS_WEEK = 2;
 		this.NEXT_WEEK = 3;
@@ -38,10 +53,194 @@ var WeekAssistant = Class.create({
 		this.requests = [];
 		this.HOUR_HEIGHT = 30;
 		this.TOTAL_HEIGHT = this.HOUR_HEIGHT * 24;
+		this.WEEK_WIDTH	= 320;
 		this.COL_WIDTH = [45, 46, 46, 46, 46, 46, 45];
 		this.COL_POS = [0, 45, 91, 137, 183, 229, 275];
 		this.pendingRender = false;
 		this.pendingCalendarSettingsUpdate = false;
+		this.imgAlarm = new Image();
+		this.imgAlarm.src = "/media/internal/.scrims/ubercalendar/alarm-icon.png";
+		this.imgIcons = new Object();
+		this.ALL_DAY_HEIGHT = 12;
+		this.enhancedView = false;
+		this.weekModulusNum = 1;
+		this.weekNumberTitle = true;
+		this.weekShowSubject = true;
+		this.weekViewShrink = "none";
+		this.weekViewIcons = true;
+		this.weekNumOffset = 0;
+		this.useISOweekNum = false;
+		this.prefStartDoW = 0;
+		this.weekTimeDay = 0;
+		this.workWeekOnly = false;
+		this.ucGroupsFirst = false;
+		this.uberBackGesture = 'last';
+		this.weekCookie = new Mojo.Model.Cookie('WeekViewEnhanced');
+		if (this.weekCookie) {
+			var weekcookie = this.weekCookie.get();
+			if(weekcookie) {
+				if(weekcookie.weekviewenhanced !== undefined) {
+						this.enhancedView = weekcookie.weekviewenhanced;
+				} else {
+						this.enhancedView = false;
+				}
+				if(weekcookie.weeknumoffset !== undefined) {
+						this.weekNumOffset = parseInt(weekcookie.weeknumoffset,10);
+				} else {
+						this.weekNumOffset = 0;
+				}
+				if(weekcookie.weekmodulusnum !== undefined) {
+						this.weekModulusNum = parseInt(weekcookie.weekmodulusnum,10);
+				} else {
+						this.weekModulusNum = 1;
+				}
+				if(weekcookie.weeknumbertitle !== undefined) {
+						this.weekNumberTitle = weekcookie.weeknumbertitle;
+				} else {
+						this.weekNumberTitle = true;
+				}
+				if(weekcookie.weekshowsubject !== undefined) {
+						this.weekShowSubject = weekcookie.weekshowsubject;
+				} else {
+						this.weekShowSubject = true;
+				}
+				if(weekcookie.weekviewicons !== undefined) {
+						this.weekViewIcons = weekcookie.weekviewicons;
+				} else {
+						this.weekViewIcons = true;
+				}
+				if(weekcookie.weekviewshrink !== undefined) {
+						this.weekViewShrink = weekcookie.weekviewshrink;
+				} else {
+						this.weekViewShrink = "none";
+				}
+				if(weekcookie.weektimeday !== undefined) {
+						this.weekTimeDay = parseInt(weekcookie.weektimeday, 10);
+				} else {
+						this.weekTimeDay = 0;
+				}
+				if(weekcookie.uberbackgesture !== undefined) {
+						this.uberBackGesture = weekcookie.uberbackgesture;
+				} else {
+						this.uberBackGesture = 'last';
+				}
+				if (weekcookie.useisoweeknum !== undefined) {
+					this.useISOweekNum = weekcookie.useisoweeknum;
+				} else {
+					this.useISOweekNum = false;
+				}
+				if (weekcookie.prefsstartofweek !== undefined) {
+					this.prefStartDoW = parseInt(weekcookie.prefsstartofweek, 10) -1;
+				} else {
+					this.prefStartDoW = 0;
+				}
+				if (weekcookie.workweekonly !== undefined) {
+					this.workWeekOnly = weekcookie.workweekonly;
+				} else {
+					this.workWeekOnly = false;
+				}
+				if (weekcookie.ucgroupsfirst !== undefined) {
+					this.ucGroupsFirst = weekcookie.ucgroupsfirst;
+				} else {
+					this.ucGroupsFirst = false;
+				}
+			}
+		}
+		this.workTest = !!this.workWeekOnly;
+		this.userUberCats = [];
+		this.catCookie = new Mojo.Model.Cookie("userUberCats");
+		if(this.catCookie) {
+			var catcookie = this.catCookie.get();
+			if(catcookie) {
+				if(catcookie.userubercats && catcookie.userubercats.length > 0){
+					this.userUberCats = catcookie.userubercats;
+				} else {
+					this.userUberCats = this.uberCategories;
+				}
+			} else {
+				this.userUberCats = this.uberCategories;
+			}
+		} else {
+				this.userUberCats = this.uberCategories;
+		}
+		if(this.enhancedView && this.weekViewShrink == "strong") {
+			this.HOUR_HEIGHT = 15;
+		} else if(this.enhancedView && this.weekViewShrink == "medium") {
+			this.HOUR_HEIGHT = 20;
+		} else {
+			this.HOUR_HEIGHT = 30;
+		}
+		if(this.enhancedView && this.workWeekOnly){
+			this.COL_WIDTH = [64, 64, 64, 64, 64, 64, 64];
+			this.COL_POS = [0, 64, 128, 192, 256, 320, 384];
+			this.WEEK_WIDTH = 448;
+		}
+	},
+	
+	uberColors: {"cal-color-blue": "rgba(145,211,234,0.5)",
+		"cal-color-green": "rgba(140,240,140,0.5)",
+		"cal-color-yellow": "rgba(232,227,124,0.5)",
+		"cal-color-gray": "rgba(194,194,194,0.5)",
+		"cal-color-orange": "rgba(251,180,116,0.5)",
+		"cal-color-pink": "rgba(245,156,188,0.5)",
+		"cal-color-red": "rgba(255,151,151,0.5)",
+		"cal-color-purple": "rgba(217,183,255,0.5)",
+		"cal-color-teal": "rgba(114,223,210,0.5)"},
+	
+	uberSetWidth: function(option){
+		if(option){
+			//this.workWeekOnly = true;
+			this.COL_WIDTH = [64, 64, 64, 64, 64, 64, 64];
+			this.COL_POS = [0, 64, 128, 192, 256, 320, 384];
+			this.WEEK_WIDTH = 448;
+		} else{
+			//this.workWeekOnly = false;
+			this.WEEK_WIDTH			= 320;
+			this.COL_WIDTH			= [45, 46, 46, 46, 46, 46, 45];
+			this.COL_POS			= [0, 45, 91, 137, 183, 229, 275];
+		}
+		this.eventHandler.deactivate();
+		this.eventHandler.removeAllHandlers();
+		this.allDayEventHandler.deactivate();
+		this.allDayEventHandler.removeAllHandlers();
+		for (var i = 0; i < 7; i++) {
+			this.eventHandler.addHandler(this.COL_POS[i], 
+										 0, 
+										 this.COL_POS[i] + this.COL_WIDTH[i],
+										 this.TOTAL_HEIGHT,
+										 this.tapHandler.bind(this, i),
+										 this.showSelectedHandler.bind(this, i),
+										 this.clearSelectedHandler.bind(this, i));
+		}
+		for (var i = 0; i < 7; i++) {
+			this.allDayEventHandler.addHandler(this.COL_POS[i], 
+												 0, 
+												 this.COL_POS[i] + this.COL_WIDTH[i],
+												 2 + 5 /* max rows */ * 9 /* row height */,
+												 this.tapHandler.bind(this, i),
+										 		 this.showSelectedHandler.bind(this, i),
+										 		 this.clearSelectedHandler.bind(this, i));
+		}
+		this.eventHandler.activate();
+		this.allDayEventHandler.activate();
+		this.controller.get("week_view").width = this.WEEK_WIDTH + 'px';
+		this.controller.get("wv_scroll_data").width = this.WEEK_WIDTH*3 + 'px';
+		this.controller.get("wv_scroll_events").width = (this.WEEK_WIDTH*3)+3 + 'px';
+		this.controller.get("wv_scrim_prev").width = this.WEEK_WIDTH + 'px';
+		this.controller.get("wv_scrim_next").width = this.WEEK_WIDTH + 'px';
+		this.controller.get("wv_scrim_next").left = (this.WEEK_WIDTH*2)+2 + 'px';
+		this.controller.get("wv_event_container").width = ((this.WEEK_WIDTH*3)+3) + 'px';
+		this.controller.get('wv_eventsDay0').width = this.WEEK_WIDTH+'px';
+		this.controller.get('events0').width = this.WEEK_WIDTH;
+		this.controller.get('wv_eventsDay1').width = this.WEEK_WIDTH+'px';
+		this.controller.get('wv_eventsDay1').left = (this.WEEK_WIDTH+1)+'px';
+		this.controller.get('events1').width = this.WEEK_WIDTH;
+		this.controller.get('wv_eventsDay2').width = this.WEEK_WIDTH+'px';
+		this.controller.get('wv_eventsDay2').left = ((this.WEEK_WIDTH*2)+1)+'px';
+		this.controller.get('events2').width = this.WEEK_WIDTH;
+		this.controller.get('events1').left = this.WEEK_WIDTH+1;
+		this.controller.get('events2').left = ((this.WEEK_WIDTH*2)+2);
+		this.buildWeekTitle();
 	},
 					
 	getEventChangeCallback: function(response) {
@@ -70,25 +269,80 @@ var WeekAssistant = Class.create({
 			if (weekDisplayed) {
 				if (this.active) {
 					this.renderWeek(weekDisplayed, week);
-					if (weekDisplayed == this.THIS_WEEK)
+					if (weekDisplayed == this.THIS_WEEK) {
 						this.scrollToDefault(true);
+					}
 				}
-				else 
+				else {
 					this.pendingRender = true;
+				}
 			}
 				
 		}
 	},
 	
+	clearEventsTapHandlers: function() {
+		if(this.eventsTapHandler !== undefined) {
+			this.eventsTapHandler.deactivate();
+			this.eventsTapHandler.removeAllHandlers();
+			// clear and hide canvas
+			this.evtapcontext.clearRect( 0, 0, this.WEEK_WIDTH, 850)
+			this.evtap.hide();
+		}
+	},
+	
+	getUCGroupsProps: function() {
+		// check for UC groups
+		if(this.uberGroups && this.uberGroups.inUse === true && this.userUberCalGroups && this.userUberCalGroups.length > 0 && this.userUberCalGroups[0].rId !== undefined) {
+			var rID = this.uberGroups.rId;
+			if(rID) {
+				var len = this.userUberCalGroups.length;
+				var idx;
+				for(var i=0; i < len; i++){
+					if(rID === this.userUberCalGroups[i].rId) {
+						var idx = i;
+						break;
+					}
+				}
+				if(idx !== undefined && this.userUberCalGroups[idx].includes && this.userUberCalGroups[idx].includes.length >0) {
+					this.ucGroupIdx = idx;
+					this.ucGroupWorkWeek = this.userUberCalGroups[idx].workWeek;
+				}
+			}
+		} else {
+			this.ucGroupIdx = undefined;
+			this.ucGroupWorkWeek = false;
+		}
+	},
+	
+	whichDayCol: function (x) {
+		// determine which day column is tapped
+		var X = x;
+		var dayCol = null;
+		if (X) {
+			if ((X >= this.COL_POS[0]) && (X < this.COL_POS[1])) {dayCol=0;}
+			else if ((X >= this.COL_POS[1]) && (X < this.COL_POS[2])) {dayCol=1;}
+			else if ((X >= this.COL_POS[2]) && (X < this.COL_POS[3])) {dayCol=2;}
+			else if ((X >= this.COL_POS[3]) && (X < this.COL_POS[4])) {dayCol=3;}
+			else if ((X >= this.COL_POS[4]) && (X < this.COL_POS[5])) {dayCol=4;}
+			else if ((X >= this.COL_POS[5]) && (X < this.COL_POS[6])) {dayCol=5;}
+			else if ((X >= this.COL_POS[6]) && (X < this.WEEK_WIDTH)) {dayCol=6;}
+		}
+		return dayCol;
+	},
+	
 	isWeekDisplayed: function(week) {
 		var weekDateKey = this.keyFromDate(week);
 		var thisWeek = this.getFirstDayOfWeek(getCurrentDateTime());
-		if (weekDateKey == this.keyFromDate(thisWeek))
+		if (weekDateKey == this.keyFromDate(thisWeek)) {
 			return this.THIS_WEEK;
-		if (weekDateKey == this.keyFromDate(thisWeek.addWeeks(-1)))
+		}
+		if (weekDateKey == this.keyFromDate(thisWeek.addWeeks(-1))) {
 			return this.PREV_WEEK;
-		if (weekDateKey == this.keyFromDate(thisWeek.addWeeks(2)))
+		}
+		if (weekDateKey == this.keyFromDate(thisWeek.addWeeks(2))) {
 			return this.NEXT_WEEK;
+		}
 		return 0;
 	},
 	
@@ -103,14 +357,35 @@ var WeekAssistant = Class.create({
 	buildWeekTitle: function() {
 		var today = Date.today().clearTime();
 		var dayOfWeek = this.getFirstDayOfWeek(this.weekDate);
-		
-		var template = new Template($L("Week of #{dateStr}"));
+		var weekNumber = this.useISOweekNum === true ? new Date(this.weekDate).getISO8601Week() : new Date(this.weekDate).getWeekOfYear(this.prefStartDoW);
+		var year = new Date(this.weekDate).getFullYear();
+		var month = new Date(this.weekDate).getMonth();
+		var maxwkn = this.useISOweekNum === true ? new Date((month != 0 ? year : year -1), 11, 28).getISO8601Week() : new Date((month != 0 ? year : year -1), 11, 28).getWeekOfYear(this.prefStartDoW);
+		weekNumber = weekNumber == 0 ? 53 : weekNumber;
+		maxwkn = maxwkn == 0 ? 53 : maxwkn;
+		if(this.weekNumOffset !== undefined && this.weekNumOffset !=0) {
+			var wkNum = parseInt(weekNumber,10) + this.weekNumOffset;
+			weekNumber = wkNum > maxwkn ? (wkNum - maxwkn) : wkNum;
+			weekNumber = weekNumber < 10 ? '0' + weekNumber : weekNumber;
+		}
+		if(this.weekModulusNum != undefined && this.weekModulusNum <= 52 && this.weekModulusNum != 1) {
+			var modNumber = (parseInt(weekNumber, 10) % this.weekModulusNum);
+			modNumber = modNumber !== 0 ? modNumber : this.weekModulusNum;
+			weekNumber = weekNumber + ' (' + modNumber + ')';
+		}
 		var templateModel = {};
+		if(this.weekNumberTitle) {
+			var template = new Template($L("Week") + " #{weekStr}, " + $L("#{dateStr}"));
+			templateModel.weekStr = weekNumber;
+		} else {
+			var template = new Template($L("Week of #{dateStr}"));
+		}
 		templateModel.dateStr = Mojo.Format.formatDate(dayOfWeek, $L("MMM d, yyyy"));
 		this.title.innerHTML = template.evaluate(templateModel);
 		
-		if (this.changingWeeks)
+		if (this.changingWeeks) {
 			return;
+		}
 
 		// Erase the entire cavas
 		this.ctxHeaderLabels.fillStyle = "rgb(228, 228, 226)";
@@ -128,17 +403,21 @@ var WeekAssistant = Class.create({
 		this.ctxHeaderLabels.fillRect(641, 0, 1, 18);
 		
 		dayOfWeek.addWeeks(-1).clearTime();
+		var maxD = 7;
+		if(this.enhancedView && this.workTest){
+			maxD = 5;
+		}
 		var currentDayIndex = -1;
 		this.ctxHeaderLabels.fillStyle = "rgb(0, 0, 0)";
 		for (var i = 0; i < 3; i++) {
-			for (var j = 0; j < 7; j++) {
+			for (var j = 0; j < maxD; j++) {
 				var text1 = String(Mojo.Format.formatDate(dayOfWeek,'E'));
 				var text2 = String(dayOfWeek.getDate());
 				this.ctxHeaderLabels.font = "bold 14px Prelude";
 				var width1 = this.ctxHeaderLabels.measureText(text1).width;
 				this.ctxHeaderLabels.font = "14px Prelude";
 				var width2 = this.ctxHeaderLabels.measureText(text2).width;
-				var xPos = i * 320 + this.COL_POS[j] + (this.COL_WIDTH[j] - (width1 + width2 + 2)) / 2
+				var xPos = i * 320 + this.COL_POS[j] + (this.COL_WIDTH[j] - (width1 + width2 + 2)) / 2;
 				this.ctxHeaderLabels.font = "bold 14px Prelude";
 				this.ctxHeaderLabels.strokeText(text1, 
 												xPos, 
@@ -151,18 +430,22 @@ var WeekAssistant = Class.create({
 				if ((currentDayIndex == -1) && (dayOfWeek.compareTo(today) == 0)) {
 					currentDayIndex = j + (i * 7);
 				}
+				if(this.enhancedView && this.workTest && j === maxD-1){
+					dayOfWeek.addDays(2);
+				}
 				dayOfWeek.addDays(1);
 			}
 		}
 		if (currentDayIndex != -1) { 
 			this.currentDay.setStyle({
 				top: '34px',
-				left: (960 / 21 * currentDayIndex - 8) + 'px',
+				left: (this.enhancedView && this.workTest) ? Math.floor(currentDayIndex/7)*320 + (currentDayIndex%7 * 64) + 'px' :(960 / 21 * currentDayIndex - 8) + 'px',
 				display: 'block'
 			});
 		} else {
-			if (this.currentDay.style.display != 'none')
+			if (this.currentDay.style.display != 'none') {
 				this.currentDay.style.display = 'none';
+			}
 		}
 	},
 	
@@ -187,19 +470,23 @@ var WeekAssistant = Class.create({
 			}
 			
 			// Start day marker
-			if (startTime.getMinutes() == 0)
+			if (startTime.getMinutes() == 0) {
 				this.startDayMarkerTime = Mojo.Format.formatDate(startTime, hourFormat);
-			else
+			}
+			else {
 				this.startDayMarkerTime = Mojo.Format.formatDate(startTime, hourFormat + ':mm');
+			}
 			
 			// Middle Day Marker
 			this.midDayMarkerTime = '12';
 			
 			// End day marker
-			if (endTime.getMinutes() == 0)
+			if (endTime.getMinutes() == 0) {
 				this.endDayMarkerTime = Mojo.Format.formatDate(endTime, hourFormat);
-			else
+			}
+			else {
 				this.endDayMarkerTime = Mojo.Format.formatDate(endTime, hourFormat + ':mm');
+			}
 		}
 	},
 	
@@ -239,7 +526,18 @@ var WeekAssistant = Class.create({
 	currentCalendarUpdated: function() {
 		//Mojo.Log.info("week-assistant: currentCalendarUpdated");
 		var calMgr = getCalendarsManager();
-		if (calMgr.currentCal == 'all') {
+		
+		// update UC groups, calendars changed
+		this.userUberCalGroups = [];
+		this.userUberCalGroups = getUserUberCalGroups();
+		this.uberGroups = getUberGroups();
+		this.getUCGroupsProps();
+		
+		if(this.ucGroupIdx !== undefined) {
+			var name = this.userUberCalGroups[this.ucGroupIdx].groupname;
+			this.controller.get ("wv_current_calendar")	.update			(name);
+			this.controller.get ("wv_calendar_source")	.setAttribute	("class", "header-cal-source");
+		} else if (calMgr.currentCal == 'all') {
 			this.controller.get('wv_current_calendar').update($L("All"));
 			this.controller.get('wv_calendar_source').setAttribute('class', 'header-cal-source');
 		} else {
@@ -309,14 +607,16 @@ var WeekAssistant = Class.create({
 		if (weekData) {
 			this.renderWeek(this.THIS_WEEK, weekData);
 			if (!this.isCacheEntrySubscribed(thisWeek.getTime())) {
-				if (!startDay)
+				if (!startDay) {
 					startDay = thisWeek;
+				}
 				endDay = this.getLastDayOfWeek(thisWeek);
 			}
 		} else {
 			this.renderEmptyWeek(this.THIS_WEEK);
-			if (!startDay)
+			if (!startDay) {
 				startDay = thisWeek;
+			}
 			endDay = this.getLastDayOfWeek(thisWeek);
 		}
 		
@@ -324,14 +624,16 @@ var WeekAssistant = Class.create({
 		if (weekData) {
 			this.renderWeek(this.NEXT_WEEK, weekData);
 			if (!this.isCacheEntrySubscribed(nextWeek.getTime())) {
-				if (!startDay)
+				if (!startDay) {
 					startDay = nextWeek;
+				}
 				endDay = this.getLastDayOfWeek(nextWeek);
 			}
 		} else {
 			this.renderEmptyWeek(this.NEXT_WEEK);
-			if (!startDay)
+			if (!startDay) {
 				startDay = nextWeek;
+			}
 			endDay = this.getLastDayOfWeek(nextWeek);
 		}
 		
@@ -341,8 +643,8 @@ var WeekAssistant = Class.create({
 							   endDay.getTime(), 
 							   this.getEventsCallback.bind(this), 
 							   this.controller,
-							   this.getEventsFailCallback.bind(this),
-							   {useSlices: true}));
+							   this.getEventsFailCallback.bind(this)/*,
+							   {useSlices: true}*/));
 	},
 	
 	updateAll: function() {
@@ -353,8 +655,8 @@ var WeekAssistant = Class.create({
 						   endOfWeek.getTime(), 
 						   this.getEventsCallback.bind(this), 
 						   this.controller,
-						   this.getEventsFailCallback.bind(this),
-						   {useSlices: true}));
+						   this.getEventsFailCallback.bind(this)/*,
+						   {useSlices: true}*/));
 	},
 	
 	getEventsFailCallback: function(response) {
@@ -373,22 +675,67 @@ var WeekAssistant = Class.create({
 		var startPos = this.startDayMarkerPos * this.HOUR_HEIGHT - 1;
 		var midPos = this.midDayMarkerPos * this.HOUR_HEIGHT - 1;
 		var endPos = this.endDayMarkerPos * this.HOUR_HEIGHT - 1;
+		
+		for (var i=1; i<24; i++) {
+			ctx.fillStyle = "rgb(185, 185, 185)";
+			ctx.fillRect(0, i * this.HOUR_HEIGHT - 1, this.WEEK_WIDTH, 1);
+			ctx.fillStyle = "rgb(255, 255, 255)";
+			ctx.fillRect(0, i * this.HOUR_HEIGHT, this.WEEK_WIDTH, 1);
+		}
 
 		// Draw marker lines
 		ctx.fillStyle = "rgb(135, 135, 134)";
-		ctx.fillRect(0, startPos, 320, 2);
-		ctx.fillRect(0, endPos, 320, 2);
+		ctx.fillRect(0, startPos, this.WEEK_WIDTH, 2);
+		ctx.fillRect(0, endPos, this.WEEK_WIDTH, 2);
 		ctx.fillStyle = "rgb(160, 160, 160)";
-		ctx.fillRect(0, midPos, 320, 1);
+		ctx.fillRect(0, midPos, this.WEEK_WIDTH, 1);
 		ctx.fillStyle = "rgb(255, 255, 255)";
-		ctx.fillRect(0, startPos + 2, 320, 1);
-		ctx.fillRect(0, midPos + 1, 320, 1);
-		ctx.fillRect(0, endPos + 2, 320, 1);
+		ctx.fillRect(0, startPos + 2, this.WEEK_WIDTH, 1);
+		ctx.fillRect(0, midPos + 1, this.WEEK_WIDTH, 1);
+		ctx.fillRect(0, endPos + 2, this.WEEK_WIDTH, 1);
 	},
 	
 	renderStartEndDayLabels: function(whichWeek) {
 		var ctx = this.weeks[whichWeek].ctxEvents;
+
+		// Draw marker labels
+		ctx.fillStyle = "rgb(0, 0, 0)";
+		if(this.enhancedView && this.weekViewShrink == "strong") {
+			var ucadd = 12;
+			ctx.font = "bold 10px Prelude";
+		} else if(this.enhancedView && this.weekViewShrink == "medium") {
+			ctx.font = "bold 12px Prelude";
+			var ucadd = 16;
+		} else {
+			ctx.font = "bold 14px Prelude";
+			var ucadd = 24;
+		}
 		
+		if(this.enhancedView && this.workTest && this.weekTimeDay > 4) {
+			var timedaypos = 12 + this.COL_POS[4];
+		} else if(this.enhancedView && ((this.workTest && this.weekTimeDay < 5) || (!this.workTest))) {
+			var timedaypos = 12 + this.COL_POS[this.weekTimeDay];
+		} else {
+			var timedaypos = 12;
+		}
+		
+		if (getTimeFormat() == 'HH24') {
+			for (var i=2; i<24; i+=2) {
+				var endPos = i * this.HOUR_HEIGHT - 1;
+				ctx.strokeText(i, timedaypos, endPos + ucadd);
+			}
+		} else {
+			for (var i=2; i<12; i+=2) {
+				var endPos = i * this.HOUR_HEIGHT - 1;
+				ctx.strokeText(i + " AM", timedaypos, endPos + ucadd);
+			}
+			for (var i=0; i<12; i+=2) {
+				var endPos = (i + 12) * this.HOUR_HEIGHT - 1;
+				var num = (i==0) ? 12 : i;
+				ctx.strokeText(num + " PM", timedaypos, endPos + ucadd);
+			}
+		}
+		/*
 		var startPos = this.startDayMarkerPos * this.HOUR_HEIGHT - 1;
 		var midPos = this.midDayMarkerPos * this.HOUR_HEIGHT - 1;
 		var endPos = this.endDayMarkerPos * this.HOUR_HEIGHT - 1;
@@ -401,6 +748,7 @@ var WeekAssistant = Class.create({
 		if (this.midDayMarkerPos != this.startDayMarkerPos && this.midDayMarkerPos != this.endDayMarkerPos)
 			ctx.strokeText(this.midDayMarkerTime, 12, midPos + 24);
 		ctx.strokeText(this.endDayMarkerTime, 17, endPos + 24);
+		*/
 	},
 	
 	renderEmptyWeek: function(whichWeek) {
@@ -408,7 +756,7 @@ var WeekAssistant = Class.create({
 		
 		// Erase the entire cavas
 		ctx.fillStyle = "rgb(228, 228, 226)";
-		ctx.fillRect(0, 0, 320, this.TOTAL_HEIGHT);
+		ctx.fillRect(0, 0, this.WEEK_WIDTH, this.TOTAL_HEIGHT);
 
 		// Draw vertical day seperator lines
 		var x = 0;
@@ -433,7 +781,7 @@ var WeekAssistant = Class.create({
 				allDayEvents.setAttribute("height", newHeight + 'px');
 				var ctx = this.weeks[whichWeek].ctxAllDay;
 				ctx.fillStyle = "rgb(198, 197, 196)";
-				ctx.fillRect(0, 0, 320, newHeight);
+				ctx.fillRect(0, 0, this.WEEK_WIDTH, newHeight);
 			}
 				
 			if (allDayEvents.style.display != 'block')
@@ -448,7 +796,7 @@ var WeekAssistant = Class.create({
 		}
 	},
 	
-	renderEvent: function(whichWeek, whichDay, event) {
+	renderEvent: function(whichWeek, whichDay, event, eIdx) {
 		var ctx = this.weeks[whichWeek].ctxEvents;
 		var marginLeft = 4;
 		var marginRight = 4;
@@ -488,8 +836,100 @@ var WeekAssistant = Class.create({
 		
 		ctx.fillStyle = "rgba(255, 255, 255, 0.10)";
 		ctx.fillRect(left+1, top+height-3, width-2, 1);
+		
+		if ((event.subject === undefined) && this.enhancedView) {
+			// get more infos for this event
+			getCalendarService().getEvent(event.id,
+					this.getEventDetails.bind(this, whichWeek, whichDay, event),
+					function(response) {Mojo.Log.error(response.errorText);},
+					this.controller);
+		} else if (this.enhancedView){
+			// eventsTap handlers if not from highlight render (fromDefaultTap)
+			if ((!this.fromDefaultTap) && (whichWeek == this.THIS_WEEK)) {
+				var right = left+width;
+				var bottom = top + height;
+				this.eventsTapHandler.addHandler(left,
+													top,
+													right,
+													bottom,
+													this.handleEventsTap.bind(this, event),
+													this.showSelectedEventsTap.bind(this, left, top, width, height),
+													this.clearSelectedEventsTap.bind(this, left, top, width, height),
+													this.handleEventsHold.bind(this, event, left, top, width, height, whichDay, eIdx),
+													null,
+													null,
+													null);
+			}
+			if(this.weekShowSubject) {
+				// Subject
+				ctx.fillStyle = this.colors[event.calendarColor].text;
+				if(this.enhancedView && this.weekViewShrink == "strong") {
+					ctx.font = "8px Prelude";
+				} else if(this.enhancedView && this.weekViewShrink == "medium") {
+					ctx.font = "10px Prelude";
+				} else {
+					ctx.font = "10px Prelude";
+				}
+				var oldAlign = ctx.textAlign;
+				var oldBaseline = ctx.textBaseline;
+				ctx.textAlign = "left";
+				ctx.textBaseline = "top";
+				
+				var text = event.subject;
+				if (text !== undefined) {
+					var length = text.length;
+					var metrics = ctx.measureText(text);
+					while ((metrics.width > eventMaxWidth-3) && (length > 0)) {
+						// too large, try one less
+						length--;
+						text = text.substring(0, length);
+						metrics = ctx.measureText(text);
+					}
+					ctx.fillText(text, left+2, top+1);
+					top += 12
+					if (text.length < event.subject.length) {
+						var text = event.subject.substring(text.length);
+						var length = text.length;
+						var metrics = ctx.measureText(text);
+						while ((metrics.width > eventMaxWidth-3) && (length > 0)) {
+							// too large, try one less
+							length--;
+							text = text.substring(0, length);
+							metrics = ctx.measureText(text);
+						}
+						ctx.fillText(text, left+2, top+1);
+						top += 12
+					}
+				}
+			}
+			// Alarm
+			if ((event.alarm !== undefined) && (event.alarm != "none") && this.weekViewIcons) {
+				try{ ctx.drawImage(this.imgAlarm, left+1, top+2, 12, 12); }catch (e) {}
+			}
+			// Icon
+			if (event.note !== undefined && this.weekViewIcons) {
+				try {
+					var start = getNotesIconParts(event.note);
+					if (start && start[1]) {
+						var icon = start[1];
+						this.imgIcons[icon] && ctx.drawImage(this.imgIcons[icon], left+13, top+2, 12, 12);
+					}
+				} catch(e) {}
+			}
+			if (this.weekShowSubject) {
+				ctx.textAlign = oldAlign;
+				ctx.textBaseline = oldBaseline;
+			}
+		}
 	},
-	
+
+	getEventDetails: function(whichWeek, whichDay, event, details) {
+		event.subject = details.subject;
+		event.alarm = details.alarm;
+		event.note = details.note;
+		this.renderEvent(whichWeek, whichDay, event);
+	},
+
 	renderBusyTime: function(whichWeek, whichDay, busy) {
 		var ctx = this.weeks[whichWeek].ctxEvents;
 		var marginLeft = 1;
@@ -508,17 +948,101 @@ var WeekAssistant = Class.create({
 	renderAllDayEvent: function(whichWeek, whichDay, row, allday) {
 		var ctx = this.weeks[whichWeek].ctxAllDay;
 		var marginLeft = 4;
-		var top = 2 + row * 9;
+		var top = 2 + row * this.ALL_DAY_HEIGHT;
 		var left = this.COL_POS[whichDay] + marginLeft;
-		ctx.drawImage(this.colors[allday.calendarColor].allday, left, top);
+		var eventMaxWidth = this.COL_WIDTH[whichDay] - marginLeft - marginLeft;
+		ctx.drawImage(this.colors[allday.calendarColor].allday, left, top, eventMaxWidth, this.ALL_DAY_HEIGHT);
+
+		if ((allday.subject === undefined) && this.enhancedView) {
+			// get more infos for this event
+			getCalendarService().getEvent(allday.id,
+					this.getAllDayEventDetails.bind(this, whichWeek, whichDay, row, allday),
+					function(response) {Mojo.Log.error(response.errorText);},
+					this.controller);
+		} else if (this.enhancedView) {
+			if(this.weekShowSubject) {
+				// Subject
+				ctx.fillStyle = this.colors[allday.calendarColor].text;
+				if(this.enhancedView && this.weekViewShrink == "strong") {
+					ctx.font = "8px Prelude";
+				} else if(this.enhancedView && this.weekViewShrink == "medium") {
+					ctx.font = "9px Prelude";
+				} else {
+					ctx.font = "9px Prelude";
+				}
+				var oldAlign = ctx.textAlign;
+				var oldBaseline = ctx.textBaseline;
+				ctx.textAlign = "left";
+				ctx.textBaseline = "top";
+				
+				var text = allday.subject;
+				if (text !== undefined) {
+					if ( text.charAt(text.length -1) == ")") {
+						try {
+							var start = allday.subject.indexOf("(");
+							if (start > -1) {
+								var end = allday.subject.length;
+								if ((end > start) && ( end - start <= 13)) {
+									var text = allday.subject.substring(start, end-1);
+								}
+							}
+						} catch(e) {}
+						ctx.fillText(text, left, top);
+					} else {
+						var length = text.length;
+						var metrics = ctx.measureText(text);
+						while ((metrics.width > eventMaxWidth) && (length > 0)) {
+							// too large, try one less
+							length--;
+							text = text.substring(0, length);
+							metrics = ctx.measureText(text);
+						}
+						ctx.fillText(text, left, top);
+					}
+				}
+			}
+			// Alarm
+			if ((allday.alarm !== undefined) && (allday.alarm != "none") && this.weekViewIcons) {
+				try{ ctx.drawImage(this.imgAlarm, left+eventMaxWidth-4, top+2, 10, 10); }catch (e) {}
+			}
+			// Icon
+			if (allday.note !== undefined && this.weekViewIcons) {
+				try {
+					var start = allday.note.indexOf("ICON=");
+					if (start > -1) {
+						start += 5;
+						var end = allday.note.indexOf(";");
+						if (end > start) {
+							var icon = allday.note.substring(start, end);
+							this.imgIcons[icon] && ctx.drawImage(this.imgIcons[icon], left+eventMaxWidth-14, top+2, 10, 10);
+						}
+					}
+				} catch(e) {}
+			}
+			if (this.weekShowSubject) {
+				ctx.textAlign = oldAlign;
+				ctx.textBaseline = oldBaseline;
+			}
+		}
 	},
 	
+	getAllDayEventDetails: function(whichWeek, whichDay, row, event, details) {
+		//Mojo.Log.error(Object.toJSON(details));
+		event.subject = details.subject;
+		event.alarm = details.alarm;
+		event.note = details.note;
+		this.renderAllDayEvent(whichWeek, whichDay, row, event);
+	},
 	
 	renderWeek: function(whichWeek, data) {
 		this.renderEmptyWeek(whichWeek);
 		
 		if ((data == null) || (data.days == null))
 			return;
+
+		if ((whichWeek==this.THIS_WEEK) && (this.enhancedView) && (!this.fromDefaultTap)){
+			this.clearEventsTapHandlers();
+		}
 		
 		// Erase any existing all day events and any selection highlighting
 		if (this.weeks[whichWeek].alldayHeight) {
@@ -539,28 +1063,39 @@ var WeekAssistant = Class.create({
 		    ctxAllDay.fillRect(this.COL_POS[this.selectedCol], 0, this.COL_WIDTH[this.selectedCol], this.weeks[whichWeek].alldayHeight);
 		}	
 				
+		var maxD = 7;
+		if(this.enhancedView && this.workTest){
+			maxD = 5;
+		}
+		
 		//Figure out how high the allday area should be, and adjust the size 		
 		var i;	
 		var maxRows = 0;
-		for(i = 0; i < 7; i++){
-			maxRows = Math.max(data.days[i].allDayEvents.length, maxRows);
+		for(i = 0; i < maxD; i++){
+			if(data && data.days[i] && data.days[i].allDayEvents && data.days[i].allDayEvents.length) {
+				maxRows = Math.max(data.days[i].allDayEvents.length, maxRows);
+			}
 		}
-		if(maxRows > 5)
+		if(maxRows > 5) {
 			maxRows = 5;
+		}
 			
-		this.weeks[whichWeek].alldayHeight = maxRows ? maxRows * 9 + 3 : 0;
+		this.weeks[whichWeek].alldayHeight = maxRows ? maxRows * this.ALL_DAY_HEIGHT + 3 : 0;
 		this.updateWeekHeight(whichWeek);
+		var eventCount = 0;
 		
-		for (var whichDay = 0; whichDay < 7; whichDay++) {
+		for (var whichDay = 0; whichDay < maxD; whichDay++) {
 			var day = data.days[whichDay];
 			
 			// All day events
 			var row = 0;
-			for (i = 0; i < day.allDayEvents.length; i++) {
-				this.renderAllDayEvent(whichWeek, whichDay, row, day.allDayEvents[i]);
-				if (row >= 5)
-					break;
-				row++;
+			if(day && day.allDayEvents) {
+				for (i = 0; i < day.allDayEvents.length; i++) {
+					this.renderAllDayEvent(whichWeek, whichDay, row, day.allDayEvents[i]);
+					if (row >= 5)
+						break;
+					row++;
+				}
 			}
 			
 			// Busy times
@@ -570,7 +1105,8 @@ var WeekAssistant = Class.create({
 			
 			// Events
 			for (i = 0; i < day.events.length; i++) {
-				this.renderEvent(whichWeek, whichDay, day.events[i]);
+				if (whichWeek == this.THIS_WEEK) {eventCount += 1;}
+				this.renderEvent(whichWeek, whichDay, day.events[i], i);
 			}
 		}
 		
@@ -585,15 +1121,51 @@ var WeekAssistant = Class.create({
     		ctxAllDay.fillRect(x+1, 0, 1, this.weeks[whichWeek].alldayHeight);
 		}
 		
+		if ((whichWeek == this.THIS_WEEK) && (this.enhancedView) && (!this.fromDefaultTap)){
+			if (eventCount > 0){
+				this.eventsTapHandler.setDefaultHandler(this.handleDefaultEventsTap.bind(this), null, null);
+								this.eventsTapHandler.activate();
+				this.evtap.show();
+			}
+		}
 		this.renderStartEndDayLabels(whichWeek);
 	},
 	
 	setup: function() {
 		this.clearCache();
+		this.service = getCalendarService();
 		this.reminders = getReminderManager();
 		this.reminders.observeReminders('week', this);
 		this.prevScrollPos=100000; //some high value for the intial scrolling
 		
+		if(this.enhancedView){
+			var headDiv = this.controller.get("wv_header_container1");
+			var scrimDiv = document.createElement('div');
+			scrimDiv.setAttribute('id', "uber-week-panel-scrim");
+			scrimDiv.setAttribute('class', "palm-scrim menu-panel");
+			scrimDiv.setAttribute('x-mojo-menupanel-scrim', "");
+			
+			var panDiv = document.createElement('div');
+			panDiv.setAttribute('id', "uber-week-mp-cont");
+			panDiv.innerHTML = '<div id="uber-week-menu-panel" class="palm-menu-panel" x-mojo-menupanel="">' +
+				'<div class="palm-menu-panel-wrapper" x-mojo-element="Scroller"><div class="palm-list">' +
+		        	'<div class="palm-row first" id="uber-panel-event"></div>' +
+					'<div class="palm-row last" ><div class="palm-row-wrapper"><div ><table width="100%" ><tr>' +
+								'<td width="25%" style="padding:0px;margin:0px;"><div id="uber-week-mp-back" class="palm-button" x-mojo-tap-highlight="momentary" style="overflow:hidden;padding:0px;margin:0px;" x-mojo-loc=""><-</div></td>' +
+								'<td width="25%" style="padding:0px;margin:0px;"><div id="uber-week-mp-map" class="palm-button secondary disabled" x-mojo-tap-highlight="momentary" style="overflow:hidden;padding:0px;margin:0px;" x-mojo-loc="">'+$L("Map")+'</div></td>' +
+								'<td width="25%" style="padding:0px;margin:0px;"><div id="uber-week-mp-delete" class="palm-button negative" x-mojo-tap-highlight="momentary" style="overflow:hidden;padding:0px;margin:0px;" x-mojo-loc="">'+$L("Delete")+'</div></td>' +
+								'<td width="25%" style="padding:0px;margin:0px;"><div id="uber-week-mp-next" class="palm-button" x-mojo-tap-highlight="momentary" style="overflow:hidden;padding:0px;margin:0px;" x-mojo-loc="">-></div></td>' +
+					'</tr></table></div></div>' +
+				'</div></div></div>';
+			
+			this.controller.get("week_view").insertBefore(scrimDiv, headDiv);
+			var scrollDiv = this.controller.get("wv_scroll_container");
+			this.controller.get("week_view").insertBefore(panDiv, scrollDiv);
+			this.uberMenuPanel = this.controller.get("uber-week-menu-panel");
+			this.uberScrim = this.controller.get("uber-week-panel-scrim");
+			this.uberMenuPanel.hide();
+			this.uberScrim.hide();
+		}
 		observeCurrentDateTime('week', this);
 		observeTimeFormat('week', this);
 		observeTimeChange('week',this);
@@ -612,9 +1184,33 @@ var WeekAssistant = Class.create({
 		this.currentDay = this.controller.get('wv_current_day');
 		this.scrollMakerPos = this.controller.get('wv_scroll_marker');
 		this.scrollDataDiv = this.controller.get('wv_scroll_data');
+
+		if (this.enhancedView && this.workWeekOnly) {
+			this.controller.get("week_view").width = this.WEEK_WIDTH + 'px';
+			this.controller.get("wv_scroll_data").width = this.WEEK_WIDTH*3 + 'px';
+			this.controller.get("wv_scroll_events").width = (this.WEEK_WIDTH*3)+3 + 'px';
+			this.controller.get("wv_scrim_prev").width = this.WEEK_WIDTH + 'px';
+			this.controller.get("wv_scrim_next").width = this.WEEK_WIDTH + 'px';
+			this.controller.get("wv_scrim_next").left = (this.WEEK_WIDTH*2)+2 + 'px';
+			this.controller.get("wv_event_container").width = ((this.WEEK_WIDTH*3)+3) + 'px';
+			this.controller.get('wv_eventsDay0').width = this.WEEK_WIDTH+'px';
+			this.controller.get('events0').width = this.WEEK_WIDTH;
+			this.controller.get('wv_eventsDay1').width = this.WEEK_WIDTH+'px';
+			this.controller.get('wv_eventsDay1').left = (this.WEEK_WIDTH+1)+'px';
+			this.controller.get('events1').width = this.WEEK_WIDTH;
+			this.controller.get('wv_eventsDay2').width = this.WEEK_WIDTH+'px';
+			this.controller.get('wv_eventsDay2').left = ((this.WEEK_WIDTH*2)+1)+'px';
+			this.controller.get('events2').width = this.WEEK_WIDTH;
+			this.controller.get('events1').left = this.WEEK_WIDTH+1;
+			this.controller.get('events2').left = ((this.WEEK_WIDTH*2)+2);
+		}
+		for(var i=0; i<this.userUberCats.length; i++) {
+			var catName = this.userUberCats[i].name;
+			this.imgIcons[catName] = new Image();
+			this.imgIcons[catName].src = "/media/internal/.scrims/ubercalendar/icon-" + catName + ".png";
+		}
 		
 		this.weeks = [];
-		this.weeks = [];
 		this.weeks[this.PREV_WEEK] = {};
 		this.weeks[this.THIS_WEEK] = {};
 		this.weeks[this.NEXT_WEEK] = {};
@@ -629,6 +1225,17 @@ var WeekAssistant = Class.create({
 		this.weeks[this.THIS_WEEK].ctxEvents.font = "14px Prelude Bold";
 		this.weeks[this.NEXT_WEEK].ctxEvents.font = "14px Prelude Bold";
 		
+		if (this.enhancedView && this.weekViewShrink != "none") {
+			if(this.weekViewShrink == "strong") {
+				this.controller.get('events0').height = 450;
+				this.controller.get('events1').height = 450;
+				this.controller.get('events2').height = 450;
+			} else {
+				this.controller.get('events0').height = 550;
+				this.controller.get('events1').height = 550;
+				this.controller.get('events2').height = 550;
+			}
+		}
 		this.selectedCol = -1;
 		this.eventHandler = new TapHandler(this.controller.get('events1'));
 		for (var i = 0; i < 7; i++) {
@@ -680,8 +1287,13 @@ var WeekAssistant = Class.create({
 		this.controller.listen('wv_scroll_container', Mojo.Event.scrollStarting, this.scrollStartingHandler);
 		
 //		this.sceneWidth = this.controller.get('wv_scroll_container').getDimensions().width;
-		this.sceneWidth = 320;
+		this.sceneWidth = this.WEEK_WIDTH;
 		
+		// setup UC groups
+		this.userUberCalGroups = [];
+		this.userUberCalGroups = getUserUberCalGroups();
+		this.uberGroups = getUberGroups();
+		this.getUCGroupsProps();
 		this.eventChangedRequest = getCalendarService().getEventChange(this.getEventChangeCallback.bind(this), this.controller);
 		
 		this.buildViewHeader();
@@ -708,25 +1320,68 @@ var WeekAssistant = Class.create({
 		this.menuModel = {
 			visible:true,
 			items: [ 
-						{},
+						{label: $L('Event'), icon: 'new-timed', command: 'newtimed'},
 						{	label:$L('Views'), 
 							toggleCmd:'week', 
 							items:[
+								{label:$L('Agenda'), icon: 'menu-agenda', command:'agenda'},
 								{label:$L('Day'), icon: 'menu-day', command:'day'}, 
 								{label:$L('Week'), icon: 'menu-week', command:'week'}, 
 								{label:$L('Month'), icon: 'menu-month', command:'month'}
 								]},
-						{},
+						{label: $L('All day event'), icon: 'new-allday', command: 'newallday'},
 					]
 			};
 			
 		this.controller.setupWidget(Mojo.Menu.commandMenu, undefined, this.menuModel);
+		//this.enhancedMenuItem.chosen = this.enhancedView;
 		this.controller.setupWidget(Mojo.Menu.appMenu, {omitDefaultItems:true}, this.appMenuModel);
 		this.remindersUpdated(); 	// Update missed reminders menu item
+
+		//var cookie = new Mojo.Model.Cookie("LastView");
+		//cookie.put("week");
 		
     	this.CalSelectorHandler = this.calSelector.bindAsEventListener(this);
 		
 		this.scrolling = 0;
+		//this.getCalId = DayAssistant.getCalId();
+		
+		//Used to detect gesture area hold
+		this.metaKeyDown = false;
+		this.orangeKeyDown = false;
+		
+		//used to copy Event
+		this.copyEvt = null;
+		this.handleEditEventsCallBack = this.editEventsCallBack.bind(this);
+		this.fromEditEventsCallBack = false;
+		//setup canvas for eventsTap
+		if (this.enhancedView) {
+			// insert canvas element
+			var container = this.controller.get('wv_eventsDay1');
+			evtapcanvas = document.createElement('canvas');
+			evtapcanvas.id = 'eventsTap';
+			evtapcanvas.width  = this.WEEK_WIDTH;
+			if(this.weekViewShrink == "strong") {
+				evtapcanvas.height = 450;
+			} else if(this.weekViewShrink == "medium") {
+				evtapcanvas.height = 550;
+			} else {
+				evtapcanvas.height = 850;
+			}
+			container.appendChild(evtapcanvas);
+			this.evtap = this.controller.get('eventsTap');
+			this.evtapcontext = this.controller.get('eventsTap').getContext('2d');
+			// initially hide events tap canvas
+			this.evtap.hide();
+			//setup events taphandler
+			this.fromDefaultTap = false;
+			this.prevListener = this.handleHeldPrev.bind(this);
+			this.nextListener = this.handleHeldNext.bind(this);
+			this.mapListener = this.handleHeldMap.bind(this);
+			this.heldEvtListener = this.handleHeldEvent.bind(this);
+			this.deleteListener = this.handleHeldDelete.bind(this);
+			this.eventsTapHandler = new TapHandler(this.controller.get('eventsTap'));
+		}
 	},
   
 	showJumpTo: function() {
@@ -776,6 +1431,12 @@ var WeekAssistant = Class.create({
 			} else if (event.command == Mojo.Menu.prefsCmd) {
 				Event.stop(event);
 				this.controller.stageController.pushScene('prefs');
+			} else if(event.command =="newtimed"){
+				Event.stop(event);
+				this.controller.stageController.pushScene('edit', 0, 0, false, this.getCalId()/*calendarId*/,0/*subject*/, false, this.handleEditEventsCallBack);
+			} else if(event.command=="newallday"){
+				Event.stop(event);
+				this.controller.stageController.pushScene('edit', 0, 0, true, this.getCalId(),0/*subject*/, false, this.handleEditEventsCallBack);
 			} else if(event.command == Mojo.Menu.helpCmd){
 				getAppManagerService().launchHelp(this.controller);
 			} else if (event.command == 'sync') {
@@ -791,11 +1452,46 @@ var WeekAssistant = Class.create({
 			} else if (event.command == 'reminders') {
 				Event.stop(event);
 				this.controller.stageController.pushScene('reminder-list');
+			} else if (event.command == 'agenda') {
+				Event.stop(event);
+				this.controller.serviceRequest('palm://com.palm.applicationManager', {
+					method: 'launch',
+					parameters: {
+						id: 'com.palm.app.agenda'
+					}
+				});
+				this.menuModel.items[1].toggleCmd = 'week';
+				this.controller.modelChanged(this.menuModel, this);
 			}				
 		}
 		else if(event.type == Mojo.Event.commandEnable && event.command == Mojo.Menu.prefsCmd) {
 			// Enable prefs menuitem for this scene.
 			event.stopPropagation();
+		} else if (event.type == Mojo.Event.back) {
+			if(this.uberHolding){
+				if(this.uberHoldTimeout){
+					this.controller.window.clearTimeout(this.uberHoldTimeout);
+					this.uberHoldTimeout = 0;
+				}
+				this.uberMenuPanel.hide();
+				//Mojo.Log.error("default tap should close and return");
+				this.uberHolding = false;
+				this.uberFirstTapFromHold = false;
+				event.preventDefault();
+				event.stopPropagation();
+				return;
+			}
+			if(this.uberBackGesture == 'month' || (this.uberBackGesture == 'last' && this.uberLastView == 'month' )) {
+				event.preventDefault();
+				event.stopPropagation();
+				this.handleMonthView();
+			} else if(this.uberBackGesture == 'day' || (this.uberBackGesture == 'last' && this.uberLastView == 'day' )) {
+				event.preventDefault();
+				event.stopPropagation();
+				this.handleDayView();
+			} else if(this.uberBackGesture == 'week' || (this.uberBackGesture == 'last' && this.uberLastView == 'week' )) {
+				// default back gesture
+			}
 		}
 	},
 	
@@ -858,7 +1554,19 @@ var WeekAssistant = Class.create({
 	
  	scrollToDefault: function(animate) {
 		if (this.scroller) {
-			this.scroller.mojo.scrollTo(0, -(this.startDayMarkerPos * this.HOUR_HEIGHT - this.weeks[this.THIS_WEEK].alldayHeight) + 20, animate);
+			if(this.enhancedView && this.weekViewShrink !="none") {
+				if(this.weekViewShrink == "strong") {
+					this.scroller.mojo.revealBottom();
+				} else {
+				var allDcorr = (45 - this.weeks[this.THIS_WEEK].alldayHeight - Math.floor(this.HOUR_HEIGHT/8));
+				allDcorr = allDcorr > 3 ? allDcorr : 3 ;
+				this.scroller.mojo.scrollTo(0, -(this.startDayMarkerPos * this.HOUR_HEIGHT - this.weeks[this.THIS_WEEK].alldayHeight) + allDcorr, animate);
+				}
+			} else {
+				var allDcorr = (45 - this.weeks[this.THIS_WEEK].alldayHeight - Math.floor(this.HOUR_HEIGHT/8));
+				allDcorr = allDcorr > 3 ? allDcorr : 3 ;
+				this.scroller.mojo.scrollTo(0, -(this.startDayMarkerPos * this.HOUR_HEIGHT - this.weeks[this.THIS_WEEK].alldayHeight) + allDcorr, animate);
+			}
 		}
 	},
 	
@@ -895,8 +1603,8 @@ var WeekAssistant = Class.create({
 								   this.getLastDayOfWeek(beginWeekNoTime).getTime(), 
 								   this.getEventsCallback.bind(this), 
 								   this.controller,
-								   this.getEventsFailCallback.bind(this),
-								   {useSlices: true}));
+								   this.getEventsFailCallback.bind(this)/*,
+								   {useSlices: true}*/));
 				this.renderEmptyWeek(this.PREV_WEEK);
 			}
 			this.resetPos();
@@ -916,7 +1624,6 @@ var WeekAssistant = Class.create({
 			
 			// Add one week to the Date
 			currentDateTime.addWeeks(1);
-
 			this.changingWeeks = true;
 			setCurrentDateTime(currentDateTime);
 			this.changingWeeks = false;
@@ -937,8 +1644,8 @@ var WeekAssistant = Class.create({
 								   this.getLastDayOfWeek(beginWeekNoTime).getTime(), 
 								   this.getEventsCallback.bind(this), 
 								   this.controller,
-								   this.getEventsFailCallback.bind(this),
-								   {useSlices: true}));
+								   this.getEventsFailCallback.bind(this)/*,
+								   {useSlices: true}*/));
 				this.renderEmptyWeek(this.NEXT_WEEK);
 			}
 			this.resetPos();
@@ -966,10 +1673,58 @@ var WeekAssistant = Class.create({
 	
   	activate: function() {
 		this.active = true;
-		
+		// uc groups
+		this.userUberCalGroups = [];
+		this.userUberCalGroups = getUserUberCalGroups();
+		this.uberGroups = getUberGroups();
+		this.getUCGroupsProps();
+		if(this.enhancedView && this.uberGroups.inUse === true && this.ucGroupWorkWeek !== undefined ){
+			if(this.workWeekOnly !== this.ucGroupWorkWeek){
+				this.workTest = !!this.ucGroupWorkWeek;
+				this.uberSetWidth(this.ucGroupWorkWeek);
+				this.pendingCalendarSettingsUpdate = true;
+			}
+		}
+		if(this.ucGroupIdx != undefined) {
+			buildUberExcludes(this.userUberCalGroups[this.ucGroupIdx].includes);
+		}
+		this.metaKeyDown = false;
+		this.uberLastView = "week";
+		var cookie = new Mojo.Model.Cookie("BackGesture");
+		try {
+			if(cookie) {
+				var lview = cookie.get();
+				if(lview && lview.lastview) {
+					this.uberLastView = lview.lastview;
+				}
+				cookie.put({lastview: "week"});
+			}
+		} catch (e) {}
+		if ((this.uberLastView != "month") && (this.uberLastView != "day")) {
+			this.uberLastView = "week";
+		}
 		this.eventHandler.activate();
 		this.allDayEventHandler.activate();
 		
+		// eventsTap handler & KeyHandler only activate if enhancedview
+		if (this.enhancedView) {
+			if(this.fromEditEventsCallBack == true) { observeCurrentDateTime('week', this);}
+			this.eventsTapHandler.activate();
+			// key handlers for event meta tap and event canvas
+			this.keyUpHandler = this.handleKeyUp.bind(this);
+			this.controller.listen(this.controller.sceneElement, Mojo.Event.keyup, this.keyUpHandler);
+		
+			this.keyDownHandler = this.handleKeyDown.bind(this);
+			this.controller.listen(this.controller.sceneElement, Mojo.Event.keydown, this.keyDownHandler);
+			this.miniHandler = this.handleMini.bind(this);
+			this.controller.listen(this.controller.sceneElement, Mojo.Event.stageActivate, this.miniHandler);
+			this.controller.get ('uber-week-mp-back').observe(Mojo.Event.tap, this.prevListener);
+			this.controller.get ('uber-week-mp-next').observe(Mojo.Event.tap, this.nextListener);
+			this.controller.get ('uber-week-mp-map').observe(Mojo.Event.tap, this.mapListener);
+			this.controller.get ('uber-panel-event').observe(Mojo.Event.tap, this.heldEvtListener);
+			this.controller.get ('uber-week-mp-delete').observe(Mojo.Event.tap, this.deleteListener);
+		}
+		
 		// Calendar Header
 		this.headerTapHandler = this.showJumpTo.bindAsEventListener(this);
 		this.controller.get('wv_view_header').observe(Mojo.Event.tap, this.headerTapHandler);
@@ -994,16 +1749,464 @@ var WeekAssistant = Class.create({
   
 	deactivate: function(){
 		this.active = false;
-		
+		this.metaKeyDown = false;
 		this.eventHandler.deactivate();
 		this.allDayEventHandler.deactivate();
 		
+		//deactivate eventsTap & key handlers
+		if (this.enhancedView) {
+			if(this.eventsTapHandler) {this.eventsTapHandler.deactivate();}
+			// key handlers for event meta tap and event canvas
+			this.controller.stopListening(this.controller.sceneElement, Mojo.Event.keyup, this.keyUpHandler);
+			this.controller.stopListening(this.controller.sceneElement, Mojo.Event.keydown, this.keyDownHandler);
+			this.controller.stopListening(this.controller.sceneElement, Mojo.Event.stageActivate, this.miniHandler);
+			this.controller.get ('uber-week-mp-back').stopObserving(Mojo.Event.tap, this.prevListener);
+			this.controller.get ('uber-week-mp-next').stopObserving(Mojo.Event.tap, this.nextListener);
+			this.controller.get ('uber-week-mp-map').stopObserving(Mojo.Event.tap, this.mapListener);
+			this.controller.get ('uber-panel-event').stopObserving(Mojo.Event.tap, this.heldEvtListener)
+			this.controller.get ('uber-week-mp-delete').stopObserving(Mojo.Event.tap, this.deleteListener);
+			if(this.uberHoldTimeout){
+				this.controller.window.clearTimeout(this.uberHoldTimeout);
+				this.uberHoldTimeout = 0;
+			}
+		}
+		
 		this.controller.get('wv_view_header').stopObserving(Mojo.Event.tap, this.headerTapHandler);
     	this.controller.get('wv_calendar_source').stopObserving(Mojo.Event.tap, this.CalSelectorHandler);
 		this.clearCacheSubscribed();
 		stopObservingCurrentDateTime('week');
 	},
 	
+	// *** EVENT HANDLERS ***
+	
+	handleKeyUp: function(event) {
+		// getsure area up
+		if (event.originalEvent.metaKey || event.originalEvent.keyCode === 231) {
+		//Mojo.Log.info("handleKeyUp detected gesture up key");
+			this.metaKeyDown = false;
+		}
+		// Check for Orange key
+		if (event.originalEvent.altKey || event.originalEvent.keyCode === 129) {
+    	//Mojo.Log.info("handleKeyUp detected ORANGE key");
+			this.orangeKeyDown = false;
+ 		}		
+	},
+	
+	handleKeyDown: function(event) {
+		// getsure area down
+		if (this.active && (event.originalEvent.metaKey || event.originalEvent.keyCode === 231)) {
+    	//Mojo.Log.info("handleKeyUp detected gesture key");
+			this.metaKeyDown = true;
+		}
+		// Check for Orange key
+		if (event.originalEvent.altKey || event.originalEvent.keyCode === 129) {
+    	//Mojo.Log.info("handleKeyUp detected ORANGE key");
+			this.orangeKeyDown = true;
+ 		}		
+	},
+	
+	copiedEvent: function(response) {
+		//copied event saved open in edit scene
+		if(this.copyEvt) {
+			if(response.id == this.copyEvt.id || this.copyEvt.id == undefined || this.copyEvt.id.match(response.id)) {
+	  
+				// NOTE: Event Ids are strings NOT longs
+				if (this.copyEvt.id == undefined)	this.copyEvt.id = response.id + "";	// Do NOT Localize
+				this.controller.stageController.pushScene('edit', this.copyEvt.id, new Date(this.copyEvt.startTimestamp), false, this.copyEvt.calendarId, this.copyEvt.subject, false, this.handleEditEventsCallBack);
+			}
+		}
+	},
+	
+	handleEventsHold: function(event, left, top, width, height, whichDay, eIdx, tapEvent) {
+		//Mojo.Event.stop(tapEvent);
+		//Mojo.Log.error("Holding Event!!!!!!!" + (event && event.subject) + " , day: " + whichDay + " , idx: " + eIdx);
+		
+		this.uberMenuPanel.show();
+		this.uberHolding = true;
+		this.uberHeldEvent = false;
+		this.uberHeldDay = whichDay;
+		this.uberHeldIdx = eIdx;
+		this.uberFirstTapFromHold = true;
+		if(left !== null){this.clearSelectedEventsTap(left, top, width, height);}
+		if(event){
+			var tEvt = {}, item, rtdate;
+			item = event;
+			this.uberHeldEvent = event;
+			if(item.id) {
+				tEvt.id = item.id;
+			}
+			if(item.startTimestamp || item.start) {
+				rtdate = new Date(item.startTimestamp || item.start);
+				// formatString = "EEE MMM d";
+				var templateModel = {};
+				var template = new Template($L("#{dateStr}"));
+				templateModel.dateStr = Mojo.Format.formatDate(rtdate, $L("EEE MMM d"));
+				var dateTxt = template.evaluate(templateModel);
+				if(!item.allDay) {
+					
+					var h = rtdate.getHours();
+					var m = rtdate.getMinutes();
+					tEvt.startT = (h<10 ? '0'+h: h) + ':' + (m<10 ? '0'+m : m);
+				} else if (item.allDay === true) {
+					tEvt.startT = $L("all ");
+				}
+			}
+			if(item.subject) {
+				tEvt.subject = dateTxt + " - " + item.subject;
+			}
+			if(item.location && item.location !== "") {
+				tEvt.location = item.location;
+				this.controller.get("uber-week-mp-map").removeClassName("disabled");
+			} else {
+				this.controller.get("uber-week-mp-map").addClassName("disabled");
+			}
+			if(item.calendarColor) {
+				tEvt.bgcolor = this.uberColors[item.calendarColor];
+			}
+			if(item.endTimestamp || item.end) {
+				if(!item.allDay) {
+					rtdate = new Date(item.endTimestamp || item.end);
+					var h = rtdate.getHours();
+					var m = rtdate.getMinutes();
+					tEvt.endT = (h<10 ? '0'+h: h) + ':' + (m<10 ? '0'+m : m);
+				} else if (item.allDay === true) {
+					tEvt.endT = $L("day ");
+				}
+			}
+			if(item.note) {
+				var wholeNote = item.note !== "\n" ? item.note : "";
+				if(wholeNote && wholeNote !== "\n" && wholeNote.length > 0) {
+					var result = getNotesIconParts(wholeNote);
+					if(result && result[1]) {
+						tEvt.cat = result[1];
+						if(tEvt.cat){
+							tEvt.catFormatted = 'url(/media/internal/.scrims/ubercalendar/icon-' + tEvt.cat + '.png) no-repeat center right;'
+						}
+						tEvt.note = result[0] + result[2];
+					} else {
+						tEvt.note = wholeNote;
+					}
+				}
+			}
+			var tEvtHtml = Mojo.View.render({object: tEvt, template: 'shared/ubertemplateitem'});
+			this.controller.get('uber-panel-event').update(tEvtHtml);
+		}
+		if(!this.uberHoldTimeout){
+			this.uberHoldTimeout = this.controller.window.setTimeout(function(){this.uberHeldEvent = false;this.uberHolding=false;this.uberMenuPanel.hide();}.bind(this), 5000);
+		} else {
+			this.controller.window.clearTimeout(this.uberHoldTimeout);
+			this.uberHoldTimeout = this.controller.window.setTimeout(function(){this.uberHeldEvent = false;this.uberHolding=false;this.uberMenuPanel.hide();}.bind(this), 5000);
+		}
+	},
+	
+	findUberNextEvent: function(want){
+		if(this.uberHeldEvent && this.uberHeldDay !== undefined && this.uberHeldIdx !== undefined && want !== undefined){
+			var ended, data, day, beginWeekNoTime, aLen, eLen, maxD, nDay, nIdx;
+			var event;
+			beginWeekNoTime = this.getFirstDayOfWeek(getCurrentDateTime()).set({hour: 0, minute: 0, second: 0, millisecond: 0});
+			data = this.getFromCache(beginWeekNoTime.getTime());
+			nDay = this.uberHeldDay;
+			day = data.days[nDay];
+			aLen = day.allDayEvents.length;
+			eLen = day.events.length;
+			maxD = this.weekTest ? 5 : 7;
+			var needNewDay = (aLen + eLen) < 2;//true = only 1 event that day
+			if(!needNewDay) {
+				if(this.uberHeldEvent.allDay){
+					if(want === "prev"){
+						if(this.uberHeldIdx -1 <0){
+							needNewDay = true;
+						} else {
+							nIdx = this.uberHeldIdx -1;
+							event = day.allDayEvents[nIdx];
+						}
+					} else {// want next
+						if(aLen > this.uberHeldIdx+1){
+							nIdx = this.uberHeldIdx+1;
+							event = day.allDayEvents[nIdx];
+						} else { //check events
+							if(eLen > 0){
+								nIdx = 0;
+								event = day.events[nIdx];
+							} else {
+								needNewDay = true;
+							}
+						}
+					}
+					if(event){
+						var params = {event: event, whichDay: nDay, eIdx: nIdx};
+						return params;
+					}
+				} else {//events
+					if(want === "prev"){
+						if(this.uberHeldIdx -1 <0){//check all days
+							if(aLen === 0){
+								needNewDay = true;
+							} else {
+								nIdx = aLen -1;
+								event = day.allDayEvents[nIdx];
+							}
+						} else {
+							nIdx = this.uberHeldIdx -1;
+							event = day.events[nIdx];
+						}
+					} else {// want next
+						if(eLen > this.uberHeldIdx+1){
+							nIdx = this.uberHeldIdx+1;
+							event = day.events[nIdx];
+						} else {
+							needNewDay = true;
+						}
+					}
+					if(event){
+						var params = {event: event, whichDay: nDay, eIdx: nIdx};
+						return params;
+					}
+				}
+			}
+			
+			if(needNewDay){ //next or prev day
+				do {
+					if(want === "next"){//next should go to next all day event
+						nDay += 1;
+						if(nDay >= maxD){//no next this week
+							ended = true;
+							break;
+						}
+					} else {
+						nDay -= 1;
+						if(nDay < 0){//no prev this week
+							ended = true;
+							break;
+						}
+					}
+					day = data.days[nDay];
+					aLen = day.allDayEvents.length;
+					eLen = day.events.length;
+				} while(aLen + eLen <1);
+				if(!ended){
+					if(want === "next"){
+						if(aLen > 0){
+							event = day.allDayEvents[0];
+						} else {
+							event = day.events[0];
+						}
+						nIdx = 0;
+					} else {
+						if(eLen < 1){
+							nIdx = aLen-1;
+							event = day.allDayEvents[nIdx];
+						} else {
+							nIdx = eLen-1;
+							event = day.events[nIdx];
+						}
+					}
+					var params = {event: event, whichDay: nDay, eIdx: nIdx};
+					return params;
+				} else {// no event to be found
+					Mojo.Log.error("No next or previous event found");
+					return false;
+				}
+			}
+		}
+	},
+	
+	handleHeldPrev: function(){
+		if(this.uberHoldTimeout){
+			this.controller.window.clearTimeout(this.uberHoldTimeout);
+			this.uberHoldTimeout = 0;
+		}
+		var args = this.findUberNextEvent("prev");
+		if(args){
+			this.handleEventsHold(args.event, null, null, null, null, args.whichDay, args.eIdx, null);
+		}
+	},
+	
+	handleHeldNext: function(){
+		if(this.uberHoldTimeout){
+			this.controller.window.clearTimeout(this.uberHoldTimeout);
+			this.uberHoldTimeout = 0;
+		}
+		var args = this.findUberNextEvent("next");
+		if(args){
+			this.handleEventsHold(args.event, null, null, null, null, args.whichDay, args.eIdx, null);
+		}
+	},
+	
+	handleHeldEvent: function(){
+		if(this.uberHoldTimeout){
+			this.controller.window.clearTimeout(this.uberHoldTimeout);
+			this.uberHoldTimeout = 0;
+		}
+		this.uberMenuPanel.hide();
+		//Mojo.Log.error("held event - launch edit");
+		this.uberHolding = false;
+		this.uberFirstTapFromHold = false;
+		if(this.uberHeldEvent){
+			this.handleEventsTap(this.uberHeldEvent, false);
+		}
+	},
+	
+	handleHeldMap: function(){
+		if(this.uberHoldTimeout){
+			this.controller.window.clearTimeout(this.uberHoldTimeout);
+			this.uberHoldTimeout = 0;
+		}
+		this.uberMenuPanel.hide();
+		//Mojo.Log.error("held map - launch map");
+		this.uberHolding = false;
+		this.uberFirstTapFromHold = false;
+		if(this.uberHeldEvent && this.uberHeldEvent.location && this.uberHeldEvent.location !==""){
+			getAppManagerService().launchMaps (this.controller, this.uberHeldEvent.location, false);
+		}
+		return;
+	},
+	
+	handleHeldDelete: function(){
+		if(this.uberHoldTimeout){
+			this.controller.window.clearTimeout(this.uberHoldTimeout);
+			this.uberHoldTimeout = 0;
+		}
+		this.uberMenuPanel.hide();
+		//Mojo.Log.error("held delete ");
+		this.uberHolding = false;
+		this.uberFirstTapFromHold = false;
+		if(this.uberHeldEvent){
+			this.fromDefaultTap = false;
+			this.eventToBeDeleted = this.uberHeldEvent;
+			this.deletedeventId = this.uberHeldEvent.id;
+			//this.gotEventInlineDelete(this.uberHeldEvent);
+			getCalendarService().getEvent(this.uberHeldEvent.id, this.gotEventInlineDelete.bind(this),this.gotEventInlineDeleteFailed.bind(this), this.controller);
+		}
+	},
+
+	handleEventsTap: function(event, tapEvent) {
+		//copied event saved open in edit scene
+		if(tapEvent){Event.stop(tapEvent);}
+		if(this.uberHolding){//hold fires tap so make sure we're not from that
+			if(this.uberFirstTapFromHold){
+				this.uberFirstTapFromHold = false;
+				return;
+			} else {
+				this.uberHolding = false;
+				if(this.uberHoldTimeout){
+					this.controller.window.clearTimeout(this.uberHoldTimeout);
+					this.uberHoldTimeout = 0;
+					this.uberMenuPanel.hide();
+				}
+			}
+		}
+		this.fromDefaultTap = false;
+		if (this.orangeKeyDown == true) {
+			//create new from old
+			var start = new Date();
+			start.set({	minute: 0, second: 0, millisecond: 0 });
+			var startTS = start.getTime(); //set it up on today's current hour
+			var duration = event.end - event.start;
+			var endTS = startTS + duration;
+			this.orangeKeyDown = false;
+			var tfParams = {
+						subject: event.subject,
+						allday: false,
+						location: event.location,
+						startTimestamp: startTS,
+						endTimestamp: endTS,
+						note: event.note
+						};
+			this.copyEvt = new CalendarEvent(tfParams);
+			this.copyEvt.calendarId = event.calendarId;
+			getCalendarService().setEvent(this.copyEvt, 
+								this.copiedEvent.bind(this),
+								this.controller,
+								function(response) {Mojo.Log.error(response.errorText)});
+		} else if(this.metaKeyDown == true) {
+				// Confirm with the user they want to delete the event
+				//Mojo.Log.info("handleEventsTap: meta key + tap = Delete event " + Object.toJSON(event));
+				// Retrieve the event from the calendar service so we can figure
+				// out whether it's recurring or not
+				this.eventToBeDeleted = event;
+				this.deletedeventId = event.id;
+				// Reset the metaKeyDown to handle the case the user lets go
+				// of the meta key when the Delete confirmation dialog is up
+				this.metaKeyDown = false;
+				getCalendarService().getEvent(event.id, this.gotEventInlineDelete.bind(this),this.gotEventInlineDeleteFailed.bind(this), this.controller);
+		} else {
+			if(event.id) {
+			this.fromEditEventsCallBack = true;
+			this.controller.stageController.pushScene('edit', event.id, new Date(event.startTimestamp), false, event.calendarId, event.subject, false, this.handleEditEventsCallBack);
+			}
+		}
+	},
+	
+	editEventsCallBack: function() {
+		// something happened in edit scene render week
+		this.fromDefaultTap = false;
+		var beginWeekNoTime = this.getFirstDayOfWeek(getCurrentDateTime()).set({hour: 0, minute: 0, second: 0, millisecond: 0});
+		var week = this.getFromCache(beginWeekNoTime.getTime());
+		this.renderWeek(this.THIS_WEEK, week);
+		this.fromEditEventsCallBack = true;
+	},
+	
+	editFromTemplate: function(event, editingTemplate) {
+		// going from template to edit new event
+		this.fromEditEventsCallBack = true;
+		this.controller.stageController.pushScene('edit', event.id, new Date(event.startTimestamp), event.allDay, event.calendarId, event.subject, false, this.handleEditEventsCallBack, editingTemplate);
+	},
+	
+	handleDefaultEventsTap: function(event, x, y) {
+		// no eventsTap handler in this space, find col run tapHandler
+		Event.stop(event);
+		if(this.uberHolding){
+			if(this.uberHoldTimeout){
+				this.controller.window.clearTimeout(this.uberHoldTimeout);
+				this.uberHoldTimeout = 0;
+				this.uberMenuPanel.hide();
+			}
+			this.uberMenuPanel.hide();
+			//Mojo.Log.error("default tap should close and return");
+			this.uberHolding = false;
+			this.uberFirstTapFromHold = false;
+			return;
+		}
+		if (this.metaKeyDown == true) {
+			// nothing to copy here reset metakeydown
+			this.metaKeyDown = false;
+		}
+		if (this.orangeKeyDown == true) {
+			// nothing to copy here reset metakeydown
+			this.orangeKeyDown = false;
+		}
+		if (x); {
+			var col = this.whichDayCol(x);
+			this.fromDefaultTap = true;
+			this.showSelectedHandler(col);
+			this.tapHandler(col);
+			this.selectedCol = -1;
+		}
+	},
+	
+	handleMini: function() {
+		this.metaKeyDown = false;
+	},
+	
+	showSelectedEventsTap: function(left, top, width, height) {
+		// eventsTap handler highlight event
+		if ((left) && (top) && (width) && (height)) {
+			// draw shade on event
+			var selectedColor = "rgba(2, 2, 2, 0.25)";
+			this.evtapcontext.fillStyle = selectedColor;
+			this.evtapcontext.fillRect(left, top, width, height);
+		}
+	},
+	
+	clearSelectedEventsTap: function(left, top, width, height) {
+		// no eventsTap handler, clear highlight day tapHandler
+		if ((left) && (top) && (width) && (height)) {
+			// clear shade on event
+			this.evtapcontext.clearRect(left, top, width, height);
+		}
+	},
+	
   	showSelectedHandler: function(col) {
 		this.selectedCol = col;
 		
@@ -1019,8 +2222,65 @@ var WeekAssistant = Class.create({
 		var week = this.getFromCache(beginWeekNoTime.getTime());
 		this.renderWeek(this.THIS_WEEK, week);
   	},
+
+	// Handles taps for events
+	gotEventInlineDelete: function(response) {
+		//Mojo.Log.info("gotEventInlineDelete");
+		var targetEvent = response;
+		// If the user is trying to delete a new event (cancelling the new event) 
+		// [new event's parentId equals 0]
+		// or
+		// if the event is NOT a recurring event, show the standard delete warning
+		if ((!targetEvent.rrule || targetEvent.rrule == "") && targetEvent.parentId <=0){
+			this.controller.showDialog({
+				template: 'shared/confirm-deleteevent',
+				assistant: new DeleteEventConfirmDialogAssistant(this, targetEvent, targetEvent.startTimestamp),
+				preventCancel: true
+			});
+		} else {
+			// If the event is a recurring event, show the warning allowing users to
+			// delete the series, the single event, or cancel
+			var eventToBeDeletedStartime = parseFromId(this.deletedeventId);
+			this.controller.showDialog({
+				template: 'shared/confirm-deleterecurringevent',
+				assistant: new DeleteEventConfirmDialogAssistant(this, targetEvent, eventToBeDeletedStartime.start),
+				preventCancel: true
+			});
+		}
+		// Re-render the week
+		this.eventToBeDeleted = null;
+		this.editEventsCallBack();
+	},
+	
+	gotEventInlineDeleteFailed: function(response) {
+		//Mojo.Log.info("gotEventInlineDeleteFailed " + Object.toJSON(response));
+		// Re-render the week
+		this.eventToBeDeleted = null;
+		this.editEventsCallBack();
+	},
+	
+	deletedEvent: function(response) {
+		//Mojo.Log.info("deletedEvent " + Object.toJSON(response));
+		// Remove the reminder for this event
+		if (this.deletedeventId != undefined)
+			getReminderManager().removeReminder(this.deletedeventId);
+	},
+
 	
   	tapHandler: function(col) {
+		// see if meta tap is active
+		if (this.metaKeyDown == true) {
+			// should not do anything here with a meta + tap
+			this.metaKeyDown = false;
+			//return;
+		}
+		// see if orange key is active
+		if (this.orangeKeyDown == true) {
+			// should not do anything here with a orange key + tap
+			this.orangeKeyDown = false;
+			//return;
+		}
+
 		var dayofweek= this.getFirstDayOfWeek(getCurrentDateTime());
 		dayofweek.addDays(col);
 			
@@ -1051,9 +2311,41 @@ var WeekAssistant = Class.create({
 		Event.stop(e);
     	var listItems = buildCalendarsMenu(true /*includeAll*/, true /*includeReadOnly*/, true /*includeExcludedFromAll*/);
  
+		// UC groups items
+		if(this.userUberCalGroups && this.userUberCalGroups.length > 0) {
+			var viewOptionsItem = listItems.splice(-1,1);
+			var len = this.userUberCalGroups.length;
+			if(this.ucGroupsFirst){
+				var allCals = listItems.splice(0,1);
+				for(var i=len-1; i>-1; i--) {
+					var grp = this.userUberCalGroups[i];
+					if(grp && grp.rId && grp.groupname) {
+						listItems.unshift( {label: grp.groupname, command: "rId:" + grp.rId, secondaryIcon: 'menu_all'} );
+					}
+				}
+				listItems.unshift( {label: $L("UberCalendar Groups")} );
+				listItems.unshift({label: $L("All calendars"),
+									command: 'all',
+									secondaryIcon: 'menu_all'
+								});
+			} else {
+				listItems.push( {label: $L("UberCalendar Groups")} );
+				for(var i=0; i<len; i++) {
+					var grp = this.userUberCalGroups[i];
+					if(grp && grp.rId && grp.groupname) {
+						listItems.push( {label: grp.groupname, command: "rId:" + grp.rId, secondaryIcon: 'menu_all'} );
+					}
+				}
+			}
+			listItems.push({
+				label: $L("Calendar View Options..."),
+				command: "viewOptions"
+			});
+		}
+		
 	    this.controller.popupSubmenu({
 	        onChoose: this.calendarChoose.bind(this),
-	    	toggleCmd: getCurrentCal(), 
+	    	toggleCmd: uberToggleGroupsCmd(this.uberGroups.inUse, "rId:" + this.uberGroups.rId), 
 		    // placeNear: e.target,
 			manualPlacement:true,
 			popupClass:"cal-selector-popup",
@@ -1065,9 +2357,39 @@ var WeekAssistant = Class.create({
 		if (value) {
 			if(value=="viewOptions")
 			{
+				this.getUCGroupsProps();
+				if(this.ucGroupIdx != undefined) {
+					buildUberExcludes(false);
+				}
+				this.fromEditEventsCallBack = true;
 				this.controller.stageController.pushScene("prefs-options",this.acctsModel);
 				return;
 			}
+			
+			//uc groups setup
+			if(value.indexOf("rId:") !== -1) {
+				var idx = value.indexOf(":") + 1;
+				rID = value.slice(idx);
+				setUberGroups(rID);
+				this.uberGroups = {inUse: true, rId: rID};
+				value = 'all';
+				this.getUCGroupsProps();
+				if(this.ucGroupWorkWeek !== undefined){
+					this.workTest = !!this.ucGroupWorkWeek;
+					this.uberSetWidth(this.ucGroupWorkWeek);
+				}
+				if(this.ucGroupIdx != undefined) {
+					buildUberExcludes(this.userUberCalGroups[this.ucGroupIdx].includes);
+				}
+			} else {
+				setUberGroups(false);
+				this.uberGroups = {inUse: false, rId: ""};
+				this.getUCGroupsProps();
+				this.workTest = !!this.workWeekOnly;
+				this.uberSetWidth(this.workWeekOnly);
+				buildUberExcludes(false);
+			}
+			
 	 		setCurrentCal(value);
 			this.clearCache();
 			this.updateAll();
@@ -1080,8 +2402,14 @@ var WeekAssistant = Class.create({
 	getFirstDayOfWeek: function (week) {
 		var firstDayOfWeek = new Date(week);
 		var prefs = getPrefs();
-		if (prefs && firstDayOfWeek.getDay() != (prefs.startOfWeek - 1))
-			firstDayOfWeek.moveToDayOfWeek((prefs.startOfWeek - 1), -1)
+		
+		if (this.enhancedView && this.workTest && firstDayOfWeek.getDay() != 1) {
+			firstDayOfWeek.moveToDayOfWeek (1, -1);
+		} else if (this.enhancedView && this.workTest && firstDayOfWeek.getDay() == 1) {
+			return firstDayOfWeek;
+		} else if (prefs && firstDayOfWeek.getDay() != (prefs.startOfWeek - 1)) {
+			firstDayOfWeek.moveToDayOfWeek((prefs.startOfWeek - 1), -1);
+		}
 			
 		return firstDayOfWeek;
 	},
@@ -1091,10 +2419,14 @@ var WeekAssistant = Class.create({
 		var prefs = getPrefs();
 		var lastDay = 6;
 		
-		if (prefs && prefs.startOfWeek - 1 != 0)
+		if (this.enhancedView && this.workTest) {
+			lastDay = 0;
+		} else if (prefs && prefs.startOfWeek - 1 != 0) {
 			lastDay = (prefs.startOfWeek - 1) - 1;
-		if (lastDayOfWeek.getDay() != lastDay)
+		}
+		if (lastDayOfWeek.getDay() != lastDay) {
 			lastDayOfWeek.moveToDayOfWeek(lastDay)
+		}
 			
 		return lastDayOfWeek;
 	},
@@ -1102,6 +2434,28 @@ var WeekAssistant = Class.create({
 	getFromCache: function(weekDate) {
 		return WeekAssistant.weekCache.get(this.keyFromDate(weekDate));
 	},	
+	getCalId :function(){
+		var defaultCalId;
+		if (getCurrentCal() == 'all') {
+			// Create an event in the calendar specified by the defaultCalId preference
+			defaultCalId = getPrefsManager().getDefaultCalendar();
+			
+			if (defaultCalId == 0) {
+				defaultCalId = getCalendarsManager().getLocalCalendarId();
+			}
+			
+			// Check to see if the calendarId is a valid one
+			if (getCalendarsManager().getCalName("id"+defaultCalId) == undefined) {
+				// The default calendar doesn't exist anymore so let's just create it
+				// in Local
+				defaultCalId = getCalendarsManager().getLocalCalendarId();
+			}
+			
+		}else{
+			defaultCalId =getCurrentCal();
+		}
+		return "id"+defaultCalId;
+	},
 	
 	isCacheEntrySubscribed: function(weekDate) {
 		return WeekAssistant.cacheSubscribed.get(this.keyFromDate(weekDate));
@@ -1121,7 +2475,7 @@ var WeekAssistant = Class.create({
 			for (var i = 0; i < keys.length; i++) {
 				var diff = Math.abs(currentKey - keys[i]);
 				if (diff > farthestDiff) {
-					farthestDiff = diff
+					farthestDiff = diff;
 					farthestIndex = i;
 				}
 			}
diff --git a/usr/palm/applications/com.palm.app.calendar/app/models/calendar-luna-service.js b/usr/palm/applications/com.palm.app.calendar/app/models/calendar-luna-service.js
index 13176a6..11c7c57 100644
--- a/usr/palm/applications/com.palm.app.calendar/app/models/calendar-luna-service.js
+++ b/usr/palm/applications/com.palm.app.calendar/app/models/calendar-luna-service.js
@@ -264,6 +264,7 @@ var CalendarMojoService = Class.create( {
 	},
 
 	setEvent: function(targetEvent, callback, sceneController, failure) {
+//Mojo.Log.error('setEvent', Object.toJSON(targetEvent));
 		if(!targetEvent.rrule || targetEvent.rrule=="")
 			targetEvent.endValidity = 0;
 		else if(targetEvent.rrule && targetEvent.rrule!="" && targetEvent.isRecurringForever ==true)
@@ -287,7 +288,7 @@ var CalendarMojoService = Class.create( {
 		
 	},
 	updateEvent: function(targetEvent, callback, sceneController, failure) {
-		
+//Mojo.Log.error(Object.toJSON('updateEvent', targetEvent));
 		return sceneController.serviceRequest(CalendarMojoService.identifier, {
 			method: 'updateEvent',
 			parameters: targetEvent,
diff --git a/usr/palm/applications/com.palm.app.calendar/app/models/calendars-manager.js b/usr/palm/applications/com.palm.app.calendar/app/models/calendars-manager.js
index bd5de54..f8eb14a 100644
--- a/usr/palm/applications/com.palm.app.calendar/app/models/calendars-manager.js
+++ b/usr/palm/applications/com.palm.app.calendar/app/models/calendars-manager.js
@@ -124,8 +124,8 @@ var CalendarsManager = Class.create ({
 					// The Local calendar is NOT allowed to be excluded from the All Calendars
 					// view, so we force it to be false
 					//Mojo.Log.info("Detected a Local calendar that was excluded from All Calendars view");
-					cal.excludeFromAll = false;
-					updatedCalendars.push({id: cal.id, excludeFromAll: cal.excludeFromAll});
+					//cal.excludeFromAll = false;
+					//updatedCalendars.push({id: cal.id, excludeFromAll: cal.excludeFromAll});
 					setDefaultColors = true;
 				}
 			}
@@ -399,6 +399,47 @@ var CalendarsManager = Class.create ({
 		}
 	},
 	
+	buildUberExcludes: function(includes) {
+		var tempList = [];
+		this.uberOrigExcludes = getUberOrigExcludes();
+		// setup defaults -- first time called or bad cookie, or user has not setup groups
+		if(this.uberOrigExcludes === undefined || (this.uberOrigExcludes && this.uberOrigExcludes.length === 0) ) {
+			this.uberOrigExcludes = [];
+			this.accounts.each(function(account){
+				account.calendars.each(function(cal){
+					this.uberOrigExcludes.push({
+						id: cal.id + "",
+						excludeFromAll: cal.excludeFromAll,
+					});
+				}, this);
+			}, this);
+		}
+		if(includes && includes.length > 0 && this.uberOrigExcludes && this.uberOrigExcludes.length > 0) {
+			// build & set group excludes
+			this.accounts.each(function(account){
+				account.calendars.each(function(cal){
+					tempList.push({
+						id: cal.id + "",
+						excludeFromAll: cal.excludeFromAll,
+					});
+				}, this);
+			}, this);
+			tempList.each(function(item) {
+				if(includes.indexOf(item.id) === -1) {
+					item.excludeFromAll = true;
+				} else {
+					item.excludeFromAll = false
+				}
+			}, this);
+			//Mojo.Log.error("buildExcludes:   " + Object.toJSON(tempList));
+			if(tempList && tempList.length > 0) {
+				getCalendarService().setCalendars(tempList, this.setCalendarsCallback.bind(this));
+			}
+		} else if(includes === false && this.uberOrigExcludes && this.uberOrigExcludes.length > 0) {
+			getCalendarService().setCalendars(this.uberOrigExcludes, this.setCalendarsCallback.bind(this));
+		}
+	},
+	
 	buildCalendarsMenu: function(includeAll, includeReadOnly, includeExcludedFromAll) {
 		//Mojo.Log.info('calendars-manager: buildCalendarsMenu ');
 		var listItems = [];
diff --git a/usr/palm/applications/com.palm.app.calendar/app/models/formatter_service.js b/usr/palm/applications/com.palm.app.calendar/app/models/formatter_service.js
index ead7ff3..f95ee78 100644
--- a/usr/palm/applications/com.palm.app.calendar/app/models/formatter_service.js
+++ b/usr/palm/applications/com.palm.app.calendar/app/models/formatter_service.js
@@ -157,10 +157,6 @@ Formatter = Class.create({
 					val = $L('1 day before');
 					break;
 					
-				case '-P1D':
-					val = $L('1 day before');
-					break;
-					
 				case '-P2D':
 					val = $L('2 days before');
 					break;
diff --git a/usr/palm/applications/com.palm.app.calendar/app/models/reminder-manager.js b/usr/palm/applications/com.palm.app.calendar/app/models/reminder-manager.js
index c2619fe..53eb3ac 100644
--- a/usr/palm/applications/com.palm.app.calendar/app/models/reminder-manager.js
+++ b/usr/palm/applications/com.palm.app.calendar/app/models/reminder-manager.js
@@ -7,6 +7,35 @@ var ReminderManager = Class.create ({
 		
 		this.observers = new Hash();
 		this.reminders = [];
+
+		//////////////////////////
+		//Reload reminders
+		try
+		{
+			this.cookie = new Mojo.Model.Cookie("remindersCookie");
+
+			if (this.cookie) 
+			{
+				var cookie = this.cookie.get();
+				
+				if (cookie) 
+				{			
+					if(cookie.reminders)
+					{
+						this.reminders = cookie.reminders;
+					}
+				}
+			}
+		}
+		catch(err)
+		{
+			console.error("Error: ReminderManager initialize: Failed to read cookie.");
+		}
+		
+
+		//update the event remider data
+		this.getAllReminderEventData();
+		//////////////
 		
 		this.eventChangeRequest = new Mojo.Service.Request('palm://com.palm.calendar', {
 					                    method: 'getEventChange',
@@ -23,9 +52,7 @@ var ReminderManager = Class.create ({
 		Mojo.Log.info("$$$$$$$$ Reminder-manager cleanup: end ");
 	},
 	
-	getEventChangeCallback: function(response) {
-		Mojo.Log.info("$$$$$$$$ Reminder-manager getEventChangeCallback:start ");
-		if (response.changed) {
+	getAllReminderEventData: function() {
 			// Get the event for each reminder since it may have changed
 		    window.setTimeout(function() {
 				this.requests = [];
@@ -39,6 +66,12 @@ var ReminderManager = Class.create ({
 					}));
 				}
 		    }.bind(this), 0.01);
+	}, 
+	
+	getEventChangeCallback: function(response) {
+		Mojo.Log.info("$$$$$$$$ Reminder-manager getEventChangeCallback:start ");
+		if (response.changed) {
+			this.getAllReminderEventData();
 		}
 		Mojo.Log.info("$$$$$$$$ Reminder-manager getEventChangeCallback:end ");
 	},
@@ -104,7 +137,8 @@ var ReminderManager = Class.create ({
 			isAllDay: isAllDay,
 			emailAccountId: emailAccountId,
 			userClosed: false,
-			scheduleStartTime: true
+			scheduleStartTime: true,
+			lastSnooze: null
 		}		
 		reminder.subtitle = this.getReminderSubtitle(reminder);
 		this.reminders.push(reminder);
@@ -254,6 +288,15 @@ var ReminderManager = Class.create ({
 				sceneController.remindersUpdated();
 		});
 		Mojo.Log.info("$$$$$$$$ Reminder-manager notifyObservers: end");
+	},
+	
+	saveReminders: function() {
+		//store the current reminders
+		//so that we can persist them across reboot
+		if (this.cookie)
+		{
+			this.cookie.put({reminders: this.reminders});
+		}
 	}
 	
 });
diff --git a/usr/palm/applications/com.palm.app.calendar/app/models/system-luna-service.js b/usr/palm/applications/com.palm.app.calendar/app/models/system-luna-service.js
index 84bbe9a..1f529e1 100644
--- a/usr/palm/applications/com.palm.app.calendar/app/models/system-luna-service.js
+++ b/usr/palm/applications/com.palm.app.calendar/app/models/system-luna-service.js
@@ -34,8 +34,29 @@ var SystemMojoService = Class.create( {
 			},
 			onSuccess: callback
 		});
+	},
+	
+	getTimeZoneValues: function(callback) {
+	
+		return new Mojo.Service.Request(SystemMojoService.identifier, {
+				method: 'getPreferenceValues',
+				parameters: {"key":"timeZone", subscribe: false}, 
+				onSuccess: callback,
+				onFailure: callback
+			});
+	},
+	
+	getCurrentTimeZone: function(callback) {
+	
+		return new Mojo.Service.Request(SystemMojoService.identifier, {
+				method: 'getPreferences',
+				parameters: {"keys":["timeZone"], subscribe: false}, 
+				onSuccess: callback,
+				onFailure: callback
+			});
 	}
 	
 });
 
 SystemMojoService.identifier = 'palm://com.palm.systemservice';
+
diff --git a/usr/palm/applications/com.palm.app.calendar/app/views/prefs-options/ubercalgroupitem.html b/usr/palm/applications/com.palm.app.calendar/app/views/prefs-options/ubercalgroupitem.html
new file mode 100644
index 0000000..c1b19a0
--- /dev/null
+++ b/usr/palm/applications/com.palm.app.calendar/app/views/prefs-options/ubercalgroupitem.html
@@ -0,0 +1,25 @@
+<div id="ubercalgroup#{-rId}" class="calendar-row">
+	<div  style="height:200px; width:80%" x-mojo-element="Scroller" id="ubercalscroller#{-rId}" >
+	<div class="palm-row-wrapper">
+		<div class="palm-group">
+			<div class="palm-group-title truncating-text" x-mojo-loc="">#{-groupname}</div>
+			<div class="palm-row" id="ubercalgroupbtn#{-rId}" >
+				<div id="ubercalgroup-text#{-rId}" x-mojo-element="TextField" style="overflow: hidden; max-height:30px;"></div>
+			</div>
+			<div class="palm-row-wrapper" >
+				<div class="palm-row">
+				<div id="uber-cal-workweek-toggle#{-rId}" x-mojo-element="ToggleButton" ></div>
+				<div class="title" x-mojo-loc="">#{-workWeekTitle}</div>
+				</div>
+			</div>
+			<div class="palm-row-wrapper" >
+			<div class="palm-row">
+			<div class="palm-list">
+				<div id="ubercallist#{-rId}" class="pav-calendars-list" x-mojo-element="List"></div>
+			</div>
+			</div>
+			</div>
+		</div>
+	</div>
+	</div>
+</div>
\ No newline at end of file
diff --git a/usr/palm/applications/com.palm.app.calendar/app/views/prefs-options/ubercalitem.html b/usr/palm/applications/com.palm.app.calendar/app/views/prefs-options/ubercalitem.html
new file mode 100644
index 0000000..5cf1995
--- /dev/null
+++ b/usr/palm/applications/com.palm.app.calendar/app/views/prefs-options/ubercalitem.html
@@ -0,0 +1,5 @@
+<div class="palm-row">
+<div class="palm-row-wrapper" >
+	<div id="uber-cal-list-toggle" x-mojo-element="ToggleButton"></div>
+	<div class="title" x-mojo-loc="">#{-name}</div>
+</div></div>
\ No newline at end of file
diff --git a/usr/palm/applications/com.palm.app.calendar/app/views/shared/uber-timezone.html b/usr/palm/applications/com.palm.app.calendar/app/views/shared/uber-timezone.html
new file mode 100644
index 0000000..b6bfe0e
--- /dev/null
+++ b/usr/palm/applications/com.palm.app.calendar/app/views/shared/uber-timezone.html
@@ -0,0 +1,45 @@
+<div id="palm-dialog-content" class="palm-dialog-content">
+	<div class="dialog-message" id="uber-tz-msg" x-mojo-loc="">
+		Current Timezone:
+	</div>
+	<div class="palm-dialog-separator"></div>
+	<div id="uber-manual-tz-grp" class="palm-group" style="margin-left:-5px; margin-right:5px; padding-left:10px; padding-right:5px">
+		<div id="uber-manualtz-grptitle" class="palm-group-title">
+			<span x-mojo-loc=''>Timezone Properties</span> 
+		</div>
+		<div class="palm-list">
+			<div class="palm-row first"> 
+				<div class="palm-row-wrapper">
+				<table width="100%" ><tr>
+					<td width="33%"><div id="uber-tz-plusminus-toggle" x-mojo-element="ToggleButton" class="left" style="margin-left:-15px; margin-right:0px; padding-left:0px; padding-right:5px"> </div></td>
+					<td width="33%"><div class="intergerpickerClass" id="uber-tzhours-offset" x-mojo-element="IntegerPicker" style="margin-left:-5px; margin-right:0px; padding-left:0px; padding-right:0px"></div></td>
+					<td width="33%"><div class="intergerpickerClass" id="uber-tzmins-offset" x-mojo-element="IntegerPicker" style="margin-left:-5px; margin-right:0px; padding-left:0px; padding-right:5px"></div></td>
+				</tr></table></div>
+			</div>
+			<div class="palm-row"> 
+				<div class="palm-row-wrapper">
+					<div id="uber-tz-dst-toggle" x-mojo-element="ToggleButton">
+					</div>
+				</div>
+			</div>
+			<div class="palm-row last">
+				<div class="palm-row-wrapper">
+					<div id="uber-gettz-button" class="palm-button secondary" x-mojo-tap-highlight="momentary" style="overflow:hidden" x-mojo-loc="">Get Timezones</div>
+				</div>
+			</div>
+		</div>
+	</div>
+	<div  x-mojo-element="Scroller" id="TZscroller" >
+		<div id="uber-timezone-cont" class="palm-list" style="margin-top:-10px; padding:5px; max-height:230px">
+			<div x-mojo-element="FilterField" id="uberTimezonefilterField" class="filterFieldClass"></div>
+			<div id="uber-timezone-list" x-mojo-element="List"></div>
+		</div>
+	</div>
+</div>
+
+<div class="palm-dialog-buttons" style="margin-top:-10px; margin-bottom:-5px">
+	<table width="100%" style="margin-top:-20px; margin-bottom:-10px"><tr>
+	<td width="50%"><div id="uber-tz-apply" class="palm-button primary" x-mojo-tap-highlight="momentary" style="overflow:hidden" x-mojo-loc="">Apply</div></td>
+	<td width="50%"><div id="Cancel" class="palm-button dismiss" x-mojo-tap-highlight="momentary" style="overflow:hidden" x-mojo-loc="">Cancel</div></td>
+	</tr> </table>
+</div>
\ No newline at end of file
diff --git a/usr/palm/applications/com.palm.app.calendar/app/views/shared/uber-tz-listcontainer.html b/usr/palm/applications/com.palm.app.calendar/app/views/shared/uber-tz-listcontainer.html
new file mode 100644
index 0000000..81e8009
--- /dev/null
+++ b/usr/palm/applications/com.palm.app.calendar/app/views/shared/uber-tz-listcontainer.html
@@ -0,0 +1,8 @@
+<div class="palm-group" style="margin-left:-5px; margin-right:5px; padding-left:10px; padding-right:5px">
+	<div id="uber-timezone-grptitle" class="palm-group-title">
+		<span x-mojo-loc=''></span> 
+	</div>
+	<div class="palm-list">
+		#{-listElements}
+	</div>
+</div>
diff --git a/usr/palm/applications/com.palm.app.calendar/app/views/shared/ubercategoryitem.html b/usr/palm/applications/com.palm.app.calendar/app/views/shared/ubercategoryitem.html
new file mode 100644
index 0000000..68446ca
--- /dev/null
+++ b/usr/palm/applications/com.palm.app.calendar/app/views/shared/ubercategoryitem.html
@@ -0,0 +1,10 @@
+<div class="palm row textfield removable" x-mojo-gesture='Mojo.Gesture.HorizontalDrag'>
+	<div class="palm-row-wrapper">
+		<div >
+			<table width="100%"><tr style="margin-top:0;">
+			<td width="10%" style="margin-left:0px; padding:0;"> <div width="20" height="40" ><img src="#{-nameFormatted}"/></div></td>
+			<td width="90%"><input type="text" value="#{name}" maxlength="20" style="margin-left:-5px; padding:0;" /> </td>
+			</tr></table>
+		</div>
+	</div>
+</div>
diff --git a/usr/palm/applications/com.palm.app.calendar/app/views/shared/ubercatemptylist.html b/usr/palm/applications/com.palm.app.calendar/app/views/shared/ubercatemptylist.html
new file mode 100644
index 0000000..f721577
--- /dev/null
+++ b/usr/palm/applications/com.palm.app.calendar/app/views/shared/ubercatemptylist.html
@@ -0,0 +1 @@
+Empty
\ No newline at end of file
diff --git a/usr/palm/applications/com.palm.app.calendar/app/views/shared/ubercatlistcontainer.html b/usr/palm/applications/com.palm.app.calendar/app/views/shared/ubercatlistcontainer.html
new file mode 100644
index 0000000..ee75a9d
--- /dev/null
+++ b/usr/palm/applications/com.palm.app.calendar/app/views/shared/ubercatlistcontainer.html
@@ -0,0 +1,5 @@
+<div class="palm-group unlabeled">
+	<div class="palm-list">
+		#{-listElements} 
+	</div>
+</div>
diff --git a/usr/palm/applications/com.palm.app.calendar/app/views/shared/ubertemplateemptylist.html b/usr/palm/applications/com.palm.app.calendar/app/views/shared/ubertemplateemptylist.html
new file mode 100644
index 0000000..f721577
--- /dev/null
+++ b/usr/palm/applications/com.palm.app.calendar/app/views/shared/ubertemplateemptylist.html
@@ -0,0 +1 @@
+Empty
\ No newline at end of file
diff --git a/usr/palm/applications/com.palm.app.calendar/app/views/shared/ubertemplateitem.html b/usr/palm/applications/com.palm.app.calendar/app/views/shared/ubertemplateitem.html
new file mode 100644
index 0000000..e29b2fb
--- /dev/null
+++ b/usr/palm/applications/com.palm.app.calendar/app/views/shared/ubertemplateitem.html
@@ -0,0 +1,10 @@
+<div class="palm row removable"  style="padding:0; margin:2; height:40px" x-mojo-tap-highlight="momentary" x-mojo-gesture='Mojo.Gesture.HorizontalDrag'>
+	<div class="palm-row-wrapper"  style="padding:0; margin:2; height:40px" >
+		<div >
+			<table width="100%" height="25px"><tr style="margin-top:0; height:25px">
+			<td width="10%" height="25px" style="margin-left:-5px; padding:0; background-color:#{-bgcolor}"> <div  style="font:12px bold prelude;">#{-startT}</div><div  style="font:12px bold prelude;">#{-endT}</div></td>
+			<td width="90%" height="25px"style="background:#{-catFormatted}"><div  style="font:14px bold prelude;max-width:235px; margin-left:5px; padding:0px;overflow:hidden;white-space:nowrap; text-overflow: ellipsis;">#{-subject}</div><div  style="max-width:120px;font:10px prelude; margin-left:5px; padding:0px;overflow:hidden;white-space:nowrap; text-overflow: ellipsis; float:left;">#{-location}</div><div  style="max-width:140px;font:10px prelude; margin-left:5px; padding:0px;overflow:hidden;white-space:nowrap; text-overflow: ellipsis; float:right">#{-note}</div> </td>
+			</tr></table>
+		</div>
+	</div>
+</div>
diff --git a/usr/palm/applications/com.palm.app.calendar/app/views/shared/ubertemplatelistcontainer.html b/usr/palm/applications/com.palm.app.calendar/app/views/shared/ubertemplatelistcontainer.html
new file mode 100644
index 0000000..8e5536f
--- /dev/null
+++ b/usr/palm/applications/com.palm.app.calendar/app/views/shared/ubertemplatelistcontainer.html
@@ -0,0 +1,5 @@
+<div class="palm-group unlabeled" style="margin-left:-5px; margin-right:5px; padding-left:10px; padding-right:5px">
+	<div class="palm-list">
+		#{-listElements} 
+	</div>
+</div>
diff --git a/usr/palm/applications/com.palm.app.calendar/app/views/shared/ubertz-item.html b/usr/palm/applications/com.palm.app.calendar/app/views/shared/ubertz-item.html
new file mode 100644
index 0000000..4c076f1
--- /dev/null
+++ b/usr/palm/applications/com.palm.app.calendar/app/views/shared/ubertz-item.html
@@ -0,0 +1,10 @@
+<div class="palm-row" x-mojo-gesture='Mojo.Gesture.HorizontalDrag' x-mojo-tap-highlight='momentary'>
+	<div class="palm-row-wrapper">	
+		<div class="title">
+			<span class="timezone-country"style="font:18px bold prelude">#{Country}</span><div class="timezone-city"style="font:16px bold prelude">#{City}</div>
+			<div class="preview"style="font:14px bold prelude">
+			#{-DescriptionFormatted} 
+			</div>
+		</div>
+	</div>
+</div>
diff --git a/usr/palm/applications/com.palm.app.calendar/javascripts/confirm-deleteevent.js b/usr/palm/applications/com.palm.app.calendar/javascripts/confirm-deleteevent.js
index a3c2d53..de13ca8 100644
--- a/usr/palm/applications/com.palm.app.calendar/javascripts/confirm-deleteevent.js
+++ b/usr/palm/applications/com.palm.app.calendar/javascripts/confirm-deleteevent.js
@@ -15,6 +15,7 @@ var DeleteEventConfirmDialogAssistant = Class.create({
 	
 	setup : function(widget) {
 		this.widget = widget;
+		
 		if((!this.event.rrule || this.event.rrule == "") 
 			&& this.event.parentId<=0)
 		{
@@ -23,7 +24,19 @@ var DeleteEventConfirmDialogAssistant = Class.create({
 		} 
 		else
 		{
+			var cancelDiv = this.sceneAssistant.controller.get('Cancel');
+			var singleDiv = this.sceneAssistant.controller.get('Single');
+			singleDiv.setAttribute("class", "palm-button secondary");
+			var buttonDiv = this.sceneAssistant.controller.get('Cancel').parentNode;
+			var thisFutureBtn = this.sceneAssistant.controller.document.createElement("div");
+			thisFutureBtn.setAttribute("id", "ThisFuture");
+			thisFutureBtn.setAttribute("class", "palm-button negative");
+			thisFutureBtn.setAttribute("x-mojo-tap-highlight", "momentary");
+			thisFutureBtn.setAttribute("x-mojo-loc",'""');
+			thisFutureBtn.innerHTML = $L("Delete this and future events");
+			buttonDiv.insertBefore(thisFutureBtn, cancelDiv);
 			this.sceneAssistant.controller.get('Series').addEventListener(Mojo.Event.tap, this.handleSeries.bindAsEventListener(this));
+			this.sceneAssistant.controller.get('ThisFuture').addEventListener(Mojo.Event.tap, this.handleThisAndFuture.bindAsEventListener(this));
 			this.sceneAssistant.controller.get('Single').addEventListener(Mojo.Event.tap, this.handleSingle.bindAsEventListener(this));
 		}
 		this.sceneAssistant.controller.get('Cancel').addEventListener(Mojo.Event.tap, this.handleCancel.bindAsEventListener(this));
@@ -54,6 +67,30 @@ var DeleteEventConfirmDialogAssistant = Class.create({
 		}
 	},
 	
+	handleThisAndFuture: function() {
+		//set the end date to this events end timestamp - 1 day
+		if(this.event.startTimestamp === this.date) {
+			//first event same as series
+			this.handleSeries();
+			return;
+		}
+		var endtimestamp = new Date(this.event.endTimestamp);
+		var time = new Date(this.date);
+		time.setHours(endtimestamp.getHours());
+		time.setMinutes(endtimestamp.getMinutes());
+		time.setSeconds(endtimestamp.getSeconds());
+		this.event.endValidity= time.addDays(-1).getTime();
+		this.recurrenceRule = getRecurrenceRule();
+		this.event.isRecurringForever = false;
+		this.event.rruleModel.count = 0;
+		this.event.rruleModel.until= this.recurrenceRule.calculateRecurTime(this.event.endValidity);
+		this.recurrenceRule.constructRRuleFromModel(this.event);
+		this.widget.mojo.close();
+		if (this.sceneAssistant.service.setEvent) {
+			this.sceneAssistant.service.setEvent(this.event, this.sceneAssistant.deletedEvent.bind(this.sceneAssistant),  this.sceneAssistant.controller);
+		}
+	},
+	
 	handleCancel:function(){
 		this.widget.mojo.close();
 	},
diff --git a/usr/palm/applications/com.palm.app.calendar/javascripts/datejs/week.js b/usr/palm/applications/com.palm.app.calendar/javascripts/datejs/week.js
new file mode 100644
index 0000000..501c299
--- /dev/null
+++ b/usr/palm/applications/com.palm.app.calendar/javascripts/datejs/week.js
@@ -0,0 +1,44 @@
+Date.prototype.getWeek = function() {
+	var date = new Date(this);
+	var year = date.getFullYear();
+	var month = date.getMonth();
+	var day = date.getDate();
+	
+	var when = new Date(year,month,day);
+	var newYear = new Date(year,0,1);
+	var modDay = newYear.getDay();
+
+	if(this.startDay != 1)
+		if (modDay == 0) modDay=6; else modDay--;
+
+	var daynum = ((Date.UTC(year,when.getMonth(),when.getDate(),0,0,0) -
+		Date.UTC(year,0,1,0,0,0)) /1000/60/60/24) + 1;
+
+	if (modDay < 4 ) {
+		var weekno = Math.floor((daynum+modDay-1)/7)+1;
+	}
+	else {
+		var weekno = Math.floor((daynum+modDay-1)/7);
+	
+		if (weekno == 0) {
+			year--;
+		
+			var prevNewYear = new Date(year,0,1);
+			var prevmodDay = prevNewYear.getDay();
+			if (prevmodDay == 0) prevmodDay = 6; else prevmodDay--;
+			if (prevmodDay < 4) weekno = 53; else weekno = 52;
+		}
+	}
+
+	return weekno;
+};
+
+Date.prototype.getISO8601Week = function() {
+	var d = new Date(this);
+	d.setUTCDate(d.getUTCDate() - (d.getUTCDay() + 6) % 7 + 3);
+	var ms = d.valueOf();
+	d.setUTCMonth(0, 4);
+	var w = Math.round((ms - d.valueOf()) / 604800000) + 1;
+	if (w <= 9) { w = "0" + w; }
+	return w;
+};
diff --git a/usr/palm/applications/com.palm.app.calendar/javascripts/jumpto.js b/usr/palm/applications/com.palm.app.calendar/javascripts/jumpto.js
index c53e388..219e47d 100644
--- a/usr/palm/applications/com.palm.app.calendar/javascripts/jumpto.js
+++ b/usr/palm/applications/com.palm.app.calendar/javascripts/jumpto.js
@@ -8,6 +8,390 @@ var JumptoDialogAssistant = Class.create({
 	
 	initialize: function(sceneAssistant) {
 		this.sceneAssistant = sceneAssistant;
+		this.controller = this.sceneAssistant.controller;
+	},
+	
+	colors: {"cal-color-blue": "rgba(145,211,234,0.5)",
+		"cal-color-green": "rgba(140,240,140,0.5)",
+		"cal-color-yellow": "rgba(232,227,124,0.5)",
+		"cal-color-gray": "rgba(194,194,194,0.5)",
+		"cal-color-orange": "rgba(251,180,116,0.5)",
+		"cal-color-pink": "rgba(245,156,188,0.5)",
+		"cal-color-red": "rgba(255,151,151,0.5)",
+		"cal-color-purple": "rgba(217,183,255,0.5)",
+		"cal-color-teal": "rgba(114,223,210,0.5)"},
+	
+		// From monthview (Feb is fixed up by hand as necessary)
+	// We try to avoid the DateJS stuff because it's indescribably slow.
+	_monthDays: [ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ],
+	
+	rdayNames: function() {
+		var stday = 0;
+		if(this.startOfWeek==null || this.startOfWeek == 'undefined')
+			this.startOfWeek = 1;
+		stday = this.startOfWeek - 1;
+		var tday = new Date();
+		tday.moveToDayOfWeek(stday);
+		for (var i = 0; i < 7; i++) {
+			this._rdNames[i] = Mojo.Format.formatDate(tday, "E");
+			tday.addDays(1);
+		}
+	},
+	
+	radvanceWk: function(wk, month, year, maxwkn) {
+		var wkn = parseInt(wk, 10);
+		if(this.weekModulusNum != undefined && this.weekModulusNum <= 52 && this.weekModulusNum != 1) {
+			var maxwkn = this.weekModulusNum;
+		}
+		if((wkn > 8) && (wkn < maxwkn)) {
+			return (wkn + 1);
+		} else if((wkn <= 8) && (wkn < maxwkn)) {
+			wkn +=1;
+			var zd = '0';
+			return zd + wkn.toString();
+		} else if(wkn == maxwkn || wkn > maxwkn) {
+			var zd = '01';
+			return zd;
+		}
+	},
+	
+	// draw month function, expects numbers 0 based month
+	canvasRM: function(month, year, context) {
+		// date object
+		var rmon = new Date(year, month, 1);
+		
+		//setup number of days, 1st day(day of week), week number, number of weeks
+		var rd1dayOfMon = rmon.getDay();
+		var rwkNum = this.useISOweekNum === true ? rmon.getISO8601Week() : rmon.getWeekOfYear(this.prefStartDoW);
+		var maxwkn = this.useISOweekNum === true ? new Date((month != 0 ? year : year -1), 11, 28).getISO8601Week() : new Date((month != 0 ? year : year -1), 11, 28).getWeekOfYear(this.prefStartDoW);
+		maxwkn = maxwkn == 0 ? 53 : maxwkn;
+		rwkNum = rwkNum == 0 ? maxwkn : rwkNum;
+		if(this.weekNumOffset !== undefined && this.weekNumOffset !=0) {
+			var wkNum = parseInt(rwkNum,10) + this.weekNumOffset;
+			rwkNum = wkNum > maxwkn ? (wkNum - maxwkn) : wkNum;
+			rwkNum = rwkNum < 10 ? '0' + rwkNum : rwkNum;
+		}
+		if(this.weekModulusNum != undefined && this.weekModulusNum <= 52 && this.weekModulusNum != 1) {
+			rwkNum = (parseInt(rwkNum, 10) % this.weekModulusNum);
+			rwkNum = rwkNum !== 0 ? rwkNum : this.weekModulusNum;
+			rwkNum = rwkNum < 10 ? '0' + rwkNum : rwkNum;
+		}
+		var r1offset = rd1dayOfMon - (this.startOfWeek - 1);
+		if (r1offset < 0) {r1offset += 7;}  //num of days of prev mon
+		if(isLeapYear(year)) {
+			this._monthDays[1] = 29;
+		} else {
+			this._monthDays[1] = 28;
+		}
+		this.RM[context].maxdays = this._monthDays[month];		
+		//setup fonts and spacing
+		this.mthctx[context].fillStyle = "rgb(0, 0, 0)";
+		this.mthctx[context].font = "bold 14px Prelude";
+		this.mthctx[context].textAlign = "left";
+		this.mthctx[context].textBaseline = "top";
+		var top = 2;
+		var leftmargin = 2;
+		var left = 0 + leftmargin;
+		var txt = "";
+		this.colHW = 30;
+		var maxW = 30;
+		this.topCor = 42 + (this.colHW/2); //top margin + half-cell
+		this.leftCor = this.colHW;
+		this.RM[context].fstDayLidx = r1offset;
+		this.RM[context].fstDayTidx = 1;
+		// setup title and week header
+		var titleTxt = Mojo.Format.formatDate(rmon, $L("MMM yyyy"));
+		this.mthctx[context].strokeText(titleTxt, left + 90, top);
+		this.mthctx[context].textAlign = "center";
+		for (var i = 0; i < 7; i++) {
+			txt = this._rdNames[i];
+			left = (i * this.colHW) + this.leftCor + 13;//13 is for font &txt to ctr
+			top = 22;
+			this.mthctx[context].strokeText(txt, left, top);	
+		}
+		this.mthctx[context].fillStyle = "rgb(104, 104, 104)";
+		this.mthctx[context].font = "14px Prelude";
+		this.mthctx[context].textAlign = "left";
+		this.mthctx[context].textBaseline = "alphabetic";
+		for (var j = 0; j < 6; j++) {
+			txt = rwkNum;
+			left = leftmargin;
+			top = (j * this.colHW) + this.topCor + 3; // 3 is for font correction
+			this.mthctx[context].strokeText(txt, left, top);
+			rwkNum = this.radvanceWk(rwkNum, month, year, maxwkn);
+		}
+		//iterate through the date rows
+		var num = 1;
+		this.mthctx[context].fillStyle = "rgb(0, 0, 0)";
+		this.mthctx[context].font = "bold 14px Prelude";
+		this.mthctx[context].textAlign = "center";
+		for (var j=0; j<6; j++) {
+			if (num > this.RM[context].maxdays) {
+				break; }
+			top = (j * this.colHW) + this.topCor + 3;
+			for (var i=0; i<7; i++) {
+				if (j==0 && i ==0) {i = r1offset;}
+				txt = num;
+				left =  (i * this.colHW) + this.leftCor + 13;
+				this.mthctx[context].strokeText(txt, left, top);
+				num +=1;
+				if (num > this.RM[context].maxdays) {
+					break; }
+			}
+		}
+	},
+	
+	RMnextM: function(index) {
+		this.RM[index].month = this.RM[index - 1].month;
+		this.RM[index].year = this.RM[index - 1].year;
+		if(this.RM[index].month == 11) {
+			this.RM[index].month = 0;
+			this.RM[index].year += 1;
+		} else {
+			this.RM[index].month += 1;
+		}
+	},
+	
+	RMprevM: function(index) {
+		this.RM[index].month = this.RM[index + 1].month;
+		this.RM[index].year = this.RM[index + 1].year;
+		if(this.RM[index].month == 0) {
+			this.RM[index].month = 11;
+			this.RM[index].year -= 1;
+		} else {
+			this.RM[index].month -= 1;
+		}
+	},
+	
+	// determin calendar order for the canvas's
+	orderRM: function( stDate, eDate) {
+		//check first
+		if(stDate.getTime() > eDate.getTime) {
+			Mojo.Log.error ("start after end");
+			return;
+		}
+		for(var i=0; i<6; i++) {
+			this.RM[i] = {};
+			this.RM[i].month = "";
+			this.RM[i].year = "";
+			this.RM[i].fstDayLidx = 1;
+			this.RM[i].fstDayTidx = 1;
+			this.RM[i].maxdays = 1;
+		}
+		// date objects
+		var curD = new Date();
+		var curMY = {month: curD.getMonth(), year: curD.getFullYear() };
+		var stMY = {month: stDate.getMonth(), year: stDate.getFullYear() };
+		var eMY = {month: eDate.getMonth(), year: eDate.getFullYear() };
+		// do prev - prev - dateModel.date next - next - next
+		this.RM[2].month = stMY.month;
+		this.RM[2].year = stMY.year;
+		this.RMprevM(1);
+		this.RMprevM(0);
+		this.RMnextM(3);
+		this.RMnextM(4);
+		this.RMnextM(5);
+		// call canvasRM
+		for(var k=0; k<6; k++){
+			this.canvasRM(this.RM[k].month, this.RM[k].year, k);
+		}
+		// record for next time comparisons
+		this.RMlast.stMY = stMY;
+		this.RMlast.eMY = eMY;
+		this.RMlast.curMY = curMY;
+	},
+	
+	risRendered: function( year, month) {
+		for(var i=0; i<6; i++) {
+			if((this.RM[i].month == month) && (this.RM[i].year == year)) {
+				return i;
+			}
+		}
+		return -1;
+	},
+	
+	//mark days in calendar
+	markDay: function(rdate, imgsrc, color, rx, ry, rwt, rht) {
+		// determine which month, year, date
+		if (rdate instanceof Date == true) { 
+			var whatMn = rdate.getMonth();
+			var whatYr = rdate.getFullYear();
+			var whatDt = rdate.getDate();
+		} else if(rdate !== undefined) {
+			this.rtdate = new Date(rdate);
+			var whatMn = this.rtdate.getMonth();
+			var whatYr = this.rtdate.getFullYear();
+			var whatDt = this.rtdate.getDate();
+		}
+		var rmimgsrc = imgsrc;
+		var idx = this.risRendered(whatYr, whatMn);
+		if(idx == -1) { return; }
+		var fstDayLidx = this.RM[idx].fstDayLidx;
+		var fstDayTidx = this.RM[idx].fstDayTidx;
+		var rRow = Math.floor((whatDt + fstDayLidx -1) / 7);
+		var col = (whatDt + fstDayLidx - 1) % 7;
+		var itop = (rRow * this.colHW) + 40;
+		var ileft = (col * this.colHW) + this.colHW;
+		itop = (ry !== undefined) ? itop + ry : itop;
+		ileft = (rx !== undefined) ? ileft + rx : ileft;
+		if (rmimgsrc !== undefined) {
+			this.mthctx[idx].drawImage(rmimgsrc, ileft, itop, (rwt !== undefined)? rwt : this.colHW,(rht !== undefined)? rht : this.colHW);
+		} else if(color !== undefined) {
+			this.mthctx[idx].fillStyle = color;
+			this.mthctx[idx].fillRect(ileft, itop, this.colHW-2, this.colHW-2);
+		} else {
+			this.mthctx[idx].fillStyle = "rgba(232,227,124,0.5)";
+			this.mthctx[idx].fillRect(ileft, itop, this.colHW-2, this.colHW-2);
+		}
+	},
+	
+	rmEval: function() {
+		this.RMlast.stD = this.dateModel.date;
+		this.RMlast.eD = this.dateModel.date;
+		return;
+	},
+	
+	getTemplateEvents: function() {
+		var startTS = Date.UTC(2030, 0, 1, 0, 0, 0, 0);
+		var endTS = Date.UTC(2030, 0, 2, 0, 0, 0, 0);
+		var calId = getCurrentCal();
+		getCalendarService().getEvents(calId, startTS, endTS, this.getTemplateEventsCallback.bind(this), this.sceneAssistant.controller, this.getTemplateEventsFailCallback);
+	},
+	
+	getTemplateEventsCallback: function (resp) {
+		this.uberTemplateEvents = [];
+		var days = resp.days;
+		var startTS = Date.UTC(2030, 0, 1, 0, 0, 0, 0);
+		var len = days.length ? days.length : 0;
+		for(var i=0; i<len; i++) {
+			if(days[i] && days[i].date && (days[i].events.length || days[i].allDayEvents.length)) {
+				days[i].events.each(function(item) {
+					if(item.isRecurringForever !== true) {
+						this.uberTemplateEvents.push(item);
+					}
+				}, this);
+				days[i].allDayEvents.each(function(item) {
+					if(item.isRecurringForever !== true) {
+						this.uberTemplateEvents.push(item);
+					}
+				}, this);
+			}
+		}
+		//sorting and combining webos split events over local midnight boundary
+		var tempList = this.uberTemplateEvents.sortBy(function(a) { return a.id.split("-",1)} );
+		var filtList = [];
+		var len = this.uberTemplateEvents.length;
+		var lastMatch;
+		for(var i=1; i<len; i++){
+			var sec = tempList[i];
+			var first = tempList[i -1];
+			var idx1 = i-1;
+			var idx2 = i;
+			var refStartTS = Date.UTC(2030, 0, 1, 0,0,0,0);
+			var refEndTS = Date.UTC(2030, 0, 2,0,0,0,0);
+			if(sec.id === first.id) {
+				var start1 = first.start;
+				var end1 = first.end;
+				var start2 = sec.start;
+				var end2 = sec.end;
+				if(start1 < start2) { //first is the start of event
+					first.end = sec.end;
+					if((first.start >= refStartTS && first.start <= refEndTS) ||
+						(first.end >= refStartTS && first.end <= refEndTS)) {
+						filtList.push(first);// clean off any events that don't start or end on 1.1.2030 UTC
+					}
+					lastMatch = i;
+				} else {			// sec is start
+					first.start = sec.start;
+					if((first.start >= refStartTS && first.start <= refEndTS) ||
+						(first.end >= refStartTS && first.end <= refEndTS)) {
+						filtList.push(first);
+					}
+					lastMatch = i;
+				}
+			} else {
+				if((first.start >= refStartTS && first.start <= refEndTS) ||
+					(first.end >= refStartTS && first.end <= refEndTS) ) {
+					if(!lastMatch || lastMatch !== i-1) { //first was not matched before
+						filtList.push(first);
+					}
+				}
+				if((i === len-1) && ((sec.start >= refStartTS && sec.start <= refEndTS) ||
+					(sec.end >= refStartTS && sec.end <= refEndTS))) {				
+					filtList.push(sec);
+				}
+			}
+		}
+		if(filtList && filtList.length) { //sort by start timestamps
+			tempList = filtList.clone();
+			tempList = tempList.sortBy(function(a) {return a.start});
+		}
+		if(tempList && tempList.length) { 
+			this.uberTemplateEvents = tempList.clone();
+		}
+		var subList = [];
+		var len = this.uberTemplateEvents.length;
+		for(var i=0; i < len; i++) {
+			var item = this.uberTemplateEvents[i];
+			//push to list
+			var tEvt = [];
+			tEvt.idx = i;
+			if(item.id) {
+				tEvt.id = item.id;
+			}
+			if(item.subject) {
+				tEvt.subject = item.subject;
+			}
+			if(item.location) {
+				tEvt.location = item.location;
+			}
+			if(item.calendarColor) {
+				tEvt.bgcolor = this.colors[item.calendarColor];
+			}
+			if(item.start) {
+				if(!item.allDay) {
+					this.rtdate = new Date(item.start);
+					var h = this.rtdate.getUTCHours();
+					var m = this.rtdate.getUTCMinutes();
+					tEvt.startT = (h<10 ? '0'+h: h) + ':' + (m<10 ? '0'+m : m);
+				} else if (item.allDay === true) {
+					tEvt.startT = $L("all ");
+				}
+			}
+			if(item.end) {
+				if(!item.allDay) {
+					this.rtdate = new Date(item.end);
+					var h = this.rtdate.getUTCHours();
+					var m = this.rtdate.getUTCMinutes();
+					tEvt.endT = (h<10 ? '0'+h: h) + ':' + (m<10 ? '0'+m : m);
+				} else if (item.allDay === true) {
+					tEvt.endT = $L("day ");
+				}
+			}
+			if(item.note) {
+				var wholeNote = item.note !== "\n" ? item.note : "";
+				var patt = /((.|\n|\r)*?)ICON=([a-z0-9_-]{1,20});((.|\n|\r)*)/;
+				if(wholeNote && wholeNote !== "\n" && wholeNote.length > 0) {
+					var result = wholeNote.match(patt);
+					if(result && result[3]) {
+						tEvt.cat = result[3];
+						tEvt.note = result[1] + result[4];
+					} else {
+						tEvt.note = wholeNote;
+					}
+				}
+			}
+			subList.push(tEvt);
+		}
+		if(subList.length !== 0) {
+			this.uberTemplates = subList.clone();
+			this.uberTemplateModel.items = this.uberTemplates;
+			this.sceneAssistant.controller.modelChanged(this.uberTemplateModel, this);
+		}
+	},
+	
+	getTemplateEventsFailCallback: function(e){
+		Mojo.Log.error("failed to get template events: " + e.errorText);
 	},
 	
 	setup : function(widget) {
@@ -15,10 +399,175 @@ var JumptoDialogAssistant = Class.create({
 		this.dateModel = {
 			date: getCurrentDateTime()
 		};
-   	this.sceneAssistant.controller.setupWidget('jumpto-picker', {label: $L('DATE')}, this.dateModel);
-  },
+		
+		this.weekModulusNum = 1;
+		this.weekNumOffset = 0;
+		this.useISOweekNum = false;
+		this.prefStartDoW = 0;
+		this.gotoEditFromTemplate = true;
+		this.weekCookie = new Mojo.Model.Cookie('WeekViewEnhanced');
+		if (this.weekCookie) {
+			var weekcookie = this.weekCookie.get();
+			if(weekcookie) {
+				if(weekcookie.weeknumoffset !== undefined) {
+						this.weekNumOffset = parseInt(weekcookie.weeknumoffset, 10);
+				} else {
+						this.weekNumOffset = 0;
+				}
+				if(weekcookie.weekmodulusnum !== undefined) {
+						this.weekModulusNum = parseInt(weekcookie.weekmodulusnum, 10);
+				} else {
+						this.weekModulusNum = 1;
+				}
+				if (weekcookie.useisoweeknum !== undefined) {
+					this.useISOweekNum = weekcookie.useisoweeknum;
+				} else {
+					this.useISOweekNum = false;
+				}
+				if (weekcookie.prefsstartofweek !== undefined) {
+					this.prefStartDoW = parseInt(weekcookie.prefsstartofweek, 10) -1;
+				} else {
+					this.prefStartDoW = 0;
+				}
+				if (weekcookie.gotoeditfromtemplate !== undefined) {
+					this.gotoEditFromTemplate = weekcookie.gotoeditfromtemplate;
+				} else {
+					this.gotoEditFromTemplate = true;
+				}
+			}
+		}
+		// setup canvas & drawer
+		var parentDiv = this.sceneAssistant.controller.get("palm-dialog-content");
+		parentDiv.setAttribute("class", "palm-list");
+		parentDiv.innerHTML = '<div class="palm-dialog-content" style="margin-bottom:3px">' +
+				'<div class="palm-dialog-buttons" style="margin-left:-18px; margin-top:-20px; margin-bottom:-8px; padding:0; width:90%" id="jp_uber_radiobutton" x-mojo-element="RadioButton"></div>' +
+				'<div class="palm-dialog-separator"></div></div>' + 
+			'<div  x-mojo-element="Scroller" id="JPscroller" >' +
+				'<div id="JP-template-cont" class="palm-list" style="margin-top:-20px; padding:5px; max-height:230px">' +
+					'<div x-mojo-element="FilterField" id="uberTemplatefilterField" class="filterFieldClass"></div>' + 
+					'<div id="jp-template-list" x-mojo-element="List"></div></div>' +
+				'<div id="JPcanvasDiv" style="margin-top:-5px" class="palm-list">' +
+					'<div id="JPscrol" style="height:220px;" x-mojo-element="Scroller"><div id="JPscrolct" style="position:relative;width:1566;height:220px;">' +
+						'<div id="JPmonth_0" class="JPmv" style="position:absolute;display:block;width:240px;left:40px;border-right:1px solid black;border-left:1px solid black;">' +
+						'<canvas id="JPleft0" width="240" height="220" left="0"></canvas>' +
+						'</div><div id="JPmonth_1" class="JPmv" style="position:absolute;display:block;width:240px;left: 281px;border-right:1px solid black;">' +
+						'<canvas id="JPleft1" width="240" height="220"></canvas>' +
+						'</div><div id="JPmonth_2" class="JPmv" style="position:absolute;display:block;width:240px;left: 522px;border-right:1px solid black;">' +
+						'<canvas id="JPleft2" width="240" height="220"></canvas>' +
+						'</div><div id="JPmonth_3" class="JPmv" style="position:absolute;display:block;width:240px;left: 763px;border-right:1px solid black;">' +
+						'<canvas id="JPright0" width="240" height="220"></canvas>' +
+						'</div><div id="JPmonth_4" class="JPmv" style="position:absolute;display:block;width:240px;left: 1004px;border-right:1px solid black;">' +
+						'<canvas id="JPright1" width="240" height="220"></canvas>' +
+						'</div><div id="JPmonth_5" class="JPmv" style="position:absolute;display:block;width:240px;left: 1245px;border-right:1px solid black;">' +
+						'<canvas id="JPright2" width="280" height="220"></canvas></div>' +
+					'</div></div>' +
+				'</div>' + 
+			'</div>' + 
+			'<div class="palm-dialog-content">' +
+				'<div class="palm-dialog-separator"></div> <div class="dialog-message" style="margin-top:-5px; margin=bottom:-5px; padding:0"><div id="jumpto-picker" x-mojo-element="DatePicker"></div></div>' +
+			'</div>';
+		
+		// template section
+		this.uberTemplateAttrs = {
+			itemTemplate:'shared/ubertemplateitem', 
+			listTemplate:'shared/ubertemplatelistcontainer',
+			formatters: {
+					cat: function(value, model) { 
+						return 'url(/media/internal/.scrims/ubercalendar/icon-' + model.cat + '.png) no-repeat center right;';
+					}
+				},
+			swipeToDelete:true, 
+			emptyTemplate:'shared/ubertemplateemptylist'
+		};
+		this.controller.setupWidget("JPscroller",{mode: 'vertical'});
+		this.uberTemplates = [{subject: $L("No Templates Found")}];
+		this.uberTemplateModel = {listTitle: "templates", items:this.uberTemplates};
+		this.uberTemplatesList = this.sceneAssistant.controller.get('jp-template-list');
+		this.sceneAssistant.controller.setupWidget('jp-template-list', this.uberTemplateAttrs, this.uberTemplateModel);
+		this.uberTemplateFilterHandler = this.handleUberTemplateFilter.bind(this);
+		this.sceneAssistant.controller.setupWidget('uberTemplatefilterField',
+						this.filtAttrs = {filterFieldHeight: 40},
+						this.filtModel={disabled: false} 
+		);
+		this.uberTemplateDeleteHandler = this.handleUberTemplateDelete.bind(this);
+		// date time pickers 
+		this.sceneAssistant.controller.setupWidget('jumpto-picker', {label: $L('DATE')}, this.dateModel);
+		var btnrow = this.sceneAssistant.controller.get("Cancel").parentNode;
+		btnrow.setAttribute("style", "margin-top:-10px; margin-bottom:-5px");
+		btnrow.removeChild(btnrow.firstChild);
+		btnrow.removeChild(btnrow.firstChild);
+		btnrow.removeChild(btnrow.firstChild);
+		btnrow.innerHTML ='<table width="100%" style="margin-top:-20px; margin-bottom:-10px"><tr><td width="33%"><div id="Date" class="palm-button" x-mojo-tap-highlight="momentary" style="overflow:hidden" x-mojo-loc="">Date</div></td>' +
+						'<td width="33%"><div id="Today" class="palm-button" style="overflow:hidden" x-mojo-tap-highlight="momentary" x-mojo-loc="">Today</div></td>' +
+						'<td width="33%"><div id="Cancel" class="palm-button dismiss" x-mojo-tap-highlight="momentary" style="overflow:hidden" x-mojo-loc="">Cancel</div></td></tr></table>';
+		var dateBtn = this.sceneAssistant.controller.get("Date");
+		var todayBtn = this.sceneAssistant.controller.get("Today");
+		var cancBtn = this.sceneAssistant.controller.get("Cancel");
+		dateBtn.innerHTML = $L("Date");
+		todayBtn.innerHTML = $L("Today");
+		cancBtn.innerHTML = $L("Cancel");
+		// drawer & scroller setup
+		this.sceneAssistant.controller.setupWidget("JPscrol",{mode: 'horizontal-snap'}, {snapElements: {x:[this.sceneAssistant.controller.get("JPmonth_0"), this.sceneAssistant.controller.get("JPmonth_1"), this.sceneAssistant.controller.get("JPmonth_2"), this.sceneAssistant.controller.get("JPmonth_3"), this.sceneAssistant.controller.get("JPmonth_4"), this.sceneAssistant.controller.get("JPmonth_5")]}});
+		this.sceneAssistant.controller.setupWidget("jp_uber_radiobutton",
+			this.uberRadioAttrs = {
+				choices: [
+					{label: $L("Jump To"), value: 1},
+					{label: $L("Templates"), value: 2}
+				]
+			},
+			this.uberRadioModel = {
+				value: 1,
+				disabled: false
+			}
+		); 
+		
+		// setup month canvas context
+		this.redlineSplit = this.sceneAssistant.controller.get("JPmonth_2");
+		this.mthctx = [];
+		this.left0 = this.sceneAssistant.controller.get("JPleft0");
+		this.mthctx[0] = this.left0.getContext('2d');
+		this.left1 = this.sceneAssistant.controller.get("JPleft1");
+		this.mthctx[1] = this.left1.getContext('2d');
+		this.left2 = this.sceneAssistant.controller.get("JPleft2");
+		this.mthctx[2] = this.left2.getContext('2d');
+		this.right0 = this.sceneAssistant.controller.get("JPright0");
+		this.mthctx[3] = this.right0.getContext('2d');
+		this.right1 = this.sceneAssistant.controller.get("JPright1");
+		this.mthctx[4] = this.right1.getContext('2d');
+		this.right2 = this.sceneAssistant.controller.get("JPright2");
+		this.mthctx[5] = this.right2.getContext('2d');
+		// setup vars
+		this.startOfWeek = getPrefs().startOfWeek;
+		this._rdNames = [];
+		this.RMlast = {};
+		this.RM = [];
+		this.topCor = "";
+		this.leftCor = "";
+		this.rtdayimg = new Image();
+		this.rtdayimg.src = "./images/week-current-day.png";
+		this.rmdoRec = false;
+		this.rdayNames();
+		this.rmEval();
+		this.orderRM(this.RMlast.stD, this.RMlast.eD);
+		this.stImg = new Image();
+		this.stImg.src = "./images/day-allday-event-green-center.png";
+		this.eImg = new Image();
+		this.eImg.src = "./images/day-allday-event-red-center.png";
+		this.dImg = new Image();
+		this.dImg.src = "./images/day-event-green.png";
+		this.rImg = new Image();
+		this.rImg.src = "./images/day-event-yellow.png";
+		this.rmScroller = this.sceneAssistant.controller.get('JPscrol');
+		this.rtDate = new Date();
+		this.rmcalHold = false;
+		this.rmUpdate = false;
+	},
 	
 	activate: function() {
+		this.getTemplateEvents();
+		this.filtModel.disabled=true;
+		this.sceneAssistant.controller.modelChanged(this.filtModel, this);
+		this.sceneAssistant.controller.get('JP-template-cont').hide();
 		this.timePickerChangeHandler = this.timepicker.bindAsEventListener(this);
 		this.sceneAssistant.controller.listen('jumpto-picker', Mojo.Event.propertyChange,this.timePickerChangeHandler);			
 		this.dateListener = this.handleJumpto.bindAsEventListener(this,'Date'); //do not localize
@@ -27,7 +576,32 @@ var JumptoDialogAssistant = Class.create({
 		this.sceneAssistant.controller.get('Today').addEventListener(Mojo.Event.tap, this.todayListener);
 		
 		this.cancelTapHandler = this.handleCancel.bindAsEventListener(this);
-    this.sceneAssistant.controller.get('Cancel').addEventListener(Mojo.Event.tap, this.cancelTapHandler);
+		this.sceneAssistant.controller.get('Cancel').addEventListener(Mojo.Event.tap, this.cancelTapHandler);
+		this.uberRadioButtonHandler = this.handleUberRadioButton.bindAsEventListener(this); 
+		this.sceneAssistant.controller.listen('jp_uber_radiobutton', Mojo.Event.propertyChange,this.uberRadioButtonHandler);
+		this.markDay(new Date(), this.rtdayimg);
+		this.markDay(this.RMlast.stD, this.stImg , null/*color*/,0/*x adjust*/,null/*y adjust*/ ,2 /*wd adjust*/,this.colHW /*ht adjust*/);
+		this.markDay(this.RMlast.eD, this.eImg , null/*color*/, this.colHW-2/*x adjust*/,null/*y adjust*/ ,2 /*wd adjust*/,this.colHW /*ht adjust*/);
+		this.rmScrollTo(this.RMlast.stD)
+		this.uberTemplateTapHandler = this.handleUberTemplateTap.bind(this);
+		this.sceneAssistant.controller.listen(this.sceneAssistant.controller.get("jp-template-list"), Mojo.Event.listTap, this.uberTemplateTapHandler);
+		this.sceneAssistant.controller.listen(this.sceneAssistant.controller.get("jp-template-list"), Mojo.Event.listDelete, this.uberTemplateDeleteHandler);
+		
+		//tap handlers
+		this.calTapHandler = this.handleCalTap.bind(this);
+		this.calHoldHandler = this.handleCalHold.bind(this);
+		Mojo.Event.listen(this.left0, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.listen(this.left1, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.listen(this.left2, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.listen(this.right0, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.listen(this.right1, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.listen(this.right2, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.listen(this.left0, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.listen(this.left1, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.listen(this.left2, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.listen(this.right0, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.listen(this.right1, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.listen(this.right2, Mojo.Event.hold, this.calHoldHandler);
 	},
 	
 	deactivate: function() {
@@ -35,8 +609,49 @@ var JumptoDialogAssistant = Class.create({
 		this.sceneAssistant.controller.get('Date').removeEventListener(Mojo.Event.tap, this.dateListener);
 		this.sceneAssistant.controller.get('Today').removeEventListener(Mojo.Event.tap, this.todayListener);
 		this.sceneAssistant.controller.get('Cancel').removeEventListener(Mojo.Event.tap, this.cancelTapHandler);
+		this.sceneAssistant.controller.stopListening(this.sceneAssistant.controller.get("jp-template-list"), Mojo.Event.listTap, this.uberTemplateTapHandler);
+		this.sceneAssistant.controller.stopListening(this.sceneAssistant.controller.get("jp-template-list"), Mojo.Event.listDelete, this.uberTemplateDeleteHandler);
+		this.sceneAssistant.controller.stopListening('jp_uber_radiobutton', Mojo.Event.propertyChange,this.uberRadioButtonHandler);
+		Mojo.Event.stopListening(this.left0, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.stopListening(this.left1, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.stopListening(this.left2, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.stopListening(this.right0, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.stopListening(this.right1, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.stopListening(this.right2, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.stopListening(this.left0, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.stopListening(this.left1, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.stopListening(this.left2, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.stopListening(this.right0, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.stopListening(this.right1, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.stopListening(this.right2, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.stopListening(this.sceneAssistant.controller.get("uberTemplatefilterField"),Mojo.Event.filter, this.uberTemplateFilterHandler);
 	},
 	
+	rmHandleUpdate: function() {
+		// date picker model changed do redraw
+		for(var i = 0;i<6; i++) {
+			this.mthctx[i].clearRect(0, 0, 240,220);
+		}
+		this.rmEval();
+		this.orderRM(this.RMlast.stD, this.RMlast.eD);
+		this.markDay(new Date(), this.rtdayimg);
+		this.markDay(this.RMlast.stD, this.stImg , null/*color*/, 1/*x adjust*/,null/*y adjust*/ ,2 /*wd adjust*/,this.colHW /*ht adjust*/);
+		this.markDay(this.RMlast.eD, this.eImg , null/*color*/, this.colHW-2/*x adjust*/,null/*y adjust*/ ,2 /*wd adjust*/,this.colHW /*ht adjust*/);
+		this.rmScrollTo(this.RMlast.stD);
+	},
+	
+	rmScrollTo: function(x) {
+		if (x instanceof Date == true) { 
+			var whatMn = x.getMonth();
+			var whatYr = x.getFullYear();
+			var idx = this.risRendered(whatYr, whatMn);
+		} else if(x >= 0 && x <= 6) {
+			var idx = x;
+		}
+		//idx = idx * 241;
+		//idx = -idx -14;
+		this.sceneAssistant.controller.get('JPscrol').mojo.setSnapIndex(idx, true);
+	},
 	
 	handleJumpto:function(event,whereTo){
 		// Set up the zoom transition
@@ -52,15 +667,238 @@ var JumptoDialogAssistant = Class.create({
 			setCurrentDateTime(this.changedDate);
 			
 		// Run the transition
+		this.sceneAssistant.controller.get('uberTemplatefilterField').mojo.close();
 		myTransition.run(function(){Mojo.Log.info("intra-scene transition complete!");});
 	},
 	
+	deletedTemplateCallback: function(item) {
+		// delete the event from the event arrays & model
+		this.uberTemplateModel.items.splice(this.uberTemplateModel.items.indexOf(item), 1)
+		this.uberTemplateEvents.splice(item.idx, 1);
+		//this.uberTemplates.splice(item.idx, 1);
+	},
+	
+	handleUberTemplateDelete: function(event) {
+		if(!event.item || !event.item.id || event.item.idx === undefined) {
+			Mojo.Log.error("Delete template error:  no event id")
+			return;
+		}
+		var _id = event.item.id;
+		var idx = event.item.idx;
+		var tEvent = Object.clone(this.uberTemplateEvents[idx]);
+		if ((!tEvent.rrule || tEvent.rrule == "") && tEvent.parentId <=0){
+			// no recurrent schedule
+			var series = false;
+			var date = tEvent.start;
+		} else {
+			var series = true;
+			var date = null;
+		}
+		//delete the event
+		getCalendarService().deleteEvent(_id, series, date, this.deletedTemplateCallback.bind(this, event.item), this.sceneAssistant.controller);
+	},
+	
+	handleUberTemplateFilter: function(event) {
+		if(event.filterString == "" || !event.filterString) {
+			this.sceneAssistant.controller.get('jp-template-list').mojo.setLength(this.uberTemplates.length);
+			this.sceneAssistant.controller.get('jp-template-list').mojo.noticeUpdatedItems(0, this.uberTemplates);
+			this.sceneAssistant.controller.get('uberTemplatefilterField').mojo.close();
+			return;
+		}
+		var str = event.filterString;
+		str= str.toLowerCase();
+		var subList = [];
+		this.uberTemplates.each(function(item) {
+			if(item.subject && item.subject.toLowerCase().indexOf(str)>= 0) {
+				subList.push(item);
+			} else if(item.location && item.location.toLowerCase().indexOf(str)>= 0) {
+				subList.push(item);
+			} else if(item.cat && item.cat.toLowerCase().indexOf(str)>= 0) {
+				subList.push(item);
+			} else if(item.note && item.note.toLowerCase().indexOf(str)>= 0) {
+				subList.push(item);
+			}
+		}, this);
+		if(subList.length === 0) {
+			subList= [{subject: $L("No Templates Found")}];
+		}
+		this.sceneAssistant.controller.get('uberTemplatefilterField').mojo.setCount(subList.length);
+		this.sceneAssistant.controller.get('jp-template-list').mojo.setLength(subList.length);
+		this.sceneAssistant.controller.get('jp-template-list').mojo.noticeUpdatedItems(0, subList);
+	},
+	
 	handleCancel:function(event){
+		this.sceneAssistant.controller.get('jp-template-list').mojo.setLength(this.uberTemplates.length);
+		this.sceneAssistant.controller.get('jp-template-list').mojo.noticeUpdatedItems(0, this.uberTemplates);
+		this.sceneAssistant.controller.get('uberTemplatefilterField').mojo.close();
 		this.widget.mojo.close();
 	},
 	
+	setEventCallBack: function(response) {
+		// Close the dialog
+		this.sceneAssistant.controller.get('uberTemplatefilterField').mojo.close();
+		this.widget.mojo.close();
+		// jumpto event date
+		setCurrentDateTime(this.changedDate);
+		
+		if(response.id) {
+			this.targetEvent.id = response.id +"";	
+		}
+		
+		if(this.gotoEditFromTemplate && this.sceneAssistant.editFromTemplate) {
+			this.sceneAssistant.editFromTemplate(this.targetEvent, this.editingTemplate);
+		}
+	},
+	
+	setEventsFailCallback: function(e){
+		Mojo.Log.error("failed to set new event: " + e.errorText);
+	},
+	
+	handleUberTemplateTap: function(event) {
+		if(event.originalEvent.down.altKey === true) {
+			// editing a template, go to edit scene from sceneAs
+			var startTS = new Date(2030,0,1,0,0,0,0).getTime();
+			var refTS = Date.UTC(2030, 0, 1, 0, 0, 0, 0);
+			this.targetEvent = Object.clone(this.uberTemplateEvents[event.item.idx]);
+			var templateStartTS = this.targetEvent.start;
+			var templateEndTS = this.targetEvent.end;
+			var allDay = this.targetEvent.allDay;
+			this.targetEvent.originalstartTimestamp = this.targetEvent.start;
+			if(allDay === true) {
+				this.targetEvent.start = startTS;
+				this.targetEvent.startTimestamp = startTS;
+				this.targetEvent.end = startTS + 23*60*60*1000 + 59*60*1000 + 59*1000;
+				this.targetEvent.endTimestamp = startTS + 23*60*60*1000 + 59*60*1000 + 59*1000;
+			} else {
+				this.targetEvent.start = startTS + (templateStartTS - refTS);
+				this.targetEvent.startTimestamp = startTS + (templateStartTS - refTS);
+				this.targetEvent.end = startTS + (templateEndTS - refTS);
+				this.targetEvent.endTimestamp = startTS + (templateEndTS - refTS);
+			}
+			this.gotoEditFromTemplate = true;
+			this.editingTemplate = true;
+			getCalendarService().setEvent(this.targetEvent, this.setEventCallBack.bind(this), this.sceneAssistant.controller, this.setEventsFailCallback);
+		} else {
+			// tapped a template need to create a new event
+			this.editingTemplate = false;
+			var startTS = this.dateModel.date.clearTime().getTime();
+			var refTS = Date.UTC(2030, 0, 1, 0, 0, 0, 0);
+			this.targetEvent = Object.clone(this.uberTemplateEvents[event.item.idx]);
+			var templateStartTS = this.targetEvent.start;
+			var templateEndTS = this.targetEvent.end;
+			var allDay = this.targetEvent.allDay;
+			this.targetEvent.id = 0; // reset so it's a new event
+			if(this.targetEvent.parentId) {this.targetEvent.parentId = 0;} 
+			if(allDay === true) {
+				this.targetEvent.start = startTS;
+				this.targetEvent.startTimestamp = startTS;
+				this.targetEvent.end = startTS + 23*60*60*1000 + 59*60*1000 + 59*1000;
+				this.targetEvent.endTimestamp = startTS + 23*60*60*1000 + 59*60*1000 + 59*1000;
+			} else {
+				this.targetEvent.start = startTS + (templateStartTS - refTS);
+				this.targetEvent.startTimestamp = startTS + (templateStartTS - refTS);
+				this.targetEvent.end = startTS + (templateEndTS - refTS);
+				this.targetEvent.endTimestamp = startTS + (templateEndTS - refTS);
+
+			}
+			// set event
+			getCalendarService().setEvent(this.targetEvent, this.setEventCallBack.bind(this), this.sceneAssistant.controller, this.setEventsFailCallback);
+		}
+	},
+	
+	handleUberRadioButton: function(event) {
+		// hide or show
+		if(event.value === 2) {
+			this.filtModel.disabled=false;
+			this.sceneAssistant.controller.modelChanged(this.filtModel, this);
+			this.sceneAssistant.controller.get('JPscrol').hide();
+			this.sceneAssistant.controller.get('JP-template-cont').show();
+			Mojo.Event.listen(this.sceneAssistant.controller.get("uberTemplatefilterField"),Mojo.Event.filter, this.uberTemplateFilterHandler);
+		} else {
+			this.filtModel.disabled=true;
+			this.sceneAssistant.controller.modelChanged(this.filtModel, this);			this.sceneAssistant.controller.get('JPscroller').mojo.revealTop();
+			this.sceneAssistant.controller.get('JPscrol').show();
+			this.sceneAssistant.controller.get('JP-template-cont').hide();
+			this.sceneAssistant.controller.get('JPscrol').mojo.setSnapIndex(0, false);
+			this.rmScrollTo(this.RMlast.stD);
+		}
+	},
+	
 	timepicker: function(event){
 		//Mojo.Log.info("picked time"+event.value);
 		this.changedDate = event.value;
+		if(!this.rmUpdate){
+			this.rmHandleUpdate();
+		} else {
+			this.rmUpdate = false;
+		}
+	},
+		//Calendar Tap Handlers
+	handleCalHold: function(event) {
+		// set the hold var, send to tap handler
+		this.rmcalHold = true;
+		this.handleCalTap(event);
+	},
+	
+	handleCalTap: function(event) {
+		Event.stop(event);
+		var x = event.down.offsetX;
+		var y = event.down.offsetY;
+		//get rid of tap areas not in calendar day area
+		if(x <= 30 || y <= 40 || x>= 241) {
+			this.rmcalHold = false;
+			return;
+		}
+		var rmcan = event.target.id;
+		switch (rmcan) {
+			case 'JPleft0':
+				var rmindex = 0;
+				break;
+			case 'JPleft1':
+				var rmindex = 1;
+				break;
+			case 'JPleft2':
+				var rmindex = 2;
+				break;
+			case 'JPright0':
+				var rmindex = 3;
+				break;
+			case 'JPright1':
+				var rmindex = 4;
+				break;
+			case 'JPright2':
+				var rmindex = 5;
+				break;
+		}
+		// get first day index month year
+		if (x && y && (rmindex !== undefined)) {
+			var calx = x - 30;
+			var caly = y - 40;
+			var cald1idx = this.RM[rmindex].fstDayLidx;
+			var calcol = Math.floor(calx/this.colHW);
+			var calrow = Math.floor(caly/this.colHW);
+			var caldate = ((calrow * 7) + calcol +1) - cald1idx;
+			if((caldate > this.RM[rmindex].maxdays) || (caldate <= 0)) {
+				// tapped an area with invalid date
+				this.rmcalHold = false;
+				return;
+			}
+			var calmon = this.RM[rmindex].month;
+			var calyear = this.RM[rmindex].year;
+			if((calyear !== undefined) && (calmon !== undefined) && (caldate !== undefined)) {
+				// setting end date
+				var jpTo = new Date(calyear, calmon, caldate, 12);
+				this.dateModel.date = jpTo;
+				this.rmUpdate =!this.rmcalHold;
+				this.sceneAssistant.controller.modelChanged(this.dateModel);
+				Mojo.Event.send(this.sceneAssistant.controller.get('jumpto-picker'), 'mojo-property-change', {value: this.dateModel.date} )
+				if(this.rmcalHold === false) {
+					this.handleJumpto(event, 'Date');
+				} else {
+					this.rmcalHold = false;	
+				}
+			}
+		}
+		return;
 	},
 });
\ No newline at end of file
diff --git a/usr/palm/applications/com.palm.app.calendar/javascripts/recurrence-warning.js b/usr/palm/applications/com.palm.app.calendar/javascripts/recurrence-warning.js
index e7499fe..60f7de6 100644
--- a/usr/palm/applications/com.palm.app.calendar/javascripts/recurrence-warning.js
+++ b/usr/palm/applications/com.palm.app.calendar/javascripts/recurrence-warning.js
@@ -1,3 +1,4 @@
+
 /*
 	Small controller class used for the dialog sample.
 
@@ -13,7 +14,19 @@ var RecurrenceWarning = Class.create({
 	
 	setup : function(widget) {
 		this.widget = widget;
+		var cancelDiv = this.sceneAssistant.controller.get('Cancel');
+		var singleDiv = this.sceneAssistant.controller.get('Single');
+		singleDiv.setAttribute("class", "palm-button secondary");
+		var buttonDiv = this.sceneAssistant.controller.get('Cancel').parentNode;
+		var thisFutureBtn = this.sceneAssistant.controller.document.createElement("div");
+		thisFutureBtn.setAttribute("id", "ThisFuture");
+		thisFutureBtn.setAttribute("class", "palm-button");
+		thisFutureBtn.setAttribute("x-mojo-tap-highlight", "momentary");
+		thisFutureBtn.setAttribute("x-mojo-loc",'""');
+		thisFutureBtn.innerHTML = $L("Change this and future");
+		buttonDiv.insertBefore(thisFutureBtn, cancelDiv);
 		this.sceneAssistant.controller.get('Series').addEventListener(Mojo.Event.tap, this.handleSeries.bindAsEventListener(this));
+		this.sceneAssistant.controller.get('ThisFuture').addEventListener(Mojo.Event.tap, this.handleThisAndFuture.bindAsEventListener(this));
 		this.sceneAssistant.controller.get('Single').addEventListener(Mojo.Event.tap, this.handleSingle.bindAsEventListener(this));
 		this.sceneAssistant.controller.get('Cancel').addEventListener(Mojo.Event.tap, this.handleCancel.bindAsEventListener(this));
 		
@@ -32,6 +45,14 @@ var RecurrenceWarning = Class.create({
 		
 		
 	},
+	
+	handleThisAndFuture: function() {
+		Mojo.Log.info("in handle this and future");
+		this.widget.mojo.close();
+		Event.stop(event);
+		this.sceneAssistant.saveThisAndFuture();
+	},
+
 	handleSingle: function(event) {
 		//Mojo.Log.info("************handling single");
 		this.widget.mojo.close();		
@@ -50,4 +71,686 @@ var RecurrenceWarning = Class.create({
 	},
 		
 	
+});
+
+var UberTimezoneConverter = Class.create({
+	
+	initialize: function(controller, sceneAssistant, tz, timeStamp) {
+		this.app = getAppAssistant();
+		this.sceneAssistant = sceneAssistant;
+		this.controller = controller;
+		this.timeStamp = timeStamp;
+		this.eventTimezone = tz;
+		this.tzDate = new Date(timeStamp);
+		this.tzOffset = -1*this.tzDate.getTimezoneOffset();
+		this.standardOffset = tz.offsetFromUTC;
+		if(this.tzOffset - this.standardOffset === 0) {
+			this.uberDST = false;
+		} else {
+			this.uberDST = true;
+		}
+		this.uberTzIds = [];	
+		this.uberTzIds.push({Description:"Empty list"});
+	},
+	
+	getTimeZoneList: function() {
+		this.getTimeZoneValuesReq = this.app.systemService.getTimeZoneValues(this.timeZoneQuery.bind(this));
+	},
+	
+	timeZoneQuery: function(payload) {
+		if(!payload.timeZone){
+			return;
+		}
+		this.tzList =[];
+		var len = payload.timeZone.length;
+		for (var i = 0; i < len; i++) {
+			var obj = {};
+			var tZone = payload.timeZone[i];
+			obj.Country = $L(tZone.Country);
+			obj.City = $L(tZone.City);
+			obj.CountryAndCity = $L(tZone.Country) +' '+ $L(tZone.City);
+			obj.Description = $L(tZone.Description);
+			obj.ZoneID = tZone.ZoneID;
+			obj.offsetFromUTC = tZone.offsetFromUTC;
+			obj.supportsDST = tZone.supportsDST;
+			this.tzList.push(obj);
+		}
+		this.tzList.sort(this.compareCountry.bind(this));
+		this.tzListModel.items = this.tzList;
+		this.controller.modelChanged(this.tzListModel, this);
+		this.filtModel.disabled=false;
+		this.controller.modelChanged(this.filtModel, this);
+		this.controller.get('uber-timezone-grptitle').innerHTML = '<span x-mojo-loc="">' + $L("Choose the nearest major city") + '</span>';
+		Mojo.Event.listen(this.controller.get("uberTimezonefilterField"),Mojo.Event.filter, this.uberTimezoneFilterHandler);
+		this.controller.get('uberTimezonefilterField').mojo.setCount(this.tzList.length);
+		this.controller.get('uber-timezone-list').mojo.setLength(this.tzList.length);
+		this.controller.get('uber-timezone-list').mojo.noticeUpdatedItems(0, this.tzList);
+	},
+	
+	compareCountry: function(a,b) {
+		var nameA = a.CountryAndCity.toLocaleLowerCase();
+		var nameB = b.CountryAndCity.toLocaleLowerCase();
+		return nameA.localeCompare(nameB);
+	},
+	
+	handleUberTimezoneFilter: function(event) {
+		if(event.filterString == "" || !event.filterString) {
+			this.controller.get('uber-timezone-list').mojo.setLength(this.tzList.length);
+			this.controller.get('uber-timezone-list').mojo.noticeUpdatedItems(0, this.tzList);
+			this.controller.get('uberTimezonefilterField').mojo.close();
+			return;
+		}
+		var matching, lowerFilter;
+		var filterString = event.filterString;
+		if (filterString) {
+			lowerFilter = filterString.toLocaleLowerCase();
+			function matchesName (tzone) {
+				return tzone.Country.toLocaleLowerCase().startsWith(lowerFilter) || tzone.City.toLocaleLowerCase().startsWith(lowerFilter) || tzone.Description.toLocaleLowerCase().include(lowerFilter);
+			}
+			matching = this.tzList.findAll(matchesName);
+		} else {
+			matching = this.tzList;
+		}
+		this.tzListModel.items = matching;	
+		this.controller.get('uber-timezone-list').mojo.noticeUpdatedItems(0, matching);		
+		this.controller.get('uber-timezone-list').mojo.setLength(matching.length);
+		this.controller.get('uberTimezonefilterField').mojo.setCount(matching.length);
+	},
+	
+	setup : function(widget) {
+		this.widget = widget;
+		
+		//manual settings
+		this.controller.get('uber-manualtz-grptitle').innerHTML = $L('Timezone properties');
+		this.toggleAttr = {modelProperty: "value", trueValue: true, falseValue:false, trueLabel: "+", falseLabel: "-"};
+		this.plusMinus = parseInt(this.tzOffset,10) >= 0 ? true : false;
+		this.controller.setupWidget('uber-tz-plusminus-toggle', this.toggleAttr, this.plusMinusModel = {value: this.plusMinus});
+		this.uberHrsOffsetModel = {value: Math.floor(Math.abs(parseInt(this.tzOffset,10))/60)};
+		this.uberMinsOffsetModel = {value: Math.abs(parseInt(this.tzOffset,10)) - (this.uberHrsOffsetModel.value*60)};
+		var parentDiv = this.controller.get('uber-tz-dst-toggle').parentNode;
+		var titleDiv = this.controller.document.createElement("div");
+		titleDiv.setAttribute("class", "title");
+		titleDiv.setAttribute("x-mojo-loc",'""');
+		titleDiv.innerHTML = $L("Daylight Savings");
+		parentDiv.appendChild(titleDiv);
+		this.toggleAttr = {modelProperty: "value", trueValue: true, falseValue:false}
+		this.controller.setupWidget('uber-tz-dst-toggle', this.toggleAttr,
+				this.dstModel = {value: this.uberDST, disabled: false}
+				);
+		this.controller.setupWidget('uber-tzhours-offset',
+				this.hrsAttrs ={label: ' ',modelProperty:'value', min: 0, max:14},
+				this.uberHrsOffsetModel
+				);
+		this.controller.setupWidget('uber-tzmins-offset',
+				this.minsAttr = {label:' ',modelProperty:'value', min: 0, max:45, padNumbers: true},
+				this.uberMinsOffsetModel
+				);
+		
+		
+		//timezone list
+		this.tzList = [];
+		this.tzListAttrs = {
+			itemTemplate:'shared/ubertz-item',
+			listTemplate:'shared/uber-tz-listcontainer',
+			formatters: {
+					Description: function(value, model) {
+						return model.Description;
+					}
+			}
+		};
+		this.controller.get ('Cancel').innerHTML=$L('Cancel');
+		this.controller.setupWidget("TZscroller",{mode: 'vertical'});
+		this.tzListModel = {listTitle: 'timezones', items: this.uberTzIds};
+		this.controller.setupWidget('uber-timezone-list', this.tzListAttrs, this.tzListModel);
+		this.newTS = this.timeStamp;
+		var msgDiv = this.controller.get('uber-tz-msg');
+		var result, txt, patt = /\//;
+		result = this.eventTimezone.ZoneID.split(patt);
+		if(result && result.length === 2){
+			txt = $L(result[0]) + "/" + $L(result[1]);
+		} else if (result && (result.length === 1 || result.length > 2)){
+			txt =  $L(this.eventTimezone.ZoneID);
+		}
+		msgDiv.innerHTML = $L('Current Timezone') + ': ' + txt;
+		this.uberTimezoneFilterHandler = this.handleUberTimezoneFilter.bind(this);
+		this.controller.setupWidget('uberTimezonefilterField',
+						this.filtAttrs = {filterFieldHeight: 40},
+						this.filtModel={disabled: false} 
+		);
+		this.changingDST = false;
+	},
+	
+	handleTimezoneListTap: function(event){
+		if(event.item && event.item !== undefined){
+			var tz = event.item;
+			var zoneID = tz.ZoneID;
+			this.tzOffset = tz.offsetFromUTC;
+			this.dstModel.value = tz.supportsDST ? this.uberDST : false;
+			this.dstModel.disabled = !tz.supportsDST;
+			this.plusMinusModel.value = this.plusMinus = parseInt(this.tzOffset,10) >= 0 ? true : false;
+			var hrs = Math.floor(parseInt(this.tzOffset,10)/60);
+			if(this.dstModel.value === true){
+				hrs = hrs + 1;
+			}
+			this.uberHrsOffsetModel.value= Math.abs(hrs);
+			this.uberMinsOffsetModel.value= Math.abs(parseInt(this.tzOffset,10)) - Math.abs((Math.floor(parseInt(this.tzOffset,10)/60)*60));
+			this.controller.modelChanged(this.plusMinusModel, this);
+			this.controller.modelChanged(this.uberHrsOffsetModel, this);
+			this.controller.modelChanged(this.uberMinsOffsetModel, this);
+			this.changingDST = true;
+			this.controller.modelChanged(this.dstModel, this);
+			this.changingDST = false;
+		}
+		if(this.filtModel.disabled === false){
+			this.controller.get('uberTimezonefilterField').mojo.close();
+			this.filtModel.disabled = true;
+			this.controller.modelChanged(this.filtModel, this);
+			Mojo.Event.stopListening(this.controller.get("uberTimezonefilterField"),Mojo.Event.filter, this.uberTimezoneFilterHandler);
+		}
+		this.controller.get('uber-manual-tz-grp').show();
+		var result, txt, patt = /\//;
+		result = zoneID.split(patt);
+		if(result && result.length === 2){
+			txt = $L(result[0]) + "/" + $L(result[1]);
+		} else if (result && (result.length === 1 || result.length > 2)){
+			txt =  $L(zoneID);
+		}
+		this.controller.get('uber-manualtz-grptitle').innerHTML = txt;
+		this.controller.get('uber-timezone-cont').hide();
+		this.showingList = false;
+	},
+	
+	activate: function(){
+		this.showingList = false;
+		this.filtModel.disabled=true;
+		this.controller.modelChanged(this.filtModel, this);
+		this.controller.get('uber-timezone-cont').hide();
+		this.cancelListener=this.onCancel.bindAsEventListener(this);
+		this.getTimezonesListener=this.handleGetTimezones.bindAsEventListener(this);
+		this.applyTzHandler = this.setPickedTimezone.bindAsEventListener(this);
+		this.controller.get('uber-gettz-button').innerHTML = $L('Get timezones');
+		this.controller.get('uber-gettz-button').addEventListener(Mojo.Event.tap, this.getTimezonesListener);
+		this.controller.get('uber-tz-apply').innerHTML = $L('Apply');
+		this.controller.get ('uber-tz-apply').addEventListener(Mojo.Event.tap, this.applyTzHandler);
+		this.controller.get ('Cancel').addEventListener(Mojo.Event.tap, this.cancelListener);
+		this.plusMinusHandler = this.handlePlusMinus.bindAsEventListener(this);
+		this.DSTHandler = this.handleDST.bindAsEventListener(this);
+		this.hrsChangeHandler = this.handleHrsChange.bindAsEventListener(this);
+		this.minsChangeHandler = this.handleMinsChange.bindAsEventListener(this);
+		Mojo.Event.listen(this.controller.get('uber-tz-dst-toggle'),Mojo.Event.propertyChange, this.DSTHandler);
+		Mojo.Event.listen(this.controller.get('uber-tz-plusminus-toggle'),Mojo.Event.propertyChange, this.plusMinusHandler);
+		this.controller.listen('uber-tzhours-offset',Mojo.Event.propertyChange, this.hrsChangeHandler);
+		this.controller.listen('uber-tzmins-offset',Mojo.Event.propertyChange, this.minsChangeHandler);
+	},
+	
+	deactivate: function(){
+		this.controller.stopListening("uber-timezone-list", Mojo.Event.listTap, this.uberTimezoneTapHandler);
+		this.controller.get ('Cancel').removeEventListener(Mojo.Event.tap, this.cancelTapHandler);
+		this.controller.get ('uber-tz-apply').removeEventListener(Mojo.Event.tap, this.applyTzHandler);
+		this.controller.get ('uber-gettz-button').removeEventListener(Mojo.Event.tap, this.getTimezonesHandler);
+		if(this.filtModel.disabled === false){
+			this.controller.get('uberTimezonefilterField').mojo.close();
+			Mojo.Event.stopListening("uberTimezonefilterField",Mojo.Event.filter, this.uberTimezoneFilterHandler);
+		}
+		Mojo.Event.stopListening(this.controller.get('uber-tz-dst-toggle'),Mojo.Event.propertyChange, this.DSTHandler);
+		Mojo.Event.stopListening(this.controller.get('uber-tz-plusminus-toggle'),Mojo.Event.propertyChange, this.plusMinusHandler);
+		this.controller.stopListening('uber-tzhours-offset',Mojo.Event.propertyChange, this.hrsChangeHandler);
+		this.controller.stopListening('uber-tzmins-offset',Mojo.Event.propertyChange, this.minsChangeHandler);
+	},
+	
+	onCancel: function (event) {
+		if(this.showingList){
+			this.controller.get('uber-timezone-list').mojo.setLength(this.tzList.length);
+			this.controller.get('uber-timezone-list').mojo.noticeUpdatedItems(0, this.tzList);
+			if(this.filtModel.disabled === false){
+				this.controller.get('uberTimezonefilterField').mojo.close();
+			}
+		}
+		this.widget.mojo.close();
+		Event.stop(event);
+	},
+	
+	handleGetTimezones: function(event) {
+		this.controller.get('uber-manual-tz-grp').hide();
+		this.controller.get("uber-timezone-cont").show();
+		this.showingList = true;
+		this.getTimeZoneList();
+		this.uberTimezoneTapHandler = this.handleTimezoneListTap.bind(this);
+		this.controller.listen(this.controller.get("uber-timezone-list"), Mojo.Event.listTap, this.uberTimezoneTapHandler);
+		Event.stop(event);
+	},
+	
+	handleHrsChange: function(event){
+		if(event && event.value !== undefined) {
+			this.uberHrsOffsetModel.value = event.value;
+		}
+		Event.stop(event);
+	},
+	
+	handleMinsChange: function(event){
+		if(event && event.value !== undefined) {
+			if(event.value ===  0 || event.value === 30 || event.value === 45) {
+				this.uberMinsOffsetModel.value = event.value;
+			} else {
+				var step = Math.floor(event.value/15);
+				switch (step) {
+					case 0:
+					case 1:
+						this.uberMinsOffsetModel.value = 0;
+						break;
+					case 2:
+						this.uberMinsOffsetModel.value = 30;
+						break;
+					case 3:
+						this.uberMinsOffsetModel.value = 45;
+						break;
+				}
+				this.controller.modelChanged(this.uberMinsOffsetModel, this);
+			}
+		}
+		Event.stop(event);
+	},
+	
+	handlePlusMinus: function (event) {
+		if(event && event.value !== undefined) {
+			this.plusMinusModel.value = this.plusMinus = event.value;
+		}
+		Event.stop(event);
+	},
+	
+	handleDST: function(event){
+		if(event && event.value !== undefined) {
+			this.dstModel.value = this.uberDST = event.value;
+			var hrs = this.uberHrsOffsetModel.value;
+			if(this.uberDST === true && this.changingDST === false) {
+				if(hrs === 0){
+					this.plusMinusModel.value = this.plusMinus = true;
+					this.uberHrsOffsetModel.value = 1;
+					this.controller.modelChanged(this.uberHrsOffsetModel, this);
+					this.controller.modelChanged(this.plusMinusModelModel, this);
+				} else {
+					this.uberHrsOffsetModel.value = hrs - (this.plusMinus ? -1 : 1);
+					this.controller.modelChanged(this.uberHrsOffsetModel, this);
+				}
+			} else if(this.uberDST === false && this.changingDST === false) {
+				if(hrs === 0){
+					this.plusMinusModel.value = this.plusMinus = false;
+					this.uberHrsOffsetModel.value = 1;
+					this.controller.modelChanged(this.uberHrsOffsetModel, this);
+					this.controller.modelChanged(this.plusMinusModelModel, this);
+				} else {
+					this.uberHrsOffsetModel.value = hrs + (this.plusMinus ? -1 : 1);
+					this.controller.modelChanged(this.uberHrsOffsetModel, this);
+				}
+			}
+		}
+		Event.stop(event);
+	},
+	
+	//convert other ts to UTC by adding offset then UTC to local
+	setPickedTimezone: function() {
+		var year = this.tzDate.getFullYear();
+		var mon = this.tzDate.getMonth();
+		var day = this.tzDate.getDate();
+		var hrs = this.tzDate.getHours();
+		var mins = this.tzDate.getMinutes();
+		var secs = this.tzDate.getSeconds();
+		var utcTS = Date.UTC(year, mon, day, hrs, mins, secs, 0);
+		var chosenOffset = ((this.plusMinusModel.value ? 1 : -1)*(this.uberHrsOffsetModel.value*60 + this.uberMinsOffsetModel.value));// + (this.uberDST ? 60 : 0);
+		var chosenUTC = utcTS - chosenOffset*60*1000;
+		this.localDate = new Date(0);
+		this.localDate.setUTCMilliseconds(chosenUTC);
+		this.sceneAssistant.convertedTS = this.localDate && this.localDate.getTime();
+		this.widget.mojo.close();
+		this.sceneAssistant.uberConverterCallBack();
+	}
+});
+
+var UberAdvancedCopy = Class.create({
+
+	initialize: function(controller, sceneAssistant, persObj) {
+		this.app = getAppAssistant();
+		this.sceneAssistant = sceneAssistant;
+		this.controller = controller;
+		if(persObj && persObj.details && persObj.details.record){
+			this.personObj = persObj.details.record;
+		}
+		this.setupPickedArray();
+		this.parsePerObj();
+	},
+	
+	setupPickedArray: function setupPickedArray(){
+		var arr = [];
+		arr[0] = {field: "note", replace: false, data:""};
+		arr[1] = {field: "loc", replace: false, data:""};
+		arr[2] = {field: "subject", replace: false, data:""};
+		this.pickedArray = arr;
+	},
+	
+	findType: function findType(type){
+		if(type !== undefined){
+			var loc;
+			switch(type){
+							case 0:
+							loc = $L("HOME");
+							break;
+							
+							case 1:
+							loc = $L("WORK");
+							break;
+							
+							case 3:
+							loc = $L("MOBILE");
+							break;
+							
+							case 2:
+							default:
+							loc = $L("OTHER");
+							break;
+			}
+			return loc;
+		}
+		return false;
+	},
+	
+	parsePerObj: function (){
+		if(this.personObj && this.personObj != undefined){
+			this.personDataArray = [];
+			var contact = this.personObj;
+			var obj, lname, fname, item, txt, fields = ["lastName", "firstName", "emailAddresses", "phoneNumbers", "urls", "notes", "addresses", "companyName", "jobTitle", "spouse", "nickname"];
+			for(var prop in this.personObj){
+				
+				if(this.personObj.hasOwnProperty(prop)){
+					if(fields.indexOf(prop) !== -1){
+						
+						obj = {}, item = {}, txt ="";
+						obj = this.personObj[prop];
+						//console.error(" person obj changed ::::::::::::: " + prop + ": " + JSON.stringify(obj));
+						if(prop === "lastName"){
+							lname = (obj || "");
+						} else if(prop === "firstName"){
+							fname = (obj || "");
+						} else if(prop === "companyName"){
+							item.label = "";
+							item.field = "";
+							txt = (obj || ""); 
+							if(txt){
+								item.data = txt;
+								this.personDataArray.push(item);
+							}
+						} else if(prop === "jobTitle"){
+							item.label = "";
+							item.field = "";
+							txt = (obj || ""); 
+							if(txt){
+								item.data = txt;
+								this.personDataArray.push(item);
+							}
+						} else if(prop === "notes" || prop === "birthday" || prop === "nickname" || prop === "spouse"){
+							var len = obj && obj.length;
+							if(len && len > 0){
+								for(var i =0;i < len; i++){
+									item = {};
+									item.field = "";
+									txt = "";
+									if(obj[i]){
+										item.label = "";
+										txt = (obj[i] || ""); 
+										if(txt){
+											item.data = txt;
+											this.personDataArray.push(item);
+										}
+									}
+								}
+							}
+						} else if(prop === "addresses"){
+							var len = obj && obj.length;
+							if(len && len > 0){
+								for(var i =0;i < len; i++){
+									item = {};
+									item.field = "";
+									txt = "";
+									if(obj[i].freeformAddress && obj[i].freeformAddress != ""){
+										txt = obj[i].freeformAddress;
+									} else if(obj[i].streetAddress || obj[i].city || obj[i].country || obj[i].state || obj[i].zipCode) {
+										txt = obj[i].streetAddress ? obj[i].streetAddress : "";
+										txt += obj[i].city ? (txt !== "" ? ", " : "") + obj[i].city : "";
+										txt += obj[i].state ? (txt !== "" ? ", " : "") + obj[i].state : "";
+										txt += obj[i].zipCode ? (txt !== "" ? ", " : "") + obj[i].zipCode : "";
+										txt += obj[i].country ? (txt !== "" ? ", " : "") + obj[i].country  : "";
+									}
+									if(obj[i].label !== undefined ) {
+										item.label = this.findType(obj[i].label);
+										if(txt){
+											item.data = txt;
+											this.personDataArray.push(item);
+										}
+									}
+								}
+							}
+						} else if(prop === "urls" || prop === "phoneNumbers"){
+							var len = obj && obj.length;
+							if(len && len > 0){
+								for(var i =0;i < len; i++){
+									item = {};
+									item.field = "";
+									txt = "";
+									item.label = this.findType(obj[i].label) || "";
+									if(obj[i].url){
+										txt = obj[i].url;
+									} else if(obj[i].type && obj[i].type === "PHONE"){
+										txt = obj[i].value;
+									}
+									if(txt){
+										item.data = txt;
+										this.personDataArray.push(item);
+									}
+								}
+							}
+						}
+					}
+				}
+			}
+			if(lname || fname){
+				item = {};
+				item.label = "";
+				item.field = "";
+				txt = (fname || "");
+				txt += txt !== "" ? " " + (lname || "") : (lname || ""); 
+				if(txt){
+					item.data = txt;
+					this.personDataArray.unshift(item);
+				}
+			}
+		}
+	},
+	
+	setup : function(widget) {
+		this.widget = widget;
+		var tzList = this.controller.get('uber-manual-tz-grp');
+		var parentDiv = tzList.parentNode;
+		var tzScroller = this.controller.get('TZscroller');
+		var hgt = '340px', devinfoHeight = Mojo.Environment.DeviceInfo.screenHeight;
+		if(devinfoHeight){
+			if(devinfoHeight == 400){
+				hgt = '260px';
+			}
+		}
+		tzScroller.setAttribute('style', "height:"+hgt+";");
+		parentDiv.removeChild(tzList);
+		tzScroller.innerHTML = '<div class="palm-group"><div class="palm-group-title" x-mojo-loc="">' + $L('check to replace, clear to append') + '</div>' +
+									'<div class="palm-row single"><div class="palm-row-wrapper">' +
+									'<table width="100%" style="margin-left:-20px;">	<tr ><td width="30%" nowrap="nowrap"><div ><div id="adv-copy-subject" x-mojo-element="CheckBox" class="icon left" style:"padding:0px; margin:0px -10px 0px -10px;"></div><div style="font:10px prelude; overflow:hidden;padding-top:15px;" x-mojo-loc="">' + $L('Subject')+ '</div></div></td>' +
+										'<td width="30%" nowrap="nowrap"><div><div id="adv-copy-location" x-mojo-element="CheckBox" class="icon left" style:"padding=2px; margin:2px;></div><div style="font:10px prelude; overflow:hidden;padding-top:15px;" x-mojo-loc="">' + $L('Location')+ '</div></div></td>' +
+										'<td width="30% right="0px"" nowrap="nowrap" style="margin-left:30px;"><div><div id="adv-copy-note" x-mojo-element="CheckBox" class="icon left" style:"padding=2px; margin:2px;></div><div style="font:10px prelude; overflow:hidden;padding-top:15px;" x-mojo-loc="">' + $L('Note')+ '</div></div></td>' +
+									'</tr></table></div></div>' +
+								'</div>';
+		
+		if(this.personDataArray && this.personDataArray.length > 0){
+			var item, len = this.personDataArray.length;
+			for(var i=0;i<len;i++){
+				item = {};
+				item = this.personDataArray[i];
+				var newDiv1 = document.createElement('div');
+				newDiv1.setAttribute('class', "palm-row");
+				newDiv1.innerHTML =  '<div class="palm-row-wrapper">' + 
+						'<table width="100%"><tr><td width="70%" ><div id="'+i+'_person_obj_item_txt" style="font:12px prelude; overflow:hidden;max-width:100%">' + (item.label != "" ? item.label + ": " + item.data : item.data)+ '</div></td>' +
+							'<td width="30%" nowrap="nowrap"><div id="'+i+'_person_obj_item_button" style="overflow:hidden;max-width:100%;" class="palm-button" x-mojo-tap-highlight="momentary" x-mojo-loc="">'+ $L('Not in use') +  '</div></td>' +
+						'</tr></table></div>';
+				tzScroller.appendChild(newDiv1);
+				//this.controller.setupWidget(i+'_person_obj_item_button', {},{label:"", disabled:false});
+			}
+		}
+		var parentDiv = this.controller.get('Cancel').parentNode.parentNode.parentNode.parentNode;
+		parentDiv.innerHTML = '<table width="100%" style="margin-top:-5px; margin-bottom:-5px"><tr><td width="50%"><div id="Cancel" class="palm-button dismiss" x-mojo-tap-highlight="momentary" style="overflow:hidden" x-mojo-loc="">' + $L("Cancel") + '</div></td>' +
+				'<td width="50%"><div id="Done" class="palm-button affimative" x-mojo-tap-highlight="momentary" style="overflow:hidden" x-mojo-loc="">' + $L('Done') + '</div></td></tr></table>';
+		
+		this.controller.setupWidget("TZscroller",{mode: 'vertical'});
+		var msgDiv = this.controller.get('uber-tz-msg');
+		msgDiv.innerHTML = $L('Contact data');
+		this.subjectModel = {value: this.pickedArray[2].replace};
+		this.locModel = {value: this.pickedArray[1].replace};
+		this.noteModel = {value: this.pickedArray[0].replace};
+		this.checkBoxAttr = {modelProperty: 'value'	};
+		this.controller.setupWidget('adv-copy-subject',this.checkBoxAttr,this.subjectModel);
+		this.controller.setupWidget('adv-copy-location',this.checkBoxAttr,this.locationModel);
+		this.controller.setupWidget('adv-copy-note',this.checkBoxAttr,this.noteModel);
+		
+	},
+	
+	activate: function(){
+		//this.pickedFieldIndex = null;
+		this.cancelTapHandler=this.onCancel.bindAsEventListener(this);
+		this.controller.get ('Cancel').addEventListener(Mojo.Event.tap, this.cancelTapHandler);
+		this.doneTapHandler=this.onDone.bindAsEventListener(this);
+		this.controller.get ('Done').addEventListener(Mojo.Event.tap, this.doneTapHandler);
+		this.controller.get('adv-copy-subject').observe(Mojo.Event.propertyChange, this.chooseSubjectEdit.bindAsEventListener(this));
+		this.controller.get('adv-copy-location').observe(Mojo.Event.propertyChange, this.chooseLocationEdit.bindAsEventListener(this));
+		this.controller.get('adv-copy-note').observe(Mojo.Event.propertyChange, this.chooseNotesEdit.bindAsEventListener(this));
+		if(this.personDataArray && this.personDataArray.length > 0){
+			var name, btn, len = this.personDataArray.length;
+			this.advButtonTapHandler = this.handleAdvButtonTap.bindAsEventListener(this);
+			for(var i=0;i<len;i++){
+				btn = this.controller.get((i+'_person_obj_item_button'));
+				btn.addEventListener(Mojo.Event.tap, this.advButtonTapHandler);
+			}
+		}
+	},
+	
+	deactivate: function(){
+		this.controller.get ('Cancel').removeEventListener(Mojo.Event.tap, this.cancelTapHandler);
+		this.controller.get ('Done').removeEventListener(Mojo.Event.tap, this.doneTapHandler);
+		this.controller.get('adv-copy-subject').stopObserving(Mojo.Event.propertyChange, this.chooseSubjectEdit.bind(this));
+		this.controller.get('adv-copy-location').stopObserving(Mojo.Event.propertyChange, this.chooseLocationEdit.bind(this));
+		this.controller.get('adv-copy-note').stopObserving(Mojo.Event.propertyChange, this.chooseNotesEdit.bind(this));
+		if(this.personDataArray && this.personDataArray.length > 0){
+			var name, len = this.personDataArray.length;
+			for(var i=0;i<len;i++){
+				btn = this.controller.get((i+'_person_obj_item_button'));
+				btn.removeEventListener(Mojo.Event.tap, this.advButtonTapHandler);
+			}
+		}
+	},
+	
+	onCancel: function (event) {
+		Event.stop(event);
+		this.widget.mojo.close();
+	},
+	
+	onDone: function (event){
+		Event.stop(event);
+		this.updatePickedArray();
+		this.sceneAssistant.uberAdvCopyDone(this.pickedArray);
+		this.widget.mojo.close();
+	},
+	
+	handleAdvButtonTap: function(e){
+		//Mojo.Log.error("Handle adv copy button::::::::: " + Object.keys(e));
+		//Mojo.Log.error("Handle adv copy button::::::::: " + (e.srcElement.id) + " num:: " + parseInt(e.srcElement.id, 10));
+		this.pickedIdx = null;
+		if(e.srcElement.id){
+			this.pickedIdx = parseInt(e.srcElement.id, 10);
+			var items = [
+				{label: $L("Not in use"), command: 0}
+				,{label: $L("Subject"), command: 1}
+				,{label: $L("Location"), command:2}
+				,{label: $L("Note"), command:3}
+			];
+			
+			this.controller.popupSubmenu({
+					onChoose: this.fieldChosen.bind(this),
+					items: items,
+					placeNear: this.controller.get(e.srcElement.id)
+					});
+		}
+		Event.stop(e);
+		return;
+	},
+	
+	fieldsArray: [$L('Not in use'), $L('Subject'), $L('Location'), $L('Note')],
+	
+	fieldChosen: function fieldChosen(idx){
+		//Mojo.Log.error("field chosen ::::::::: " + (idx) + " , pickedIdx: " + this.pickedIdx);
+		if(idx !== undefined && this.pickedIdx !== undefined && this.pickedIdx !== null){
+			var row = this.pickedIdx;
+			var idex = parseInt(idx, 10);
+			if(idex === 0){
+				this.personDataArray[row].field = "notInUse";
+			} else if(idex === 1){
+				this.personDataArray[row].field = "subject";
+			} else  if(idex === 2){
+				this.personDataArray[row].field = "loc";
+			} else  if(idex === 3){
+				this.personDataArray[row].field = "note";
+			}
+			this.updatePickedArray();
+			this.controller.get(row+'_person_obj_item_button').innerHTML = this.fieldsArray[idex];
+			
+		}
+		return true;
+	},
+	
+	updatePickedArray: function updatePickedArray(){
+		var txt, itemSub = "", itemLoc = "", itemNote = "", obj = {}, len;
+		len = this.personDataArray && this.personDataArray.length;
+		if(len && len > 0){
+			for(var i = 0; i < len; i++){
+				obj = {};
+				obj = this.personDataArray[i] && this.personDataArray[i];
+				if(obj.field && obj.field != undefined && obj.field !== "notInUse" && obj.data && obj.data != undefined && obj.data !== ""){
+					switch(obj.field){
+						case "note":
+						itemNote += (itemNote !== "" )? " " + obj.data : obj.data;
+						break;
+						
+						case "subject":
+						itemSub += (itemSub !== "" )? " " + obj.data : obj.data;
+						break;
+						
+						case "loc":
+						itemLoc += (itemLoc !== "" )? " " + obj.data : obj.data;
+						break;
+					}
+					//Mojo.Log.error("gen picked object ::::::" + itemSub + " :::::: loc : " + itemLoc + "note::::::: " + itemNote);
+				}
+			}
+			
+		}
+		this.pickedArray[0].data = itemNote;
+		this.pickedArray[1].data = itemLoc;
+		this.pickedArray[2].data = itemSub;
+		//Mojo.Log.error("gen picked array ::::::::::::: " + JSON.stringify(this.pickedArray));
+	},
+	
+	chooseSubjectEdit: function chooseSubjectEdit(event){
+		this.pickedArray[2].replace = event.value;
+	},
+	
+	chooseLocationEdit: function chooseLocationEdit(event){
+		this.pickedArray[1].replace = event.value;
+	},
+	
+	chooseNotesEdit: function chooseNotesEdit(event){
+		this.pickedArray[0].replace = event.value;
+	},
 });
\ No newline at end of file
diff --git a/usr/palm/applications/com.palm.app.calendar/sources.json b/usr/palm/applications/com.palm.app.calendar/sources.json
index 3beec78..9741133 100644
--- a/usr/palm/applications/com.palm.app.calendar/sources.json
+++ b/usr/palm/applications/com.palm.app.calendar/sources.json
@@ -3,6 +3,9 @@
     "source": "javascripts\/datejs\/date.js"
   },
   {
+    "source": "javascripts\/datejs\/week.js"
+  },
+  {
     "source": "javascripts\/recurrence-rule.js"
   },
   {
diff --git a/usr/palm/applications/com.palm.app.calendar/stylesheets/calendar.css b/usr/palm/applications/com.palm.app.calendar/stylesheets/calendar.css
index f30cb63..2939722 100644
--- a/usr/palm/applications/com.palm.app.calendar/stylesheets/calendar.css
+++ b/usr/palm/applications/com.palm.app.calendar/stylesheets/calendar.css
@@ -59,6 +59,18 @@ body {
 		background-image: url(../images/menu-icon-day.png);
 }
 
+.palm-menu-icon.new-timed{
+		background-image: url(../images/menu-icon-newevent.png);
+}
+
+.palm-menu-icon.new-allday {
+		background-image: url(../images/menu-icon-today.png);
+}
+
+.palm-menu-icon.menu-agenda {
+		background-image: url(/media/internal/.scrims/ubercalendar/menu-icon-agenda.png);
+}
+
 .palm-menu-icon.edit {
 		background-image: url(../images/menu-icon-compose.png);
 }
diff --git a/usr/palm/applications/com.palm.app.calendar/stylesheets/datetime.css b/usr/palm/applications/com.palm.app.calendar/stylesheets/datetime.css
index d49522c..49c638c 100644
--- a/usr/palm/applications/com.palm.app.calendar/stylesheets/datetime.css
+++ b/usr/palm/applications/com.palm.app.calendar/stylesheets/datetime.css
@@ -101,8 +101,44 @@ div.list-separator 		{
 .item_selected {
 		font-weight: bold;
 }				
-
-
+#DPscrol {
+	height:220px;
+}
+#DPscrolct {
+	position: relative;
+	width:1566;
+	height: 220px;
+}
+.DPmv {
+	position: absolute;
+	display: block;
+	width: 240px;
+}
+#DPmonth_0 {
+	left: 40px;
+	border-right:1px solid black;
+	border-left:1px solid black;
+}
+#DPmonth_1{
+	left: 281px;
+	border-right:1px solid black;
+}
+#DPmonth_2 {
+	left: 522px;
+	border-right:1px solid black;
+}
+#DPmonth_3 {
+	left: 763px;
+	border-right:1px solid black;
+}
+#DPmonth_4 {
+	left: 1004px;
+	border-right:1px solid black;
+}
+#DPmonth_5 {
+	left: 1245px;
+	border-right:1px solid black;
+}
 #dtl_allday_cb .checkbox {
 	margin-right:0px;
 }
@@ -115,13 +151,55 @@ div.list-separator 		{
 .calendar-dtl-timedate .icon.timedate {
 	background: url(../images/calendar-dtl/timedate-icon.png) center center no-repeat;
 }
-
+.popCanvas .palm-button
+{
+background-image:url('../images/notification-large-calendar.png');
+}
+.popCanvas .palm-button.selected
+{
+background-image:url('../images/notification-large.png');
+}
+.popCanvas .palm-button {
+	padding: 0px;
+	width: 50px;
+	height: 50px;
+	vertical-align: bottom;
+	margin-top: 0px;
+	margin-left: 0px;
+	margin-right: 0px;
+	margin-bottom: 0px;
+	overflow: hidden;
+   -webkit-border-image: none; 
+}
+.popTimezone .palm-button
+{
+background-image:url('../images/calendar-dtl/timedate-icon.png');
+background-position: center top;
+background-repeat: repeat-y;
+}
+.popTimezone .palm-button.selected
+{
+background-image:url('../images/calendar-dtl/timedate-icon-press.png');
+background-position: center top;
+background-repeat: repeat-y;
+}
+.popTimezone .palm-button {
+	padding: 10px 0px 0px 0px;
+	width: 50px;
+	height: 60px;
+	vertical-align: bottom;
+	margin-top: 0px;
+	margin-left: 0px;
+	margin-right: 0px;
+	margin-bottom: 0px;
+	overflow: hidden;
+   -webkit-border-image: none; 
+}
 /*Reduce top and bottom padding to fit more on the screen*/
 
 .calendar-dtl-timedate .title.datetime-picker {
-  padding: 0 10px 7px 14px;
+  padding: 0px 1px 4px 4px;
 }
-
 .calendar-dtl-timedate .palm-row.all-day-event .title {
   padding-bottom: 0px;
   margin-bottom: -5px;
diff --git a/usr/palm/applications/com.palm.app.calendar/stylesheets/day.css b/usr/palm/applications/com.palm.app.calendar/stylesheets/day.css
index 02d0417..da3e064 100644
--- a/usr/palm/applications/com.palm.app.calendar/stylesheets/day.css
+++ b/usr/palm/applications/com.palm.app.calendar/stylesheets/day.css
@@ -243,7 +243,12 @@ Copyright 2009 Palm, Inc.  All rights reserved.
 	width: 100%;
 	overflow: hidden;
 }
-
+.alldayeventsListshrink {
+	position: relative;
+	top: 0px;
+	width: 100%;
+	overflow: hidden;
+}
 
 /* CALENDAR EVENTS SECTION */
 #dv_event_container {
diff --git a/usr/palm/applications/com.palm.app.calendar/stylesheets/edit.css b/usr/palm/applications/com.palm.app.calendar/stylesheets/edit.css
index b95f937..daa3494 100644
--- a/usr/palm/applications/com.palm.app.calendar/stylesheets/edit.css
+++ b/usr/palm/applications/com.palm.app.calendar/stylesheets/edit.css
@@ -50,7 +50,27 @@ Copyright 2009 Palm, Inc.  All rights reserved.
 	width: 150px;
 	height: 40px;
 }
-
+#uberIconButton {
+	height:40px;
+	font-size: 14px;
+	width:40px;
+}
+#edit-uber-icon-picker 
+{
+background:url('../images/day-event-info.png') center no-repeat;
+}
+#edit-uber-icon-picker {
+	padding: 0px;
+	width: 48px;
+	height: 48px;
+	vertical-align: center;
+	margin-top: 0px;
+	margin-left: -1px;
+	margin-right: 5px;
+	margin-bottom: 0px;
+	border-width:5px;
+	-webkit-border-image:url('../images/date-picker-images/background-focused-shadow.png') 46% stretch;
+}
 #calendarButton {
 	font-size: 14px;
 	width: 90%;
diff --git a/usr/palm/applications/com.palm.app.calendar/stylesheets/event-colors.css b/usr/palm/applications/com.palm.app.calendar/stylesheets/event-colors.css
index 3b455df..a350808 100644
--- a/usr/palm/applications/com.palm.app.calendar/stylesheets/event-colors.css
+++ b/usr/palm/applications/com.palm.app.calendar/stylesheets/event-colors.css
@@ -15,15 +15,26 @@ Copyright 2009 Palm, Inc.  All rights reserved.
 */
 
 /* Month View: busy time */
-.monthview-busy-time.cal-color-blue 				{ background: url(../images/month-busy-time-blue.png) 0 0 fixed repeat; }
-.monthview-busy-time.cal-color-green 				{ background: url(../images/month-busy-time-green.png) 0 0 fixed repeat; }
-.monthview-busy-time.cal-color-yellow 				{ background: url(../images/month-busy-time-yellow.png) 0 0 fixed repeat; }
-.monthview-busy-time.cal-color-gray 				{ background: url(../images/month-busy-time-gray.png) 0 0 fixed repeat; }
-.monthview-busy-time.cal-color-orange 				{ background: url(../images/month-busy-time-orange.png) 0 0 fixed repeat; }
-.monthview-busy-time.cal-color-pink 				{ background: url(../images/month-busy-time-pink.png) 0 0 fixed repeat; }
-.monthview-busy-time.cal-color-red 					{ background: url(../images/month-busy-time-red.png) 0 0 fixed repeat; }
-.monthview-busy-time.cal-color-purple 				{ background: url(../images/month-busy-time-purple.png) 0 0 fixed repeat; }
-.monthview-busy-time.cal-color-teal 				{ background: url(../images/month-busy-time-teal.png) 0 0 fixed repeat; }
+.monthview-busy-time.cal-color-blue 				{ background: url(../images/month-busy-time-blue.png) right 0 fixed repeat-y; }
+.monthview-busy-time.cal-color-green 				{ background: url(../images/month-busy-time-green.png) right 0 fixed repeat-y; }
+.monthview-busy-time.cal-color-yellow 				{ background: url(../images/month-busy-time-yellow.png) right 0 fixed repeat-y; }
+.monthview-busy-time.cal-color-gray 				{ background: url(../images/month-busy-time-gray.png) right 0 fixed repeat-y; }
+.monthview-busy-time.cal-color-orange 				{ background: url(../images/month-busy-time-orange.png) right 0 fixed repeat-y; }
+.monthview-busy-time.cal-color-pink 				{ background: url(../images/month-busy-time-pink.png) right 0 fixed repeat-y; }
+.monthview-busy-time.cal-color-red 					{ background: url(../images/month-busy-time-red.png) right 0 fixed repeat-y; }
+.monthview-busy-time.cal-color-purple 				{ background: url(../images/month-busy-time-purple.png) right 0 fixed repeat-y; }
+.monthview-busy-time.cal-color-teal 				{ background: url(../images/month-busy-time-teal.png) right 0 fixed repeat-y; }
+
+/* Month View: partly busy time */
+.monthview-partly-busy-time.cal-color-blue 			{ background: url(../images/month-busy-time-blue.png) left center fixed no-repeat; }
+.monthview-partly-busy-time.cal-color-green 		{ background: url(../images/month-busy-time-green.png) left center fixed no-repeat; }
+.monthview-partly-busy-time.cal-color-yellow 		{ background: url(../images/month-busy-time-yellow.png) left center fixed no-repeat; }
+.monthview-partly-busy-time.cal-color-gray 			{ background: url(../images/month-busy-time-gray.png) left center fixed no-repeat; }
+.monthview-partly-busy-time.cal-color-orange 		{ background: url(../images/month-busy-time-orange.png) left center fixed no-repeat; }
+.monthview-partly-busy-time.cal-color-pink 			{ background: url(../images/month-busy-time-pink.png) left center fixed no-repeat; }
+.monthview-partly-busy-time.cal-color-red 			{ background: url(../images/month-busy-time-red.png) left center fixed no-repeat; }
+.monthview-partly-busy-time.cal-color-purple 		{ background: url(../images/month-busy-time-purple.png) left center fixed no-repeat; }
+.monthview-partly-busy-time.cal-color-teal 			{ background: url(../images/month-busy-time-teal.png) left center fixed no-repeat; }
 
 /* Week View: Events */
 .wv_event.cal-color-blue,
diff --git a/usr/palm/applications/com.palm.app.calendar/stylesheets/month.css b/usr/palm/applications/com.palm.app.calendar/stylesheets/month.css
index cafffaf..24b0ea7 100644
--- a/usr/palm/applications/com.palm.app.calendar/stylesheets/month.css
+++ b/usr/palm/applications/com.palm.app.calendar/stylesheets/month.css
@@ -124,12 +124,36 @@
 		float: left;
 }
 
+.monthview-partly-busy-time {
+		background: none;
+		background-image: url(../images/busy-time.png);
+		background-repeat: no-repeat;
+		background-attachment: fixed;
+		background-position: left center;
+		/*color: #FF0000;*/
+		width: 100%;
+		height: 16px;
+		float: left;
+}
+
+.monthview-partly-busy-time-pixi {
+		background: none;
+		background-image: url(../images/busy-time.png);
+		background-repeat: no-repeat;
+		background-attachment: fixed;
+		background-position: left center;
+		/*color: #FF0000;*/
+		width: 100%;
+		height: 10px;
+		float: left;
+}
+
 .monthview-busy-time {
 		background: none;
 		background-image: url(../images/busy-time.png);
-		background-repeat: repeat;
+		background-repeat: repeat-y;
 		background-attachment: fixed;
-		background-position: 0 0;
+		background-position: right 0;
 		/*color: #FF0000;*/
 		width: 100%;
 		height: 16px;
diff --git a/usr/palm/applications/com.palm.app.calendar/stylesheets/notification.css b/usr/palm/applications/com.palm.app.calendar/stylesheets/notification.css
index 4a84218..781e7c6 100644
--- a/usr/palm/applications/com.palm.app.calendar/stylesheets/notification.css
+++ b/usr/palm/applications/com.palm.app.calendar/stylesheets/notification.css
@@ -15,9 +15,13 @@
 
 #reminder-email,
 #reminder-dismiss,
-#reminder-snooze {
-    height: 45px;
-	position: fixed;
+#reminder-snooze,
+#reminder-setsnooze,
+#reminder-snz-advance-button,
+#reminder-snz-previous-button,
+#reminder-snz-chosen-button {
+	height: 45px;
+	overflow: hidden;
 	-webkit-box-sizing: border-box;
 	line-height: 45px;
 	text-align: center;
@@ -36,24 +40,47 @@
 #reminder-email .button-wrapper { -webkit-border-image:url(../images/button-contact.png) 0 15 45 15 repeat repeat; }
 #reminder-email:active .button-wrapper { -webkit-border-image:url(../images/button-contact.png) 45 15 0 15 repeat repeat; }
 
+#reminder-setsnooze .button-wrapper { -webkit-border-image:url(../images/button-contact.png) 0 15 45 15 repeat repeat; }
+#reminder-setsnooze:active .button-wrapper { -webkit-border-image:url(../images/button-contact.png) 45 15 0 15 repeat repeat; }
+
+#reminder-snz-advance-button .button-wrapper { -webkit-border-image:url(../images/button-contact.png) 0 15 45 15 repeat repeat; }
+#reminder-snz-advance-button:active .button-wrapper { -webkit-border-image:url(../images/button-contact.png) 45 15 0 15 repeat repeat; }
+
+#reminder-snz-previous-button .button-wrapper { -webkit-border-image:url(../images/button-contact.png) 0 15 45 15 repeat repeat; }
+#reminder-snz-previous-button:active .button-wrapper { -webkit-border-image:url(../images/button-contact.png) 45 15 0 15 repeat repeat; }
+
+#reminder-snz-chosen-button .button-wrapper { -webkit-border-image:url(../images/button-snooze.png) 0 15 45 15 repeat repeat; }
+#reminder-snz-chosen-button:active .button-wrapper { -webkit-border-image:url(../images/button-snooze.png) 45 15 0 15 repeat repeat; }
+
 #reminder-dismiss,
-#reminder-snooze {
-	width: 50%;
-    bottom: 10px;
+#reminder-snooze
+{
+	width: 40%;
+	float:left; 
+ 	padding-right: 5px;
 }
 
-#reminder-dismiss .button-wrapper { -webkit-border-image:url(../images/button-dismiss.png) 0 15 45 15 repeat repeat; }
-#reminder-dismiss:active .button-wrapper { -webkit-border-image:url(../images/button-dismiss.png) 45 15 0 15 repeat repeat; }
+#reminder-setsnooze {
+	width: 20%;
+	float:left;
+}
 
-#reminder-snooze {
- 	right: 0px; 
- 	padding-left: 5px;
+#reminder-snz-advance-button,
+#reminder-snz-previous-button {
+	width: 25%;
+	float:left;
 }
 
-#reminder-dismiss {
-    padding-right: 5px;
+#reminder-snz-chosen-button {
+	float:left;
+	width: 50%;
+	padding-right: 5px;
+	padding-left: 5px;
 }
 
+#reminder-dismiss .button-wrapper { -webkit-border-image:url(../images/button-dismiss.png) 0 15 45 15 repeat repeat; }
+#reminder-dismiss:active .button-wrapper { -webkit-border-image:url(../images/button-dismiss.png) 45 15 0 15 repeat repeat; }
+
 #reminder-snooze .button-wrapper { -webkit-border-image:url(../images/button-snooze.png) 0 15 45 15 repeat repeat; }
 #reminder-snooze:active .button-wrapper { -webkit-border-image:url(../images/button-snooze.png) 45 15 0 15 repeat repeat; }
 
diff --git a/usr/palm/applications/com.palm.app.calendar/stylesheets/repeat.css b/usr/palm/applications/com.palm.app.calendar/stylesheets/repeat.css
index 0a82496..9ecf2cc 100644
--- a/usr/palm/applications/com.palm.app.calendar/stylesheets/repeat.css
+++ b/usr/palm/applications/com.palm.app.calendar/stylesheets/repeat.css
@@ -19,7 +19,64 @@ Copyright 2009 Palm, Inc.  All rights reserved.
 	padding-left:0px;
 	padding-right:0px;
 }
-
+#RPscrol {
+	height:220px;
+}
+#RPscrolct {
+	position: relative;
+	width:1566;
+	height: 220px;
+}
+.RPmv {
+	position: absolute;
+	display: block;
+	width: 240px;
+}
+#RPmonth_0 {
+	left: 40px;
+	border-right:1px solid black;
+	border-left:1px solid black;
+}
+#RPmonth_1{
+	left: 281px;
+	border-right:1px solid black;
+}
+#RPmonth_2 {
+	left: 522px;
+	border-right:1px solid black;
+}
+#RPmonth_3 {
+	left: 763px;
+	border-right:1px solid black;
+}
+#RPmonth_4 {
+	left: 1004px;
+	border-right:1px solid black;
+}
+#RPmonth_5 {
+	left: 1245px;
+	border-right:1px solid black;
+}
+.rpDrawerBtnClass .palm-button
+{
+background-image:url('../images/notification-large-calendar.png');
+}
+.rpDrawerBtnClass .palm-button.selected
+{
+background-image:url('../images/notification-large.png');
+}
+.rpDrawerBtnClass .palm-button {
+	padding: 10px 0px 0px 0px;
+	width: 50px;
+	height: 50px;
+	vertical-align: bottom;
+	margin-top: 0px;
+	margin-left: 0px;
+	margin-right: 0px;
+	margin-bottom: 0px;
+	overflow: hidden;
+   -webkit-border-image: none; 
+}
 .repeat-day-text {
 	font-size: 14px;
 	text-align: center;
diff --git a/usr/palm/applications/com.palm.app.calendar/stylesheets/week.css b/usr/palm/applications/com.palm.app.calendar/stylesheets/week.css
index 729ae53..43397ad 100644
--- a/usr/palm/applications/com.palm.app.calendar/stylesheets/week.css
+++ b/usr/palm/applications/com.palm.app.calendar/stylesheets/week.css
@@ -125,6 +125,16 @@
 #wv_eventsDay1 {
 	left: 321px;
 }
+#eventsTap {
+	position: absolute;
+	top:0;
+	display:block;
+	border-right:1px solid black;
+/*  for debugging events Tap Canvas
+	border-top:3px solid red;
+	border-bottom:3px solid blue;
+*/
+}
 #wv_eventsDay2 {
 	left: 642px;
 }
