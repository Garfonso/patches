diff --git a/usr/palm/applications/com.palm.app.calendar/app/controllers/app-assistant.js b/usr/palm/applications/com.palm.app.calendar/app/controllers/app-assistant.js
index 5375929..83b4060 100644
--- a/usr/palm/applications/com.palm.app.calendar/app/controllers/app-assistant.js
+++ b/usr/palm/applications/com.palm.app.calendar/app/controllers/app-assistant.js
@@ -8,6 +8,27 @@ var AppAssistant = Class.create({
 		this.appController = appController;
 		this.openReminderAlert = null;
 		
+		//get snooze cookie -- renamed because of bug in cookie names
+		this.snoozeCookie = new Mojo.Model.Cookie("snoozeCookie");	
+		if (this.snoozeCookie) {
+			var snzcookie = this.snoozeCookie.get();
+			if (snzcookie) {			
+				if(snzcookie.showReminderDashboard !== undefined) {
+					this.showReminderDashboard = snzcookie.showReminderDashboard;
+				} else {
+					this.showReminderDashboard = false;
+				}
+				if(snzcookie.snoozethrob !== undefined) {
+					this.snoozeThrob = snzcookie.snoozethrob;
+				} else {
+					this.snoozeThrob = false;
+				}
+			}
+		} else {
+			this.snoozeThrob = false;
+			this.showReminderDashboard = false;
+		}
+		
 		// CURRENT DATE & TIME - Keeps track of the current day/month/time in view
 		this.currentDateTime = new Date();
 		this.currentDateTimeObservers = new Hash();
@@ -77,9 +98,9 @@ var AppAssistant = Class.create({
 		// TEMP Ignore the first time we get called which is at boot time. We need this until framework
 		// gives us a flag to let us now if this being called at boot.
 		this.handlelaunchCount++;
-		if (this.handlelaunchCount <= 1)
+		if (this.handlelaunchCount <= 1) {
 	  	 	return;	
-			
+		}
 		//if this failed during initialization, try again	
 		if (!this.calendarsManager.accounts) {			
 			this.calendarsManager.getCalendarsByAccount();
@@ -116,7 +137,10 @@ var AppAssistant = Class.create({
 		else if (launchParams.alarmclose){
 			Mojo.Log.info("$$$$$$$$ AppAssistant handleLaunch : alarmclose");
 			this.closeReminder(launchParams.alarmclose);
-		} 
+		}
+		else if (launchParams.playalarmsound){
+			this.playAlarmSound();
+		}
 		else if (launchParams.dayChange){
 			this.dayChange();
 		}
@@ -267,6 +291,13 @@ var AppAssistant = Class.create({
 		Mojo.Log.info("$$$$$$$$ AppAssistant closeReminder:end");
 	},
 	
+	playAlarmSound: function() {
+		if (this.openReminderAlert) {
+			this.openReminderAlert.playAlarmSound();
+			this.openReminderAlert = null;
+		}
+	},
+
 	scheduleNextReminder: function(eventId) {
 		Mojo.Log.info("$$$$$$$$ AppAssistant scheduleNextReminder: for event:"+eventId);
 		new Mojo.Service.Request('palm://com.palm.calendar', {
@@ -398,10 +429,15 @@ var AppAssistant = Class.create({
 		var height;
 		var reminder = getReminderManager().getReminder(eventId);
 		reminder.userClosed = false;
-		if (reminder.attendees.length > 1 /*now we include the organizer in attendee list*/)
-			height = 203;
-		else
-		  	height = 149;
+		if(reminder.attendees) {
+			if (reminder.attendees.length > 1 /*now we include the organizer in attendee list*/) {
+				height = 280; //203 orig; 74 + a couple to get more choices
+			} else {
+		  	height = 160; //149 orig;
+			}
+		} else {
+			height = 160;
+		}
 		
 		var needThrobbing =(hasNewContent || !isSnoozedReminder) ? true:false;
 		Mojo.Log.info("$$$$$$$$ AppAssistant doAlarm:createStageWithCallback for stage: "+this.createAlarmStageName(eventId)+", stage height is: "+height);
@@ -435,23 +471,25 @@ var AppAssistant = Class.create({
 				}, pushReminderScene.bind(this, eventId, needThrobbing), 'popupalert');
 			}
 		}
-		
-		Mojo.Log.info("$$$$$$$$ AppAssistant doAlarm:calling getStageController for calendar-dashboard");
-		var dashboardStageController = Mojo.Controller.getAppController().getStageController("calendar-dashboard");
-		if (!dashboardStageController) {
-			Mojo.Log.info("$$$$$$$$ AppAssistant doAlarm:calling getStageProxy for calendar-dashboard");
-			dashboardStageController = Mojo.Controller.getAppController().getStageProxy("calendar-dashboard");
-		}
-		if (!dashboardStageController) {
-			var pushDashboardScene = function(stageController){
-				stageController.pushScene('dashboard');
+		//Optionally disable reminder dashboard
+		if(this.showReminderDashboard || this.snoozeThrob) {
+			Mojo.Log.info("$$$$$$$$ AppAssistant doAlarm:calling getStageController for calendar-dashboard");
+			var dashboardStageController = Mojo.Controller.getAppController().getStageController("calendar-dashboard");
+			if (!dashboardStageController) {
+				Mojo.Log.info("$$$$$$$$ AppAssistant doAlarm:calling getStageProxy for calendar-dashboard");
+				dashboardStageController = Mojo.Controller.getAppController().getStageProxy("calendar-dashboard");
+			}
+			if (!dashboardStageController) {
+				var pushDashboardScene = function(stageController){
+					stageController.pushScene('dashboard');
+				}
+				Mojo.Log.info("$$$$$$$$ AppAssistant doAlarm:calling createStageWithCallback for calendar-dashboard");
+				Mojo.Controller.getAppController().createStageWithCallback({
+					name: "calendar-dashboard",
+					lightweight: true,
+					applicationStylesheets: ["stylesheets/notification.css"],
+				}, pushDashboardScene, "dashboard");
 			}
-			Mojo.Log.info("$$$$$$$$ AppAssistant doAlarm:calling createStageWithCallback for calendar-dashboard");
-			Mojo.Controller.getAppController().createStageWithCallback({
-				name: "calendar-dashboard",
-				lightweight: true,
-				applicationStylesheets: ["stylesheets/notification.css"],
-			}, pushDashboardScene, "dashboard");
 		}
 		Mojo.Log.info("$$$$$$$$ AppAssistant doAlarm :end");
 	},
@@ -488,8 +526,38 @@ var AppAssistant = Class.create({
 			// If this is the first use of Calendar, show the first use scene
 			this.firstUseManager = new FirstUseManager(stageController);
 		} else {
+			this.uberOpenInView = 'last';
+			this.snoozeThrob = false;
+			this.snoozeCookie = new Mojo.Model.Cookie("snoozeCookie");	
+			if (this.snoozeCookie) {
+				var snzcookie = this.snoozeCookie.get();
+				if (snzcookie) {
+					if(snzcookie.uberopeninview !== undefined) {
+						this.uberOpenInView = snzcookie.uberopeninview;
+					} else {
+						this.uberOpenInView = 'last';
+					}
+					if(snzcookie.snoozethrob !== undefined) {
+						this.snoozeThrob = snzcookie.snoozethrob;
+					} else {
+						this.snoozeThrob = false;
+					}
+				}
+			}
+		
 			// Otherwise show the Day View
-			stageController.pushScene({name: "day", transition: Mojo.Transition.crossFade, disableSceneScroller: true});
+			var view = "day";
+			var cookie = new Mojo.Model.Cookie("LastView");
+			try {
+				view = cookie.get();
+			} catch (e) {}
+			if ((view != "month") && (view != "week")) {
+				view = "day";
+			}
+			if(this.uberOpenInView !== 'last' && this.uberOpenInView !== undefined) {
+				view = this.uberOpenInView;
+			}
+			stageController.pushScene({name: view, transition: Mojo.Transition.crossFade, disableSceneScroller: true});
 		}
 	},
 	
@@ -863,7 +931,15 @@ function notifyTimeFormatObservers() {
 }
 
 function getTimeFormat() {
-	return getAppAssistant().timeFormat;
+	//if getAppAssistant is not valid yet return the default setting of this.timeFormat.
+	if(getAppAssistant() != undefined)
+	{
+		return getAppAssistant().timeFormat;
+	}
+	else
+	{
+		return this.timeFormat;
+	}
 }
 // **System  Time Change
 function observeTimeChange(sceneName, controller){
diff --git a/usr/palm/applications/com.palm.app.calendar/app/controllers/dashboard-assistant.js b/usr/palm/applications/com.palm.app.calendar/app/controllers/dashboard-assistant.js
index a667ac9..81ac2a6 100644
--- a/usr/palm/applications/com.palm.app.calendar/app/controllers/dashboard-assistant.js
+++ b/usr/palm/applications/com.palm.app.calendar/app/controllers/dashboard-assistant.js
@@ -14,6 +14,21 @@ var DashboardAssistant = Class.create({
 		
 		this.service = getCalendarService();
 		
+		this.snoozeThrob = false;
+		
+		//get default snooze duration from cookie
+		this.snoozeCookie = new Mojo.Model.Cookie("snoozeCookie");
+
+		if (this.snoozeCookie) {
+			var snzcookie = this.snoozeCookie.get();
+			if (snzcookie) {
+				if(snzcookie.snoozethrob)	{
+					this.snoozeThrob = snzcookie.snoozethrob;
+				} else {
+					this.snoozeThrob = false;
+				}
+			}
+		}
 		this.controller.get('calendar-dashboard').addEventListener(Mojo.Event.tap, this.tapHandler.bindAsEventListener(this));
 		this.controller.get('dashboard-icon').addEventListener(Mojo.Event.tap, this.reminderList.bindAsEventListener(this));
 		this.controller.get('dashboard-count').addEventListener(Mojo.Event.tap, this.reminderList.bindAsEventListener(this));
@@ -24,7 +39,10 @@ var DashboardAssistant = Class.create({
 	cleanup: function() {
 		Mojo.Log.info("$$$$$$$$ Dashboard-assistant cleanup: start ");
 		this.reminders.stopObservingReminders('dashboard');
-		this.reminders.removeAllReminders();
+//Do not remove the scheduled reminders
+//This is so that if the dashboard event is swiped away the reminder is not removed
+//to support reminders that are far in the future but may not want the icon in the dashboard.
+//		this.reminders.removeAllReminders();
 		Mojo.Log.info("$$$$$$$$ Dashboard-assistant cleanup: end ");
 	},
 	
@@ -35,6 +53,7 @@ var DashboardAssistant = Class.create({
 			Mojo.Log.info("$$$$$$$$ Dashboard-assistant updateMostRecentReminder: recent Reminder is "+this.reminder.id);
 			this.updateHTML(this.controller.get('dashboard-subject'), (this.reminder.subject != null) ? this.reminder.subject : '');
 			this.updateHTML(this.controller.get('dashboard-timeloc'), (this.reminder.subtitle != null) ? this.reminder.subtitle : '');
+			if(this.snoozeThrob) {this.controller.stageController.indicateNewContent(true);}
 		}
 		else
 		{
diff --git a/usr/palm/applications/com.palm.app.calendar/app/controllers/datetime-assistant.js b/usr/palm/applications/com.palm.app.calendar/app/controllers/datetime-assistant.js
index 1bc0374..57cf2cb 100644
--- a/usr/palm/applications/com.palm.app.calendar/app/controllers/datetime-assistant.js
+++ b/usr/palm/applications/com.palm.app.calendar/app/controllers/datetime-assistant.js
@@ -140,10 +140,540 @@ var DatetimeAssistant = Class.create({
                 break;
         }
     },
-    
+	
+	// From monthview (Feb is fixed up by hand as necessary)
+	// We try to avoid the DateJS stuff because it's indescribably slow.
+	_monthDays: [ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ],
+	
+	rdayNames: function() {
+		var stday = 0;
+		if(this.startOfWeek==null || this.startOfWeek == 'undefined')
+			this.startOfWeek = 1;
+		stday = this.startOfWeek - 1;
+		var tday = new Date();
+		tday.moveToDayOfWeek(stday);
+		for (var i = 0; i < 7; i++) {
+			this._rdNames[i] = Mojo.Format.formatDate(tday, "E");
+			tday.addDays(1);
+		}
+	},
+	
+	radvanceWk: function(wk, month, year, maxwkn) {
+		var wkn = parseInt(wk, 10);
+		if(this.weekModulusNum != undefined && this.weekModulusNum <= 52 && this.weekModulusNum != 1) {
+			var maxwkn = this.weekModulusNum;
+		}
+		if((wkn > 8) && (wkn < maxwkn)) {
+			return (wkn + 1);
+		} else if((wkn <= 8) && (wkn < maxwkn)) {
+			wkn +=1;
+			var zd = '0';
+			return zd + wkn.toString();
+		} else if(wkn == maxwkn) {
+			var zd = '01';
+			return zd;
+		}
+	},
+	
+	// draw month function, expects numbers 0 based month
+	canvasRM: function(month, year, context) {
+		// date object
+		var rmon = new Date(year, month, 1);
+		
+		//setup number of days, 1st day(day of week), week number, number of weeks
+		var rd1dayOfMon = rmon.getDay();
+		var rwkNum = rmon.getISO8601Week();
+		var maxwkn = new Date(year, 11, 31).getISO8601Week();
+		if(this.weekNumOffset !== undefined && this.weekNumOffset !=0) {
+			var wkNum = parseInt(rwkNum,10) + this.weekNumOffset;
+			rwkNum = wkNum > maxwkn ? (wkNum - maxwkn) : wkNum;
+			rwkNum = rwkNum < 10 ? '0' + rwkNum : rwkNum;
+		}
+		if(this.weekModulusNum != undefined && this.weekModulusNum <= 52 && this.weekModulusNum != 1) {
+			rwkNum = (parseInt(rwkNum, 10) % this.weekModulusNum) + 1;
+			rwkNum = rwkNum < 10 ? '0' + rwkNum : rwkNum;
+		}
+		var r1offset = rd1dayOfMon - (this.startOfWeek - 1);
+		if (r1offset < 0) {r1offset += 7;}  //num of days of prev mon
+		if(isLeapYear(year)) {
+			this._monthDays[1] = 29;
+		} else {
+			this._monthDays[1] = 28;
+		}
+		this.RM[context].maxdays = this._monthDays[month];		
+		//setup fonts and spacing
+		this.mthctx[context].fillStyle = "rgb(0, 0, 0)";
+		this.mthctx[context].font = "bold 14px Prelude";
+		this.mthctx[context].textAlign = "left";
+		this.mthctx[context].textBaseline = "top";
+		var top = 2;
+		var leftmargin = 2;
+		var left = 0 + leftmargin;
+		var txt = "";
+		this.colHW = 30;
+		var maxW = 30;
+		this.topCor = 42 + (this.colHW/2); //top margin + half-cell
+		this.leftCor = this.colHW;
+		this.RM[context].fstDayLidx = r1offset;
+		this.RM[context].fstDayTidx = 1;
+		// setup title and week header
+		var titleTxt = Mojo.Format.formatDate(rmon, $L("MMM yyyy"));
+		this.mthctx[context].strokeText(titleTxt, left + 90, top);
+		this.mthctx[context].textAlign = "center";
+		for (var i = 0; i < 7; i++) {
+			txt = this._rdNames[i];
+			left = (i * this.colHW) + this.leftCor + 13;//13 is for font &txt to ctr
+			top = 22;
+			this.mthctx[context].strokeText(txt, left, top);	
+		}
+		this.mthctx[context].fillStyle = "rgb(104, 104, 104)";
+		this.mthctx[context].font = "14px Prelude";
+		this.mthctx[context].textAlign = "left";
+		this.mthctx[context].textBaseline = "alphabetic";
+		for (var j = 0; j < 6; j++) {
+			txt = rwkNum;
+			left = leftmargin;
+			top = (j * this.colHW) + this.topCor + 3; // 3 is for font correction
+			this.mthctx[context].strokeText(txt, left, top);
+			rwkNum = this.radvanceWk(rwkNum, month, year, maxwkn);
+		}
+		//iterate through the date rows
+		var num = 1;
+		this.mthctx[context].fillStyle = "rgb(0, 0, 0)";
+		this.mthctx[context].font = "bold 14px Prelude";
+		this.mthctx[context].textAlign = "center";
+		for (var j=0; j<6; j++) {
+			if (num > this.RM[context].maxdays) {
+				break; }
+			top = (j * this.colHW) + this.topCor + 3;
+			for (var i=0; i<7; i++) {
+				if (j==0 && i ==0) {i = r1offset;}
+				txt = num;
+				left =  (i * this.colHW) + this.leftCor + 13;
+				this.mthctx[context].strokeText(txt, left, top);
+				num +=1;
+				if (num > this.RM[context].maxdays) {
+					break; }
+			}
+		}
+	},
+	
+	RMnextM: function(index) {
+		this.RM[index].month = this.RM[index - 1].month;
+		this.RM[index].year = this.RM[index - 1].year;
+		if(this.RM[index].month == 11) {
+			this.RM[index].month = 0;
+			this.RM[index].year += 1;
+		} else {
+			this.RM[index].month += 1;
+		}
+	},
+	
+	RMprevM: function(index) {
+		this.RM[index].month = this.RM[index + 1].month;
+		this.RM[index].year = this.RM[index + 1].year;
+		if(this.RM[index].month == 0) {
+			this.RM[index].month = 11;
+			this.RM[index].year -= 1;
+		} else {
+			this.RM[index].month -= 1;
+		}
+	},
+	
+	// determin calendar order for the canvas's
+	orderRM: function( stDate, eDate, isAllDay) {
+		//check first
+		if(stDate.getTime() > eDate.getTime) {
+			Mojo.Log.error ("start after end");
+			return;
+		}
+		for(var i=0; i<6; i++) {
+			this.RM[i] = {};
+			this.RM[i].month = "";
+			this.RM[i].year = "";
+			this.RM[i].fstDayLidx = 1;
+			this.RM[i].fstDayTidx = 1;
+			this.RM[i].maxdays = 1;
+		}
+		// date objects
+		var curD = new Date();
+		var curMY = {month: curD.getMonth(), year: curD.getFullYear() };
+		var stMY = {month: stDate.getMonth(), year: stDate.getFullYear() };
+		var eMY = {month: eDate.getMonth(), year: eDate.getFullYear() };
+		this.RMlast.duration = getTimePeriodParts(stDate, eDate, isAllDay);
+		var rwhen = {};
+		rwhen = getTimePeriodParts(curD, stDate, isAllDay);
+		var dura = this.RMlast.duration;
+		// determine duration case
+		if ( (dura.years == 0) && (((dura.months == 5) && (dura.days == 0)) || (dura.months < 5)) ) {
+			if ( (dura.months <=1) && ((rwhen.months <= 3) && (rwhen.years <=0)) ){
+				// we can fit in 6 months try to get today in the 6 months
+				if(curD.getTime() < stDate.getTime()) {
+					//close future start with curDate 
+					this.redlineSplit.setStyle({borderRight: '1px solid black'});
+					this.RM[0].month = curMY.month;
+					this.RM[0].year = curMY.year;
+					for (var i = 1; i < 6; i++) {
+						this.RMnextM(i);
+					}
+				} else {
+					// in close past start with stDate
+					this.redlineSplit.setStyle({borderRight: '1px solid black'});
+					this.RM[0].month = stMY.month;
+					this.RM[0].year = stMY.year;
+					for (var i = 1; i < 6; i++) {
+						this.RMnextM(i);
+					}
+				}
+			} else {
+				if((curD.getTime() < stDate.getTime()) && (((dura.months == 4) && (dura.days == 0) && (dura.years ==0)) || ((dura.months <4) && (dura.years==0)))){
+					// in 6 months, too far away for today, in future do prev 
+					this.redlineSplit.setStyle({borderRight: '1px solid black'});
+					this.RM[1].month = stMY.month;
+					this.RM[1].year = stMY.year;
+					this.RMprevM(0);
+					this.RMnextM(2);
+					this.RMnextM(3);
+					this.RMnextM(4);
+					this.RMnextM(5);
+				} else {
+					// in past or could be 6 cal months do start + 5
+					this.redlineSplit.setStyle({borderRight: '1px solid black'});
+					this.RM[0].month = stMY.month;
+					this.RM[0].year = stMY.year;
+					for (var i = 1; i < 6; i++) {
+						this.RMnextM(i);
+					}
+				}
+			}
+		} else { //duration won't fit in 6 months
+			if( ((stMY.year == curMY.year) && (stMY.month == curMY.month)) ||
+			  ((stMY.year < curMY.year) ||  ((stMY.year == curMY.year) && (stMY.month < curMY.month))) ){
+			//past or present month - do start + next + next redline split then -- prev + end + next
+				this.redlineSplit.setStyle({borderRight: '2px solid red'});
+				this.RM[0].month = stMY.month;
+				this.RM[0].year = stMY.year;
+				this.RMnextM(1);
+				this.RMnextM(2);
+				this.RM[4].month = eMY.month;
+				this.RM[4].year = eMY.year;
+				this.RMprevM(3);
+				this.RMnextM(5);
+			} else if((stMY.year > curMY.year) ||  ((stMY.year == curMY.year) && (stMY.month > curMY.month))) {
+			// future - do prev + start + next redline split prev + end + next
+				this.redlineSplit.setStyle({borderRight: '2px solid red'});
+				this.RM[1].month = stMY.month;
+				this.RM[1].year = stMY.year;
+				this.RMprevM(0);
+				this.RMnextM(2);
+				this.RM[4].month = eMY.month;
+				this.RM[4].year = eMY.year;
+				this.RMprevM(3);
+				this.RMnextM(5);
+			}
+		}	
+		// call canvasRM
+		for(var k=0; k<6; k++){
+			this.canvasRM(this.RM[k].month, this.RM[k].year, k);
+		}
+
+		// record for next time comparisons
+		this.RMlast.stMY = stMY;
+		this.RMlast.eMY = eMY;
+		this.RMlast.curMY = curMY;
+	},
+	
+	risRendered: function( year, month) {
+		for(var i=0; i<6; i++) {
+			if((this.RM[i].month == month) && (this.RM[i].year == year)) {
+				return i;
+			}
+		}
+		return -1;
+	},
+	
+	//mark days in calendar
+	markDay: function(rdate, imgsrc, color, rx, ry, rwt, rht) {
+		// determine which month, year, date
+		if (rdate instanceof Date == true) { 
+			var whatMn = rdate.getMonth();
+			var whatYr = rdate.getFullYear();
+			var whatDt = rdate.getDate();
+		} else if(rdate !== undefined) {
+			this.rtdate = new Date(rdate);
+			var whatMn = this.rtdate.getMonth();
+			var whatYr = this.rtdate.getFullYear();
+			var whatDt = this.rtdate.getDate();
+		}
+		var rmimgsrc = imgsrc;
+		var idx = this.risRendered(whatYr, whatMn);
+		if(idx == -1) { return; }
+		var fstDayLidx = this.RM[idx].fstDayLidx;
+		var fstDayTidx = this.RM[idx].fstDayTidx;
+		var rRow = Math.floor((whatDt + fstDayLidx -1) / 7);
+		var col = (whatDt + fstDayLidx - 1) % 7;
+		var itop = (rRow * this.colHW) + 40;
+		var ileft = (col * this.colHW) + this.colHW;
+		itop = (ry !== undefined) ? itop + ry : itop;
+		ileft = (rx !== undefined) ? ileft + rx : ileft;
+		if (rmimgsrc !== undefined) {
+			this.mthctx[idx].drawImage(rmimgsrc, ileft, itop, (rwt !== undefined)? rwt : this.colHW,(rht !== undefined)? rht : this.colHW);
+		} else if(color !== undefined) {
+			this.mthctx[idx].fillStyle = color;
+			this.mthctx[idx].fillRect(ileft, itop, this.colHW-2, this.colHW-2);
+		} else {
+			this.mthctx[idx].fillStyle = "rgba(232,227,124,0.5)";
+			this.mthctx[idx].fillRect(ileft, itop, this.colHW-2, this.colHW-2);
+		}
+	},
+	
+	rmMarkD: function() {
+		if(this.RMlast.duration.months > 7) {
+			return;
+		}
+		if((this.RMlast.stMY.month == this.RMlast.eMY.month) && (this.RMlast.stD.getDate() == this.RMlast.eD.getDate())) {
+			this.RMlast.HMDB = 1;
+			return;
+		}
+		var stTS = new Date(this.RMlast.stMY.year, this.RMlast.stMY.month, this.RMlast.stD.getDate(), 12).getTime();
+		var daylen = 3600000*24;
+		var end = howManyDaysBetween(this.RMlast.stD, this.RMlast.eD) +1;
+		this.RMlast.HMDB = end;
+		this.RMlast.stTS = stTS;
+		for (var z = 0; z < end; z++) {
+			this.markDay(stTS + (z*daylen),
+							this.dImg, 
+							null/*color*/,
+							null/*x adjust*/,
+							this.colHW-2/*y adjust*/ ,
+							this.colHW/*wd adjust*/,
+							2 /*ht adjust*/)
+		}
+	},
+	
+	rmRecur: function() {
+		// this function is after it is a known recurrent model
+		// time of when -- occuring each
+		var rcfrequency = this.targetEvent.rruleModel.frequency;
+		var rccount = this.targetEvent.rruleModel.count;
+		// this is week day names array
+		var rcbyday =  this.targetEvent.rruleModel.byday;
+		// this is the date of the month
+		var rcbymonthday = this.targetEvent.rruleModel.bymonthday;
+		// end day
+		var rcuntil = this.targetEvent.rruleModel.until;
+		// howmany times between
+		var rcint = this.targetEvent.rruleModel.interval;
+		// take stTS and duradays to create the base event from the curent event
+		var rcduraD = this.RMlast.HMDB;
+		var rcstTS = this.targetEvent.startTimestamp;
+		var rcstDy = new Date(rcstTS);
+		var rcstD = new Date(rcstDy.getFullYear(), rcstDy.getMonth(), rcstDy.getDate(), 12);
+		rcstTS = rcstD.getTime();
+		var stDoW = rcstD.getDay();
+		var dlen = 3600000*24;
+		var rcdaysofwk = [];
+		this.recTS = []; // array of timestamps of the recurring evt
+		switch (rcfrequency) {
+				case 'DAILY':
+					var recfreqTS = dlen;
+					break;
+				case 'WEEKLY':
+					var recfreqTS = dlen * 7;
+					break;
+				case 'MONTHLY':
+					var recfreqTS = -1;
+					break;
+				case 'YEARLY':
+					var recfreqTS = -1;
+					break;
+		}
+
+		if(rcuntil !== "" && rcuntil !== undefined) {
+			// until is in UTC jan = 1, need local for cal
+			var rcyear = rcuntil.substring(0,4);
+			var rcmon = parseInt(rcuntil.substring(4,6), 10) -1;
+			var rcday = parseInt(rcuntil.substring(6,8), 10);
+			var rchour = parseInt(rcuntil.substring(9,11), 10);
+			var rcmin = parseInt(rcuntil.substring(11, 13), 10);
+			this.RMlast.recD = new Date(Date.UTC(rcyear, rcmon, rcday, rchour, rcmin));
+		} else if(this.targetEvent.isRecurringForever) {
+			if(rcfrequency == "DAILY" || recfreqTS == -1) {
+			// go out 6 months
+				this.RMlast.recD = new Date(this.RMlast.eMY.month + 6 > 11 ? this.RMlast.eMY.year + 1 : this.RMlast.eMY.year, this.RMlast.eMY.month + 6 > 11 ? this.RMlast.eMY.month - 6 : this.RMlast.eMY.month + 6, this.RMlast.eD.getDate());
+			} else {	// go out 1 year from the end date
+				this.RMlast.recD = new Date(this.RMlast.eMY.year + 1, this.RMlast.eMY.month, this.RMlast.eD.getDate());
+			}
+		} else if((rccount !== -1) && (recfreqTS !== -1)) {
+			this.RMlast.recD = new Date(rcstTS + (recfreqTS*rcint*rccount));
+		}
+		this.RMlast.recD.setHours(12); // set end to noon local to match start, UTC get's the right day
+		var recHMDB = howManyDaysBetween(rcstD, this.RMlast.recD) +1;
+		// detect recurr model
+		switch (rcfrequency) {
+			case 'DAILY' : // Do Not Localize
+				// get how many intervals
+				var rcdays = 1 + Math.floor((recHMDB*dlen) / (recfreqTS*rcint));
+				for(var k=0; k < rcdays; k++) { // cycle through intervals
+					this.recTS.push((dlen*k*rcint) + rcstTS);	
+				}
+				while(this.recTS[this.recTS.length -1] > this.RMlast.recD.getTime()){
+					this.recTS.pop();
+				}
+				break;
+				
+            case 'WEEKLY': // Do NOT Localize
+				// find the day numbers from their names
+				var rci = this.targetEvent.rruleModel.byday.length;
+				var rcSundayTS = rcstTS - (stDoW*dlen); 
+				for(var i=0; i < rci; i++) {
+					rcdaysofwk[i] = this.recurrenceRule.dayMap.indexOf(rcbyday[i]);
+				}
+				if(rci > 1) {
+				// get start day dow because it has to be in rcdaysofwk
+					var rcpos = rcdaysofwk.indexOf(stDoW);
+					//need to get to the last of the array before start of next week
+					if(rcpos !== rci - 1){
+						for(var i = rcpos; i <= rci; i++) {
+							for(var j = 0; j < rcduraD; j++) {
+							// array's TS = duration days *milliseconds in a day + (sundays TS + day of week adjustment) 
+							this.recTS.push((dlen*j) + (rcSundayTS + dlen*rcdaysofwk[i]));	
+							}
+						}
+					}
+				}
+				//should be at the first day of the week after start day's week
+				// need to get how many intervals until GetHowManyDays / 7*interval
+				var rcwks = 1 + Math.floor((recHMDB*dlen) / (recfreqTS*rcint)); 
+				for(var k=1; k <= rcwks; k++) { // cycle through intervals
+					var rcwkSunTS = rcSundayTS + (rcint * recfreqTS * k);
+					for(var i = 0; i < rci; i++) { // cycle through days of week
+						for(var j = 0; j < rcduraD; j++) { //cycle duration
+						this.recTS.push((dlen*j) + (rcwkSunTS + dlen*rcdaysofwk[i]));	
+						}
+					}
+				}
+				while(this.recTS[this.recTS.length -1] > this.RMlast.recD.getTime()){
+					this.recTS.pop();
+				}
+            	break;
+                
+            case 'MONTHLY': // Do NOT Localize
+                //Monthly by date
+				var rcmonths = 1 + Math.floor(howManyMonthsBetween(rcstD ,this.RMlast.recD)/rcint);
+                if (this.targetEvent.rruleModel.bymonthday.length > 0) {
+                    var rcmonthday = this.targetEvent.rruleModel.bymonthday[0];
+					var rcstmon = rcstD.getMonth();
+					var rcstyear = rcstD.getFullYear();
+					for(var i=0; i<rcmonths; i++) { //cycle through intervals
+						var rcmon = (rcstmon + (i*rcint)) > 11 ? rcstmon + (i*rcint) - 12 : rcstmon + (i*rcint);
+						var rcyear = (rcstmon + (i*rcint)) > 11 ? rcstyear + 1 : rcstyear; 
+						var rcmonTS = new Date(rcyear, rcmon, rcmonthday, 12).getTime();
+						for(var j=0; j<rcduraD; j++) { // cycle through duration
+							this.recTS.push(rcmonTS + (j*dlen));
+						}
+					}
+                } else {
+                    var nth = getDOWCount(this.targetEvent.startTimestamp);
+					var rcmonths = 1 + Math.floor(howManyMonthsBetween(rcstD ,this.RMlast.recD)/rcint);
+					var rcstmon = rcstD.getMonth();
+					var rcstyear = rcstD.getFullYear();
+					var rcwantday = rcstD.getDay();
+					for(var i=0; i<rcmonths; i++) { // cycle through intervals
+						var rcmon = (rcstmon + (i*rcint)) > 11 ? rcstmon + (i*rcint) - 12 : rcstmon + (i*rcint);
+						var rcyear = (rcstmon + (i*rcint)) > 11 ? rcstyear + 1 : rcstyear;
+						var rcmonD = new Date(rcyear, rcmon, 1, 12);
+						var rcfstday = rcmonD.getDay();
+						var rcaddTS = ((rcwantday - rcfstday) < 0) ? ((rcwantday - rcfstday) + 7)*dlen : (rcwantday - rcfstday)*dlen;
+						var rcmonTS = rcmonD.getTime() + rcaddTS + 7*dlen*(nth-1);
+						for(var j=0; j<rcduraD; j++) { // cycle through duration
+							this.recTS.push(rcmonTS + (j*dlen));
+						}
+					}
+				}
+				while(this.recTS[this.recTS.length -1] > this.RMlast.recD.getTime()){
+					this.recTS.pop();
+				}
+				break;
+				
+			default:                
+				break;
+		}
+		// pull out the exceptions
+		if(this.targetEvent.exdates !== undefined) {
+			if(this.targetEvent.exdates !== "") {
+				var rcexTS = [];
+				var rcexstr = this.targetEvent.exdates.split("\r\n");
+				for(var i=0; i<rcexstr.length; i++){
+					var idx = rcexstr[i].indexOf(":");
+					if(idx !== -1) {
+						rcexstr[i] = rcexstr[i].substring(idx +1);
+					}
+				}
+				for(var j=0; j<rcexstr.length; j++) {
+					var rcyear = rcexstr[j].substring(0,4);
+					var rcmon = parseInt(rcexstr[j].substring(4,6), 10) -1;
+					var rcday = parseInt(rcexstr[j].substring(6,8), 10);
+					rcexTS[j] = new Date(rcyear, rcmon, rcday, 12).getTime();
+				}
+				// pull exdates out of array
+				for(var k=0; k<rcexTS.length; k++) {
+					var idx = this.recTS.indexOf(rcexTS[k]);
+					if(idx !== -1) {
+						this.recTS.splice(idx,1);
+					}
+				}
+			}
+		}
+		// mark the recurrence days
+		var rcstop = this.recTS.length;
+		for(var k=0; k<rcstop; k++){
+			this.markDay(this.recTS[k],
+							this.rImg, 
+							null/*color*/,
+							null/*x adjust*/,
+							this.colHW-2/*y adjust*/ ,
+							this.colHW/*wd adjust*/,
+							2 /*ht adjust*/)
+		}
+		
+	},
+	
+	rmEval: function() {
+		if(this.targetModifiedTime) {			
+			this.RMlast.stD = new Date(this.targetModifiedTime.start);
+			this.RMlast.eD = new Date(this.targetModifiedTime.end);
+		} else {
+			this.RMlast.stD = new Date(this.targetEvent.startTimestamp);
+			this.RMlast.eD = new Date(this.targetEvent.endTimestamp);
+		}
+		if(this.targetEvent.rruleModel) {
+			
+			this.rmdoRec = true;
+			return;
+		}
+	},
+	
     setup: function(){
         //Mojo.Log.info("datetime-assistant:setup");
-        
+        this.weekModulusNum = 1;
+		this.weekNumOffset = 0;
+		this.weekCookie = new Mojo.Model.Cookie('WeekViewEnhanced');
+		if (this.weekCookie) {
+			var weekcookie = this.weekCookie.get();
+			if(weekcookie) {
+				if(weekcookie.weeknumoffset !== undefined) {
+						this.weekNumOffset = weekcookie.weeknumoffset;
+				} else {
+						this.weekNumOffset = 0;
+				}
+				if(weekcookie.weekmodulusnum !== undefined) {
+						this.weekModulusNum = weekcookie.weekmodulusnum;
+				} else {
+						this.weekModulusNum = 1;
+				}
+			}
+		}
 		this.appMenuModel= { visible:true, 
             label: $L('Calendar'),
 							items: [ Mojo.Menu.editItem,
@@ -168,7 +698,40 @@ var DatetimeAssistant = Class.create({
         this.startDateModel = {
             date: new Date(this.targetModifiedTime.start)
         };
+         var startDiv = this.controller.get("edit_startDate").parentNode.parentNode;
+        startDiv.style.paddingTop = "0px";
+        startDiv.style.marginTop = "-20px";
+        startDiv.removeChild(startDiv.firstChild);
+        startDiv.innerHTML = '<table width="100%"><tr><td width="10%"><div x-mojo-element="Button" id="popCanvasBtn2" class="popCanvas"></div></td><td width="90%"><div class="title datetime-picker"><div id="edit_startDate" x-mojo-element="DatePicker"></div></div></td></tr></table>';
+
+        var endDiv = this.controller.get("edit_endDate").parentNode.parentNode;
+        endDiv.style.paddingTop = "0px";
+        endDiv.style.marginTop = "-20px";
+        endDiv.removeChild(endDiv.firstChild);
+        endDiv.innerHTML = '<table width="100%"><tr><td width="10%"><div x-mojo-element="Button" id="popCanvasBtn" class="popCanvas"></div></td><td width="90%"><div class="title datetime-picker"><div id="edit_endDate" x-mojo-element="DatePicker"></div></div></td></tr></table>';
+		var startdatePalmListDiv = this.controller.get("start_date_row").parentNode;
+        var parentDiv = this.controller.get("datetime_view");
+        var newDiv = this.controller.document.createElement("div");
+        newDiv.setAttribute("id", "lDrawer");
+        newDiv.setAttribute("x-mojo-element", "Drawer");
+        newDiv.setAttribute("class", "drawerClass");
+        newDiv.setAttribute("name", "DPmonth_view");
+        newDiv.innerHTML = '<div id="DPscrol" x-mojo-element="Scroller"><div id="DPscrolct">' +
+				'<div id="DPmonth_0" class="DPmv">' +
+				'<canvas id="left0" width="240" height="220" left="0"></canvas>' +
+				'</div><div id="DPmonth_1" class="DPmv">' +
+				'<canvas id="left1" width="240" height="220"></canvas>' +
+				'</div><div id="DPmonth_2" class="DPmv">' +
+				'<canvas id="left2" width="240" height="220"></canvas>' +
+				'</div><div id="DPmonth_3" class="DPmv">' +
+				'<canvas id="right0" width="240" height="220"></canvas>' +
+				'</div><div id="DPmonth_4" class="DPmv">' +
+				'<canvas id="right1" width="240" height="220"></canvas>' +
+				'</div><div id="DPmonth_5" class="DPmv">' +
+				'<canvas id="right2" width="280" height="220"></canvas></div></div></div>';
+        parentDiv.insertBefore(newDiv, startdatePalmListDiv.nextSibling);
         
+               
 	this.controller.setupWidget('edit_startDate',{label: $L('Date'),modelProperty:'date'}, this.startDateModel);
         this.controller.listen('edit_startDate', Mojo.Event.propertyChange, this.startDateCallback.bindAsEventListener(this));
         
@@ -204,10 +767,133 @@ var DatetimeAssistant = Class.create({
         this.controller.setupWidget('dtl_allday_cb', this.allDayCheckboxAttribute, this.allDayCheckboxModel);
         
         this.updateTimedAllDay(false);
-        
-        
-    },
+		// button setup
+		this.controller.setupWidget("popCanvasBtn",
+			{},
+			{
+				label : "",
+				disabled: false
+			}
+		);
+		this.popCanvasBtn = this.controller.get('popCanvasBtn');
+		this.controller.setupWidget("popCanvasBtn2",
+			{},
+			{
+				label : "",
+				disabled: false
+			}
+		);
+		this.canvasBtnHandler = this.DPtoggleDrawer.bind(this);
+		this.popCanvasBtn2 = this.controller.get('popCanvasBtn2');
+		Mojo.Event.listen(this.popCanvasBtn, Mojo.Event.tap, this.canvasBtnHandler);
+		Mojo.Event.listen(this.popCanvasBtn2, Mojo.Event.tap, this.canvasBtnHandler);
+		// drawer setup
+		this.controller.setupWidget("DPscrol",{mode: 'horizontal'});
+		this.dModel = {open:false};
+		this.controller.setupWidget('lDrawer', {property:'open', drawerBottomOffset: 50}, this.dModel);
+		this.ldrawer = this.controller.get('lDrawer');		
+		// setup month canvas context
+		this.redlineSplit = this.controller.get("DPmonth_2");
+		this.mthctx = [];
+		this.left0 = this.controller.get("left0");
+		this.mthctx[0] = this.left0.getContext('2d');
+		this.left1 = this.controller.get("left1");
+		this.mthctx[1] = this.left1.getContext('2d');
+		this.left2 = this.controller.get("left2");
+		this.mthctx[2] = this.left2.getContext('2d');
+		this.right0 = this.controller.get("right0");
+		this.mthctx[3] = this.right0.getContext('2d');
+		this.right1 = this.controller.get("right1");
+		this.mthctx[4] = this.right1.getContext('2d');
+		this.right2 = this.controller.get("right2");
+		this.mthctx[5] = this.right2.getContext('2d');
+		// setup vars
+		this.startOfWeek = getPrefs().startOfWeek;
+		this._rdNames = [];
+		this.RMlast = {};
+		this.RMlast.duration = {years: 0, months: 0, days: 0, hours: 0, minutes: 0};
+		this.RM = [];
+		this.topCor = "";
+		this.leftCor = "";
+		this.rtdayimg = new Image();
+		this.rtdayimg.src = "./images/week-current-day.png";
+		this.rmdoRec = false;
+		this.rdayNames();
+		this.rmEval();
+		this.orderRM(this.RMlast.stD, this.RMlast.eD, this.targetEvent.allDay);
+		this.stImg = new Image();
+		this.stImg.src = "./images/day-allday-event-green-center.png";
+		this.eImg = new Image();
+		this.eImg.src = "./images/day-allday-event-red-center.png";
+		this.dImg = new Image();
+		this.dImg.src = "./images/day-event-green.png";
+		this.rImg = new Image();
+		this.rImg.src = "./images/day-event-yellow.png";
+		this.rmScroller = this.controller.get('DPscrol');
+		//this.rmScrollP = {x : 0, y : 0};
+		this.rmlastBtn = null;
+		this.rtDate = new Date();
+		this.rmcalHold = false;
+	},
     
+	
+	// toggle drawer function:
+	DPtoggleDrawer: function(e) {
+		var curBtn = e.currentTarget.id;
+		if(curBtn == "popCanvasBtn2") {
+			this.rmScrollTo(this.RMlast.stD);
+		} else {
+			this.rmScrollTo(this.RMlast.eD);
+		}
+		if (curBtn == this.rmlastBtn)  {
+			this.ldrawer.mojo.setOpenState(false);
+			this.rmlastBtn = null;
+			if(!this.targetEvent.allDay) {
+				this.slideDown(this.controller.get('start_time_row'), 0.4);		
+				this.slideDown(this.controller.get('end_time_row'), 0.4);
+			}
+		} else {
+			this.rmlastBtn = curBtn;
+			var state = this.ldrawer.mojo.getOpenState();
+			if(!state) {
+			
+				this.ldrawer.mojo.setOpenState(true);
+				if(!this.targetEvent.allDay) {
+					this.slideUp(this.controller.get('start_time_row'), 0.4);
+					this.slideUp(this.controller.get('end_time_row'), 0.4);
+				}
+			}
+		}
+	},	
+	
+	rmScrollTo: function(x) {
+		if (x instanceof Date == true) { 
+			var whatMn = x.getMonth();
+			var whatYr = x.getFullYear();
+			var idx = this.risRendered(whatYr, whatMn);
+		} else if(x >= 0 && x <= 6) {
+			var idx = x;
+		}
+		idx = idx * 241;
+		idx = -idx;
+		this.controller.get('DPscrol').mojo.scrollTo(idx, true, true);
+	},
+	
+	rmHandleUpdate: function() {
+		// date picker model changed do redraw
+		for(var i = 0;i<6; i++) {
+			this.mthctx[i].clearRect(0, 0, 240,220);
+		}
+		this.rmEval();
+		this.orderRM(this.RMlast.stD, this.RMlast.eD, this.targetEvent.allDay);
+		this.markDay(new Date(), this.rtdayimg);
+		this.markDay(this.RMlast.stD, this.stImg , null/*color*/, 1/*x adjust*/,null/*y adjust*/ ,2 /*wd adjust*/,this.colHW /*ht adjust*/);
+		this.markDay(this.RMlast.eD, this.eImg , null/*color*/, this.colHW-2/*x adjust*/,null/*y adjust*/ ,2 /*wd adjust*/,this.colHW /*ht adjust*/);
+		this.rmMarkD();
+		if(this.rmdoRec) {this.rmRecur(); }
+		this.rmScrollTo(this.RMlast.stD);
+	},
+	
     checktargetEventDirty: function(){
         //construct rrule
 		if(this.targetEvent.rruleModel)
@@ -431,12 +1117,47 @@ var DatetimeAssistant = Class.create({
     },
     
     activate: function(){
-    },
+		this.markDay(new Date(), this.rtdayimg);
+		this.markDay(this.RMlast.stD, this.stImg , null/*color*/,0/*x adjust*/,null/*y adjust*/ ,2 /*wd adjust*/,this.colHW /*ht adjust*/);
+		this.markDay(this.RMlast.eD, this.eImg , null/*color*/, this.colHW-2/*x adjust*/,null/*y adjust*/ ,2 /*wd adjust*/,this.colHW /*ht adjust*/);
+		this.rmMarkD();
+		if(this.rmdoRec) {this.rmRecur(); }
+		this.rmScrollTo(this.RMlast.stD);
+		//tap handlers
+		this.calTapHandler = this.handleCalTap.bind(this);
+		this.calHoldHandler = this.handleCalHold.bind(this);
+		Mojo.Event.listen(this.left0, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.listen(this.left1, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.listen(this.left2, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.listen(this.right0, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.listen(this.right1, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.listen(this.right2, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.listen(this.left0, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.listen(this.left1, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.listen(this.left2, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.listen(this.right0, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.listen(this.right1, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.listen(this.right2, Mojo.Event.hold, this.calHoldHandler);
+		},
     
     deactivate: function(){
-        //Mojo.Log.info("datetime-assistant:deactivate");	
-        this.controller.stopListening(this.controller.document, Mojo.Event.deactivate, this.blurStage);
-    },
+		Mojo.Event.stopListening(this.popCanvasBtn, Mojo.Event.tap, this.canvasBtnHandler);
+		Mojo.Event.stopListening(this.popCanvasBtn, Mojo.Event.tap, this.canvasBtnHandler);
+		//Mojo.Log.info("datetime-assistant:deactivate");	
+		this.controller.stopListening(this.controller.document, Mojo.Event.deactivate, this.blurStage);
+		Mojo.Event.stopListening(this.left0, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.stopListening(this.left1, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.stopListening(this.left2, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.stopListening(this.right0, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.stopListening(this.right1, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.stopListening(this.right2, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.stopListening(this.left0, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.stopListening(this.left1, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.stopListening(this.left2, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.stopListening(this.right0, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.stopListening(this.right1, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.stopListening(this.right2, Mojo.Event.hold, this.calHoldHandler);
+	},
     	
 	//When the start date of the event is changed, WEEKLY:single day, WEEKLY:custom, MONTHLY repeating events 
 	//must update their rruleModel. DAILY, YEARLY, and WEEKLY:weekdays repeating events do not need to be changed.
@@ -553,6 +1274,7 @@ var DatetimeAssistant = Class.create({
             this.targetEvent.alldayReservedStartTimestamp = this.targetModifiedTime.start;
             this.targetEvent.alldayReservedEndTimestamp = this.targetModifiedTime.end;
         }
+		this.rmHandleUpdate();
     },
     
     endDateSet: function(isOnBack){
@@ -642,8 +1364,10 @@ var DatetimeAssistant = Class.create({
 				}
             }
             
-            if (isOnBack == false) 
+            if (isOnBack == false) {
                 this.calcDuration();
+				this.rmHandleUpdate();
+			}
             this.targetModifiedTime.changed = true;
             if (this.datetimeoutID) {
                 this.controller.window.clearTimeout(this.datetimeoutID);
@@ -751,6 +1475,7 @@ var DatetimeAssistant = Class.create({
         this.controller.modelChanged(this.startTimeModel);
         this.controller.modelChanged(this.endTimeModel);
         this.targetModifiedTime.changed = false;
+		this.rmHandleUpdate();
         //Mojo.Log.info("Old event all day %o, new Event all day %o",this.oldEvent.allDay,this.allDayCheckboxModel);
         if (this.oldEvent.allDay != this.allDayCheckboxModel.value) {
         
@@ -761,6 +1486,85 @@ var DatetimeAssistant = Class.create({
         this.targetCallBack(this.targetEvent, null);
         
     },
-
+	
+	//Calendar Tap Handlers
+	handleCalHold: function(event) {
+		// set the hold var, send to tap handler
+		this.rmcalHold = true;
+		this.handleCalTap(event);
+	},
+	
+	handleCalTap: function(event) {
+		Event.stop(event);
+		var x = event.down.offsetX;
+		var y = event.down.offsetY;
+		//get rid of tap areas not in calendar day area
+		if(x <= 30 || y <= 40 || x>= 241) {
+			this.rmcalHold = false;
+			return;
+		}
+		var rmcan = event.target.id;
+		switch (rmcan) {
+			case 'left0':
+				var rmindex = 0;
+				break;
+			case 'left1':
+				var rmindex = 1;
+				break;
+			case 'left2':
+				var rmindex = 2;
+				break;
+			case 'right0':
+				var rmindex = 3;
+				break;
+			case 'right1':
+				var rmindex = 4;
+				break;
+			case 'right2':
+				var rmindex = 5;
+				break;
+		}
+		// get first day index month year
+		if (x && y && (rmindex !== undefined)) {
+			var calx = x - 30;
+			var caly = y - 40;
+			var cald1idx = this.RM[rmindex].fstDayLidx;
+			var calcol = Math.floor(calx/this.colHW);
+			var calrow = Math.floor(caly/this.colHW);
+			var caldate = ((calrow * 7) + calcol +1) - cald1idx;
+			if((caldate > this.RM[rmindex].maxdays) || (caldate <= 0)) {
+				// tapped an area with invalid date
+				this.rmcalHold = false;
+				return;
+			}
+			var calmon = this.RM[rmindex].month;
+			var calyear = this.RM[rmindex].year;
+			if((calyear !== undefined) && (calmon !== undefined) && (caldate !== undefined)) {
+				if(this.rmlastBtn != null && this.rmlastBtn == "popCanvasBtn2") {
+					// start date
+					this.startDateModel.date = new Date(calyear, calmon, caldate);
+					this.controller.modelChanged(this.startDateModel);
+					Mojo.Event.send(this.controller.get('edit_startDate'), 'mojo-property-change', {value: this.startDateModel.date} )
+				} else if(this.rmlastBtn !== null && this.rmlastBtn == "popCanvasBtn") {
+					// end date
+					this.endDateModel.date = new Date(calyear, calmon, caldate);
+					this.controller.modelChanged(this.endDateModel);
+					Mojo.Event.send(this.controller.get('edit_endDate'), 'mojo-property-change', {value: this.endDateModel.date} )
+				}
+				// check whether drawer should close
+				if(this.rmcalHold == false) {
+					this.ldrawer.mojo.setOpenState(false);
+					this.rmlastBtn = null;
+					if(!this.targetEvent.allDay) {
+						this.slideDown(this.controller.get('start_time_row'), 0.4);		
+						this.slideDown(this.controller.get('end_time_row'), 0.4);
+					}
+				} else {
+					this.rmcalHold = false;
+					return;
+				}
+			}
+		}
+	},
 
 });
diff --git a/usr/palm/applications/com.palm.app.calendar/app/controllers/day-assistant.js b/usr/palm/applications/com.palm.app.calendar/app/controllers/day-assistant.js
index 84263c0..4381545 100644
--- a/usr/palm/applications/com.palm.app.calendar/app/controllers/day-assistant.js
+++ b/usr/palm/applications/com.palm.app.calendar/app/controllers/day-assistant.js
@@ -11,8 +11,8 @@ var DayAssistant = Class.create({
 		this.appMenuModel = { visible:true, 
 									label:$L('Calendar'), 
 									items: [ Mojo.Menu.editItem,
-											{label:$L('New'), items: [{label:$L('Event'), command:'newtimed', disabled:false},
-	                													{label:$L('All day event'), command:'newallday', disabled:false}] 
+											{label:$L('New'), items: [{label:$L('Event'), shortcut:'n', command:'newtimed', disabled:false},
+	                													{label:$L('All day event'), shortcut:'d', command:'newallday', disabled:false}] 
 	                													 				
 											},											
 											{label:$L('Sync Now'), command:'sync', id: 2},
@@ -20,8 +20,41 @@ var DayAssistant = Class.create({
 											{label:$L('Jump to...'), command:'jumpto', id: 4},
 											{label:$L('Missed reminders...'), command:'reminders', id: 5},
 											{label:$L('Preferences & Accounts'), command:Mojo.Menu.prefsCmd, disabled: false},
+											//this.compressedMenuItem = {label:$L('Compressed View'), command:'compressed', chosen: true},
 											{label:$L('Help'), command:Mojo.Menu.helpCmd, disabled:false}]
 								};
+
+		this.compressedView = false;
+		this.enhancedView = false;
+		this.weekNumOffset = 0;
+		this.weekModulusNum = 1;
+		this.dayCookie = new Mojo.Model.Cookie('DayEnhanced');
+		if (this.dayCookie !== undefined) {
+			var daycookie = this.dayCookie.get();
+			if(daycookie !== undefined) {
+				if(daycookie.dayviewcompressed !== undefined) {
+					this.compressedView = daycookie.dayviewcompressed;
+				} else {
+					this.compressedView = false;
+				}
+				if(daycookie.dayviewenhanced !== undefined) {
+					this.enhancedView = daycookie.dayviewenhanced;
+				} else {
+					this.enhancedView = false;
+				}
+				if(daycookie.weeknumoffset !== undefined) {
+					this.weekNumOffset = daycookie.weeknumoffset;
+				} else {
+					this.weekNumOffset = 0;
+				}
+				if(daycookie.weekmodulusnum !== undefined) {
+					this.weekModulusNum = daycookie.weekmodulusnum;
+				} else {
+					this.weekModulusNum = 1;
+				}
+			}
+		}
+
 		this.colors = {
 				'cal-color-blue': 	{background: 'rgb(145, 211, 234)', border: 'rgb(99, 165, 188)',	text: 'rgb(5, 32, 41)'},
 				'cal-color-green': 	{background: 'rgb(140, 240, 140)', border: 'rgb(77, 206, 77)',	text: 'rgb(1, 52, 1)'},
@@ -31,7 +64,7 @@ var DayAssistant = Class.create({
 				'cal-color-pink': 	{background: 'rgb(245, 156, 188)', border: 'rgb(209, 104, 147)',text: 'rgb(40, 0, 0)'},
 				'cal-color-red': 	{background: 'rgb(255, 151, 151)', border: 'rgb(224, 98, 98)',	text: 'rgb(45, 8, 21)'},
 				'cal-color-purple': {background: 'rgb(217, 183, 255)', border: 'rgb(177, 128, 232)',text: 'rgb(38, 22, 56)'},
-				'cal-color-teal': 	{background: 'rgb(114, 223, 210)', border: 'rgb(68, 177, 164)',	text: 'rgb(0, 42, 36)'},
+				'cal-color-teal': 	{background: 'rgb(114, 223, 210)', border: 'rgb(68, 177, 164)',	text: 'rgb(0, 42, 36)'}
 			};
 			
 		this.PREV_DAY = 1;
@@ -42,7 +75,9 @@ var DayAssistant = Class.create({
 		this.pendingCalendarSettingsUpdate = false;
 		//this.pendingOpenScratchEventInDetails = false;
 		this.snapEffectCount = 0;
-
+		this.imgAlarm = new Image();
+		this.imgAlarm.src = "/media/internal/scrims/ubercalendar/alarm-icon.png";
+		this.imgIcons = new Object();
 		
 		this.hourHeight = 48;
 		this.halfHourHeight = 24;
@@ -211,18 +246,35 @@ var DayAssistant = Class.create({
 		
 	buildDayTitle: function(doScrim) {
 		var today = Date.today().clearTime();
+		var year = new Date(this.dayDate).getFullYear();
+		var maxwkn = new Date(year, 11, 31).getISO8601Week();
 		var dayDateNoTime = new Date(this.dayDate).clearTime();
+		var weekNumber = new Date(this.dayDate).getISO8601Week();
+		if(this.weekNumOffset !== undefined && this.weekNumOffset !=0) {
+			var wkNum = parseInt(weekNumber,10) + this.weekNumOffset;
+			weekNumber = wkNum > maxwkn ? (wkNum - maxwkn) : wkNum;
+			weekNumber = weekNumber < 10 ? '0' + weekNumber : weekNumber;
+		}
+		if(this.weekModulusNum != undefined && this.weekModulusNum <= 52 && this.weekModulusNum != 1) {
+			modNumber = (parseInt(weekNumber, 10) % this.weekModulusNum) + 1;
+			weekNumber = weekNumber + ' (' + modNumber +')';
+		}
 		
 		if (dayDateNoTime.compareTo(today) == 0) {
-			var template = new Template($L("#{todayStr}, #{dateStr}"));
+			var template = new Template($L("#{todayStr}, #{dateStr}") + ", W#{weekStr}");
 			var todayStr= Mojo.Format.formatRelativeDate(today, {date: "short"}).capitalize();
 			
 			var templateModel = {};
 			templateModel.todayStr = todayStr;
+			templateModel.weekStr = weekNumber;
 			templateModel.dateStr = Mojo.Format.formatDate(this.dayDate, $L("EEE MMM d"));
 			this.controller.get('dv_title').update(template.evaluate(templateModel)); // Localize this date format string
 		} else {
-			this.controller.get('dv_title').update(Mojo.Format.formatDate(this.dayDate, $L("EEE MMM d, yyyy"))); // Localize this date format string
+			var template = new Template($L("#{dateStr}") + ", W#{weekStr}");
+			var templateModel = {};
+			templateModel.weekStr = weekNumber;
+			templateModel.dateStr = Mojo.Format.formatDate(this.dayDate, $L("EEE MMM d, yyyy"));
+			this.controller.get('dv_title').update(template.evaluate(templateModel)); // Localize this date format string
 		}
 		
 		if (doScrim) {
@@ -504,7 +556,7 @@ var DayAssistant = Class.create({
 		return {left: left, top: top, width: width, height: height};
 	},
 
-		chopText:function(buf1,maxWidth,context){
+	chopText:function(buf1,maxWidth,context){
 		var buf2;
 		var index=0;
 		
@@ -702,6 +754,8 @@ var DayAssistant = Class.create({
 		//Mojo.Log.info("day-assistant: renderEvent");
 		if (this.animating && !event.animatible)
 			return;
+
+//Mojo.Log.error(Object.toJSON(event));
 	
 		var ctx = this.divs[whichDay].ctxEvents;
 		var marginLeft = 28;
@@ -743,7 +797,15 @@ var DayAssistant = Class.create({
 		ctx.fillRect(left+1, top+height-3, width-2, 1);
 		
 		var textTop = top + 30;
-		
+
+		// get more details
+		if (!event.subject && event.gotFullDetails === undefined) {
+			// get more infos for this event
+			getCalendarService().getEvent(event.id,
+				this.getEventDetails.bind(this, whichDay, event, selected, ghost),
+				function(response) {Mojo.Log.error(response.errorText);},
+				this.controller);
+		}
 		// Subject
 		ctx.fillStyle = this.colors[event.calendarColor].text;
 		if (selected)
@@ -753,8 +815,27 @@ var DayAssistant = Class.create({
 		var subjectTop = top+15;
 		if (bottom >= (top + height))
 			subjectTop = top+17;	// no room for location or note, therefore vertically center subject text
-		this.fillText(event.subject, ctx, left+4, subjectTop, width, bottom, 15 /*line height*/);	
-		
+		this.fillText(event.subject, ctx, left+4, subjectTop, width-30, bottom, 15 /*line height*/);	
+
+		// Alarm
+		if ((event.alarm !== undefined) && (event.alarm != "none")) {
+			try{ ctx.drawImage(this.imgAlarm, left+4+width-18, subjectTop+1, 12, 12); }catch(e) {}
+		}
+		// Icon
+		if (event.note !== undefined) {
+			try {
+				var start = event.note.indexOf("ICON=");
+				if (start > -1) {
+					start += 5;
+					var end = event.note.indexOf(";");
+					if (end > start) {
+						var icon = event.note.substring(start, end);
+						ctx.drawImage(this.imgIcons[icon], left+4+width-30, subjectTop+12, 12, 12);
+					}
+				}
+			} catch(e) {}
+		}
+
 		// Location
 		if (event.location && (event.location.length > 0) && (textTop < (top + height))) {
 			ctx.font = "italic bold 14px Prelude";
@@ -769,7 +850,7 @@ var DayAssistant = Class.create({
 			bottom = top+height;
 			this.fillText(event.note, ctx, left+4, textTop-2, width, bottom-2, 12 /*line height*/);			
 		}
-		
+
 		if (ghost) {
 			var selectedColor = "rgba(228, 228, 226, 0.85)"
 			ctx.fillStyle = selectedColor;
@@ -789,6 +870,13 @@ var DayAssistant = Class.create({
 		  ctx.fillRect(left, top, width, height);
 		}
 	},
+
+	getEventDetails: function(whichDay, event, selected, ghost, details) {
+		event.alarm = details.alarm;
+		event.note = details.note;
+		event.gotFullDetails = true;
+		this.renderEvent(whichDay, event, selected, ghost);
+	},
 	
 	getAllDayDimensions: function(index, event) {
 		var marginLeft = 4;
@@ -822,13 +910,41 @@ var DayAssistant = Class.create({
 					   dim.top, 
 					   dim.width, 
 					   this.colors[event.calendarColor].allday.syCenter);
+
+		// get more details
+		if (!event.subject && event.gotFullDetails === undefined) {
+			// get more infos for this event
+			getCalendarService().getEvent(event.id,
+					this.getAllDayEventDetails.bind(this, whichDay, index, event, selected),
+					function(response) {Mojo.Log.error(response.errorText);},
+					this.controller);
+		}
 		
 		// Subject
 		ctx.fillStyle = this.colors[event.calendarColor].text;
 		if (selected)
 			ctx.fillStyle = "rgb(255, 255, 255)";
 		ctx.font = "bold 14px Prelude";
-		this.fillText(event.subject, ctx, dim.left+10, dim.top+17, dim.width-10, dim.top+30, 15 /*line height*/);
+		this.fillText(event.subject, ctx, dim.left+10, dim.top+17, dim.width-30, dim.top+30, 15 /*line height*/);
+
+		// Alarm
+		if ((event.alarm !== undefined) && (event.alarm != "none")) {
+			try{ ctx.drawImage(this.imgAlarm, dim.left+dim.width-18, dim.top+(dim.height-12)/2, 12, 12); }catch(e) {}
+		}
+		// Icon
+		if (event.note !== undefined) {
+			try {
+				var start = event.note.indexOf("ICON=");
+				if (start > -1) {
+					start += 5;
+					var end = event.note.indexOf(";");
+					if (end > start) {
+						var icon = event.note.substring(start, end);
+						ctx.drawImage(this.imgIcons[icon], dim.left+dim.width-30, dim.top+(dim.height-12)/2, 12, 12);
+					}
+				}
+			} catch(e) {}
+		}
 		
 		if (selected) {
 			var selectedColor = "rgba(4, 4, 4, 0.5)"
@@ -837,14 +953,39 @@ var DayAssistant = Class.create({
 		}
 	},
 	
+	getAllDayEventDetails: function(whichDay, index, event, selected, details) {
+		event.alarm = details.alarm;
+		event.note = details.note;
+		event.gotFullDetails = true;
+		this.renderAllDayEvent(whichDay, index, event, selected);
+	},
+
 	calcEventCompression: function(day) {
 		var i;
 		
 		// Make sure that free times, busy times, and events are sorted by start times
-		day.freeTimes = day.freeTimes.sortBy(function(f) { return f.start_decimal; })
+		//day.freeTimes = day.freeTimes.sortBy(function(f) { return f.start_decimal; })
 		day.events = day.events.sortBy(function(e) { return e.start_decimal; })
 		day.busyTimes = day.busyTimes.sortBy(function(b) { return b.start_decimal; })
 
+		if (this.compressedView && this.enhancedView) {
+			if (day.events.length == 0) {
+				day.freeTimes.push({start_decimal: 0, end_decimal: 2400, duration: 2400});
+			} else {
+				if (day.events[0].start_decimal > 0) {
+					day.freeTimes.push({start_decimal: 0, end_decimal: day.events[0].start_decimal, duration: day.events[0].start_decimal});
+				}
+				// sort by end times to get last time
+				var last = day.events.sortBy(function(f) { return f.end_decimal; });
+				if (last[last.length-1].end_decimal < 2400) {
+					day.freeTimes.push({start_decimal: last[last.length-1].end_decimal, end_decimal: 2400, duration: 2400 - last[last.length-1].end_decimal});
+				}
+			}
+		}
+		// Make sure that free times, busy times, and events are sorted by start times
+		day.freeTimes = day.freeTimes.sortBy(function(f) { return f.start_decimal; })
+
+
 		day.animationTop = 0;
 		
 		var compressDelta = 0;
@@ -1556,10 +1697,31 @@ var DayAssistant = Class.create({
 		this.dvScratchEventsDiv = this.controller.get('dv_scratch_events');
 		this.scratchEventActive = false;
 		this.scratchEvent = null;
-		
+		this.copyEvt = null;
+		
+		this.imgIcons.birthday = new Image();
+		this.imgIcons.birthday.src = "/media/internal/scrims/ubercalendar/icon-birthday.png";
+		this.imgIcons.car = new Image();
+		this.imgIcons.car.src = "/media/internal/scrims/ubercalendar/icon-car.png";
+		this.imgIcons.kids = new Image();
+		this.imgIcons.kids.src = "/media/internal/scrims/ubercalendar/icon-kids.png";
+		this.imgIcons.doctor = new Image();
+		this.imgIcons.doctor.src = "/media/internal/scrims/ubercalendar/icon-doctor.png";
+		this.imgIcons.plane = new Image();
+		this.imgIcons.plane.src = "/media/internal/scrims/ubercalendar/icon-plane.png";
+		this.imgIcons.holiday = new Image();
+		this.imgIcons.holiday.src = "/media/internal/scrims/ubercalendar/icon-holiday.png";
+		this.imgIcons.vacation = new Image();
+		this.imgIcons.vacation.src = "/media/internal/scrims/ubercalendar/icon-vacation.png";
+		this.imgIcons.party = new Image();
+		this.imgIcons.party.src = "/media/internal/scrims/ubercalendar/icon-party.png";
+
 		// Used to detect Orange key + tap to delete inline events
 		this.orangeKeyDown = false;
-	
+		
+		//Used to detect gesture area hold
+		this.metaKeyDown = false;
+		
 		this.firstActivated = true;
 		
 		this.buildViewHeader();
@@ -1824,17 +1986,20 @@ var DayAssistant = Class.create({
 		this.menuModel = {
 			visible:true,
 			items: [
-					{},
+					{label: $L('Event'), icon: 'new-timed', command: 'newtimed'},
 						{label:$L('Views'), 
 						toggleCmd:'day', 
 						items:[
+							{label:$L('Agenda'), icon: 'menu-agenda', command:'agenda'},
 							{label:$L('Day'), icon: 'menu-day', command:'day'}, 
 							{label:$L('Week'), icon: 'menu-week', command:'week'}, 
 							{label:$L('Month'), icon: 'menu-month', command:'month'}
 					 ]},
-					{},
+					{label: $L('All day event'), icon: 'new-allday', command: 'newallday'},
 					]};
-			
+
+		//this.compressedMenuItem.chosen = this.compressedView;
+
 		this.controller.setupWidget(Mojo.Menu.commandMenu, undefined, this.menuModel);
 		this.controller.setupWidget(Mojo.Menu.appMenu, {omitDefaultItems:true}, this.appMenuModel);
 		this.remindersUpdated(); 	// Update missed reminders menu item
@@ -1854,6 +2019,9 @@ var DayAssistant = Class.create({
 		this.controller.setupWidget(this.divs[this.PREV_DAY].alldayevents_scroller, undefined, {mode: 'vertical'});
 		this.controller.setupWidget(this.divs[this.NEXT_DAY].alldayevents_scroller, undefined, {mode: 'vertical'});
 
+		var cookie = new Mojo.Model.Cookie("LastView");
+		cookie.put("day");
+
    		this.CalSelectorHandler = this.calSelector.bindAsEventListener(this);
 		
 		// IMPORTANT: Set up the height of the scrollers.  If this is not done
@@ -2008,6 +2176,7 @@ var DayAssistant = Class.create({
 		// Find all the EAS accounts if there are any
 		this.easAccountIds = null;
 		response.list.each(function(acct){
+//Mojo.Log.error("accid", acct.accountId, Object.toJSON(acct));
 			//Mojo.Log.info("acct domain %s", acct.domain);
 			if (acct.domain == 'eas') {
 				// Keep track of the list of eas accounts for Sync Accounts button
@@ -2075,11 +2244,11 @@ var DayAssistant = Class.create({
 				this.maybeCommitScratchEvent();
 			} else if(event.command =="newtimed"){
 				Event.stop(event);
-				this.controller.stageController.pushScene('edit', 0, 0, false,this.getCalId()/*calendarId*/,0/*subject*/);
+				this.controller.stageController.pushScene('edit', 0, 0, false, this.getCalId()/*calendarId*/,0/*subject*/);
 				this.maybeCommitScratchEvent();
 			} else if(event.command=="newallday"){
 				Event.stop(event);
-				this.controller.stageController.pushScene('edit', 0, 0, true,this.getCalId(),0/*subject*/);
+				this.controller.stageController.pushScene('edit', 0, 0, true, this.getCalId(),0/*subject*/);
 				this.maybeCommitScratchEvent();
 			} else if(event.command == Mojo.Menu.helpCmd){
 				this.maybeCommitScratchEvent(true);
@@ -2087,6 +2256,13 @@ var DayAssistant = Class.create({
 			} else if (event.command == 'jumpto') {
 				Event.stop(event);
 				this.showJumpTo(); // this may also commit the scratch event
+			//} else if (event.command == 'compressed') {
+			//	Event.stop(event);
+			//	this.compressedView = !this.compressedView;
+			//	var cookie = new Mojo.Model.Cookie('DayViewCompressed');
+			//	cookie.put(this.compressedView);
+			//	this.compressedMenuItem.chosen = this.compressedView;
+			//	this.controller.modelChanged(this.appMenuModel);
 			} else if (event.command == 'reminders') {
 				Event.stop(event);
 				this.maybeCommitScratchEvent();
@@ -2095,15 +2271,27 @@ var DayAssistant = Class.create({
 				Event.stop(event);
 				this.maybeCommitScratchEvent(true);
 				this.syncAllCalendars();
+			} else if (event.command == 'agenda') {
+				Event.stop(event);
+				this.maybeCommitScratchEvent(true);
+				this.controller.serviceRequest('palm://com.palm.applicationManager', {
+					method: 'launch',
+					parameters: {
+						id: 'com.palm.app.agenda'
+					}
+				});
+				this.menuModel.items[1].toggleCmd = 'day';
+				this.controller.modelChanged(this.menuModel, this);
 			}				
 		} else if(event.type == Mojo.Event.commandEnable && event.command == Mojo.Menu.prefsCmd) {
 			// Enable prefs menuitem for this scene.
 			event.stopPropagation();
-		} else if(event.type == Mojo.Event.back){
+		} else if (event.type == Mojo.Event.back) {
 			// If there's a scratch event, possibly commit it, and then override default back handling.
-			if (this.maybeCommitScratchEvent(true)) {
-				Event.stop(event);
-			}
+			event.preventDefault();
+			event.stopPropagation();
+			this.maybeCommitScratchEvent(true);
+			this.handleMonthView();
 		}
 			
 	},
@@ -2406,7 +2594,12 @@ var DayAssistant = Class.create({
 		if (event.originalEvent.altKey || event.originalEvent.keyCode === 129) {
     	//Mojo.Log.info("handleKeyUp detected ORANGE key");
 			this.orangeKeyDown = false;
- 		} 
+ 		}
+		// getsure area up
+		if (event.originalEvent.metaKey || event.originalEvent.keyCode === 231) {
+		//Mojo.Log.info("handleKeyUp detected gesture up key");
+			this.metaKeyDown = false;
+		}		
 	},
 	
 	handleKeyDown: function(event) {
@@ -2414,7 +2607,12 @@ var DayAssistant = Class.create({
 		if (event.originalEvent.altKey || event.originalEvent.keyCode === 129) {
     	//Mojo.Log.info("handleKeyDown detected ORANGE key");
 			this.orangeKeyDown = true;
- 		} 
+ 		}
+		// getsure area down
+		if (event.originalEvent.metaKey || event.originalEvent.keyCode === 231) {
+    	//Mojo.Log.info("handleKeyUp detected gesture key");
+			this.metaKeyDown = true;
+		}		
 	},
 	
 	updateSceneScrollerSize: function(event) {
@@ -2865,14 +3063,14 @@ var DayAssistant = Class.create({
 	
 	handleAllDayTap: function(index, event) {
 		this.deletedeventId = undefined;
-		if (this.orangeKeyDown == true) {
+		if (this.metaKeyDown == true) {
 			// Confirm with the user they want to delete the event
 			this.eventToBeDeleted = event;
 			this.allDayEventToBeDeletedIndex = index;
 			this.deletedeventId = event.id;
-			// Reset the orangeKeyDown to handle the case the user lets go
-			// of the Orange key when the Delete confirmation dialog is up
-			this.orangeKeyDown = false;
+			// Reset the metaKeyDown to handle the case the user lets go
+			// of the meta key when the Delete confirmation dialog is up
+			this.metaKeyDown = false;
 			getCalendarService().getEvent(event.id, this.gotEventInlineDelete.bind(this),this.gotEventInlineDeleteFailed.bind(this), this.controller);
 		} else {
 			// Show the Event Details for the tapped all day event
@@ -2941,6 +3139,18 @@ var DayAssistant = Class.create({
 			getReminderManager().removeReminder(this.deletedeventId);
 	},
 	
+	copiedEvent: function(response) {
+		//copied event saved open in edit scene
+		if(this.copyEvt) {
+			if(response.id == this.copyEvt.id || this.copyEvt.id == undefined || this.copyEvt.id.match(response.id)) {
+		  
+				// NOTE: Event Ids are strings NOT longs
+				if (this.copyEvt.id == undefined)	this.copyEvt.id = response.id + "";	// Do NOT Localize
+				this.controller.stageController.pushScene('edit', this.copyEvt.id, new Date(this.copyEvt.startTimestamp), false, this.copyEvt.calendarId, this.copyEvt.subject, false, this.updatingEventHandler);
+			}
+		}
+	},
+	
 	handleEventsTap: function(event, tapEvent) {
 		//Mojo.Log.info("day-assistant: handleEventsTap event_being_held " + Object.toJSON(this.event_being_held));
 		
@@ -2967,18 +3177,41 @@ var DayAssistant = Class.create({
 				}
 			}
 		} else {
-			if (this.orangeKeyDown == true) {
+			if (this.metaKeyDown == true) {
 				// Confirm with the user they want to delete the event
-				//Mojo.Log.info("handleEventsTap: Orange key + tap = Delete event " + Object.toJSON(event));
+				//Mojo.Log.info("handleEventsTap: meta key + tap = Delete event " + Object.toJSON(event));
 				// Retrieve the event from the calendar service so we can figure
 				// out whether it's recurring or not
 				this.eventToBeDeleted = event;
 				this.deletedeventId = event.id;
-				// Reset the orangeKeyDown to handle the case the user lets go
-				// of the Orange key when the Delete confirmation dialog is up
-				this.orangeKeyDown = false;
+				// Reset the metaKeyDown to handle the case the user lets go
+				// of the meta key when the Delete confirmation dialog is up
+				this.metaKeyDown = false;
 				getCalendarService().getEvent(event.id, this.gotEventInlineDelete.bind(this),this.gotEventInlineDeleteFailed.bind(this), this.controller);
 			} else {
+				if (this.orangeKeyDown == true) {
+					//create new from old
+					var start = new Date();
+					start.set({	minute: 0, second: 0, millisecond: 0 });
+					var startTS = start.getTime(); //set it up on today's current hour
+					var duration = event.end - event.start;
+					var endTS = startTS + duration;
+					this.orangeKeyDown = false;
+					var tfParams = {
+								subject: event.subject,
+								allday: false,
+								location: event.location,
+								startTimestamp: startTS,
+								endTimestamp: endTS,
+								note: event.note
+							};
+					this.copyEvt = new CalendarEvent(tfParams);
+					this.copyEvt.calendarId = event.calendarId;
+					getCalendarService().setEvent(this.copyEvt, 
+										this.copiedEvent.bind(this),
+										this.controller,
+										function(response) {Mojo.Log.error(response.errorText)});
+				} else {
 				this.controller.stageController.pushScene('edit', 
 													  event.id, 
 													  new Date(event.startTimestamp), 
@@ -2987,6 +3220,7 @@ var DayAssistant = Class.create({
 													  event.subject, 
 													  false, 
 													  this.updatingEventHandler);
+				}
 			}
 		}
 	},
@@ -3182,6 +3416,7 @@ var DayAssistant = Class.create({
 			this.event_being_dragged = this.controller.get("dragging_event");
 			// Keep track of the initial hit point
 			this.dragLastPointY = event.down.y;
+			this.dragLastPointX = event.down.X;
 			Event.stop(event);
 			return Mojo.Gesture.CONSUMED_EVENT;
 		}
@@ -3197,6 +3432,21 @@ var DayAssistant = Class.create({
 		return newTop;
 	},
 	
+	// Move the element... NOTE: This assumes that the element is 
+	// positioned absolutely
+	moveElementX: function(element, dx) {
+		var newLeft = parseInt(element.getStyle('left'), 10) + dx;
+		//Mojo.Log.info("day-assistant: moveElement: %s %d",element.id,newTop)
+		
+		element.setStyle({left: newLeft + 'px'});
+		if (newLeft > 100) {
+			element.setStyle({opacity: 0.5});
+		} else {
+			element.setStyle({opacity: 1.0});
+		}
+		return newLeft;
+	},
+	
 	handleEventsDragging: function(event) {
 		//Mojo.Log.info("day-assistant handleEventsDragging");
 		if (this.event_being_dragged) {
@@ -3213,6 +3463,15 @@ var DayAssistant = Class.create({
 				this.dragLastPointY = pointerY;
 			}
 		
+			var pointerX = event.move.x;
+	    if (this.dragLastPointX != pointerX) {
+				// Calculate the delta of the current point and the last point
+		  	var newOffsetX = pointerX - this.dragLastPointX;
+				// Move the element based off of the delta
+		  	this.moveElementX(target, newOffsetX);
+				this.dragLastPointX = pointerX;
+			}
+		
 			return Mojo.Gesture.CONSUMED_EVENT;
 		}
 	},
@@ -3362,31 +3621,43 @@ var DayAssistant = Class.create({
 		//Mojo.Log.info("day-assistant handleEventsDragEnd");
 		
 		if (this.event_being_dragged) {
-			var itemTop = this.event_being_dragged.positionedOffset().top;
-			
-			// Calculate how much "time" the user has moved the event.  When the event is retrieved
-			// we use this delta to calculate the new start time.  Can not calculate the new start
-			// time here, because for events that overlap days, this.dragStartHour may not reflect
-			// the actual start time of the event
-			this.newTimeDeltaInMinutes = this.ptToHalfHour(itemTop-this.event_being_held.top) * 30;
-			
-			// Set these to undefined since we use newTimeDeltaInMinutes to determing the new start time
-			// in gotEventForUpdateTime
-			this.newHour = undefined;
-			this.newMinutes = undefined;
-			
-			// Show the event in its new position.  At this point, the CalendarEvent in the
-			// database hasn't been updated with the new time, but we can move the event
-			// visually first
-			this.event_being_held.origDragTop = this.event_being_held.top;
-			
-			this.event_being_held.top = itemTop;
-			this.renderEvent(this.THIS_DAY, this.event_being_held, false);
+			var itemLeft = this.event_being_dragged.positionedOffset().left;
+			if (itemLeft > 100) {
+				this.eventToBeDeleted = this.event_being_held;
+				this.deletedeventId = this.event_being_held.id;
+				getCalendarService().getEvent(this.event_being_held.id, this.gotEventInlineDelete.bind(this),this.gotEventInlineDeleteFailed.bind(this), this.controller);
+				// Reset the dragging state
+				this.resetEventBeingDragged();
 
-			// Retrieve the event from the calendar service so we can set the new start time
-			getCalendarService().getEvent(this.event_being_held.id, this.gotEventForUpdateTime.bind(this),this.gotEventFailed.bind(this), this.controller);
-			
-			return Mojo.Gesture.CONSUMED_EVENT;
+				return Mojo.Gesture.CONSUMED_EVENT;
+			} else {
+				var itemTop = this.event_being_dragged.positionedOffset().top;
+				
+				// Calculate how much "time" the user has moved the event.  When the event is retrieved
+				// we use this delta to calculate the new start time.  Can not calculate the new start
+				// time here, because for events that overlap days, this.dragStartHour may not reflect
+				// the actual start time of the event
+				this.newTimeDeltaInMinutes = this.ptToHalfHour(itemTop-this.event_being_held.top) * 30;
+				
+				// Set these to undefined since we use newTimeDeltaInMinutes to determing the new start time
+				// in gotEventForUpdateTime
+				this.newHour = undefined;
+				this.newMinutes = undefined;
+				
+				// Show the event in its new position.  At this point, the CalendarEvent in the
+				// database hasn't been updated with the new time, but we can move the event
+				// visually first
+				this.event_being_held.origDragTop = this.event_being_held.top;
+				
+				this.event_being_held.top = itemTop;
+				this.event_being_held.left = 0;
+				this.renderEvent(this.THIS_DAY, this.event_being_held, false);
+	
+				// Retrieve the event from the calendar service so we can set the new start time
+				getCalendarService().getEvent(this.event_being_held.id, this.gotEventForUpdateTime.bind(this),this.gotEventFailed.bind(this), this.controller);
+				
+				return Mojo.Gesture.CONSUMED_EVENT;
+			}
 		}
 	},
 	
diff --git a/usr/palm/applications/com.palm.app.calendar/app/controllers/edit-assistant.js b/usr/palm/applications/com.palm.app.calendar/app/controllers/edit-assistant.js
index 9ba9c70..1188336 100644
--- a/usr/palm/applications/com.palm.app.calendar/app/controllers/edit-assistant.js
+++ b/usr/palm/applications/com.palm.app.calendar/app/controllers/edit-assistant.js
@@ -8,6 +8,7 @@ var EditAssistant = Class.create({
 	                											 {label:$L('Get Directions'), command:'direction', disabled:false}] 
 	                													 				
 							},
+							{label:$L('Edit event as new'), command:'editAsNewEvent', disabled:false},
 							{label:$L('Delete event'), command:'deleteEvent', disabled:false},
 							{label:$L('Preferences & Accounts'), command:Mojo.Menu.prefsCmd, disabled: true},
 							{label:$L('Help'), command:Mojo.Menu.helpCmd, disabled:false}]
@@ -297,6 +298,12 @@ var EditAssistant = Class.create({
 		
 		// Delete event menu item.  Users can delete new and existing events
 		if(!this.isReadOnlyEvent)
+			this.appMenuModel.items[3].disabled = false;   
+		else
+			this.appMenuModel.items[3].disabled = true; 
+
+		// Edit as new event menu item. Users cannot edit new items as a new item
+		if(this.targetEvent.id > 0)
 			this.appMenuModel.items[2].disabled = false;   
 		else
 			this.appMenuModel.items[2].disabled = true; 
@@ -443,18 +450,68 @@ var EditAssistant = Class.create({
 						 '-PT5M', // Do Not Localize
 						 '-PT10M', //Do not localize
 						 '-PT15M', // Do NOT Localize
+						 '-PT20M', // Do NOT Localize
+						 '-PT25M', // Do NOT Localize
 						 '-PT30M', // Do NOT Localize
+						 '-PT35M', // Do NOT Localize
+						 '-PT45M', // Do NOT Localize
 						 '-PT1H', // Do NOT Localize
-						 '-P1D' // Do NOT Localize
+						 '-PT90M', // Do NOT Localize
+						 '-PT2H', // Do NOT Localize
+						 '-PT150M', // Do NOT Localize
+						 '-PT3H', // Do NOT Localize
+						 '-PT220M', // Do NOT Localize
+						 '-PT4H', // Do NOT Localize
+						 '-PT5H', // Do NOT Localize
+						 '-PT6H', // Do NOT Localize
+						 '-PT7H', // Do NOT Localize
+						 '-PT8H', // Do NOT Localize
+						 '-PT10H', // Do NOT Localize
+						 '-PT12H', // Do NOT Localize	
+						 '-PT23H', // Do NOT Localize
+						 '-P1D', // Do NOT Localize
+						'-P36H', // Do NOT Localize
+	 					'-P2D', // Do NOT Localize
+						'-P60H', // Do NOT Localize	
+	 					'-P3D', // Do NOT Localize
+						'-P84H', // Do NOT Localize
+						'-P4D', // Do NOT Localize
+						'-P5D', // Do NOT Localize
+						'-P6D', // Do NOT Localize			
+	 					'-P1W', // Do NOT Localize
+						'-P2W', // Do NOT Localize
+						'-P3W', // Do NOT Localize
+						'-P4W', // Do NOT Localize
+						'-P8W', // Do NOT Localize
+						'-P12W', // Do NOT Localize
+						'-P16W', // Do NOT Localize
+						'-P20W', // Do NOT Localize
+						'-P24W', // Do NOT Localize
+						'-P52W' // Do NOT Localize
 						]
 						},
 			alarmsAllday: {
 				list: [ 'none', // Do NOT Localize
 						'-PT0M',// DO NOT Localize
 	 					'-P1D', // Do NOT Localize
+						'-P36H', // Do NOT Localize
 	 					'-P2D', // Do NOT Localize
+						'-P60H', // Do NOT Localize	
 	 					'-P3D', // Do NOT Localize
+						'-P84H', // Do NOT Localize
+						'-P4D', // Do NOT Localize
+						'-P5D', // Do NOT Localize
+						'-P6D', // Do NOT Localize			
 	 					'-P1W', // Do NOT Localize
+						'-P2W', // Do NOT Localize
+						'-P3W', // Do NOT Localize
+						'-P4W', // Do NOT Localize
+						'-P8W', // Do NOT Localize
+						'-P12W', // Do NOT Localize
+						'-P16W', // Do NOT Localize
+						'-P20W', // Do NOT Localize
+						'-P24W', // Do NOT Localize
+						'-P52W' // Do NOT Localize
 					 ]
 					}
 		};
@@ -512,7 +569,8 @@ var EditAssistant = Class.create({
 			modelProperty: 'location',
 			hintText: $L('Event location'),
 			acceptBack:true,
-			runTextLinker:true
+			runTextLinker:true,
+			multiline: true
 	
 		};
 		 this.locationmodel = {
@@ -644,6 +702,19 @@ var EditAssistant = Class.create({
 		if (this.eventCalendarId) {
 			this.updateContentCalendarType(this.eventCalendarId.sub('id',''));
 		}
+		if (!this.isReadOnlyEvent) {
+			this.controller.setupWidget(Mojo.Menu.commandMenu,
+				this.attrCommand = {
+					menuClass: 'fade'
+				},
+				this.modelCommand = {
+					visible: true,
+					items: [
+					{icon: "make-vip", command: 'toggle_participantrow'},
+					{icon: "delete", command:'deleteEvent'}]
+				}
+			);
+		}
 	 },
 	 
 	 setUpWidgetListeners: function(){
@@ -664,22 +735,35 @@ var EditAssistant = Class.create({
 	 },
 	 handleCommand: function(event) {
 		if(event.type == Mojo.Event.command) {
-			if(event.command == 'deleteEvent') {
-				Event.stop(event);
-				this.deletedeventId = this.targetEvent.id;
-				this.handleDelete(event);
-			} else if (event.command == Mojo.Menu.prefsCmd) {
-				Event.stop(event);
-				this.controller.stageController.pushScene('prefs');
-			}else if(event.command =='copy'){
-				//@todo
-			}else if(event.command == Mojo.Menu.helpCmd){
-				getAppManagerService().launchHelp(this.controller);
-			} else if(event.command == 'map'){
-				getAppManagerService().launchMaps(this.controller,this.targetEvent.location,false);
-			}else if(event.command == 'direction'){
-				getAppManagerService().launchMaps(this.controller,this.targetEvent.location,true);								
-			}
+			try {
+				if(event.command == 'deleteEvent') {
+					Event.stop(event);
+					this.deletedeventId = this.targetEvent.id;
+					this.handleDelete(event);
+				} else if (event.command == Mojo.Menu.prefsCmd) {
+					Event.stop(event);
+					this.controller.stageController.pushScene('prefs');
+				}else if(event.command =='editAsNewEvent'){
+					Event.stop(event);
+					this.targetEvent = Object.clone(this.targetEvent);
+					this.targetId = 0;
+					delete this.targetEvent.id;
+					this.targetEvent.parentId = 0;
+	
+					this.renderEvent(this.targetEvent);
+					this.edit_infoHandler();
+				}else if(event.command =='copy'){
+					//@todo
+				}else if(event.command == Mojo.Menu.helpCmd){
+					getAppManagerService().launchHelp(this.controller);
+				} else if(event.command == 'map'){
+					getAppManagerService().launchMaps(this.controller,this.targetEvent.location,false);
+				}else if(event.command == 'direction'){
+					getAppManagerService().launchMaps(this.controller,this.targetEvent.location,true);								
+				}else if(event.command == 'toggle_participantrow'){
+					this.controller.get('edit_participantrow').toggle();
+				}
+			} catch (e) {}
 		}
 		else if(event.type == Mojo.Event.commandEnable && event.command == Mojo.Menu.prefsCmd) {
 			// Enable prefs menuitem for this scene.
@@ -1100,7 +1184,7 @@ var EditAssistant = Class.create({
 
 	alarmChoose: function(val) {
 		
-		var value = parseInt(val);
+		var value = parseInt(val, 10);
 		this.selectedAlarmOption = value;
 		if (val != undefined) {
 			if (value == 999) {
diff --git a/usr/palm/applications/com.palm.app.calendar/app/controllers/month-assistant.js b/usr/palm/applications/com.palm.app.calendar/app/controllers/month-assistant.js
index 747fcb3..11060b4 100644
--- a/usr/palm/applications/com.palm.app.calendar/app/controllers/month-assistant.js
+++ b/usr/palm/applications/com.palm.app.calendar/app/controllers/month-assistant.js
@@ -5,29 +5,91 @@ var MONTH_DAY_ID_FORMAT = 'MMMM dd yyyy';	// IMPORTANT: DO NOT LOCALIZE!
 var MonthAssistant = Class.create({
 				
 	reminderMenuItemId: 3,
+	//fullEvts: null,
+	 
 	
 	initialize: function() {
  		this.appMenuModel = { visible:true, 
 					label:$L('Calendar'), 
 					items: [
 						Mojo.Menu.editItem,
+						{label:$L('New'), items: [{label:$L('Event'), shortcut:'n', command:'newtimed', disabled:false},
+	                								{label:$L('All day event'), shortcut:'d', command:'newallday', disabled:false}] 
+						},
 						{label:$L('Sync Now'), command:'sync', id: 0},
 						{label:$L('Show today'), command:'today', id: 1},
 						{label:$L('Jump to...'), command:'jumpto', id: 2},
 						{label:$L('Missed reminders...'), command:'reminders', id: 3},
 						{label:$L('Preferences & Accounts'), command:Mojo.Menu.prefsCmd, checkEnabled: true},
+						//this.enhancedMenuItem = {label:$L('Enhanced View'), command:'enhanced', chosen: true},
 						{label:$L('Help'), command:Mojo.Menu.helpCmd, disabled:false}
 					]
 				};
 				
 		this.scrollerModel = { scrollbars: false, mode: "vertical-snap", snapIndex: 0, snapElements: { y: [] } };
+		this.enhancedView = false;
+		this.monthAllDayColors = false;
+		this.updateFromScroll = false;
+		this.weekNumOffset = 0;
+		this.weekModulusNum = 1;
+		this.monthCookie = new Mojo.Model.Cookie('MonthViewEnhanced');
+		if (this.monthCookie) {
+			var monthcookie = this.monthCookie.get();
+			if(monthcookie) {
+				if(monthcookie.monthalldaycolors !== undefined) {
+					this.monthAllDayColors = monthcookie.monthalldaycolors;
+				} else {
+					this.monthAllDayColors = false;
+				}
+				if(monthcookie.monthviewenhanced !== undefined) {
+					this.enhancedView = monthcookie.monthviewenhanced;
+				} else {
+					this.enhancedView = false;
+				}
+				if(monthcookie.weeknumoffset !== undefined) {
+						this.weekNumOffset = monthcookie.weeknumoffset;
+				} else {
+						this.weekNumOffset = 0;
+				}
+				if(monthcookie.weekmodulusnum !== undefined) {
+						this.weekModulusNum = monthcookie.weekmodulusnum;
+				} else {
+						this.weekModulusNum = 1;
+				}
+			}
+		}
 	},
+
+	colors: {"cal-color-blue": "rgba(145,211,234,0.4)",
+		"cal-color-green": "rgba(140,240,140,0.4)",
+		"cal-color-yellow": "rgba(232,227,124,0.4)",
+		"cal-color-gray": "rgba(194,194,194,0.4)",
+		"cal-color-orange": "rgba(251,180,116,0.4)",
+		"cal-color-pink": "rgba(245,156,188,0.4)",
+		"cal-color-red": "rgba(255,151,151,0.4)",
+		"cal-color-purple": "rgba(217,183,255,0.4)",
+		"cal-color-teal": "rgba(114,223,210,0.4)"},
+
+	placements: {"0": "top left",
+		"1": "top center",
+		"2": "top right",
+		"3": "center left",
+		"4": "center right",
+		"5": "bottom left",
+		"6": "bottom center",
+		"7": "bottom right"},
 														
  	setupMonth: function(startDate, endDate, callbackfn) 
 	{
+		if (this.enhancedView) getCalendarService().getEvents(getCurrentCal(), startDate.getTime(), endDate.getTime(), this.getEventsCallback.bind(this), this.controller, this.getEventsFailCallback/*, {useSlices: true}*/);
 		getCalendarService().getBusyDays(getCurrentCal(), startDate.getTime(), endDate.getTime(), callbackfn, this.controller);
 	},
-	
+
+	getEventsCallback: function(resp)
+	{
+		this.fullEvts = resp.days;
+	},
+
 	buildViewHeader: function() 
 	{
 		//Mojo.Log.info("month-assistant: buildViewHeader");
@@ -37,7 +99,35 @@ var MonthAssistant = Class.create({
 	
 	buildMonthTitle: function() 
 	{
-		this.mvTitle.innerText = Mojo.Format.formatDate(this.monthDate, $L("MMM yyyy")); // Localize this date format string
+		var wn = new Date(this.monthDate);
+		wn.setDate(1);
+		var year = wn.getFullYear;
+		var maxwkn = new Date(year, 11, 31).getISO8601Week();
+		var firstWeek = wn.getISO8601Week();
+		if(this.weekNumOffset !== undefined && this.weekNumOffset !=0) {
+			var wkNum = parseInt(firstWeek,10) + this.weekNumOffset;
+			firstWeek = wkNum > maxwkn ? (wkNum - maxwkn) : wkNum;
+			firstWeek = firstWeek < 10 ? '0' + firstWeek : firstWeek;
+		}
+		//if(this.weekModulusNum != undefined && this.weekModulusNum <= 52 && this.weekModulusNum != 1) {
+		//	firstWeek = (parseInt(firstWeek, 10) % this.weekModulusNum) + 1;
+		//	firstWeek = firstWeek < 10 ? '0' + firstWeek : firstWeek;
+		//}
+		wn.setMonth(wn.getMonth()+1);
+		wn.setDate(wn.getDate()-1);
+		var year = wn.getFullYear;
+		var maxwkn = new Date(year, 11, 31).getISO8601Week();
+		var lastWeek = wn.getISO8601Week();
+		if(this.weekNumOffset !== undefined && this.weekNumOffset !=0) {
+			var wkNum = parseInt(lastWeek,10) + this.weekNumOffset;
+			lastWeek = wkNum > maxwkn ? (wkNum - maxwkn) : wkNum;
+			lastWeek = lastWeek < 10 ? '0' + lastWeek : lastWeek;
+		}
+		//if(this.weekModulusNum != undefined && this.weekModulusNum <= 52 && this.weekModulusNum != 1) {
+		//	lastWeek = (parseInt(lastWeek, 10) % this.weekModulusNum) + 1;
+		//	lastWeek = lastWeek < 10 ? '0' + lastWeek : lastWeek;
+		//}
+		this.mvTitle.innerText = Mojo.Format.formatDate(this.monthDate, $L("MMM yyyy")) + ", " + $L("Week") + " " + firstWeek + "-" + lastWeek; // Localize this date format string
   	},
 
  	buildDayHeader: function() {
@@ -161,9 +251,18 @@ var MonthAssistant = Class.create({
 			// Don't set CSS if the value is the same.  You'd think this wouldn't do anything
 			// but WebKit considers all attribute changes to have potential side effects - so this
 			// does much damage to performance and is best avoided
+			
 			for (var i = 0; i < 3; i++)
 			{
 				var cn = ochild.className;
+			/*	if (this.updateFromScroll && this.enhancedView) {
+					if (!ochild.style || (ochild.style.length == 0)) {
+						child.style.backgroundColor = "";
+					} else if (ochild.style.length > 0) {
+						var bgcolor = ochild.style.backgroundColor;
+						child.style.backgroundColor = bgcolor;
+					}
+				} */
 				if (child.className != cn) 
 				{
 					child.className = cn;
@@ -171,6 +270,14 @@ var MonthAssistant = Class.create({
 				child = child.nextSibling;
 				ochild = ochild.nextSibling;
 			}
+			if (this.updateFromScroll && this.enhancedView && this.monthAllDayColors) {
+					if (!oday.style || (oday.style.length == 0)) {
+						day.style.backgroundColor = "";
+					} else if (oday.style.length > 0) {
+						var bgcolor = oday.style.backgroundColor;
+						day.style.backgroundColor = bgcolor;
+					}
+				}
 			child.innerText = thisday;
 			
 			var cls = 'day ' + (thisday <= 7 ? this._days[thisday - 1] : '');
@@ -181,11 +288,22 @@ var MonthAssistant = Class.create({
 					cls += ' weekend';
 				}
 			}
+			if (this.updateFromScroll && this.enhancedView) {
+				if (!oday.style || (oday.style.length == 0)) {
+					day.setStyle({backgroundImage: "", backgroundPosition: "", backgroundRepeat: ""});
+					//day.setStyle({backgroundPosition: ""});
+					//day.setStyle({backgroundRepeat: ""});
+				} else if (oday.style.length > 0) {
+					day.setStyle({backgroundImage: oday.getStyle("backgroundImage")});
+					day.setStyle({backgroundPosition: oday.getStyle("backgroundPosition")});
+					day.setStyle({backgroundRepeat: oday.getStyle("backgroundRepeat")});
+				}
+			}
 			if (day.className != cls) 
 			{
 				day.className = cls;
 			}
-			
+
 			// Move the day forwards, allowing for month endings
 			if (thisday < mday.limit)
 			{
@@ -227,10 +345,17 @@ var MonthAssistant = Class.create({
 			var child = day.firstChild;
 			var ochild = oday.firstChild;
 			var thisday = mday.day;
-			
 			for (var i = 0; i < 3; i++)
 			{
 				var cn = ochild.className;
+			/*	if (this.updateFromScroll && this.enhancedView) {
+					if (!ochild.style || (ochild.style.length == 0)) {
+						child.style.backgroundColor = "";
+					} else if (ochild.style.length > 0) {
+						var bgcolor = ochild.style.backgroundColor;
+						child.style.backgroundColor = bgcolor;
+					}
+				}	*/
 				if (child.className != cn) 
 				{
 					child.className = cn;
@@ -238,6 +363,14 @@ var MonthAssistant = Class.create({
 				child = child.nextSibling;
 				ochild = ochild.nextSibling;
 			}
+			if (this.updateFromScroll && this.enhancedView && this.monthAllDayColors) {
+				if (!oday.style || (oday.style.length == 0)) {
+					day.style.backgroundColor = "";
+				} else if (oday.style.length > 0) {
+					var bgcolor = oday.style.backgroundColor;
+					day.style.backgroundColor = bgcolor;
+				}
+			}
 			child.innerText = thisday;
 			
 			var cls = 'day ' + (thisday <= 7 ? this._days[thisday - 1] : '');
@@ -248,6 +381,17 @@ var MonthAssistant = Class.create({
 					cls += ' weekend';
 				}
 			}
+			if (this.updateFromScroll && this.enhancedView) {
+				if (!oday.style || (oday.style.length == 0)) {
+					day.setStyle({backgroundImage: "", backgroundPosition: "", backgroundRepeat: ""});
+					//day.setStyle({backgroundPosition: ""});
+					//day.setStyle({backgroundRepeat: ""});
+				} else if (oday.style.length > 0) {
+					day.setStyle({backgroundImage: oday.getStyle("backgroundImage")});
+					day.setStyle({backgroundPosition: oday.getStyle("backgroundPosition")});
+					day.setStyle({backgroundRepeat: oday.getStyle("backgroundRepeat")});
+				}
+			}
 			if (day.className != cls) 
 			{
 				day.className = cls;
@@ -308,6 +452,7 @@ var MonthAssistant = Class.create({
 			var mday = { day: date.getDate(), limit: 0, month: date.getMonth() };
 			mday.limit = this._monthDays[mday.month];
 			mday.dayOfWeek = date.getDay();
+			this.updateFromScroll = true;
 		
 			for (r = 0; r < 18 - wdiff; r++) 
 			{
@@ -324,6 +469,7 @@ var MonthAssistant = Class.create({
 			var mday = { day: date.getDate(), limit: 0, month: date.getMonth() };
 			mday.limit = this._monthDays[mday.month];
 			mday.dayOfWeek = date.getDay();
+			this.updateFromScroll = true;
 		
 			for (r = 17; r > -wdiff; r--)
 			{
@@ -340,6 +486,7 @@ var MonthAssistant = Class.create({
 			var mday = { day: date.getDate(), limit: 0, month: date.getMonth() };
 			mday.limit = this._monthDays[mday.month];
 			mday.dayOfWeek = date.getDay();
+			this.updateFromScroll = false;
 		
 			for (var r = 0; r < 18; r++) 
 			{
@@ -362,23 +509,40 @@ var MonthAssistant = Class.create({
 		var weekCell = this._months.rows[0];
 		var dayCell = weekCell.cells[0];
 		
+		var cls;
 		var days = response.days;
 		var daylen = days.length - 1; // We get back more days of info that we want - 1 more in fact, because its inclusive, rather than exclusive
 		for (var d = 0; d < daylen; d++) 
 		{
 			var day = this._token2state(days.charCodeAt(d));
-			
+			var bgcolor = "";
+			if (this.enhancedView && this.monthAllDayColors) {
+				var bgcolor = "";
+				for (var k=0; k<this.fullEvts[d].allDayEvents.length; k++)
+				{
+					if (bgcolor == "")
+					{
+						bgcolor = this.colors[this.fullEvts[d].allDayEvents[k].calendarColor];
+					}
+					else if (bgcolor != this.colors[this.fullEvts[d].allDayEvents[k].calendarColor])
+					{
+						bgcolor = "rgba(169,169,169,0.4)";
+						break;
+					}
+				}
+			}
+			if(this.monthAllDayColors) {dayCell.style.backgroundColor = bgcolor; }
 			var child = dayCell.firstChild;
-			var cls;
 			for (var i = 1; i < 8; i <<= 1)
 			{
-				if (day & (i << 3)) 
+				//child.style.backgroundColor = bgcolor;
+				if (day & (i << 3))
 				{
-					cls = "monthview-busy-time " + calStyle;
+					cls = ((child.offsetHeight > 12) ? "monthview-partly-busy-time " : "monthview-partly-busy-time-pixi ") + calStyle;
 				}
 				else if (day & i) 
 				{
-					cls = "monthview-busy-time";
+					cls = (child.offsetHeight > 12) ? "monthview-partly-busy-time" : "monthview-partly-busy-time-pixi";
 				}
 				else 
 				{
@@ -390,7 +554,23 @@ var MonthAssistant = Class.create({
 				}
 				child = child.nextSibling;
 			}
-			
+
+			//Mojo.Log.error(Object.toJSON(this.fullEvts[d]));
+			if (this.enhancedView) {
+				for (var k=0; k<this.fullEvts[d].events.length; k++) {
+					// get more details
+					if (!this.fullEvts[d].events[k].subject && this.fullEvts[d].events[k].gotFullDetails === undefined) {
+						// get more infos for this event
+						getCalendarService().getEvent(this.fullEvts[d].events[k].id,
+								this.getEventDetails.bind(this, this.fullEvts[d].events, k, dayCell),
+								function(response) {Mojo.Log.error(response.errorText);},
+								this.controller);
+					}
+				}
+	
+				this.renderIcons(this.fullEvts[d].events, dayCell);
+			}
+
 			// Advance the dayCell
 			if (d % 7 == 6) 
 			{
@@ -404,6 +584,52 @@ var MonthAssistant = Class.create({
 			}
 		}
 	},
+
+	getEventDetails: function(events, k, dayCell, details) {
+		events[k].alarm = details.alarm;
+		events[k].note = details.note;
+		events[k].gotFullDetails = true;
+		if (k == (events.length-1)) {
+			this.renderIcons(events, dayCell);
+		}
+	},
+	
+	renderIcons: function(events, dayCell) {
+		var bgimage = "";
+		var bgrepeat = "";
+		var bgplacement = "";
+		var imgIdx = 0;
+		for (var k=0; k<events.length; k++) {
+			if (events[k].note !== undefined) {
+				try {
+					var start = events[k].note.indexOf("ICON=");
+					if (start > -1) {
+						start += 5;
+						var end = events[k].note.indexOf(";");
+						if (end > start) {
+							var icon = events[k].note.substring(start, end);
+							if (bgimage != "") { bgimage += ", "; }
+							bgimage += "url(/media/internal/scrims/ubercalendar/icon-" + icon + ".png)";
+							if (bgrepeat != "") { bgrepeat += ", "; }
+							bgrepeat += "no-repeat";
+							if (bgplacement != "") { bgplacement += ", "; }
+							bgplacement += this.placements[imgIdx];
+							imgIdx++;
+							if (imgIdx >= this.placements.length) {
+								break;
+							}
+						}
+					}
+				} catch(e) {Mojo.Log.error(bgimage);
+							Mojo.Log.error(bgrepeat);
+						Mojo.Log.error(bgplacement);
+				}
+			}
+		}
+		dayCell.setStyle({backgroundImage: bgimage, backgroundRepeat: bgrepeat, backgroundPosition: bgplacement});
+		//dayCell.setStyle({backgroundRepeat: bgrepeat});
+		//dayCell.setStyle({backgroundPosition: bgplacement});
+	},
 	
  	buildDays: function() 
 	{
@@ -637,11 +863,16 @@ var MonthAssistant = Class.create({
         this.menuModel = 
         {
             visible: true,
-            items: [{}, 
+            items: [{label: $L('Event'), icon: 'new-timed', command: 'newtimed'}, 
             {
                 label: $L('Views'),
                 toggleCmd: 'month',
                 items: [
+				{
+					label:$L('Agenda'),
+					icon: 'menu-agenda',
+					command:'agenda'
+				},
                 {
                     label: $L('Day'),
                     icon: 'menu-day',
@@ -657,14 +888,19 @@ var MonthAssistant = Class.create({
                     icon: 'menu-month',
                     command: 'month'
                 }]
-            }, {}, ]
+            }, {label: $L('All day event'), icon: 'new-allday', command: 'newallday'}, ]
         };
 		
 		this.controller.setupWidget(Mojo.Menu.commandMenu, undefined, this.menuModel);
+		//this.enhancedMenuItem.chosen = this.enhancedView;
 		this.controller.setupWidget(Mojo.Menu.appMenu, {omitDefaultItems:true}, this.appMenuModel);
 		this.remindersUpdated(); 	// Update missed reminders menu item
 		
+		var cookie = new Mojo.Model.Cookie("LastView");
+		cookie.put("month");
+		
 		this.CalSelectorHandler = this.calSelector.bindAsEventListener(this);
+		//this.getCalId = DayAssistant.getCalId();
   	},
   
 	showJumpTo: function() {
@@ -715,6 +951,12 @@ var MonthAssistant = Class.create({
 			} else if (event.command == Mojo.Menu.prefsCmd) {
 				Event.stop(event);
 				this.controller.stageController.pushScene('prefs');
+			} else if(event.command =="newtimed"){
+				Event.stop(event);
+				this.controller.stageController.pushScene('edit', 0, 0, false, this.getCalId()/*calendarId*/,0/*subject*/);
+			} else if(event.command=="newallday"){
+				Event.stop(event);
+				this.controller.stageController.pushScene('edit', 0, 0, true, this.getCalId(),0/*subject*/);
 			}else if(event.command == Mojo.Menu.helpCmd){
 				getAppManagerService().launchHelp(this.controller);
 			} else if (event.command == 'sync') {
@@ -726,9 +968,26 @@ var MonthAssistant = Class.create({
 			}else if (event.command == 'jumpto') {
 				Event.stop(event);
 				this.showJumpTo();
+			//} else if (event.command == 'enhanced') {
+			//	Event.stop(event);
+			//	this.enhancedView = !this.enhancedView;
+			//	var cookie = new Mojo.Model.Cookie('MonthViewEnhanced');
+			//	cookie.put(this.enhancedView);
+			//	this.enhancedMenuItem.chosen = this.enhancedView;
+			//	this.controller.modelChanged(this.appMenuModel);
 			} else if (event.command == 'reminders') {
 				Event.stop(event);
 				this.controller.stageController.pushScene('reminder-list');
+			} else if (event.command == 'agenda') {
+				Event.stop(event);
+				this.controller.serviceRequest('palm://com.palm.applicationManager', {
+					method: 'launch',
+					parameters: {
+						id: 'com.palm.app.agenda'
+					}
+				});
+				this.menuModel.items[1].toggleCmd = 'month';
+				this.controller.modelChanged(this.menuModel, this);
 			}				
 		}
 		else if(event.type == Mojo.Event.commandEnable && event.command == Mojo.Menu.prefsCmd) {
@@ -788,6 +1047,7 @@ var MonthAssistant = Class.create({
 			DayAssistant.dayCache = new Hash();
 			DayAssistant.cacheSubscribed = new Hash();
 			this.pendingCalendarSettingsUpdate = false;
+			this.fullEvts = new Hash();
 		}
 	},
 
@@ -935,7 +1195,31 @@ var MonthAssistant = Class.create({
 			DayAssistant.cacheSize = 0;
 			DayAssistant.dayCache = new Hash();
 			DayAssistant.cacheSubscribed = new Hash();
+			this.fullEvts = new Hash();
+		}
+	},
+	
+	getCalId :function(){
+		var defaultCalId;
+		if (getCurrentCal() == 'all') {
+			// Create an event in the calendar specified by the defaultCalId preference
+			defaultCalId = getPrefsManager().getDefaultCalendar();
+			
+			if (defaultCalId == 0) {
+				defaultCalId = getCalendarsManager().getLocalCalendarId();
+			}
+			
+			// Check to see if the calendarId is a valid one
+			if (getCalendarsManager().getCalName("id"+defaultCalId) == undefined) {
+				// The default calendar doesn't exist anymore so let's just create it
+				// in Local
+				defaultCalId = getCalendarsManager().getLocalCalendarId();
+			}
+			
+		}else{
+			defaultCalId =getCurrentCal();
 		}
+		return "id"+defaultCalId;
 	},
 	
 	// ** MENU **
diff --git a/usr/palm/applications/com.palm.app.calendar/app/controllers/prefs-assistant.js b/usr/palm/applications/com.palm.app.calendar/app/controllers/prefs-assistant.js
index cebe803..230bfc8 100644
--- a/usr/palm/applications/com.palm.app.calendar/app/controllers/prefs-assistant.js
+++ b/usr/palm/applications/com.palm.app.calendar/app/controllers/prefs-assistant.js
@@ -3,7 +3,7 @@
 var THIRTY_MINUTES = $L("30 minutes");
 var ONE_HOUR = $L("1 hour");
 var TWO_HOURS = $L("2 hours");
-var numTimedAlarm = 7;		
+var numTimedAlarm = 42;	
 var PrefsAssistant = Class.create({
 				 
 	initialize: function() {
@@ -43,12 +43,20 @@ var PrefsAssistant = Class.create({
 	renderNewEventDuration: function() {
 		var ned = {};
 		
-		if (this.prefs.defaultEventDuration == 30) {
+		if (this.prefs.defaultEventDuration <= 30) {
 			ned.duration = THIRTY_MINUTES;
-		} else if (this.prefs.defaultEventDuration == 60) {
+		} else if (this.prefs.defaultEventDuration <= 60) {
 			ned.duration = ONE_HOUR;
-		} else {
+		} else if (this.prefs.defaultEventDuration <= 90) {
+			ned.duration = "90 minutes";
+		} else if (this.prefs.defaultEventDuration <= 120) {
 			ned.duration = TWO_HOURS;
+		} else if (this.prefs.defaultEventDuration <= 180) {
+			ned.duration = "3 hours";
+		} else if (this.prefs.defaultEventDuration <= 240) {
+			ned.duration = "4 hours";
+		} else {
+			ned.duration = "8 hours";
 		}
 		
 		this.controller.get('pv_new_event_duration').update(ned.duration);
@@ -189,19 +197,21 @@ var PrefsAssistant = Class.create({
 	
 	getCurrentAllDayAlarmString: function() {
 		var index = 0;
-		for (index = 0; index < this.alarms.size(); index++) {
+		for (index = 0; index < this.allDayAlarms.size(); index++) {
 			if (this.allDayAlarms[index].command == this.prefs.defaultAllDayEventReminder)
 				return this.allDayAlarms[index].label;
 		}
 	},
 	
+//This should be one function that takes an array for the values needed and the array that is to be updated and the defaultPref
+//returns the default str value	
 	formatAlarmStringsCallback: function(response) {
 		//Mojo.Log.info('prefs-assistant: formatAlarmStringsCallback');
 		var index = 0;
 		var currentTimedAlarmStr = "";
 		var currentAllDayAlarmStr = "";
-		
-		
+
+		numTimedAlarm = this.alarms.size();
 		for (index = 0; index < this.alarms.size() + this.allDayAlarms.size() - 1; index++) {
 			alarmStr = response[index];
 			
@@ -234,6 +244,7 @@ var PrefsAssistant = Class.create({
 	
 	buildAlarmsMenu: function() {
 		//Mojo.Log.info('prefs-assistant: buildAlarmsMenu');
+		/*
 		var params =[this.alarms[0].command, 
 					 this.alarms[1].command, 
 					 this.alarms[2].command,
@@ -247,7 +258,14 @@ var PrefsAssistant = Class.create({
 					 this.allDayAlarms[2].command,
 					 this.allDayAlarms[3].command,
 					 this.allDayAlarms[4].command];
-		
+		*/
+		var params = [];
+		for (var i=0; i<this.alarms.size(); i++) {
+			params.push(this.alarms[i].command);
+		}
+		for (var i=1; i<this.allDayAlarms.size(); i++) {
+			params.push(this.allDayAlarms[i].command);
+		}
 		/*this.request = new Mojo.Service.Request(CalendarMojoService.identifier + '/formatter', {
 			method: 'formatAlarmStrings',
 			parameters: params,
@@ -377,6 +395,543 @@ var PrefsAssistant = Class.create({
 	setup: function() {
 		// Retrieve the prefs from the service
 		this.prefs = getPrefs();
+
+		//get default snooze duration from cookie
+		this.showSnoozedForBanner = true;
+		this.showReminderDashboard = true;
+		this.stopAutoClose = false;
+		this.uberOpenInView = 'last';
+		this.dayViewCompressed = false;
+		this.dayViewEnhanced = false;
+		this.weekNumOffset = 0;
+		this.weekModulusNum = 1;
+		this.dayCookie = new Mojo.Model.Cookie("DayEnhanced");
+		if (this.dayCookie) {
+			var daycookie = this.dayCookie.get();
+			if (daycookie) {
+				if(daycookie.dayviewcompressed !== undefined) {
+						this.dayViewCompressed = daycookie.dayviewcompressed;
+				} else {
+						this.dayViewCompressed = false;
+				}
+				if(daycookie.dayviewenhanced !== undefined) {
+						this.dayViewEnhanced = daycookie.dayviewenhanced;
+				} else {
+						this.dayViewEnhanced = false;
+				}
+			}
+		}
+		this.monthViewEnhanced = false;
+		this.monthAllDayColors = false;
+		this.monthCookie = new Mojo.Model.Cookie("MonthViewEnhanced");
+		if (this.monthCookie) {
+			var monthcookie = this.monthCookie.get();
+			if (monthcookie) {
+				if(monthcookie.monthalldaycolors !== undefined) {
+						this.monthAllDayColors = monthcookie.monthalldaycolors;
+				} else {
+						this.monthAllDayColors = false;
+				}
+				if(monthcookie.monthviewenhanced !== undefined) {
+						this.monthViewEnhanced = monthcookie.monthviewenhanced;
+				} else {
+						this.monthViewEnhanced = false;
+				}
+			}
+		}
+		this.weekViewEnhanced = false;
+		this.weekCookie = new Mojo.Model.Cookie("WeekViewEnhanced");
+		if (this.weekCookie) {
+			var weekcookie = this.weekCookie.get();
+			if (weekcookie) {
+				if(weekcookie.weekviewenhanced !== undefined) {
+						this.weekViewEnhanced = weekcookie.weekviewenhanced;
+				} else {
+						this.weekViewEnhanced = false;
+				}
+				if(weekcookie.weeknumoffset !== undefined) {
+						this.weekNumOffset = weekcookie.weeknumoffset;
+				} else {
+						this.weekNumOffset = 0;
+				}
+				if(weekcookie.weekmodulusnum !== undefined) {
+						this.weekModulusNum = weekcookie.weekmodulusnum;
+				} else {
+						this.weekModulusNum = 1;
+				}
+			}
+		}
+		this.snoozeCookie = new Mojo.Model.Cookie("snoozeCookie");
+		if (this.snoozeCookie) {
+			var snzcookie = this.snoozeCookie.get();
+			if (snzcookie) {			
+				if (snzcookie.defaultSnoozeDuration !== undefined) {
+					this.prefs.defaultSnoozeDuration = snzcookie.defaultSnoozeDuration;
+				}
+				if(snzcookie.showSnoozedForBanner !== undefined) {
+						this.showSnoozedForBanner = snzcookie.showSnoozedForBanner;
+				} else {
+						this.showSnoozedForBanner = true;
+				}
+				if(snzcookie.showReminderDashboard !== undefined) {
+					this.showReminderDashboard = snzcookie.showReminderDashboard;
+				} else {
+					this.showReminderDashboard = true;
+				}
+				if (snzcookie.stopAutoClose !== undefined) {
+					this.stopAutoClose = snzcookie.stopAutoClose;
+				} else {
+					//set default value to true
+					this.stopAutoClose = false;
+				}
+				if (snzcookie.uberopeninview !== undefined) {
+					this.uberOpenInView = snzcookie.uberopeninview;
+				} else {
+					this.uberOpenInView = 'last';
+				}
+				if (snzcookie.snoozethrob !== undefined) {
+					this.snoozeThrob = snzcookie.snoozethrob;
+				} else {
+					this.snoozeThrob = false;
+				}
+			}
+		}
+
+		//get notification repeat interval and max repeat values from cookie
+		this.notificationCookie = new Mojo.Model.Cookie("notificationCookie");
+		if (this.notificationCookie) {
+			var notificationCookie = this.notificationCookie.get();
+			if (notificationCookie) {
+				if(notificationCookie.notificationRepeatInterval !== undefined) {
+					this.prefs.notificationRepeatInterval = notificationCookie.notificationRepeatInterval;
+				} else {
+					//set default value to 2 minutes
+					this.prefs.notificationRepeatInterval = '2';
+				}
+				
+				if (notificationCookie.notificationMaxRepeat !== undefined) {
+					this.prefs.notificationMaxRepeat = notificationCookie.notificationMaxRepeat;
+				} else {
+					//set default value to unlimited
+					this.prefs.notificationMaxRepeat = '99999';
+				}
+			}
+		}
+
+		// prepare some additional widgets (on the fly to prevent editing of translated resources)
+		var newGroup1 = document.createElement('div');
+		var newGroup2 = document.createElement('div');
+		newGroup1.setAttribute('class', 'palm-group');
+		newGroup1.setAttribute('id', 'pv_ubercalendar_div');
+		newGroup2.setAttribute('class', 'palm-group-title');
+		newGroup2.setAttribute('x-mojo-loc', '""');
+		var localTemplateModel = {};
+		var localTemplate = new Template($L('Enhanced Features'));
+		var localText=localTemplate.evaluate(localTemplateModel);
+		newGroup2.innerHTML = localText;
+		newGroup1.appendChild(newGroup2);
+		
+		var newList1 = document.createElement('div');
+		var dList = document.createElement('div');
+		dList.setAttribute('class', "palm-list");
+		newList1.setAttribute('class', "palm-list");
+		var newDiv01 = document.createElement('div');
+		var newDiv02 = document.createElement('div');
+		var newDiv03 = document.createElement('div');
+		var newDiv04 = document.createElement('div');
+		newDiv01.setAttribute('class', 'palm-row single');
+		newDiv01.setAttribute('id', 'uberCprefsbutton');
+		newDiv01.setAttribute('x-mojo-tap-highlight', "momentary");
+		newDiv02.setAttribute('class', 'palm-row-wrapper');
+		newDiv03.setAttribute('style', 'float:left; border-width: 24px 20px; max-width:80%; padding-top:15px; padding-left:20px; margin:0; font-size:18px;');
+		newDiv03.innerHTML='UberCalendar Prefs';
+		newDiv04.setAttribute('style', 'float:right; margin-top:25px; margin-right:15px; width:10px; height:10px; background: ' +'url(/usr/palm/frameworks/mojo/submissions/'+Mojo.Environment.build+'/images/list-selector-triangle.png)' + ' top no-repeat;');
+		newDiv02.appendChild(newDiv03);
+		newDiv02.appendChild(newDiv04);
+		newDiv01.appendChild(newDiv02);	// create button row
+		newList1.appendChild(newDiv01);	// add button to first list  
+		var newDrawer1 = document.createElement('div');
+		newDrawer1.setAttribute('class', 'drawer');
+		newDrawer1.setAttribute('id', 'uberCaldrawer');
+		newDrawer1.setAttribute('x-mojo-element', 'Drawer');
+		
+		var newDiv12 = document.createElement('div');
+		var newDiv13 = document.createElement('div');
+		var newDiv14 = document.createElement('div');
+		newDiv12.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('x-mojo-tap-highlight', "momentary");
+		newDiv13.setAttribute('class', "palm-row-wrapper");
+		newDiv14.setAttribute('id', "pv_default_snooze_duration");
+		newDiv14.setAttribute('x-mojo-element', "ListSelector");
+		newDiv13.appendChild(newDiv14);
+		newDiv12.appendChild(newDiv13);
+		dList.appendChild(newDiv12); // add snooze dur to drawer list
+
+		var newDiv12 = document.createElement('div');
+		var newDiv13 = document.createElement('div');
+		var newDiv14 = document.createElement('div');
+		newDiv12.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('x-mojo-tap-highlight', "momentary");
+		newDiv13.setAttribute('class', "palm-row-wrapper");
+		newDiv14.setAttribute('id', "pv_notification_repeat_interval");
+		newDiv14.setAttribute('x-mojo-element', "ListSelector");
+		newDiv13.appendChild(newDiv14);
+		newDiv12.appendChild(newDiv13);
+		dList.appendChild(newDiv12); // add repeat to drawer list
+
+		var newDiv12 = document.createElement('div');
+		var newDiv13 = document.createElement('div');
+		var newDiv14 = document.createElement('div');
+		newDiv12.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('x-mojo-tap-highlight', "momentary");
+		newDiv13.setAttribute('class', "palm-row-wrapper");
+		newDiv14.setAttribute('id', "pv_notification_max_repeat");
+		newDiv14.setAttribute('x-mojo-element', "ListSelector");
+		newDiv13.appendChild(newDiv14);
+		newDiv12.appendChild(newDiv13);
+		dList.appendChild(newDiv12); // add max repeat to drawer list
+		
+		var newDiv12 = document.createElement('div');
+		var newDiv13 = document.createElement('div');
+		var newDiv14 = document.createElement('div');
+		newDiv12.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('x-mojo-tap-highlight', "momentary");
+		newDiv13.setAttribute('class', "palm-row-wrapper");
+		newDiv14.setAttribute('id', "pv_uber_open_in_view");
+		newDiv14.setAttribute('x-mojo-element', "ListSelector");
+		newDiv13.appendChild(newDiv14);
+		newDiv12.appendChild(newDiv13);
+		dList.appendChild(newDiv12); // add open in view to drawer list
+
+		var newDiv12 = document.createElement('div');
+		var newDiv13 = document.createElement('div');
+		var newDiv14 = document.createElement('div');
+		newDiv12.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('x-mojo-tap-highlight', "momentary");
+		newDiv13.setAttribute('class', "palm-row-wrapper");
+		newDiv14.setAttribute('id', "pv_uber_weeknumber_offset");
+		newDiv14.setAttribute('x-mojo-element', "ListSelector");
+		newDiv13.appendChild(newDiv14);
+		newDiv12.appendChild(newDiv13);
+		dList.appendChild(newDiv12); // add weeknumber offset to drawer list
+
+		var newDiv12 = document.createElement('div');
+		var newDiv13 = document.createElement('div');
+		var newDiv14 = document.createElement('div');
+		newDiv12.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('x-mojo-tap-highlight', "momentary");
+		newDiv13.setAttribute('class', "palm-row-wrapper");
+		newDiv14.setAttribute('id', "pv_uber_weeknumber_modulus");
+		newDiv14.setAttribute('x-mojo-element', "ListSelector");
+		newDiv13.appendChild(newDiv14);
+		newDiv12.appendChild(newDiv13);
+		dList.appendChild(newDiv12); // add weeknumber modulus to drawer list
+		
+		var newDiv11 = document.createElement('div');
+		var newDiv12 = document.createElement('div');
+		var newDiv13 = document.createElement('div');
+		var newDiv14 = document.createElement('div');
+		newDiv11.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('class', "palm-row-wrapper");
+		newDiv13.setAttribute('x-mojo-element', "ToggleButton");
+		newDiv13.setAttribute('id', "prefs-showsnoozedforbanner-toggle");
+		newDiv14.setAttribute('class', "title");
+		newDiv14.setAttribute('x-mojo-loc', '""');
+		newDiv14.innerHTML = $L('Snoozed for Banner');
+		newDiv12.appendChild(newDiv13);
+		newDiv12.appendChild(newDiv14);
+		newDiv11.appendChild(newDiv12);
+		dList.appendChild(newDiv11); // add snooze banner to drawer list
+		
+		var newDiv11 = document.createElement('div');
+		var newDiv12 = document.createElement('div');
+		var newDiv13 = document.createElement('div');
+		var newDiv14 = document.createElement('div');
+		newDiv11.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('class', "palm-row-wrapper");
+		newDiv13.setAttribute('x-mojo-element', "ToggleButton");
+		newDiv13.setAttribute('id', "prefs-showreminderdashboard-toggle");
+		newDiv14.setAttribute('class', "title");
+		newDiv14.setAttribute('x-mojo-loc', '""');
+		newDiv14.innerHTML = $L('Reminder Dashboard');
+		newDiv12.appendChild(newDiv13);
+		newDiv12.appendChild(newDiv14);
+		newDiv11.appendChild(newDiv12);
+		dList.appendChild(newDiv11); // add reminder dash to drawer list
+
+		var newDiv11 = document.createElement('div');
+		var newDiv12 = document.createElement('div');
+		var newDiv13 = document.createElement('div');
+		var newDiv14 = document.createElement('div');
+		newDiv11.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('class', "palm-row-wrapper");
+		newDiv13.setAttribute('x-mojo-element', "ToggleButton");
+		newDiv13.setAttribute('id', "prefs-stopautoclose-toggle");
+		newDiv14.setAttribute('class', "title");
+		newDiv14.setAttribute('x-mojo-loc', '""');
+		newDiv14.innerHTML = $L('Stop') +' '+ $L('Auto')+' '+$L('Close');
+		newDiv12.appendChild(newDiv13);
+		newDiv12.appendChild(newDiv14);
+		newDiv11.appendChild(newDiv12);
+		dList.appendChild(newDiv11); // add stop auto to drawer list
+		
+		var d2List = document.createElement('div');  // list for 2nd level drawer
+		d2List.setAttribute('class', "palm-list");
+		var newDiv01 = document.createElement('div'); 
+		newDiv01.setAttribute('class', 'palm-row');
+		newDiv01.setAttribute('x-mojo-tap-highlight', "momentary");
+		newDiv01.setAttribute('id', 'dayuberCprefsbutton'); // button for 2nd level drawer
+		var newDiv12 = document.createElement('div');
+		var newDiv13 = document.createElement('div');
+		var newDiv14 = document.createElement('div');
+		newDiv12.setAttribute('class', "palm-row-wrapper");
+		newDiv13.setAttribute('x-mojo-element', "ToggleButton");
+		newDiv13.setAttribute('id', "prefs-dayviewenhanced-toggle"); //toggle
+		newDiv14.setAttribute('class', "title");
+		newDiv14.setAttribute('x-mojo-loc', '""');
+		newDiv14.innerHTML = $L('Day') +' '+ $L('Views')+' '+$L('Enhanced');
+		newDiv12.appendChild(newDiv13);
+		newDiv12.appendChild(newDiv14); //toggle
+		newDiv01.appendChild(newDiv12); // toggle in btn
+		dList.appendChild(newDiv01); // toggle+Drawer2 btn to drawer1 list
+		var newDrawer2 = document.createElement('div');
+		newDrawer2.setAttribute('class', 'drawer');
+		newDrawer2.setAttribute('id', 'dayuberCaldrawer');
+		newDrawer2.setAttribute('x-mojo-element', 'Drawer');
+		dList.appendChild(newDrawer2); // add drawer2 to drawer1 list
+		newDrawer2.appendChild(d2List); // add second list to second drawer
+		
+		var newDiv11 = document.createElement('div');
+		var newDiv12 = document.createElement('div');
+		var newDiv13 = document.createElement('div');
+		var newDiv14 = document.createElement('div');
+		newDiv11.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('class', "palm-row-wrapper");
+		newDiv13.setAttribute('x-mojo-element', "ToggleButton");
+		newDiv13.setAttribute('id', "prefs-dayviewcompressed-toggle");
+		newDiv14.setAttribute('class', "title");
+		newDiv14.setAttribute('x-mojo-loc', '""');
+		newDiv14.innerHTML = $L('Day') +' '+ $L('Compress')+' '+$L('All')+' '+$L('Free');
+		newDiv12.appendChild(newDiv13);
+		newDiv12.appendChild(newDiv14);
+		newDiv11.appendChild(newDiv12);
+		d2List.appendChild(newDiv11); // add day view compression to second drawer list
+
+		var d3List = document.createElement('div');  // list for 3rd level drawer
+		d3List.setAttribute('class', "palm-list");
+		var newDiv01 = document.createElement('div'); 
+		newDiv01.setAttribute('class', 'palm-row');
+		newDiv01.setAttribute('x-mojo-tap-highlight', "momentary");
+		newDiv01.setAttribute('id', 'monthuberCprefsbutton'); // button for 3rd level drawer
+		var newDiv12 = document.createElement('div');
+		var newDiv13 = document.createElement('div');
+		var newDiv14 = document.createElement('div');
+		newDiv12.setAttribute('class', "palm-row-wrapper");
+		newDiv13.setAttribute('x-mojo-element', "ToggleButton");
+		newDiv13.setAttribute('id', "prefs-monthviewenhanced-toggle"); //toggle
+		newDiv14.setAttribute('class', "title");
+		newDiv14.setAttribute('x-mojo-loc', '""');
+		newDiv14.innerHTML = $L('Month') +' '+ $L('Views')+' '+$L('Enhanced');
+		newDiv12.appendChild(newDiv13);
+		newDiv12.appendChild(newDiv14); //toggle
+		newDiv01.appendChild(newDiv12); // toggle in btn
+		dList.appendChild(newDiv01); // toggle+Drawer3 btn to drawer1 list
+		var newDrawer3 = document.createElement('div');
+		newDrawer3.setAttribute('class', 'drawer');
+		newDrawer3.setAttribute('id', 'monthuberCaldrawer');
+		newDrawer3.setAttribute('x-mojo-element', 'Drawer');
+		dList.appendChild(newDrawer3); // add drawer3 to drawer1 list
+		newDrawer3.appendChild(d3List); // add 3 list to 3 drawer
+		
+		var newDiv11 = document.createElement('div');
+		var newDiv12 = document.createElement('div');
+		var newDiv13 = document.createElement('div');
+		var newDiv14 = document.createElement('div');
+		newDiv11.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('class', "palm-row-wrapper");
+		newDiv13.setAttribute('x-mojo-element', "ToggleButton");
+		newDiv13.setAttribute('id', "prefs-monthalldaycolors-toggle");
+		newDiv14.setAttribute('class', "title");
+		newDiv14.setAttribute('x-mojo-loc', '""');
+		newDiv14.innerHTML = $L('Show')+' '+$L('All')+' '+ $L('Day')+' '+$L('Color');
+		newDiv12.appendChild(newDiv13);
+		newDiv12.appendChild(newDiv14);
+		newDiv11.appendChild(newDiv12);
+		d3List.appendChild(newDiv11); // add all day color to drawer3 list
+		
+		var newDiv11 = document.createElement('div');
+		var newDiv12 = document.createElement('div');
+		var newDiv13 = document.createElement('div');
+		var newDiv14 = document.createElement('div');
+		newDiv11.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('class', "palm-row-wrapper");
+		newDiv13.setAttribute('x-mojo-element', "ToggleButton");
+		newDiv13.setAttribute('id', "prefs-weekviewenhanced-toggle");
+		newDiv14.setAttribute('class', "title");
+		newDiv14.setAttribute('x-mojo-loc', '""');
+		newDiv14.innerHTML = $L('Week') +' '+ $L('Views')+' '+$L('Enhanced');
+		newDiv12.appendChild(newDiv13);
+		newDiv12.appendChild(newDiv14);
+		newDiv11.appendChild(newDiv12);
+		dList.appendChild(newDiv11); // add week view to drawer list
+		
+		var newDiv11 = document.createElement('div');
+		var newDiv12 = document.createElement('div');
+		var newDiv13 = document.createElement('div');
+		var newDiv14 = document.createElement('div');
+		newDiv11.setAttribute('class', "palm-row last");
+		newDiv12.setAttribute('class', "palm-row-wrapper");
+		newDiv13.setAttribute('x-mojo-element', "ToggleButton");
+		newDiv13.setAttribute('id', "prefs-snoozethrob-toggle");
+		newDiv14.setAttribute('class', "title");
+		newDiv14.setAttribute('x-mojo-loc', '""');
+		newDiv14.innerHTML = $L('Blink') +' '+ $L('for')+' '+$L('Alert');
+		newDiv12.appendChild(newDiv13);
+		newDiv12.appendChild(newDiv14);
+		newDiv11.appendChild(newDiv12);
+		dList.appendChild(newDiv11); // add blink to drawer list
+		
+		
+		newDrawer1.appendChild(dList); // add 1st drawer list to drawer1
+		newList1.appendChild(newDrawer1);  // add drawer1 to first list
+		newGroup1.appendChild(newList1);
+		
+		
+		this.controller.get('pv_alarmsound_div').parentNode.insertBefore(newGroup1, this.controller.get('pv_accounts_div')); //add first list to prefs
+		
+		this.uberCalendarPrefs = {
+			showsnoozedforbanner: { id: "ShowSnoozedForBanner", value: this.showSnoozedForBanner },
+			showreminderdashboard: { id: "ShowReminderDashboard", value: this.showReminderDashboard },
+			stopautoclose: {id: "StopAutoClose", value: this.stopAutoClose},
+			dayviewcompressed: {id: "DayViewCompressed", value: this.dayViewCompressed},
+			weekviewenhanced: {id: "WeekViewEnhanced", value: this.weekViewEnhanced},
+			dayviewenhanced: {id: "DayViewEnhanced", value: this.dayViewEnhanced},
+			monthviewenhanced: {id: "MonthViewEnhanced", value: this.monthViewEnhanced},
+			monthalldaycolors: {id: "MonthAllDayColors", value: this.monthAllDayColors},
+			snoozethrob: {id: "SnoozeThrob", value: this.snoozeThrob}
+		};
+
+		var uberCalendarAttributes = {
+			modelProperty: "value",
+			trueValue: true,
+			falseValue: false
+		};
+		
+		this.controller.setupWidget('prefs-showsnoozedforbanner-toggle', uberCalendarAttributes, this.uberCalendarPrefs.showsnoozedforbanner);
+		this.controller.setupWidget('prefs-showreminderdashboard-toggle', uberCalendarAttributes, this.uberCalendarPrefs.showreminderdashboard);
+		this.controller.setupWidget('prefs-stopautoclose-toggle', uberCalendarAttributes, this.uberCalendarPrefs.stopautoclose);
+		this.controller.setupWidget('prefs-snoozethrob-toggle', uberCalendarAttributes, this.uberCalendarPrefs.snoozethrob);
+		this.controller.setupWidget('prefs-dayviewcompressed-toggle', uberCalendarAttributes, this.uberCalendarPrefs.dayviewcompressed);
+		this.controller.setupWidget('prefs-weekviewenhanced-toggle', uberCalendarAttributes, this.uberCalendarPrefs.weekviewenhanced);
+		this.controller.setupWidget('prefs-dayviewenhanced-toggle', uberCalendarAttributes, this.uberCalendarPrefs.dayviewenhanced);
+		this.controller.setupWidget('prefs-monthviewenhanced-toggle', uberCalendarAttributes, this.uberCalendarPrefs.monthviewenhanced);
+		this.controller.setupWidget('prefs-monthalldaycolors-toggle', uberCalendarAttributes, this.uberCalendarPrefs.monthalldaycolors);
+
+		this.controller.setupWidget('pv_default_snooze_duration',
+									this.snoozeAttrs = {
+										modelProperty: 'command',
+										label: $L("Snooze"),
+								      	choices: this.snoozeDurations
+									},
+									this.snoozeModel = {
+										command: this.prefs.defaultSnoozeDuration
+									}
+		);
+		this.controller.setupWidget('pv_notification_repeat_interval',
+									this.repeatIntervalAttrs = {
+										modelProperty: 'value',
+										label: $L("Repeat Interval"),
+								      	choices: this.notificationRepeatIntervals
+									},
+									this.repeatIntervalModel = {
+										value: this.prefs.notificationRepeatInterval
+									}
+		);
+		this.controller.setupWidget('pv_notification_max_repeat',
+									this.maxRepeatAttrs = {
+										modelProperty: 'value',
+										label: $L("Max. Repeat"),
+								      	choices: this.notificationMaxRepeats
+									},
+									this.maxRepeatModel = {
+										value: this.prefs.notificationMaxRepeat
+									}
+		);
+		this.controller.setupWidget('pv_uber_open_in_view',
+									this.uberOpenInViewAttrs = {
+										modelProperty: 'value',
+										label: $L("Open In View"),
+								      	choices: this.uberOpenInViewOptions
+									},
+									this.uberOpenInViewModel = {
+										value: this.uberOpenInView
+									}
+		);
+		this.controller.setupWidget("pv_uber_weeknumber_offset",
+									this.weekNumOffsetAttrs = {
+										modelProperty: 'value',
+										label: $L("Wk-No Shift"),
+										choices: this.uberWeekNumberOffset
+									},
+									this.weekNumOffsetModel = {
+										value: this.weekNumOffset
+									}
+		);
+		this.controller.setupWidget("pv_uber_weeknumber_modulus",
+									this.weekModulusAttrs = {
+										modelProperty: 'value',
+										label: $L("Wk-No Modulo"),
+										choices: this.uberWeekNumberModulo
+									},
+									this.weekModulusModel = {
+										value: this.weekModulusNum
+									}
+		);
+		this.controller.setupWidget("uberCaldrawer",
+									this.uberCalAttrs = {
+										modelProperty: 'open',
+										unstyled: false,
+										drawerOpenerOffset: 0
+									},
+									this.uberCalDrawerModel = {open: false}
+		);
+		this.controller.setupWidget("dayuberCaldrawer",
+									this.uberCalAttrs = {
+										modelProperty: 'open',
+										unstyled: false,
+										drawerOpenerOffset: -500
+									},
+									this.uberCalDrawerModel = {open: false}
+		);
+		this.controller.setupWidget("monthuberCaldrawer",
+									this.uberCalAttrs = {
+										modelProperty: 'open',
+										unstyled: false,
+										drawerOpenerOffset: -500
+									},
+									this.uberCalDrawerModel = {open: false}
+		);
+		this.controller.setupWidget("uberCprefsbutton",
+			{},
+			{
+				label : "",
+				disabled: false
+			}
+		);
+		this.controller.setupWidget("dayuberCprefsbutton",
+			{},
+			{
+				label : "",
+				disabled: false
+			}
+		);
+		this.controller.setupWidget("monthuberCprefsbutton",
+			{},
+			{
+				label : "",
+				disabled: false
+			}
+		);
 		this.requests = [];
 		this.syncSources = [];
 		this.dirty = false;
@@ -399,7 +954,7 @@ var PrefsAssistant = Class.create({
 		};
 	    this.controller.setupWidget('pv_startofday_timepicker', {label: $L("Start")}, this.startTimeModel);
 	    this.controller.listen('pv_startofday_timepicker',Mojo.Event.propertyChange, this.startOfDayCallback.bindAsEventListener(this));
-		
+
 		var endTime = new Date(this.prefs.endTimeOfDay);
 		endTime.addMinutes(endTime.getTimezoneOffset());
 		var utcEndTime = endTime.getTime();
@@ -408,7 +963,7 @@ var PrefsAssistant = Class.create({
 		};
 	    this.controller.setupWidget('pv_endofday_timepicker', {label: $L("End")}, this.endTimeModel);
 	    this.controller.listen('pv_endofday_timepicker',Mojo.Event.propertyChange, this.endOfDayCallback.bindAsEventListener(this));
-				
+		
 		var soundSelections = {
       	modelProperty: 'value',
       	label: $L("Alert"),
@@ -419,7 +974,6 @@ var PrefsAssistant = Class.create({
 			{label: $L('Mute'),value:"4"}
       		]
       	};
-	
 		
 		this.notificationSoundModel = {
         	value:this.convertSoundDBToPopupVal(this.prefs.alarmSoundOn)
@@ -452,8 +1006,6 @@ var PrefsAssistant = Class.create({
 					{label:$L('Help'), command:Mojo.Menu.helpCmd, disabled:false}]
 		}
 		this.controller.setupWidget(Mojo.Menu.appMenu, {omitDefaultItems:true}, this.appMenuModel);
-
-				
 	},
 
 	setCalendarPrefsCallback: function(response) {
@@ -473,6 +1025,8 @@ var PrefsAssistant = Class.create({
 		
 		if (this.dirty)
 			this.savePrefs();
+			
+
 	},
 	
 	syncAllCallback: function(response) {
@@ -496,7 +1050,6 @@ var PrefsAssistant = Class.create({
 	activate: function() {
 		//Mojo.Log.info('prefs-assistant: activate');
 		getPrefsManager().validateDefaultCalPref();
-		
 		this.startOfWeekClickHandler = this.handleStartOfWeekClick.bindAsEventListener(this);
 		this.controller.get('pv_start_of_week').observe('mojo-tap', this.startOfWeekClickHandler);
 		
@@ -504,7 +1057,7 @@ var PrefsAssistant = Class.create({
 		this.controller.get('pv_default_evt_alarm').observe('mojo-tap', this.defaultEventAlarmClickHandler);
 		this.defaultAllDayEventAlarmClickHandler = this.handleDefaultAllDayEventAlarmClick.bindAsEventListener(this);
 		this.controller.get('pv_default_allday_evt_alarm').observe('mojo-tap', this.defaultAllDayEventAlarmClickHandler);
-				
+		
 		this.newEventDurationClickHandler = this.handleNewEventDurationClick.bindAsEventListener(this);
 		this.controller.get('pv_new_event_duration').observe('mojo-tap', this.newEventDurationClickHandler);	
 	
@@ -529,7 +1082,34 @@ var PrefsAssistant = Class.create({
 		this.chooseNotificationRingtone = this.chooseNotificationRingtone.bindAsEventListener(this);
 		this.controller.listen('currentringtonerow',Mojo.Event.tap, this.chooseNotificationRingtone);		
 
+		this.snoozeDurationSelectionHandler = this.handleSnoozeDurationSelection.bindAsEventListener(this);
+		this.controller.get('pv_default_snooze_duration').observe(Mojo.Event.propertyChange, this.snoozeDurationSelectionHandler);
+		this.repeatIntervalSelectionHandler = this.handleRepeatIntervalSelection.bindAsEventListener(this);
+		this.controller.get('pv_notification_repeat_interval').observe(Mojo.Event.propertyChange, this.repeatIntervalSelectionHandler);
+		this.maxRepeatSelectionHandler = this.handleMaxRepeatSelection.bindAsEventListener(this);
+		this.controller.get('pv_notification_max_repeat').observe(Mojo.Event.propertyChange, this.maxRepeatSelectionHandler);
+		this.uberOpenInViewSelectionHandler = this.handleUberOpenInViewSelection.bindAsEventListener(this);
+		this.controller.get('pv_uber_open_in_view').observe(Mojo.Event.propertyChange, this.uberOpenInViewSelectionHandler);
+		this.uberWkNumOffsetHandler = this.handleUberWkNumOffset.bindAsEventListener(this);
+		this.controller.get('pv_uber_weeknumber_offset').observe(Mojo.Event.propertyChange, this.uberWkNumOffsetHandler);
+		this.uberWkModulusNumHandler = this.handleUberWkModulusNum.bindAsEventListener(this);
+		this.controller.get('pv_uber_weeknumber_modulus').observe(Mojo.Event.propertyChange, this.uberWkModulusNumHandler);
 
+		this.uberTogglePrefsHandler = this.handleUberTogglePrefs.bindAsEventListener(this);
+		this.controller.listen('prefs-showsnoozedforbanner-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.listen('prefs-showreminderdashboard-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.listen('prefs-stopautoclose-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.listen('prefs-snoozethrob-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.listen('prefs-dayviewcompressed-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.listen('prefs-weekviewenhanced-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.listen('prefs-dayviewenhanced-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.listen('prefs-monthviewenhanced-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.listen('prefs-monthalldaycolors-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		
+		this.ucDrawerBtnHandler = this.toggleUCdrawer.bindAsEventListener(this);
+		this.controller.get('uberCprefsbutton').observe('mojo-tap', this.ucDrawerBtnHandler);
+		this.controller.get('dayuberCprefsbutton').observe('mojo-tap', this.ucDrawerBtnHandler);
+		this.controller.get('monthuberCprefsbutton').observe('mojo-tap', this.ucDrawerBtnHandler);
 	},
 	
 	handleViewOptionBtnTap :function(){
@@ -538,6 +1118,47 @@ var PrefsAssistant = Class.create({
 	},
 	
 	deactivate: function() {
+		//save default snooze duration to cookie	
+		if (this.snoozeCookie) {
+			this.snoozeCookie.put({ 
+									defaultSnoozeDuration: this.prefs.defaultSnoozeDuration,
+									showSnoozedForBanner: this.showSnoozedForBanner,
+									showReminderDashboard: this.showReminderDashboard,
+									stopAutoClose: this.stopAutoClose,
+									uberopeninview: this.uberOpenInView,
+									snoozethrob: this.snoozeThrob
+									});
+		}
+		if (this.dayCookie) {
+			this.dayCookie.put({ 
+									dayviewcompressed: this.dayViewCompressed,
+									dayviewenhanced: this.dayViewEnhanced,
+									weeknumoffset: this.weekNumOffset,
+									weekmodulusnum: this.weekModulusNum
+									});
+		}
+		if (this.monthCookie) {
+			this.monthCookie.put({ 
+									monthalldaycolors: this.monthAllDayColors,
+									monthviewenhanced: this.monthViewEnhanced,
+									weeknumoffset: this.weekNumOffset,
+									weekmodulusnum: this.weekModulusNum
+									});
+		}
+		if (this.weekCookie) {
+			this.weekCookie.put({ 
+									weekviewenhanced: this.weekViewEnhanced,
+									weeknumoffset: this.weekNumOffset,
+									weekmodulusnum: this.weekModulusNum
+									});
+		}
+		//save notification repeat preferences
+		if (this.notificationCookie) {
+			this.notificationCookie.put({
+										notificationRepeatInterval: this.prefs.notificationRepeatInterval,
+										notificationMaxRepeat: this.prefs.notificationMaxRepeat
+										});
+		}
 		//Mojo.Log.info('prefs-assistant: deactivate');
 		this.controller.get('pv_start_of_week').stopObserving('mojo-tap', this.startOfWeekClickHandler);
 		
@@ -562,6 +1183,25 @@ var PrefsAssistant = Class.create({
 		
 		this.controller.stopListening('currentringtonerow',Mojo.Event.tap, this.chooseNotificationRingtone);		
 
+		this.controller.get('pv_default_snooze_duration').stopObserving(Mojo.Event.propertyChange, this.snoozeDurationSelectionHandler);
+		this.controller.get('pv_notification_repeat_interval').stopObserving(Mojo.Event.propertyChange, this.repeatIntervalSelectionHandler);
+		this.controller.get('pv_notification_max_repeat').stopObserving(Mojo.Event.propertyChange, this.maxRepeatSelectionHandler);
+		this.controller.get('pv_uber_open_in_view').stopObserving(Mojo.Event.propertyChange, this.uberOpenInViewSelectionHandler);
+		this.controller.get('pv_uber_weeknumber_offset').stopObserving(Mojo.Event.propertyChange, this.uberWkNumOffsetHandler);
+		this.controller.get('pv_uber_weeknumber_modulus').stopObserving(Mojo.Event.propertyChange, this.uberWkModulusNumHandler);
+		
+		this.controller.stopListening('prefs-showsnoozedforbanner-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.stopListening('prefs-showreminderdashboard-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.stopListening('prefs-stopautoclose-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.stopListening('prefs-snoozethrob-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.stopListening('prefs-dayviewcompressed-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.stopListening('prefs-weekviewenhanced-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.stopListening('prefs-dayviewenhanced-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.stopListening('prefs-monthviewenhanced-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.stopListening('prefs-monthalldaycolors-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.get('uberCprefsbutton').stopObserving('mojo-tap', this.ucDrawerBtnHandler);
+		this.controller.get('dayuberCprefsbutton').stopObserving('mojo-tap', this.ucDrawerBtnHandler);
+		this.controller.get('monthuberCprefsbutton').stopObserving('mojo-tap', this.ucDrawerBtnHandler);
 	},
 	
 	// *** EVENT HANDLERS ***
@@ -595,6 +1235,73 @@ var PrefsAssistant = Class.create({
 			//this.renderDefaultCalendar();
 		}
 	},
+
+	handleSnoozeDurationSelection: function(event) {
+		this.prefs.defaultSnoozeDuration = this.snoozeModel.command;
+		Mojo.Log.info("this.prefs.defaultSnoozeDuration", this.prefs.defaultSnoozeDuration);
+	},
+	
+	handleRepeatIntervalSelection: function(event) {
+		this.prefs.notificationRepeatInterval = this.repeatIntervalModel.value;
+		Mojo.Log.info("this.prefs.notificationRepeatInterval", this.prefs.notificationRepeatInterval);
+	},
+	
+	handleMaxRepeatSelection: function(event) {
+		this.prefs.notificationMaxRepeat = this.maxRepeatModel.value;
+		Mojo.Log.info("this.prefs.notificationMaxRepeat", this.prefs.notificationMaxRepeat);
+	},
+	
+	handleUberOpenInViewSelection: function(event) {
+		this.uberOpenInView = this.uberOpenInViewModel.value;
+		Mojo.Log.info("this.uberOpenInView", this.uberOpenInView);
+	},
+	
+	handleUberWkNumOffset: function(event) {
+		this.weekNumOffset = this.weekNumOffsetModel.value;
+	},
+	
+	handleUberWkModulusNum: function(event) {
+		this.weekModulusNum = this.weekModulusModel.value;
+	},
+	
+	handleUberTogglePrefs: function(event) {
+		//this.dirty = true;
+		if(event.model.id == "ShowSnoozedForBanner") {
+			this.showSnoozedForBanner = event.model.value;
+		} else if(event.model.id == "ShowReminderDashboard") {
+			this.showReminderDashboard = event.model.value;
+			getAppAssistant().showReminderDashboard = this.showReminderDashboard;
+		} else if(event.model.id == "StopAutoClose") {
+			this.stopAutoClose = event.model.value;
+		} else if(event.model.id == "SnoozeThrob") {
+			this.snoozeThrob = event.model.value;
+			getAppAssistant().snoozeThrob = this.snoozeThrob;
+		} else if(event.model.id == "DayViewCompressed") {
+			this.dayViewCompressed = event.model.value;
+		} else if(event.model.id == "WeekViewEnhanced") {
+			this.weekViewEnhanced = event.model.value;
+		} else if(event.model.id == "DayViewEnhanced") {
+			this.dayViewEnhanced = event.model.value;
+			if(event.model.value) {
+				// true open drawer
+				this.controller.get('dayuberCaldrawer').mojo.setOpenState(true);
+			} else {
+				// close the drawer and turn off day features
+				this.controller.get('dayuberCaldrawer').mojo.setOpenState(false);
+			}
+		} else if(event.model.id == "MonthAllDayColors") {
+			this.monthAllDayColors = event.model.value;
+		} else if(event.model.id == "MonthViewEnhanced") {
+			this.monthViewEnhanced = event.model.value;
+			if(event.model.value) {
+				// true open drawer
+				this.controller.get('monthuberCaldrawer').mojo.setOpenState(true);
+			} else {
+				// close the drawer and turn off day features
+				this.controller.get('monthuberCaldrawer').mojo.setOpenState(false);
+			}
+		}
+	},
 	
 	handleAcctsListSelection: function(event) {
 		var id = event.item.accountId;
@@ -698,8 +1405,20 @@ var PrefsAssistant = Class.create({
 					label: ONE_HOUR,
 					command: 60
 				}, {
+				label: "90 minutes",
+					command: 90
+				}, {
 					label: TWO_HOURS,
 					command: 120
+				}, {
+					label: "3 hours",
+					command: 180
+				}, {
+					label: "4 hours",
+					command: 240
+				}, {
+					label: "8 hours",
+					command: 480
 				}]
 			});
 	},
@@ -744,34 +1463,282 @@ var PrefsAssistant = Class.create({
 			});
 	},
 	
+	toggleUCdrawer: function(e) {
+		var curBtn = e.currentTarget.id;
+		if(curBtn == "uberCprefsbutton") {
+			this.controller.get('uberCaldrawer').mojo.setOpenState(!this.controller.get('uberCaldrawer').mojo.getOpenState());
+		} else if(curBtn == "dayuberCprefsbutton") {
+			this.controller.get('dayuberCaldrawer').mojo.setOpenState(!this.controller.get('dayuberCaldrawer').mojo.getOpenState());
+		} else if(curBtn == "monthuberCprefsbutton") {
+			this.controller.get('monthuberCaldrawer').mojo.setOpenState(!this.controller.get('monthuberCaldrawer').mojo.getOpenState());
+		}
+	},
+
 	// *** WIDGET ATTRS & MODELS
 
 	
 	acctsListAttrs : {
 		itemTemplate: 'prefs/prefs-account',
-		listTemplate: 'shared/group_container',
+		listTemplate: 'shared/group_container'
 	},
 	
 	acctsModel : {
 		listTitle: $L('Accounts'),
-		items: [],
+		items: []
 	},
 	
+	snoozeDurations: [
+		{label:$L('30 Minutes before start'), value:'-30'},
+		{label:$L('15 Minutes before start'), value:'-15'},
+		{label:$L('10 Minutes before start'), value:'-10'},
+		{label:$L('5 Minutes before start'), value:'-5'},
+		{label:$L('At start time'), value:'0'},
+		{label:$L('5 Minutes'), value:'5'},
+		{label:$L('10 Minutes'), value:'10'},
+		{label:$L('15 Minutes'), value:'15'},
+		{label:$L('30 Minutes'), value:'30'},
+		{label:$L('1 Hour'), value:'60'},
+		{label:$L('2 Hours'), value:'120'},
+		{label:$L('4 Hours'), value:'240'},
+		{label:$L('8 Hours'), value:'480'},
+		{label:$L('10 Hours'), value:'600'},
+		{label:$L('12 Hours'), value:'720'},
+		{label:$L('1 Day'), value:'1440'},
+		{label:$L('2 Days'), value:'2880'},
+		{label:$L('3 Days'), value:'4320'},
+		{label:$L('4 Days'), value:'5760'},
+		{label:$L('5 Days'), value:'7200'},
+		{label:$L('6 Days'), value:'8640'},
+		{label:$L('1 Week'), value:'10080'},
+		{label:$L('2 Weeks'), value:'20160'}		
+	],
+
+	notificationRepeatIntervals: [
+		{label:$L('Disabled'), value:'0'},
+		{label:$L('5 Seconds'), value:'.083'},
+		{label:$L('10 Seconds'), value:'.167'},
+		{label:$L('15 Seconds'), value:'.25'},
+		{label:$L('20 Seconds'), value:'.333'},
+		{label:$L('25 Seconds'), value:'.417'},
+		{label:$L('30 Seconds'), value:'.5'},
+		{label:$L('1 Minutes'), value:'1'},
+		{label:$L('2 Minutes'), value:'2'},
+		{label:$L('3 Minutes'), value:'3'},
+		{label:$L('4 Minutes'), value:'4'},
+		{label:$L('5 Minutes'), value:'5'},
+		{label:$L('10 Minutes'), value:'10'},
+		{label:$L('15 Minutes'), value:'15'}
+	],
+	uberOpenInViewOptions: [
+		{label:$L('Last'), value:'last'},
+		{label:$L('Day'), value:'day'},
+		{label:$L('Week'), value:'week'},
+		{label:$L('Month'), value:'month'}
+	],
+	notificationMaxRepeats: [
+		{label:$L('Unlimited'), value:'99999'}, //this should be a large enough value to be conisdered unlimited for our purpose.
+		{label:$L('1'), value:'1'},
+		{label:$L('2'), value:'2'},
+		{label:$L('3'), value:'3'},
+		{label:$L('4'), value:'4'},
+		{label:$L('5'), value:'5'},
+		{label:$L('10'), value:'10'},
+		{label:$L('15'), value:'15'},
+		{label:$L('20'), value:'20'},
+		{label:$L('25'), value:'25'},
+		{label:$L('30'), value:'30'},
+		{label:$L('35'), value:'35'},
+		{label:$L('40'), value:'40'},
+		{label:$L('45'), value:'45'},
+		{label:$L('50'), value:'50'},
+		{label:$L('55'), value:'55'},
+		{label:$L('60'), value:'60'},
+		{label:$L('65'), value:'65'},
+		{label:$L('70'), value:'70'},
+		{label:$L('75'), value:'75'},
+		{label:$L('80'), value:'80'},
+		{label:$L('85'), value:'85'},
+		{label:$L('90'), value:'90'},
+		{label:$L('95'), value:'95'},
+		{label:$L('100'), value:'100'}
+	],
+	uberWeekNumberModulo: [
+		{label:$L('1'), value:'1'},
+		{label:$L('2'), value:'2'},
+		{label:$L('3'), value:'3'},
+		{label:$L('4'), value:'4'},
+		{label:$L('5'), value:'5'},
+		{label:$L('6'), value:'6'},
+		{label:$L('7'), value:'7'},
+		{label:$L('8'), value:'8'},
+		{label:$L('9'), value:'9'},
+		{label:$L('10'), value:'10'},
+		{label:$L('11'), value:'11'},
+		{label:$L('12'), value:'12'},
+		{label:$L('13'), value:'13'},
+		{label:$L('14'), value:'14'},
+		{label:$L('15'), value:'15'},
+		{label:$L('16'), value:'16'},
+		{label:$L('17'), value:'17'},
+		{label:$L('18'), value:'18'},
+		{label:$L('19'), value:'19'},
+		{label:$L('20'), value:'20'},
+		{label:$L('21'), value:'21'},
+		{label:$L('22'), value:'22'},
+		{label:$L('23'), value:'23'},
+		{label:$L('24'), value:'24'},
+		{label:$L('25'), value:'25'},
+		{label:$L('26'), value:'26'},
+		{label:$L('27'), value:'27'},
+		{label:$L('28'), value:'28'},
+		{label:$L('29'), value:'29'},
+		{label:$L('30'), value:'30'},
+		{label:$L('31'), value:'31'},
+		{label:$L('32'), value:'32'},
+		{label:$L('33'), value:'33'},
+		{label:$L('34'), value:'34'},
+		{label:$L('35'), value:'35'},
+		{label:$L('36'), value:'36'},
+		{label:$L('37'), value:'37'},
+		{label:$L('38'), value:'38'},
+		{label:$L('39'), value:'39'},
+		{label:$L('40'), value:'40'},
+		{label:$L('41'), value:'41'},
+		{label:$L('42'), value:'42'},
+		{label:$L('43'), value:'43'},
+		{label:$L('44'), value:'44'},
+		{label:$L('45'), value:'45'},
+		{label:$L('46'), value:'46'},
+		{label:$L('47'), value:'47'},
+		{label:$L('48'), value:'48'},
+		{label:$L('49'), value:'49'},
+		{label:$L('50'), value:'50'},
+		{label:$L('51'), value:'51'},
+		{label:$L('52'), value:'52'}
+	],
+	uberWeekNumberOffset: [
+		{label:$L('0'), value:'0'},
+		{label:$L('1'), value:'1'},
+		{label:$L('2'), value:'2'},
+		{label:$L('3'), value:'3'},
+		{label:$L('4'), value:'4'},
+		{label:$L('5'), value:'5'},
+		{label:$L('6'), value:'6'},
+		{label:$L('7'), value:'7'},
+		{label:$L('8'), value:'8'},
+		{label:$L('9'), value:'9'},
+		{label:$L('10'), value:'10'},
+		{label:$L('11'), value:'11'},
+		{label:$L('12'), value:'12'},
+		{label:$L('13'), value:'13'},
+		{label:$L('14'), value:'14'},
+		{label:$L('15'), value:'15'},
+		{label:$L('16'), value:'16'},
+		{label:$L('17'), value:'17'},
+		{label:$L('18'), value:'18'},
+		{label:$L('19'), value:'19'},
+		{label:$L('20'), value:'20'},
+		{label:$L('21'), value:'21'},
+		{label:$L('22'), value:'22'},
+		{label:$L('23'), value:'23'},
+		{label:$L('24'), value:'24'},
+		{label:$L('25'), value:'25'},
+		{label:$L('26'), value:'26'},
+		{label:$L('27'), value:'27'},
+		{label:$L('28'), value:'28'},
+		{label:$L('29'), value:'29'},
+		{label:$L('30'), value:'30'},
+		{label:$L('31'), value:'31'},
+		{label:$L('32'), value:'32'},
+		{label:$L('33'), value:'33'},
+		{label:$L('34'), value:'34'},
+		{label:$L('35'), value:'35'},
+		{label:$L('36'), value:'36'},
+		{label:$L('37'), value:'37'},
+		{label:$L('38'), value:'38'},
+		{label:$L('39'), value:'39'},
+		{label:$L('40'), value:'40'},
+		{label:$L('41'), value:'41'},
+		{label:$L('42'), value:'42'},
+		{label:$L('43'), value:'43'},
+		{label:$L('44'), value:'44'},
+		{label:$L('45'), value:'45'},
+		{label:$L('46'), value:'46'},
+		{label:$L('47'), value:'47'},
+		{label:$L('48'), value:'48'},
+		{label:$L('49'), value:'49'},
+		{label:$L('50'), value:'50'},
+		{label:$L('51'), value:'51'},
+		{label:$L('52'), value:'52'}
+	],
+
 	alarms: [
 		{label: '', command: 'none'},			// Do NOT Localize
-		{label: '', command: '-PT5M'},		//Do Not localize
-		{label: '', command: '-PT10M'},		//Do Not localize
-		{label: '', command: '-PT15M'},		// Do NOT Localize
-		{label: '', command: '-PT30M'},		// Do NOT Localize
-		{label: '', command: '-PT1H'},		// Do NOT Localize
-		{label: '', command: '-P1D'}			// Do NOT Localize	
+		{label: '', command:  '-PT0M'}, //DO NOT Localize
+		{label: '', command:  '-PT5M'}, // Do Not Localize
+		{label: '', command:  '-PT10M'}, //Do not localize
+		{label: '', command:  '-PT15M'}, // Do NOT Localize
+		{label: '', command:  '-PT20M'}, // Do NOT Localize
+		{label: '', command:  '-PT25M'}, // Do NOT Localize
+		{label: '', command:  '-PT30M'}, // Do NOT Localize
+		{label: '', command:  '-PT35M'}, // Do NOT Localize
+		{label: '', command:  '-PT45M'}, // Do NOT Localize
+		{label: '', command:  '-PT1H'}, // Do NOT Localize
+		{label: '', command:  '-PT90M'}, // Do NOT Localize
+		{label: '', command:  '-PT2H'}, // Do NOT Localize
+		{label: '', command:  '-PT150M'}, // Do NOT Localize
+		{label: '', command:  '-PT3H'}, // Do NOT Localize
+		{label: '', command:  '-PT220M'}, // Do NOT Localize
+		{label: '', command:  '-PT4H'}, // Do NOT Localize
+		{label: '', command:  '-PT5H'}, // Do NOT Localize
+		{label: '', command:  '-PT6H'}, // Do NOT Localize
+		{label: '', command:  '-PT7H'}, // Do NOT Localize
+		{label: '', command:  '-PT8H'}, // Do NOT Localize
+		{label: '', command:  '-PT10H'}, // Do NOT Localize
+		{label: '', command:  '-PT12H'}, // Do NOT Localize	
+		{label: '', command:  '-PT23H'}, // Do NOT Localize
+		{label: '', command:  '-P1D'}, // Do NOT Localize
+		{label: '', command: '-P36H'}, // Do NOT Localize
+		{label: '', command: '-P2D'}, // Do NOT Localize
+		{label: '', command: '-P60H'}, // Do NOT Localize	
+		{label: '', command: '-P3D'}, // Do NOT Localize
+		{label: '', command: '-P84H'}, // Do NOT Localize
+		{label: '', command: '-P4D'}, // Do NOT Localize
+		{label: '', command: '-P5D'}, // Do NOT Localize
+		{label: '', command: '-P6D'}, // Do NOT Localize			
+		{label: '', command: '-P1W'}, // Do NOT Localize
+		{label: '', command: '-P2W'}, // Do NOT Localize
+		{label: '', command: '-P3W'}, // Do NOT Localize
+		{label: '', command: '-P4W'}, // Do NOT Localize
+		{label: '', command: '-P8W'}, // Do NOT Localize
+		{label: '', command: '-P12W'}, // Do NOT Localize
+		{label: '', command: '-P16W'}, // Do NOT Localize
+		{label: '', command: '-P20W'}, // Do NOT Localize
+		{label: '', command: '-P24W'}, // Do NOT Localize
+		{label: '', command: '-P52W'} // Do NOT Localize
 	],
 	
 	allDayAlarms: [
 		{label: '', command: 'none'},			// Do NOT Localize
-		{label: '', command: '-P1D'},			// Do NOT Localize
-		{label: '', command: '-P2D'},			// Do NOT Localize
-		{label: '', command: '-P3D'},			// Do NOT Localize
-		{label: '', command: '-P1W'}			// Do NOT Localize		
+		{label: '', command: '-PT0M'},// DO NOT Localize
+		{label: '', command: '-P1D'}, // Do NOT Localize
+		{label: '', command: '-P36H'}, // Do NOT Localize
+		{label: '', command: '-P2D'}, // Do NOT Localize
+		{label: '', command: '-P60H'}, // Do NOT Localize	
+		{label: '', command: '-P3D'}, // Do NOT Localize
+		{label: '', command: '-P84H'}, // Do NOT Localize
+		{label: '', command: '-P4D'}, // Do NOT Localize
+		{label: '', command: '-P5D'}, // Do NOT Localize
+		{label: '', command: '-P6D'}, // Do NOT Localize			
+		{label: '', command: '-P1W'}, // Do NOT Localize
+		{label: '', command: '-P2W'}, // Do NOT Localize
+		{label: '', command: '-P3W'}, // Do NOT Localize
+		{label: '', command: '-P4W'}, // Do NOT Localize
+		{label: '', command: '-P8W'}, // Do NOT Localize
+		{label: '', command: '-P12W'}, // Do NOT Localize
+		{label: '', command: '-P16W'}, // Do NOT Localize
+		{label: '', command: '-P20W'}, // Do NOT Localize
+		{label: '', command: '-P24W'}, // Do NOT Localize
+		{label: '', command: '-P52W'} // Do NOT Localize
 	]
 });
\ No newline at end of file
diff --git a/usr/palm/applications/com.palm.app.calendar/app/controllers/reminder-assistant.js b/usr/palm/applications/com.palm.app.calendar/app/controllers/reminder-assistant.js
index d190fd1..6a9f363 100644
--- a/usr/palm/applications/com.palm.app.calendar/app/controllers/reminder-assistant.js
+++ b/usr/palm/applications/com.palm.app.calendar/app/controllers/reminder-assistant.js
@@ -1,7 +1,35 @@
 /* Copyright 2009 Palm, Inc.  All rights reserved. */
 
+g_notificationRepeatCount = 0;
 
 var ReminderAssistant = Class.create({
+
+	snoozeDurationOptions: [
+		{label:$L('30 minutes before') + ' ' +$L('start'), value:'-30'},
+		{label:$L('15 minutes before') + ' ' +$L('start'), value:'-15'},
+		{label:$L('10 minutes before') + ' ' +$L('start'), value:'-10'},
+		{label:$L('5 minutes before') + ' ' +$L('start'), value:'-5'},
+		{label:$L('At Start Time'), value:'0'},
+		{label:'5 '+ $L('minute(s)'), value:'5'},
+		{label:'10 '+ $L('minute(s)'), value:'10'},
+		{label:'15 '+ $L('minute(s)'), value:'15'},
+		{label:$L('30 minutes'), value:'30'},
+		{label:$L('1 hour'), value:'60'},
+		{label:'2 '+ $L('hour(s)'), value:'120'},
+		{label:'4 '+ $L('hour(s)'), value:'240'},
+		{label:'8 '+ $L('hour(s)'), value:'480'},
+		{label:'10 '+ $L('hour(s)'), value:'600'},
+		{label:'10 '+ $L('hour(s)'), value:'720'},
+		{label:'1 '+$L('day(s)'), value:'1440'},
+		{label:'2 '+$L('day(s)'), value:'2880'},
+		{label:'3 '+$L('day(s)'), value:'4320'},
+		{label:'4 '+$L('day(s)'), value:'5760'},
+		{label:'5 '+$L('day(s)'), value:'7200'},
+		{label:'6 '+$L('day(s)'), value:'8640'},
+		{label:'1 '+$L('week(s)'), value:'10080'},
+		{label:'2 '+$L('week(s)'), value:'20160'}
+	],
+
 	initialize: function(eventId,needThrobbing) {
 		Mojo.Log.info("$$$$$$$$ Reminder-assistant initialize: start: "+eventId);
 		this.DEFAULT_SNOOZE = 5;
@@ -13,20 +41,183 @@ var ReminderAssistant = Class.create({
 		this.eventId = eventId;	
 		this.doThrob =needThrobbing;
 		this.autoSnoozed = false;
+		this.snoozeThrob = false;
 		
+		//get default snooze duration from cookie
+		this.snoozeCookie = new Mojo.Model.Cookie("snoozeCookie");
+
+		if (this.snoozeCookie) {
+			var snzcookie = this.snoozeCookie.get();
+			if (snzcookie) {
+				if(snzcookie.defaultSnoozeDuration !== undefined) {
+					this.DEFAULT_SNOOZE = parseInt(snzcookie.defaultSnoozeDuration, 10);
+				} else {
+					this.DEFAULT_SNOOZE = 5;
+				}
+				if(snzcookie.showSnoozedForBanner !== undefined)	{
+					this.showSnoozedForBanner = snzcookie.showSnoozedForBanner;
+				} else {
+					this.showSnoozedForBanner = false;
+				}
+				if(snzcookie.stopAutoClose !== undefined)	{
+					this.stopAutoClose = snzcookie.stopAutoClose;
+				} else {
+					this.stopAutoClose = true;
+				}
+				if(snzcookie.snoozethrob)	{
+					this.snoozeThrob = snzcookie.snoozethrob;
+				} else {
+					this.snoozeThrob = false;
+				}
+			}
+		}
+
+		//load the notification repeat preferences.
+		//doing this here instead of in initialze to avoid conflict with snooze duration patch
+		//get notification repeat interval and max repeat values from cookie
+		this.notificationCookie = new Mojo.Model.Cookie("notificationCookie");
+		if (this.notificationCookie) {
+			var notificationCookie = this.notificationCookie.get();
+			if (notificationCookie) {
+				if(notificationCookie.notificationRepeatInterval !== undefined) {
+					this.notificationRepeatInterval = notificationCookie.notificationRepeatInterval;
+				} else {
+					//set default value to 2 minutes
+					this.notificationRepeatInterval = '2';
+				}
+			
+				if(notificationCookie.notificationMaxRepeat !== undefined) {
+					this.notificationMaxRepeat = notificationCookie.notificationMaxRepeat;
+				} else {
+					//set default value to unlimited
+					this.notificationMaxRepeat = '99999';
+				}
+			}
+		}
+
+		//logic to not pic a default snooze that has already past
+
+		//set the snoozeOptions to the master set otherwise as we remove items we also remove them
+		//for any additonal reminders.
+		this.snoozeOptions = this.snoozeDurationOptions.slice(0);
+
+		this.reminder = this.reminders.getReminder(this.eventId);
+		
+		var curDate = new Date();
+		var curDateTS = curDate.getTime();
+		var defSnooze = this.snoozeOptions[0].value;
+		var defSnoozeTS = defSnooze * 60*1000; //put in millisec
+		//var testDate = new Date(this.reminder.time).addMinutes(defSnooze);
+		var testDateTS = this.reminder.time + defSnoozeTS;
+		while(testDateTS <= curDateTS && defSnooze <= 0)
+		{
+			//remove the invalid option
+			var tmp = this.snoozeOptions.shift();
+			defSnooze = parseInt(this.snoozeOptions[0].value);
+			defSnoozeTS = defSnooze * 60*1000;
+			testDateTS = this.reminder.time + defSnoozeTS;
+		}
+		for(var i=0; i<this.snoozeOptions.length; i++) {
+			if(this.snoozeOptions[i].value == this.DEFAULT_SNOOZE) {
+				this.snzIndex = i;
+				return;
+			}
+		}
+		//if the DEFAULT_SNOOZE < defSnooze then it is no longer a valid snooze option so use the next valide value
+		if( this.DEFAULT_SNOOZE < defSnooze )
+		{
+			this.DEFAULT_SNOOZE = defSnooze;
+			this.snzIndex= 0;
+		}
+
 		Mojo.Log.info("$$$$$$$$ Reminder-assistant initialize:end");
 	},
 
 	activate:function(){
 		Mojo.Log.info("$$$$$$$$ Reminder-assistant activate:start");
 		if (this.doThrob) {
-			Mojo.Log.info("$$$$$$$$ Reminder-assistant doThrob:true");
+			//Mojo.Log.info("$$$$$$$$ Reminder-assistant doThrob:true");
 			this.controller.stageController.indicateNewContent(true);
 		}
 		Mojo.Log.info("$$$$$$$$ Reminder-assistant activate:end");
 	},
 	
 	setup: function() {
+		
+		// prepare an additional widget (on the fly to prevent editing of translated resources)
+		var newTextDiv = document.createElement('div');
+		newTextDiv.setAttribute('class', "palm-dashboard-text");
+		newTextDiv.setAttribute('style', "margin-top: 10px position:relative -webkit-palm-mouse-target:ignore");
+		newTextDiv.setAttribute('id', "reminder-chosen-snz-text");
+		newTextDiv.innerHTML = this.snoozeOptions[this.snzIndex].label;
+		// first button row
+		var newButtonRow1 = document.createElement('div');
+		newButtonRow1.setAttribute('id', "reminder-snz-button-row1");
+		newButtonRow1.setAttribute('style', "position:relative; width:320px");
+		var setSnoozeBtn = document.createElement('div');
+		setSnoozeBtn.setAttribute('id', "reminder-setsnooze");
+		var ssbtnwrapper = document.createElement('div');
+		ssbtnwrapper.setAttribute('x-mojo-loc', '""');
+		ssbtnwrapper.setAttribute('class', "button-wrapper");
+		ssbtnwrapper.innerHTML = '+ / -';
+		setSnoozeBtn.appendChild(ssbtnwrapper);
+		var remSnooze = this.controller.get('reminder-snooze').cloneNode(true); 
+		var remDismiss = this.controller.get('reminder-dismiss').cloneNode(true);
+		this.controller.get('reminder-dismiss').parentNode.removeChild(this.controller.get('reminder-dismiss'));
+		this.controller.get('reminder-snooze').parentNode.removeChild(this.controller.get('reminder-snooze'));
+		newButtonRow1.appendChild(remDismiss);
+		newButtonRow1.appendChild(remSnooze);
+		newButtonRow1.appendChild(setSnoozeBtn);
+		
+		// second row of buttons
+		var newButtonRow2 = document.createElement('div');
+		newButtonRow2.setAttribute('id', "reminder-snz-button-row2");
+		newButtonRow2.setAttribute('style', "position:relative; width:320px");
+		var newBtnWrapDiv1 = document.createElement('div');
+		var newBtnWrapDiv2 = document.createElement('div');
+		var newBtnWrapDiv3 = document.createElement('div');
+		newBtnWrapDiv1.setAttribute('class', "button-wrapper");
+		newBtnWrapDiv2.setAttribute('class', "button-wrapper");
+		newBtnWrapDiv3.setAttribute('class', "button-wrapper");
+		newBtnWrapDiv1.setAttribute('x-mojo-loc', '""');
+		newBtnWrapDiv2.setAttribute('x-mojo-loc', '""');
+		newBtnWrapDiv3.setAttribute('x-mojo-loc', '""');
+		newBtnWrapDiv1.innerHTML = '+';
+		newBtnWrapDiv2.innerHTML = '-';
+		var templateModel = {};
+		var template = new Template($L("Snooze"));
+		var snoozeText=template.evaluate(templateModel);
+		newBtnWrapDiv3.innerHTML = $L("Snooze");
+		var snzAdvanceBtn = document.createElement('div');
+		var snzPreviousBtn = document.createElement('div');
+		var snzChosenBtn = document.createElement('div');
+		snzAdvanceBtn.setAttribute('id', "reminder-snz-advance-button");
+		snzPreviousBtn.setAttribute('id', "reminder-snz-previous-button");
+		snzChosenBtn.setAttribute('id', "reminder-snz-chosen-button");
+		snzAdvanceBtn.appendChild(newBtnWrapDiv1);
+		snzPreviousBtn.appendChild(newBtnWrapDiv2);
+		snzChosenBtn.appendChild(newBtnWrapDiv3);
+		newButtonRow2.appendChild(snzPreviousBtn);
+		newButtonRow2.appendChild(snzChosenBtn);
+		newButtonRow2.appendChild(snzAdvanceBtn);
+
+		
+
+		var panelDiv = this.controller.get('reminder-email').parentNode;
+		panelDiv.appendChild(newTextDiv);
+		panelDiv.appendChild(newButtonRow1);
+		panelDiv.appendChild(newButtonRow2);
+		newButtonRow2.setAttribute('style', "display:none");
+		//setup the snooze duration selector list
+		this.selectorChoices = this.snoozeOptions;
+		this.selectorAttributes = {label: "Snooze", modelProperty:'value' };
+		this.setSnzBtn = this.controller.get('reminder-setsnooze');
+		this.buttonRow1 = this.controller.get('reminder-snz-button-row1');
+		this.buttonRow2 = this.controller.get('reminder-snz-button-row2');
+		this.buttonRow2.style.display = 'none';
+		this.snzChosenText = this.controller.get('reminder-chosen-snz-text');
+		this.onSnoozeDurationChangedHandler = this.onSnoozeDurationChanged.bindAsEventListener(this);
+
 		Mojo.Log.info("$$$$$$$$ Reminder-assistant setup:start");
 		this.service = getCalendarService();
 
@@ -36,13 +227,18 @@ var ReminderAssistant = Class.create({
 		this.onDismissHandler = this.onDismiss.bindAsEventListener(this);
 		this.onEmailHandler = this.onEmail.bindAsEventListener(this);
 		this.onSnoozeHandler = this.onSnooze.bindAsEventListener(this);
-	
+		this.setSnoozeHandler = this.handleSetSnoozeTap.bindAsEventListener(this);
+		this.snzPlusMinusHandler = this.handleSnzPlusMinus.bindAsEventListener(this);
 		this.updateMostRecentReminder();
 		Mojo.Log.info("$$$$$$$$ Reminder-assistant setup:end");
 	},
     
 	cleanup: function() {
 		Mojo.Log.info("$$$$$$$$ Reminder-assistant cleanup:start:");
+
+		//store the reminders in a cookie so they survive reboot		
+		this.reminders.saveReminders();
+
 		this.reminders.stopObservingReminders('alert');
 		
 		getAppAssistant().openReminderAlert = null;
@@ -60,6 +256,9 @@ var ReminderAssistant = Class.create({
 			}
 		}
 		Mojo.Log.info("$$$$$$$$ Reminder-assistant cleanup:end:");
+
+		//remove the Notification repeat task
+		this.removePlayAlarmSoundTask();
 	},
 	
 	remindersUpdated: function() {
@@ -78,6 +277,8 @@ var ReminderAssistant = Class.create({
 			this.updateMostRecentReminder();
 		}
 		Mojo.Log.info("$$$$$$$$ Reminder-assistant remindersUpdated: end");
+		//setup the notification repeat task
+		this.schedulePlayAlarmSoundTask();
 	},
 
 	updateMostRecentReminder: function() {
@@ -95,6 +296,9 @@ var ReminderAssistant = Class.create({
 		this.scheduleAutoCloseTask();
 		this.updateDisplay();
 		Mojo.Log.info("$$$$$$$$ Reminder-assistant updateMostRecentReminder:end");
+
+		//setup the notification repeat task
+		this.schedulePlayAlarmSoundTask();
 	},
 
 	updateDisplay: function() {
@@ -142,6 +346,41 @@ var ReminderAssistant = Class.create({
 		Mojo.Log.info("$$$$$$$$ Reminder-assistant updateDisplay:end");
 	},
 	
+	handleSetSnoozeTap: function() {
+		//deactivate & animate
+		var btnR1 = this.buttonRow1;
+		btnR1.absolutize();
+		var btnR2 = this.buttonRow2;
+		Mojo.Animation.animateStyle(btnR1, 'left', 'bezier', {
+				from:0,
+					to: 330,
+					duration: 0.5,
+					curve:'over-easy',
+					onComplete: function() {btnR2.style.display="";}
+					}
+		);
+		this.snzAdvanceBtn = this.controller.get('reminder-snz-advance-button');
+		this.snzPreviousBtn = this.controller.get('reminder-snz-previous-button');
+		this.snzChosenBtn = this.controller.get('reminder-snz-chosen-button');
+		this.snzAdvanceBtn.addEventListener(Mojo.Event.tap, this.snzPlusMinusHandler);
+		this.snzPreviousBtn.addEventListener(Mojo.Event.tap, this.snzPlusMinusHandler);
+		this.snzChosenBtn.addEventListener(Mojo.Event.tap, this.onSnoozeDurationChangedHandler);
+	},
+	
+	handleSnzPlusMinus: function(e) {
+		var targetBtn = e.currentTarget.id;
+		var length = this.snoozeOptions.length;
+		if(targetBtn == 'reminder-snz-advance-button') {
+			//advance in time in snz options
+			this.snzIndex = (this.snzIndex + 1) < length ? (this.snzIndex + 1) : 0;
+			this.snzChosenText.innerHTML = this.snoozeOptions[this.snzIndex].label;
+		} else if(targetBtn == 'reminder-snz-previous-button') {
+			//back in time in snz options
+			this.snzIndex = (this.snzIndex - 1) < 0 ? (length - 1) :(this.snzIndex - 1);
+			this.snzChosenText.innerHTML = this.snoozeOptions[this.snzIndex].label;
+		}
+	},
+	
 	addListeners: function() {
 		this.controller.get('notification-event-title').addEventListener(Mojo.Event.tap, this.onEventHandler);
 		this.controller.get('notification-event-subtitle').addEventListener(Mojo.Event.tap, this.onEventHandler);
@@ -150,6 +389,7 @@ var ReminderAssistant = Class.create({
 		
 		this.controller.get('reminder-dismiss').addEventListener(Mojo.Event.tap, this.onDismissHandler);
 		this.controller.get('reminder-snooze').addEventListener(Mojo.Event.tap, this.onSnoozeHandler);
+		this.setSnzBtn.addEventListener(Mojo.Event.tap, this.setSnoozeHandler);
 	},
 
 	removeListeners: function() {
@@ -167,6 +407,15 @@ var ReminderAssistant = Class.create({
 		if (email) email.removeEventListener(Mojo.Event.tap, this.onEmailHandler);
 		var snooze = this.controller.get('reminder-snooze');
 		if (snooze) snooze.removeEventListener(Mojo.Event.tap, this.onSnoozeHandler);
+		//remove snoozeDuration event listners
+		var setSnooze = this.controller.get('reminder-setsnooze');
+		if (setSnooze) setSnooze.removeEventListener(Mojo.Event.tap, this.setSnoozeHandler);
+		var snoozeAdvance = this.controller.get('reminder-snz-advance-button');
+		if (snoozeAdvance) snoozeAdvance.removeEventListener(Mojo.Event.tap, this.snzPlusMinusHandler);
+		var snoozePrevious = this.controller.get('reminder-snz-previous-button');
+		if (snoozePrevious) snoozePrevious.removeEventListener(Mojo.Event.tap, this.snzPlusMinusHandler);
+		var snoozeChosen = this.controller.get('reminder-snz-chosen-button');
+		if (snoozeChosen) snoozeChosen.removeEventListener(Mojo.Event.tap, this.onSnoozeDurationChangedHandler);
 	},
 	
 	
@@ -304,9 +553,34 @@ var ReminderAssistant = Class.create({
 		this.reminder.userClosed = true;
 		this.reminder.scheduleStartTime = true;
 		this.reissueAutoSnoozedAlerts();
+		
+		//Since we are using the Power TimeOut instead of the taskscheduler we need to remove the 
+		//AtStartTime alarm that was scheduled.
+		this.removeAtStartTime();
 		Mojo.Log.info("$$$$$$$$ Reminder-assistant onSnooze: end: " + this.reminder.id);
 	},
 	
+	/* handle the change event for the snooze duration.
+	 * set the default snooze value to the selection value
+	 * need to figure out how to save this value for reuse when the snooze duration
+	 * expires so that we can set the selection to the same value prevously selected
+	 */
+	onSnoozeDurationChanged: function(value) {
+		Mojo.Log.info("$$$$$$$$ Reminder-assistant onSnoozeDurationChanged: start: " + this.reminder.id);
+		this.DEFAULT_SNOOZE = parseInt(this.snoozeOptions[this.snzIndex].value, 10);
+		this.snoozed =true;
+		this.closeAlert();
+		this.autoSnoozed = false;
+		this.reminder.userClosed = true;
+		this.reminder.scheduleStartTime = true;
+		this.reissueAutoSnoozedAlerts();
+		
+		//Since we are using the Power TimeOut instead of the taskscheduler we need to remove the 
+		//AtStartTime alarm that was scheduled.
+		this.removeAtStartTime();
+		Mojo.Log.info("$$$$$$$$ Reminder-assistant onSnoozeDurationChanged: end: " + this.reminder.id);
+	},
+
 	removeReminder: function() {
 		Mojo.Log.info("$$$$$$$$ Reminder-assistant removeReminder: start: " + this.reminder.id);
 		this.reminders.removeReminder(this.reminder.id);
@@ -333,6 +607,17 @@ var ReminderAssistant = Class.create({
 		this.reminder.scheduleStartTime = false;
 	},
 	
+	removeAtStartTime: function() {
+		Mojo.Log.info("$$$$$$$$ Reminder-assistant removeAtStartTime: start " + this.reminder.id);
+		
+		Mojo.Log.info("$$$$$$$$ Reminder-assistant snooze: removeAtStartTime: calendar-snooze-" + this.reminder.id);
+		this.controller.serviceRequest('palm://com.palm.taskScheduler', {
+					                    method: 'removeTask',
+					                    parameters: {key: 'calendar-snooze-' + this.reminder.id}
+					                	});
+		Mojo.Log.info("$$$$$$$$ Reminder-assistant removeAtStartTime: end " + this.reminder.id);
+	},
+	
 	snooze: function(minutes) {
 		Mojo.Log.info("$$$$$$$$ Reminder-assistant snooze: start: " + this.reminder.id);
 		
@@ -342,13 +627,28 @@ var ReminderAssistant = Class.create({
 			return;
 		}	
 		
-		var snooze = new Date().addMinutes(minutes);
+		var snooze;
+		if( minutes == 0) {
+			if( this.snoozed ) {
+				//snoozed as at start time
+				snooze = new Date(this.reminder.time);
+			} else {
+				//this is for the notification repeat
+				snooze = new Date().addMinutes(minutes);
+			}
+		} else if( minutes > 0 ) {
+			snooze = new Date().addMinutes(minutes);
+		} else {
+			snooze = new Date(this.reminder.time).addMinutes(minutes);
+		}
+		
 		Mojo.Log.info("$$$$$$$$ Reminder-assistant snooze: updateTask: calendar-snooze-" + this.reminder.id + "   date = " + snooze.toUTCString());
+/*		
 		
 		this.controller.serviceRequest('palm://com.palm.taskScheduler', {
 					                    method: 'updateTask',
 					                    parameters: {uri: 'palm://com.palm.applicationManager/open',
-													 arguments: {'id': 'com.palm.app.calendar',
+													 arguments: {'id': 'com.palm.app.calendar2',
 													 			 'params': {'alarmsnooze': this.reminder.id}},
 													 key: 'calendar-snooze-' + this.reminder.id,
 													 start: {date: snooze.toUTCString()},
@@ -356,15 +656,45 @@ var ReminderAssistant = Class.create({
 													 misfirePolicy: {executeNow: true}}
 					                	});
 
++*/
 
-		var templateModel = {};
-		var templateStr = $L("Snoozed for #{num} minutes");
-		templateModel.num =minutes;
-		var template = new Template(templateStr);
-		var snoozeText=template.evaluate(templateModel);
-		Mojo.Log.info("$$$$$$$$ Reminder-assistant snooze: showBanner" + this.reminder.id);
-		Mojo.Controller.appController.showBanner({messageText: snoozeText}, null /*launchArguments*/, "calendar-snooze");
+		//use a powered/timeout alarm so that the reminder survives a reboot
+		var alarmLaunchParams = '{"id":"com.palm.app.calendar","params":{"alarmsnooze":"' + this.reminder.id + '"}}';
+
+		var newParams = alarmLaunchParams.evalJSON();
+		newParams.params.id = this.reminder.id;
+
+		var newParamsJSON = Object.toJSON(newParams);
 
+		var at = this.dateFormatForScheduler(snooze);
+
+        this.controller.serviceRequest("luna://com.palm.power/timeout/", {
+			method: "set",
+			parameters: {
+				"wakeup": true,
+				"key": 'calendar-snooze-' + this.reminder.id,
+				"uri": "luna://com.palm.applicationManager/launch",
+				"params": newParamsJSON,
+				"at": at
+			},
+			onSuccess: function(payload) {
+				Mojo.Log.info("****************** Reminder-assistant snooze succeeded. ");
+			}.bind(this),
+			onFailure: function() {
+				Mojo.Log.error("****************** Reminder-assistant snooze failed: " );
+			}.bind(this)
+		});
+
+		//Disable the Snoozed For Banner
+		if(this.showSnoozedForBanner) {
+			var templateModel = {};
+			var templateStr = $L("Snoozed for #{num} minutes");
+			templateModel.num =this.snoozeOptions[this.snzIndex].value;
+			var template = new Template(templateStr);
+			var snoozeText=template.evaluate(templateModel);
+			Mojo.Log.info("$$$$$$$$ Reminder-assistant snooze: showBanner" + this.reminder.id);
+			Mojo.Controller.appController.showBanner({messageText: snoozeText}, null /*launchArguments*/, "calendar-snooze");
+		}
 		Mojo.Log.info("$$$$$$$$ Reminder-assistant snooze: end" + this.reminder.id);
 	},
 	
@@ -374,6 +704,11 @@ var ReminderAssistant = Class.create({
 		Mojo.Log.info("$$$$$$$$ Reminder-assistant closeAlert: window.close() ");
 		this.controller.window.close();
 		Mojo.Log.info("$$$$$$$$ Reminder-assistant closeAlert: end ");
+		
+		//reset the notification repeat counter
+		if( this.dismissed || this.snoozed ) {
+			g_notificationRepeatCount = 0;
+		}
 	},
 	
 	autoCloseAlert: function() {
@@ -383,6 +718,14 @@ var ReminderAssistant = Class.create({
 		Mojo.Log.info("$$$$$$$$ Reminder-assistant autoCloseAlert: end " + this.reminder.id);
 	},
 	
+	playAlarmSound: function() {
+		//temporarily set the snooze to 0 will immediately re-trigger allert to get our attention.
+		this.showSnoozedForBanner = false; // banner is disabled because we are not snoozing
+		this.dismissed = false;
+		this.DEFAULT_SNOOZE = 0;
+		this.closeAlert();
+	},
+	
 	specialCleanup:function(){
 		//we need to do this so that cleanup cleans the reminder rightaway		
 		Mojo.Log.info("$$$$$$$$ Reminder-assistant specialCleanup: window Name:" + this.controller.window.name);
@@ -402,7 +745,18 @@ var ReminderAssistant = Class.create({
 					                	});
 	},
 	
+	//taken from com.palm.app.clock/app/models/alarm.js
+	// returns date in format suitable for scheduler service
+	dateFormatForScheduler: function(d) {
+		function twoChars(x) { return ((x>9)?"":"0")+x; }
+		
+		return twoChars(d.getUTCMonth()+1) + "/" + twoChars(d.getUTCDate()) + "/" + twoChars(d.getUTCFullYear()) 
+					+ " " + twoChars(d.getUTCHours()) + ":" + twoChars(d.getUTCMinutes()) + ":00" ;
+	},
+	
 	scheduleAutoCloseTask: function() {
+		//disable autoclose, we want to know what we missed.
+		if(this.stopAutoClose) {return;}	
 		Mojo.Log.info("$$$$$$$$ Reminder-assistant scheduleAutoCloseTask: start " + this.reminder.id);
 		var minCloseTime = new Date(this.reminder.time).addMinutes(15);
 		var closeTime = new Date(this.reminder.time + this.reminder.duration);
@@ -432,6 +786,34 @@ var ReminderAssistant = Class.create({
 		Mojo.Log.info("$$$$$$$$ Reminder-assistant removeAutoCloseTask: end " + this.reminder.id);
 	},
 	
+	schedulePlayAlarmSoundTask: function() {
+		//retrigger reminder every X minutes until we acknowledge it.
+		//notificationRepeatInterval disables the notification repeat
+		//also check to make sure we have not exceeded the max repeat value
+		if( parseFloat(this.notificationRepeatInterval) != 0 && g_notificationRepeatCount < parseInt(this.notificationMaxRepeat)) {
+			g_notificationRepeatCount++;
+			
+			var playSoundTime = new Date();
+			playSoundTime = new Date(playSoundTime.getTime() + parseFloat(this.notificationRepeatInterval)*60*1000);
+
+			this.controller.serviceRequest('palm://com.palm.taskScheduler', {
+				method: 'updateTask',
+				parameters: {uri: 'palm://com.palm.applicationManager/open',
+				arguments: {'id': 'com.palm.app.calendar',
+						'params': {'playalarmsound': 'true'}},
+				key: 'calendar-playalarmsound',
+				start: {date: playSoundTime.toUTCString()}}
+			});
+		}
+	},
+
+	removePlayAlarmSoundTask: function() {
+		this.controller.serviceRequest('palm://com.palm.taskScheduler', {
+			method: 'removeTask',
+			parameters: {key: 'calendar-playalarmsound'}
+		});
+	},
+
   	replaceHTML: function(element, content) {
 		Mojo.Log.info("$$$$$$$$ Reminder-assistant replaceHTML:start");
       	var range = element.ownerDocument.createRange();
diff --git a/usr/palm/applications/com.palm.app.calendar/app/controllers/week-assistant.js b/usr/palm/applications/com.palm.app.calendar/app/controllers/week-assistant.js
index 217a467..e8bb4f6 100644
--- a/usr/palm/applications/com.palm.app.calendar/app/controllers/week-assistant.js
+++ b/usr/palm/applications/com.palm.app.calendar/app/controllers/week-assistant.js
@@ -8,11 +8,15 @@ var WeekAssistant = Class.create({
 		this.appMenuModel = { visible:true, 
 									label:$L('Calendar'), 
 									items: [ Mojo.Menu.editItem,
+											{label:$L('New'), items: [{label:$L('Event'), shortcut:'n', command:'newtimed', disabled:false},
+	                													{label:$L('All day event'), shortcut:'d', command:'newallday', disabled:false}] 
+											},
 											{label:$L('Sync Now'), command:'sync', id: 0},
 											{label:$L('Show today'), command:'today', id: 1},
 											{label:$L('Jump to...'), command:'jumpto', id: 2},
 											{label:$L('Missed reminders...'), command:'reminders', id: 3},
 											{label:$L('Preferences & Accounts'), command:Mojo.Menu.prefsCmd, checkEnabled: true},
+											//this.enhancedMenuItem = {label:$L('Enhanced View'), command:'enhanced', chosen: true},
 											{label:$L('Help'), command:Mojo.Menu.helpCmd, disabled:false}]
 								};
 
@@ -42,6 +46,34 @@ var WeekAssistant = Class.create({
 		this.COL_POS = [0, 45, 91, 137, 183, 229, 275];
 		this.pendingRender = false;
 		this.pendingCalendarSettingsUpdate = false;
+		this.imgAlarm = new Image();
+		this.imgAlarm.src = "/media/internal/scrims/ubercalendar/alarm-icon.png";
+		this.imgIcons = new Object();
+		this.ALL_DAY_HEIGHT = 12;
+		this.enhancedView = false;
+		this.weekModulusNum = 1;
+		this.weekNumOffset = 0;
+		this.weekCookie = new Mojo.Model.Cookie('WeekViewEnhanced');
+		if (this.weekCookie) {
+			var weekcookie = this.weekCookie.get();
+			if(weekcookie) {
+				if(weekcookie.weekviewenhanced !== undefined) {
+						this.enhancedView = weekcookie.weekviewenhanced;
+				} else {
+						this.enhancedView = false;
+				}
+				if(weekcookie.weeknumoffset !== undefined) {
+						this.weekNumOffset = weekcookie.weeknumoffset;
+				} else {
+						this.weekNumOffset = 0;
+				}
+				if(weekcookie.weekmodulusnum !== undefined) {
+						this.weekModulusNum = weekcookie.weekmodulusnum;
+				} else {
+						this.weekModulusNum = 1;
+				}
+			}
+		}
 	},
 					
 	getEventChangeCallback: function(response) {
@@ -80,6 +112,32 @@ var WeekAssistant = Class.create({
 		}
 	},
 	
+	clearEventsTapHandlers: function() {
+		if(this.eventsTapHandler !== undefined) {
+			this.eventsTapHandler.deactivate();
+			this.eventsTapHandler.removeAllHandlers();
+			// clear and hide canvas
+			this.evtapcontext.clearRect( 0, 0, 320, 850)
+			this.evtap.hide();
+		}
+	},
+	
+	whichDayCol: function (x) {
+		// determine which day column is tapped
+		var X = x;
+		var dayCol = null;
+		if (X) {
+			if ((X >= 0) && (X < 45)) {dayCol=0;}
+			else if ((X >= 45) && (X < 91))	{dayCol=1;}
+			else if ((X >= 91) && (X < 137)) {dayCol=2;}
+			else if ((X >= 137) && (X < 183)) {dayCol=3;}
+			else if ((X >= 183) && (X < 229)) {dayCol=4;}
+			else if ((X >= 229) && (X < 275)) {dayCol=5;}
+			else if ((X >= 275) && (X < 320)) {dayCol=6;}
+		}
+		return dayCol;
+	},
+	
 	isWeekDisplayed: function(week) {
 		var weekDateKey = this.keyFromDate(week);
 		var thisWeek = this.getFirstDayOfWeek(getCurrentDateTime());
@@ -103,10 +161,23 @@ var WeekAssistant = Class.create({
 	buildWeekTitle: function() {
 		var today = Date.today().clearTime();
 		var dayOfWeek = this.getFirstDayOfWeek(this.weekDate);
+		var weekNumber = new Date(this.weekDate).getISO8601Week();
+		var year = new Date(this.weekDate).getFullYear();
+		var maxwkn = new Date(year, 11, 31).getISO8601Week();
+		if(this.weekNumOffset !== undefined && this.weekNumOffset !=0) {
+			var wkNum = parseInt(weekNumber,10) + this.weekNumOffset;
+			weekNumber = wkNum > maxwkn ? (wkNum - maxwkn) : wkNum;
+			weekNumber = weekNumber < 10 ? '0' + weekNumber : weekNumber;
+		}
+		if(this.weekModulusNum != undefined && this.weekModulusNum <= 52 && this.weekModulusNum != 1) {
+			modNumber = (parseInt(weekNumber, 10) % this.weekModulusNum) + 1;
+			weekNumber = weekNumber + ' (' + modNumber + ')';
+		}
 		
-		var template = new Template($L("Week of #{dateStr}"));
+		var template = new Template($L("Week") + " #{weekStr}, " + $L("#{dateStr}"));
 		var templateModel = {};
 		templateModel.dateStr = Mojo.Format.formatDate(dayOfWeek, $L("MMM d, yyyy"));
+		templateModel.weekStr = weekNumber;
 		this.title.innerHTML = template.evaluate(templateModel);
 		
 		if (this.changingWeeks)
@@ -341,8 +412,8 @@ var WeekAssistant = Class.create({
 							   endDay.getTime(), 
 							   this.getEventsCallback.bind(this), 
 							   this.controller,
-							   this.getEventsFailCallback.bind(this),
-							   {useSlices: true}));
+							   this.getEventsFailCallback.bind(this)/*,
+							   {useSlices: true}*/));
 	},
 	
 	updateAll: function() {
@@ -353,8 +424,8 @@ var WeekAssistant = Class.create({
 						   endOfWeek.getTime(), 
 						   this.getEventsCallback.bind(this), 
 						   this.controller,
-						   this.getEventsFailCallback.bind(this),
-						   {useSlices: true}));
+						   this.getEventsFailCallback.bind(this)/*,
+						   {useSlices: true}*/));
 	},
 	
 	getEventsFailCallback: function(response) {
@@ -373,6 +444,13 @@ var WeekAssistant = Class.create({
 		var startPos = this.startDayMarkerPos * this.HOUR_HEIGHT - 1;
 		var midPos = this.midDayMarkerPos * this.HOUR_HEIGHT - 1;
 		var endPos = this.endDayMarkerPos * this.HOUR_HEIGHT - 1;
+		
+		for (var i=1; i<24; i++) {
+			ctx.fillStyle = "rgb(185, 185, 185)";
+			ctx.fillRect(0, i * this.HOUR_HEIGHT - 1, 320, 1);
+			ctx.fillStyle = "rgb(255, 255, 255)";
+			ctx.fillRect(0, i * this.HOUR_HEIGHT, 320, 1);
+		}
 
 		// Draw marker lines
 		ctx.fillStyle = "rgb(135, 135, 134)";
@@ -388,7 +466,28 @@ var WeekAssistant = Class.create({
 	
 	renderStartEndDayLabels: function(whichWeek) {
 		var ctx = this.weeks[whichWeek].ctxEvents;
-		
+
+		// Draw marker labels
+		ctx.fillStyle = "rgb(0, 0, 0)";
+		ctx.font = "bold 14px Prelude";
+
+		if (getTimeFormat() == 'HH24') {
+			for (var i=2; i<24; i+=2) {
+				var endPos = i * this.HOUR_HEIGHT - 1;
+				ctx.strokeText(i, 12, endPos + 24);
+			}
+		} else {
+			for (var i=2; i<12; i+=2) {
+				var endPos = i * this.HOUR_HEIGHT - 1;
+				ctx.strokeText(i + " AM", 12, endPos + 24);
+			}
+			for (var i=0; i<12; i+=2) {
+				var endPos = (i + 12) * this.HOUR_HEIGHT - 1;
+				var num = (i==0) ? 12 : i;
+				ctx.strokeText(num + " PM", 12, endPos + 24);
+			}
+		}
+		/*
 		var startPos = this.startDayMarkerPos * this.HOUR_HEIGHT - 1;
 		var midPos = this.midDayMarkerPos * this.HOUR_HEIGHT - 1;
 		var endPos = this.endDayMarkerPos * this.HOUR_HEIGHT - 1;
@@ -401,6 +500,7 @@ var WeekAssistant = Class.create({
 		if (this.midDayMarkerPos != this.startDayMarkerPos && this.midDayMarkerPos != this.endDayMarkerPos)
 			ctx.strokeText(this.midDayMarkerTime, 12, midPos + 24);
 		ctx.strokeText(this.endDayMarkerTime, 17, endPos + 24);
+		*/
 	},
 	
 	renderEmptyWeek: function(whichWeek) {
@@ -488,8 +588,94 @@ var WeekAssistant = Class.create({
 		
 		ctx.fillStyle = "rgba(255, 255, 255, 0.10)";
 		ctx.fillRect(left+1, top+height-3, width-2, 1);
+		
+		if ((event.subject === undefined) && this.enhancedView) {
+			// get more infos for this event
+			getCalendarService().getEvent(event.id,
+					this.getEventDetails.bind(this, whichWeek, whichDay, event),
+					function(response) {Mojo.Log.error(response.errorText);},
+					this.controller);
+		} else if (this.enhancedView){
+			// eventsTap handlers if not from highlight render (fromDefaultTap)
+			if ((!this.fromDefaultTap) && (whichWeek == this.THIS_WEEK)) {
+				var right = left+width;
+				var bottom = top + height;
+				this.eventsTapHandler.addHandler(left,
+													top,
+													right,
+													bottom,
+													this.handleEventsTap.bind(this, event),
+													this.showSelectedEventsTap.bind(this, left, top, width, height),
+													this.clearSelectedEventsTap.bind(this, left, top, width, height),
+													null,
+													null,
+													null,
+													null);
+			}
+			// Subject
+			ctx.fillStyle = this.colors[event.calendarColor].text;
+			ctx.font = "10px Prelude";
+			var oldAlign = ctx.textAlign;
+			var oldBaseline = ctx.textBaseline;
+			ctx.textAlign = "left";
+			ctx.textBaseline = "top";
+			
+			var text = event.subject;
+			if (text !== undefined) {
+				var length = text.length;
+				var metrics = ctx.measureText(text);
+				while ((metrics.width > eventMaxWidth-3) && (length > 0)) {
+					// too large, try one less
+					length--;
+					text = text.substring(0, length);
+					metrics = ctx.measureText(text);
+				}
+				ctx.fillText(text, left+2, top+1);
+				top += 12
+				if (text.length < event.subject.length) {
+					var text = event.subject.substring(text.length);
+					var length = text.length;
+					var metrics = ctx.measureText(text);
+					while ((metrics.width > eventMaxWidth-3) && (length > 0)) {
+						// too large, try one less
+						length--;
+						text = text.substring(0, length);
+						metrics = ctx.measureText(text);
+					}
+					ctx.fillText(text, left+2, top+1);
+					top += 12
+				}
+			}
+			// Alarm
+			if ((event.alarm !== undefined) && (event.alarm != "none")) {
+				try{ ctx.drawImage(this.imgAlarm, left+1, top+2, 12, 12); }catch (e) {}
+			}
+			// Icon
+			if (event.note !== undefined) {
+				try {
+					var start = event.note.indexOf("ICON=");
+					if (start > -1) {
+						start += 5;
+						var end = event.note.indexOf(";");
+						if (end > start) {
+							var icon = event.note.substring(start, end);
+							ctx.drawImage(this.imgIcons[icon], left+13, top+2, 12, 12);
+						}
+					}
+				} catch(e) {}
+			}
+			ctx.textAlign = oldAlign;
+			ctx.textBaseline = oldBaseline;
+		}
 	},
-	
+
+	getEventDetails: function(whichWeek, whichDay, event, details) {
+		event.subject = details.subject;
+		event.alarm = details.alarm;
+		event.note = details.note;
+		this.renderEvent(whichWeek, whichDay, event);
+	},
+
 	renderBusyTime: function(whichWeek, whichDay, busy) {
 		var ctx = this.weeks[whichWeek].ctxEvents;
 		var marginLeft = 1;
@@ -508,17 +694,91 @@ var WeekAssistant = Class.create({
 	renderAllDayEvent: function(whichWeek, whichDay, row, allday) {
 		var ctx = this.weeks[whichWeek].ctxAllDay;
 		var marginLeft = 4;
-		var top = 2 + row * 9;
+		var top = 2 + row * this.ALL_DAY_HEIGHT;
 		var left = this.COL_POS[whichDay] + marginLeft;
-		ctx.drawImage(this.colors[allday.calendarColor].allday, left, top);
+		var eventMaxWidth = this.COL_WIDTH[whichDay] - marginLeft - marginLeft;
+		ctx.drawImage(this.colors[allday.calendarColor].allday, left, top, eventMaxWidth, this.ALL_DAY_HEIGHT);
+
+		if ((allday.subject === undefined) && this.enhancedView) {
+			// get more infos for this event
+			getCalendarService().getEvent(allday.id,
+					this.getAllDayEventDetails.bind(this, whichWeek, whichDay, row, allday),
+					function(response) {Mojo.Log.error(response.errorText);},
+					this.controller);
+		} else if (this.enhancedView) {
+			// Subject
+			ctx.fillStyle = this.colors[allday.calendarColor].text;
+			ctx.font = "9px Prelude";
+			var oldAlign = ctx.textAlign;
+			var oldBaseline = ctx.textBaseline;
+			ctx.textAlign = "left";
+			ctx.textBaseline = "top";
+			
+			var text = allday.subject;
+			if (text !== undefined) {
+				if ( text.charAt(text.length -1) == ")") {
+					try {
+						var start = allday.subject.indexOf("(");
+						if (start > -1) {
+							var end = allday.subject.length;
+							if ((end > start) && ( end - start <= 13)) {
+								var text = allday.subject.substring(start, end-1);
+							}
+						}
+					} catch(e) {}
+					ctx.fillText(text, left, top);
+				} else {
+					var length = text.length;
+					var metrics = ctx.measureText(text);
+					while ((metrics.width > eventMaxWidth) && (length > 0)) {
+						// too large, try one less
+						length--;
+						text = text.substring(0, length);
+						metrics = ctx.measureText(text);
+					}
+					ctx.fillText(text, left, top);
+				}
+			}
+			// Alarm
+			if ((allday.alarm !== undefined) && (allday.alarm != "none")) {
+				try{ ctx.drawImage(this.imgAlarm, left+eventMaxWidth-4, top+2, 10, 10); }catch (e) {}
+			}
+			// Icon
+			if (allday.note !== undefined) {
+				try {
+					var start = allday.note.indexOf("ICON=");
+					if (start > -1) {
+						start += 5;
+						var end = allday.note.indexOf(";");
+						if (end > start) {
+							var icon = allday.note.substring(start, end);
+							ctx.drawImage(this.imgIcons[icon], left+eventMaxWidth-14, top+2, 10, 10);
+						}
+					}
+				} catch(e) {}
+			}
+			ctx.textAlign = oldAlign;
+			ctx.textBaseline = oldBaseline;
+		}
 	},
 	
+	getAllDayEventDetails: function(whichWeek, whichDay, row, event, details) {
+		//Mojo.Log.error(Object.toJSON(details));
+		event.subject = details.subject;
+		event.alarm = details.alarm;
+		event.note = details.note;
+		this.renderAllDayEvent(whichWeek, whichDay, row, event);
+	},
 	
 	renderWeek: function(whichWeek, data) {
 		this.renderEmptyWeek(whichWeek);
 		
 		if ((data == null) || (data.days == null))
 			return;
+
+		if ((whichWeek==this.THIS_WEEK) && (this.enhancedView) && (!this.fromDefaultTap)){
+			this.clearEventsTapHandlers();
+		}
 		
 		// Erase any existing all day events and any selection highlighting
 		if (this.weeks[whichWeek].alldayHeight) {
@@ -548,8 +808,9 @@ var WeekAssistant = Class.create({
 		if(maxRows > 5)
 			maxRows = 5;
 			
-		this.weeks[whichWeek].alldayHeight = maxRows ? maxRows * 9 + 3 : 0;
+		this.weeks[whichWeek].alldayHeight = maxRows ? maxRows * this.ALL_DAY_HEIGHT + 3 : 0;
 		this.updateWeekHeight(whichWeek);
+		var eventCount = 0;
 		
 		for (var whichDay = 0; whichDay < 7; whichDay++) {
 			var day = data.days[whichDay];
@@ -570,6 +831,7 @@ var WeekAssistant = Class.create({
 			
 			// Events
 			for (i = 0; i < day.events.length; i++) {
+				if (whichWeek == this.THIS_WEEK) {eventCount += 1;}
 				this.renderEvent(whichWeek, whichDay, day.events[i]);
 			}
 		}
@@ -585,11 +847,19 @@ var WeekAssistant = Class.create({
     		ctxAllDay.fillRect(x+1, 0, 1, this.weeks[whichWeek].alldayHeight);
 		}
 		
+		if ((whichWeek == this.THIS_WEEK) && (this.enhancedView) && (!this.fromDefaultTap)){
+			if (eventCount > 0){
+				this.eventsTapHandler.setDefaultHandler(this.handleDefaultEventsTap.bind(this), null, null);
+								this.eventsTapHandler.activate();
+				this.evtap.show();
+			}
+		}
 		this.renderStartEndDayLabels(whichWeek);
 	},
 	
 	setup: function() {
 		this.clearCache();
+		this.service = getCalendarService();
 		this.reminders = getReminderManager();
 		this.reminders.observeReminders('week', this);
 		this.prevScrollPos=100000; //some high value for the intial scrolling
@@ -612,6 +882,23 @@ var WeekAssistant = Class.create({
 		this.currentDay = this.controller.get('wv_current_day');
 		this.scrollMakerPos = this.controller.get('wv_scroll_marker');
 		this.scrollDataDiv = this.controller.get('wv_scroll_data');
+
+		this.imgIcons.birthday = new Image();
+		this.imgIcons.birthday.src = "/media/internal/scrims/ubercalendar/icon-birthday.png";
+		this.imgIcons.car = new Image();
+		this.imgIcons.car.src = "/media/internal/scrims/ubercalendar/icon-car.png";
+		this.imgIcons.kids = new Image();
+		this.imgIcons.kids.src = "/media/internal/scrims/ubercalendar/icon-kids.png";
+		this.imgIcons.doctor = new Image();
+		this.imgIcons.doctor.src = "/media/internal/scrims/ubercalendar/icon-doctor.png";
+		this.imgIcons.plane = new Image();
+		this.imgIcons.plane.src = "/media/internal/scrims/ubercalendar/icon-plane.png";
+		this.imgIcons.holiday = new Image();
+		this.imgIcons.holiday.src = "/media/internal/scrims/ubercalendar/icon-holiday.png";
+		this.imgIcons.vacation = new Image();
+		this.imgIcons.vacation.src = "/media/internal/scrims/ubercalendar/icon-vacation.png";
+		this.imgIcons.party = new Image();
+		this.imgIcons.party.src = "/media/internal/scrims/ubercalendar/icon-party.png";
 		
 		this.weeks = [];
 		this.weeks = [];
@@ -708,25 +995,57 @@ var WeekAssistant = Class.create({
 		this.menuModel = {
 			visible:true,
 			items: [ 
-						{},
+						{label: $L('Event'), icon: 'new-timed', command: 'newtimed'},
 						{	label:$L('Views'), 
 							toggleCmd:'week', 
 							items:[
+								{label:$L('Agenda'), icon: 'menu-agenda', command:'agenda'},
 								{label:$L('Day'), icon: 'menu-day', command:'day'}, 
 								{label:$L('Week'), icon: 'menu-week', command:'week'}, 
 								{label:$L('Month'), icon: 'menu-month', command:'month'}
 								]},
-						{},
+						{label: $L('All day event'), icon: 'new-allday', command: 'newallday'},
 					]
 			};
 			
 		this.controller.setupWidget(Mojo.Menu.commandMenu, undefined, this.menuModel);
+		//this.enhancedMenuItem.chosen = this.enhancedView;
 		this.controller.setupWidget(Mojo.Menu.appMenu, {omitDefaultItems:true}, this.appMenuModel);
 		this.remindersUpdated(); 	// Update missed reminders menu item
+
+		var cookie = new Mojo.Model.Cookie("LastView");
+		cookie.put("week");
 		
     	this.CalSelectorHandler = this.calSelector.bindAsEventListener(this);
 		
 		this.scrolling = 0;
+		//this.getCalId = DayAssistant.getCalId();
+		
+		//Used to detect gesture area hold
+		this.metaKeyDown = false;
+		this.orangeKeyDown = false;
+		
+		//used to copy Event
+		this.copyEvt = null;
+		this.handleEditEventsCallBack = this.editEventsCallBack.bind(this);
+		this.fromEditEventsCallBack = false;
+		//setup canvas for eventsTap
+		if (this.enhancedView) {
+			// insert canvas element
+			var container = this.controller.get('wv_eventsDay1');
+			evtapcanvas = document.createElement('canvas');
+			evtapcanvas.id = 'eventsTap';
+			evtapcanvas.width  = 320;
+			evtapcanvas.height = 850;
+			container.appendChild(evtapcanvas);
+			this.evtap = this.controller.get('eventsTap');
+			this.evtapcontext = this.controller.get('eventsTap').getContext('2d');
+			// initially hide events tap canvas
+			this.evtap.hide();
+			//setup events taphandler
+			this.fromDefaultTap = false;
+			this.eventsTapHandler = new TapHandler(this.controller.get('eventsTap'));
+		}
 	},
   
 	showJumpTo: function() {
@@ -776,6 +1095,12 @@ var WeekAssistant = Class.create({
 			} else if (event.command == Mojo.Menu.prefsCmd) {
 				Event.stop(event);
 				this.controller.stageController.pushScene('prefs');
+			} else if(event.command =="newtimed"){
+				Event.stop(event);
+				this.controller.stageController.pushScene('edit', 0, 0, false, this.getCalId()/*calendarId*/,0/*subject*/, false, this.handleEditEventsCallBack);
+			} else if(event.command=="newallday"){
+				Event.stop(event);
+				this.controller.stageController.pushScene('edit', 0, 0, true, this.getCalId(),0/*subject*/, false, this.handleEditEventsCallBack);
 			} else if(event.command == Mojo.Menu.helpCmd){
 				getAppManagerService().launchHelp(this.controller);
 			} else if (event.command == 'sync') {
@@ -788,14 +1113,35 @@ var WeekAssistant = Class.create({
 			}else if (event.command == 'jumpto') {
 				Event.stop(event);
 				this.showJumpTo();
+			//} else if (event.command == 'enhanced') {
+			//	Event.stop(event);
+			//	this.enhancedView = !this.enhancedView;
+			//	var cookie = new Mojo.Model.Cookie('WeekViewEnhanced');
+			//	cookie.put(this.enhancedView);
+			//	this.enhancedMenuItem.chosen = this.enhancedView;
+			//	this.controller.modelChanged(this.appMenuModel);
 			} else if (event.command == 'reminders') {
 				Event.stop(event);
 				this.controller.stageController.pushScene('reminder-list');
+			} else if (event.command == 'agenda') {
+				Event.stop(event);
+				this.controller.serviceRequest('palm://com.palm.applicationManager', {
+					method: 'launch',
+					parameters: {
+						id: 'com.palm.app.agenda'
+					}
+				});
+				this.menuModel.items[1].toggleCmd = 'week';
+				this.controller.modelChanged(this.menuModel, this);
 			}				
 		}
 		else if(event.type == Mojo.Event.commandEnable && event.command == Mojo.Menu.prefsCmd) {
 			// Enable prefs menuitem for this scene.
 			event.stopPropagation();
+		} else if (event.type == Mojo.Event.back) {
+			event.preventDefault();
+			event.stopPropagation();
+			this.handleMonthView();
 		}
 	},
 	
@@ -895,8 +1241,8 @@ var WeekAssistant = Class.create({
 								   this.getLastDayOfWeek(beginWeekNoTime).getTime(), 
 								   this.getEventsCallback.bind(this), 
 								   this.controller,
-								   this.getEventsFailCallback.bind(this),
-								   {useSlices: true}));
+								   this.getEventsFailCallback.bind(this)/*,
+								   {useSlices: true}*/));
 				this.renderEmptyWeek(this.PREV_WEEK);
 			}
 			this.resetPos();
@@ -937,8 +1283,8 @@ var WeekAssistant = Class.create({
 								   this.getLastDayOfWeek(beginWeekNoTime).getTime(), 
 								   this.getEventsCallback.bind(this), 
 								   this.controller,
-								   this.getEventsFailCallback.bind(this),
-								   {useSlices: true}));
+								   this.getEventsFailCallback.bind(this)/*,
+								   {useSlices: true}*/));
 				this.renderEmptyWeek(this.NEXT_WEEK);
 			}
 			this.resetPos();
@@ -970,6 +1316,18 @@ var WeekAssistant = Class.create({
 		this.eventHandler.activate();
 		this.allDayEventHandler.activate();
 		
+		// eventsTap handler & KeyHandler only activate if enhancedview
+		if (this.enhancedView) {
+			if(this.fromEditEventsCallBack == true) { observeCurrentDateTime('week', this);}
+			this.eventsTapHandler.activate();
+			// key handlers for event meta tap and event canvas
+			this.keyUpHandler = this.handleKeyUp.bind(this);
+			this.controller.listen(this.controller.sceneElement, Mojo.Event.keyup, this.keyUpHandler);
+		
+			this.keyDownHandler = this.handleKeyDown.bind(this);
+			this.controller.listen(this.controller.sceneElement, Mojo.Event.keydown, this.keyDownHandler);
+		}
+		
 		// Calendar Header
 		this.headerTapHandler = this.showJumpTo.bindAsEventListener(this);
 		this.controller.get('wv_view_header').observe(Mojo.Event.tap, this.headerTapHandler);
@@ -998,12 +1356,152 @@ var WeekAssistant = Class.create({
 		this.eventHandler.deactivate();
 		this.allDayEventHandler.deactivate();
 		
+		//deactivate eventsTap & key handlers
+		if (this.enhancedView) {
+			if(this.eventsTapHandler) {this.eventsTapHandler.deactivate();}
+			// key handlers for event meta tap and event canvas
+			this.controller.stopListening(this.controller.sceneElement, Mojo.Event.keyup, this.keyUpHandler);
+			this.controller.stopListening(this.controller.sceneElement, Mojo.Event.keydown, this.keyDownHandler);
+		}
+		
 		this.controller.get('wv_view_header').stopObserving(Mojo.Event.tap, this.headerTapHandler);
     	this.controller.get('wv_calendar_source').stopObserving(Mojo.Event.tap, this.CalSelectorHandler);
 		this.clearCacheSubscribed();
 		stopObservingCurrentDateTime('week');
 	},
 	
+	// *** EVENT HANDLERS ***
+	
+	handleKeyUp: function(event) {
+		// getsure area up
+		if (event.originalEvent.metaKey || event.originalEvent.keyCode === 231) {
+		//Mojo.Log.info("handleKeyUp detected gesture up key");
+			this.metaKeyDown = false;
+		}
+		// Check for Orange key
+		if (event.originalEvent.altKey || event.originalEvent.keyCode === 129) {
+    	//Mojo.Log.info("handleKeyUp detected ORANGE key");
+			this.orangeKeyDown = false;
+ 		}		
+	},
+	
+	handleKeyDown: function(event) {
+		// getsure area down
+		if (event.originalEvent.metaKey || event.originalEvent.keyCode === 231) {
+    	//Mojo.Log.info("handleKeyUp detected gesture key");
+			this.metaKeyDown = true;
+		}
+		// Check for Orange key
+		if (event.originalEvent.altKey || event.originalEvent.keyCode === 129) {
+    	//Mojo.Log.info("handleKeyUp detected ORANGE key");
+			this.orangeKeyDown = true;
+ 		}		
+	},
+	
+	copiedEvent: function(response) {
+		//copied event saved open in edit scene
+		if(this.copyEvt) {
+			if(response.id == this.copyEvt.id || this.copyEvt.id == undefined || this.copyEvt.id.match(response.id)) {
+	  
+				// NOTE: Event Ids are strings NOT longs
+				if (this.copyEvt.id == undefined)	this.copyEvt.id = response.id + "";	// Do NOT Localize
+				this.controller.stageController.pushScene('edit', this.copyEvt.id, new Date(this.copyEvt.startTimestamp), false, this.copyEvt.calendarId, this.copyEvt.subject, false, this.handleEditEventsCallBack);
+			}
+		}
+	},
+	
+	handleEventsTap: function(event, tapEvent) {
+		//copied event saved open in edit scene
+		Event.stop(tapEvent);
+		this.fromDefaultTap = false;
+		if (this.orangeKeyDown == true) {
+			//create new from old
+			var start = new Date();
+			start.set({	minute: 0, second: 0, millisecond: 0 });
+			var startTS = start.getTime(); //set it up on today's current hour
+			var duration = event.end - event.start;
+			var endTS = startTS + duration;
+			this.orangeKeyDown = false;
+			var tfParams = {
+						subject: event.subject,
+						allday: false,
+						location: event.location,
+						startTimestamp: startTS,
+						endTimestamp: endTS,
+						note: event.note
+						};
+			this.copyEvt = new CalendarEvent(tfParams);
+			this.copyEvt.calendarId = event.calendarId;
+			getCalendarService().setEvent(this.copyEvt, 
+								this.copiedEvent.bind(this),
+								this.controller,
+								function(response) {Mojo.Log.error(response.errorText)});
+		} else if(this.metaKeyDown == true) {
+				// Confirm with the user they want to delete the event
+				//Mojo.Log.info("handleEventsTap: meta key + tap = Delete event " + Object.toJSON(event));
+				// Retrieve the event from the calendar service so we can figure
+				// out whether it's recurring or not
+				this.eventToBeDeleted = event;
+				this.deletedeventId = event.id;
+				// Reset the metaKeyDown to handle the case the user lets go
+				// of the meta key when the Delete confirmation dialog is up
+				this.metaKeyDown = false;
+				getCalendarService().getEvent(event.id, this.gotEventInlineDelete.bind(this),this.gotEventInlineDeleteFailed.bind(this), this.controller);
+		} else {
+			if(event.id) {
+			this.fromEditEventsCallBack = true;
+			this.controller.stageController.pushScene('edit', event.id, new Date(event.startTimestamp), false, event.calendarId, event.subject, false, this.handleEditEventsCallBack);
+			}
+		}
+	},
+	
+	editEventsCallBack: function() {
+		// something happened in edit scene render week
+		this.fromDefaultTap = false;
+		var beginWeekNoTime = this.getFirstDayOfWeek(getCurrentDateTime()).set({hour: 0, minute: 0, second: 0, millisecond: 0});
+		var week = this.getFromCache(beginWeekNoTime.getTime());
+		this.renderWeek(this.THIS_WEEK, week);
+		this.fromEditEventsCallBack = true;
+	},
+	
+	handleDefaultEventsTap: function(event, x, y) {
+		// no eventsTap handler in this space, find col run tapHandler
+		Event.stop(event);
+		if (this.metaKeyDown == true) {
+			// nothing to copy here reset metakeydown
+			this.metaKeyDown = false;
+		}
+		if (this.orangeKeyDown == true) {
+			// nothing to copy here reset metakeydown
+			this.orangeKeyDown = false;
+		}
+		if (x); {
+			var col = this.whichDayCol(x);
+			this.fromDefaultTap = true;
+			this.showSelectedHandler(col);
+			this.tapHandler(col);
+			this.selectedCol = -1;
+		}
+	},
+	
+	showSelectedEventsTap: function(left, top, width, height) {
+		// eventsTap handler highlight event
+		if ((left) && (top) && (width) && (height)) {
+			// draw shade on event
+			var selectedColor = "rgba(2, 2, 2, 0.25)";
+			this.evtapcontext.fillStyle = selectedColor;
+			this.evtapcontext.fillRect(left, top, width, height);
+		}
+	},
+	
+	clearSelectedEventsTap: function(left, top, width, height) {
+		// no eventsTap handler, clear highlight day tapHandler
+		if ((left) && (top) && (width) && (height)) {
+			// clear shade on event
+			this.evtapcontext.clearRect(left, top, width, height);
+		}
+	},
+	
   	showSelectedHandler: function(col) {
 		this.selectedCol = col;
 		
@@ -1019,8 +1517,65 @@ var WeekAssistant = Class.create({
 		var week = this.getFromCache(beginWeekNoTime.getTime());
 		this.renderWeek(this.THIS_WEEK, week);
   	},
+
+	// Handles taps for events
+	gotEventInlineDelete: function(response) {
+		//Mojo.Log.info("gotEventInlineDelete");
+		var targetEvent = response;
+		// If the user is trying to delete a new event (cancelling the new event) 
+		// [new event's parentId equals 0]
+		// or
+		// if the event is NOT a recurring event, show the standard delete warning
+		if ((!targetEvent.rrule || targetEvent.rrule == "") && targetEvent.parentId <=0){
+			this.controller.showDialog({
+				template: 'shared/confirm-deleteevent',
+				assistant: new DeleteEventConfirmDialogAssistant(this, targetEvent, targetEvent.startTimestamp),
+				preventCancel: true
+			});
+		} else {
+			// If the event is a recurring event, show the warning allowing users to
+			// delete the series, the single event, or cancel
+			var eventToBeDeletedStartime = parseFromId(this.deletedeventId);
+			this.controller.showDialog({
+				template: 'shared/confirm-deleterecurringevent',
+				assistant: new DeleteEventConfirmDialogAssistant(this, targetEvent, eventToBeDeletedStartime.start),
+				preventCancel: true
+			});
+		}
+		// Re-render the week
+		this.eventToBeDeleted = null;
+		this.editEventsCallBack();
+	},
+	
+	gotEventInlineDeleteFailed: function(response) {
+		//Mojo.Log.info("gotEventInlineDeleteFailed " + Object.toJSON(response));
+		// Re-render the week
+		this.eventToBeDeleted = null;
+		this.editEventsCallBack();
+	},
+	
+	deletedEvent: function(response) {
+		//Mojo.Log.info("deletedEvent " + Object.toJSON(response));
+		// Remove the reminder for this event
+		if (this.deletedeventId != undefined)
+			getReminderManager().removeReminder(this.deletedeventId);
+	},
+
 	
   	tapHandler: function(col) {
+		// see if meta tap is active
+		if (this.metaKeyDown == true) {
+			// should not do anything here with a meta + tap
+			this.metaKeyDown = false;
+			//return;
+		}
+		// see if orange key is active
+		if (this.orangeKeyDown == true) {
+			// should not do anything here with a orange key + tap
+			this.orangeKeyDown = false;
+			//return;
+		}
+
 		var dayofweek= this.getFirstDayOfWeek(getCurrentDateTime());
 		dayofweek.addDays(col);
 			
@@ -1102,6 +1657,28 @@ var WeekAssistant = Class.create({
 	getFromCache: function(weekDate) {
 		return WeekAssistant.weekCache.get(this.keyFromDate(weekDate));
 	},	
+	getCalId :function(){
+		var defaultCalId;
+		if (getCurrentCal() == 'all') {
+			// Create an event in the calendar specified by the defaultCalId preference
+			defaultCalId = getPrefsManager().getDefaultCalendar();
+			
+			if (defaultCalId == 0) {
+				defaultCalId = getCalendarsManager().getLocalCalendarId();
+			}
+			
+			// Check to see if the calendarId is a valid one
+			if (getCalendarsManager().getCalName("id"+defaultCalId) == undefined) {
+				// The default calendar doesn't exist anymore so let's just create it
+				// in Local
+				defaultCalId = getCalendarsManager().getLocalCalendarId();
+			}
+			
+		}else{
+			defaultCalId =getCurrentCal();
+		}
+		return "id"+defaultCalId;
+	},
 	
 	isCacheEntrySubscribed: function(weekDate) {
 		return WeekAssistant.cacheSubscribed.get(this.keyFromDate(weekDate));
diff --git a/usr/palm/applications/com.palm.app.calendar/app/models/calendar-luna-service.js b/usr/palm/applications/com.palm.app.calendar/app/models/calendar-luna-service.js
index 13176a6..11c7c57 100644
--- a/usr/palm/applications/com.palm.app.calendar/app/models/calendar-luna-service.js
+++ b/usr/palm/applications/com.palm.app.calendar/app/models/calendar-luna-service.js
@@ -264,6 +264,7 @@ var CalendarMojoService = Class.create( {
 	},
 
 	setEvent: function(targetEvent, callback, sceneController, failure) {
+//Mojo.Log.error('setEvent', Object.toJSON(targetEvent));
 		if(!targetEvent.rrule || targetEvent.rrule=="")
 			targetEvent.endValidity = 0;
 		else if(targetEvent.rrule && targetEvent.rrule!="" && targetEvent.isRecurringForever ==true)
@@ -287,7 +288,7 @@ var CalendarMojoService = Class.create( {
 		
 	},
 	updateEvent: function(targetEvent, callback, sceneController, failure) {
-		
+//Mojo.Log.error(Object.toJSON('updateEvent', targetEvent));
 		return sceneController.serviceRequest(CalendarMojoService.identifier, {
 			method: 'updateEvent',
 			parameters: targetEvent,
diff --git a/usr/palm/applications/com.palm.app.calendar/app/models/formatter_service.js b/usr/palm/applications/com.palm.app.calendar/app/models/formatter_service.js
index ead7ff3..f95ee78 100644
--- a/usr/palm/applications/com.palm.app.calendar/app/models/formatter_service.js
+++ b/usr/palm/applications/com.palm.app.calendar/app/models/formatter_service.js
@@ -157,10 +157,6 @@ Formatter = Class.create({
 					val = $L('1 day before');
 					break;
 					
-				case '-P1D':
-					val = $L('1 day before');
-					break;
-					
 				case '-P2D':
 					val = $L('2 days before');
 					break;
diff --git a/usr/palm/applications/com.palm.app.calendar/app/models/reminder-manager.js b/usr/palm/applications/com.palm.app.calendar/app/models/reminder-manager.js
index c2619fe..9924e5e 100644
--- a/usr/palm/applications/com.palm.app.calendar/app/models/reminder-manager.js
+++ b/usr/palm/applications/com.palm.app.calendar/app/models/reminder-manager.js
@@ -7,6 +7,35 @@ var ReminderManager = Class.create ({
 		
 		this.observers = new Hash();
 		this.reminders = [];
+
+		//////////////////////////
+		//Reload reminders
+		try
+		{
+			this.cookie = new Mojo.Model.Cookie("remindersCookie");
+
+			if (this.cookie) 
+			{
+				var cookie = this.cookie.get();
+				
+				if (cookie) 
+				{			
+					if(cookie.reminders)
+					{
+						this.reminders = cookie.reminders;
+					}
+				}
+			}
+		}
+		catch(err)
+		{
+			console.error("Error: ReminderManager initialize: Failed to read cookie.");
+		}
+		
+
+		//update the event remider data
+		this.getAllReminderEventData();
+		//////////////
 		
 		this.eventChangeRequest = new Mojo.Service.Request('palm://com.palm.calendar', {
 					                    method: 'getEventChange',
@@ -23,9 +52,7 @@ var ReminderManager = Class.create ({
 		Mojo.Log.info("$$$$$$$$ Reminder-manager cleanup: end ");
 	},
 	
-	getEventChangeCallback: function(response) {
-		Mojo.Log.info("$$$$$$$$ Reminder-manager getEventChangeCallback:start ");
-		if (response.changed) {
+	getAllReminderEventData: function() {
 			// Get the event for each reminder since it may have changed
 		    window.setTimeout(function() {
 				this.requests = [];
@@ -39,6 +66,12 @@ var ReminderManager = Class.create ({
 					}));
 				}
 		    }.bind(this), 0.01);
+	}, 
+	
+	getEventChangeCallback: function(response) {
+		Mojo.Log.info("$$$$$$$$ Reminder-manager getEventChangeCallback:start ");
+		if (response.changed) {
+			this.getAllReminderEventData();
 		}
 		Mojo.Log.info("$$$$$$$$ Reminder-manager getEventChangeCallback:end ");
 	},
@@ -254,6 +287,15 @@ var ReminderManager = Class.create ({
 				sceneController.remindersUpdated();
 		});
 		Mojo.Log.info("$$$$$$$$ Reminder-manager notifyObservers: end");
+	},
+	
+	saveReminders: function() {
+		//store the current reminders
+		//so that we can persist them across reboot
+		if (this.cookie)
+		{
+			this.cookie.put({reminders: this.reminders});
+		}
 	}
 	
 });
diff --git a/usr/palm/applications/com.palm.app.calendar/javascripts/datejs/week.js b/usr/palm/applications/com.palm.app.calendar/javascripts/datejs/week.js
new file mode 100644
index 0000000..501c299
--- /dev/null
+++ b/usr/palm/applications/com.palm.app.calendar/javascripts/datejs/week.js
@@ -0,0 +1,44 @@
+Date.prototype.getWeek = function() {
+	var date = new Date(this);
+	var year = date.getFullYear();
+	var month = date.getMonth();
+	var day = date.getDate();
+	
+	var when = new Date(year,month,day);
+	var newYear = new Date(year,0,1);
+	var modDay = newYear.getDay();
+
+	if(this.startDay != 1)
+		if (modDay == 0) modDay=6; else modDay--;
+
+	var daynum = ((Date.UTC(year,when.getMonth(),when.getDate(),0,0,0) -
+		Date.UTC(year,0,1,0,0,0)) /1000/60/60/24) + 1;
+
+	if (modDay < 4 ) {
+		var weekno = Math.floor((daynum+modDay-1)/7)+1;
+	}
+	else {
+		var weekno = Math.floor((daynum+modDay-1)/7);
+	
+		if (weekno == 0) {
+			year--;
+		
+			var prevNewYear = new Date(year,0,1);
+			var prevmodDay = prevNewYear.getDay();
+			if (prevmodDay == 0) prevmodDay = 6; else prevmodDay--;
+			if (prevmodDay < 4) weekno = 53; else weekno = 52;
+		}
+	}
+
+	return weekno;
+};
+
+Date.prototype.getISO8601Week = function() {
+	var d = new Date(this);
+	d.setUTCDate(d.getUTCDate() - (d.getUTCDay() + 6) % 7 + 3);
+	var ms = d.valueOf();
+	d.setUTCMonth(0, 4);
+	var w = Math.round((ms - d.valueOf()) / 604800000) + 1;
+	if (w <= 9) { w = "0" + w; }
+	return w;
+};
diff --git a/usr/palm/applications/com.palm.app.calendar/sources.json b/usr/palm/applications/com.palm.app.calendar/sources.json
index 3beec78..9741133 100644
--- a/usr/palm/applications/com.palm.app.calendar/sources.json
+++ b/usr/palm/applications/com.palm.app.calendar/sources.json
@@ -3,6 +3,9 @@
     "source": "javascripts\/datejs\/date.js"
   },
   {
+    "source": "javascripts\/datejs\/week.js"
+  },
+  {
     "source": "javascripts\/recurrence-rule.js"
   },
   {
diff --git a/usr/palm/applications/com.palm.app.calendar/stylesheets/calendar.css b/usr/palm/applications/com.palm.app.calendar/stylesheets/calendar.css
index f30cb63..adee3f7 100644
--- a/usr/palm/applications/com.palm.app.calendar/stylesheets/calendar.css
+++ b/usr/palm/applications/com.palm.app.calendar/stylesheets/calendar.css
@@ -59,6 +59,18 @@ body {
 		background-image: url(../images/menu-icon-day.png);
 }
 
+.palm-menu-icon.new-timed{
+		background-image: url(../images/menu-icon-newevent.png);
+}
+
+.palm-menu-icon.new-allday {
+		background-image: url(../images/menu-icon-today.png);
+}
+
+.palm-menu-icon.menu-agenda {
+		background-image: url(/media/internal/scrims/ubercalendar/menu-icon-agenda.png);
+}
+
 .palm-menu-icon.edit {
 		background-image: url(../images/menu-icon-compose.png);
 }
diff --git a/usr/palm/applications/com.palm.app.calendar/stylesheets/datetime.css b/usr/palm/applications/com.palm.app.calendar/stylesheets/datetime.css
index d49522c..604ee2a 100644
--- a/usr/palm/applications/com.palm.app.calendar/stylesheets/datetime.css
+++ b/usr/palm/applications/com.palm.app.calendar/stylesheets/datetime.css
@@ -101,8 +101,44 @@ div.list-separator 		{
 .item_selected {
 		font-weight: bold;
 }				
-
-
+#DPscrol {
+	height:220px;
+}
+#DPscrolct {
+	position: relative;
+	width:1566;
+	height: 220px;
+}
+.DPmv {
+	position: absolute;
+	display: block;
+	width: 240px;
+}
+#DPmonth_0 {
+	left: 40px;
+	border-right:1px solid black;
+	border-left:1px solid black;
+}
+#DPmonth_1{
+	left: 281px;
+	border-right:1px solid black;
+}
+#DPmonth_2 {
+	left: 522px;
+	border-right:1px solid black;
+}
+#DPmonth_3 {
+	left: 763px;
+	border-right:1px solid black;
+}
+#DPmonth_4 {
+	left: 1004px;
+	border-right:1px solid black;
+}
+#DPmonth_5 {
+	left: 1245px;
+	border-right:1px solid black;
+}
 #dtl_allday_cb .checkbox {
 	margin-right:0px;
 }
@@ -115,13 +151,30 @@ div.list-separator 		{
 .calendar-dtl-timedate .icon.timedate {
 	background: url(../images/calendar-dtl/timedate-icon.png) center center no-repeat;
 }
-
+.popCanvas .palm-button
+{
+background-image:url('../images/notification-large-calendar.png');
+}
+.popCanvas .palm-button.selected
+{
+background-image:url('../images/notification-large.png');
+}
+.popCanvas .palm-button {
+	padding: 0px;
+	width: 50px;
+	height: 50px;
+	vertical-align: bottom;
+	margin-top: 0px;
+	margin-left: -1px;
+	margin-right: 0px;
+	margin-bottom: 0px;
+   -webkit-border-image: none; 
+}
 /*Reduce top and bottom padding to fit more on the screen*/
 
 .calendar-dtl-timedate .title.datetime-picker {
-  padding: 0 10px 7px 14px;
+  padding: 0px 1px 4px 4px;
 }
-
 .calendar-dtl-timedate .palm-row.all-day-event .title {
   padding-bottom: 0px;
   margin-bottom: -5px;
diff --git a/usr/palm/applications/com.palm.app.calendar/stylesheets/event-colors.css b/usr/palm/applications/com.palm.app.calendar/stylesheets/event-colors.css
index 3b455df..a350808 100644
--- a/usr/palm/applications/com.palm.app.calendar/stylesheets/event-colors.css
+++ b/usr/palm/applications/com.palm.app.calendar/stylesheets/event-colors.css
@@ -15,15 +15,26 @@ Copyright 2009 Palm, Inc.  All rights reserved.
 */
 
 /* Month View: busy time */
-.monthview-busy-time.cal-color-blue 				{ background: url(../images/month-busy-time-blue.png) 0 0 fixed repeat; }
-.monthview-busy-time.cal-color-green 				{ background: url(../images/month-busy-time-green.png) 0 0 fixed repeat; }
-.monthview-busy-time.cal-color-yellow 				{ background: url(../images/month-busy-time-yellow.png) 0 0 fixed repeat; }
-.monthview-busy-time.cal-color-gray 				{ background: url(../images/month-busy-time-gray.png) 0 0 fixed repeat; }
-.monthview-busy-time.cal-color-orange 				{ background: url(../images/month-busy-time-orange.png) 0 0 fixed repeat; }
-.monthview-busy-time.cal-color-pink 				{ background: url(../images/month-busy-time-pink.png) 0 0 fixed repeat; }
-.monthview-busy-time.cal-color-red 					{ background: url(../images/month-busy-time-red.png) 0 0 fixed repeat; }
-.monthview-busy-time.cal-color-purple 				{ background: url(../images/month-busy-time-purple.png) 0 0 fixed repeat; }
-.monthview-busy-time.cal-color-teal 				{ background: url(../images/month-busy-time-teal.png) 0 0 fixed repeat; }
+.monthview-busy-time.cal-color-blue 				{ background: url(../images/month-busy-time-blue.png) right 0 fixed repeat-y; }
+.monthview-busy-time.cal-color-green 				{ background: url(../images/month-busy-time-green.png) right 0 fixed repeat-y; }
+.monthview-busy-time.cal-color-yellow 				{ background: url(../images/month-busy-time-yellow.png) right 0 fixed repeat-y; }
+.monthview-busy-time.cal-color-gray 				{ background: url(../images/month-busy-time-gray.png) right 0 fixed repeat-y; }
+.monthview-busy-time.cal-color-orange 				{ background: url(../images/month-busy-time-orange.png) right 0 fixed repeat-y; }
+.monthview-busy-time.cal-color-pink 				{ background: url(../images/month-busy-time-pink.png) right 0 fixed repeat-y; }
+.monthview-busy-time.cal-color-red 					{ background: url(../images/month-busy-time-red.png) right 0 fixed repeat-y; }
+.monthview-busy-time.cal-color-purple 				{ background: url(../images/month-busy-time-purple.png) right 0 fixed repeat-y; }
+.monthview-busy-time.cal-color-teal 				{ background: url(../images/month-busy-time-teal.png) right 0 fixed repeat-y; }
+
+/* Month View: partly busy time */
+.monthview-partly-busy-time.cal-color-blue 			{ background: url(../images/month-busy-time-blue.png) left center fixed no-repeat; }
+.monthview-partly-busy-time.cal-color-green 		{ background: url(../images/month-busy-time-green.png) left center fixed no-repeat; }
+.monthview-partly-busy-time.cal-color-yellow 		{ background: url(../images/month-busy-time-yellow.png) left center fixed no-repeat; }
+.monthview-partly-busy-time.cal-color-gray 			{ background: url(../images/month-busy-time-gray.png) left center fixed no-repeat; }
+.monthview-partly-busy-time.cal-color-orange 		{ background: url(../images/month-busy-time-orange.png) left center fixed no-repeat; }
+.monthview-partly-busy-time.cal-color-pink 			{ background: url(../images/month-busy-time-pink.png) left center fixed no-repeat; }
+.monthview-partly-busy-time.cal-color-red 			{ background: url(../images/month-busy-time-red.png) left center fixed no-repeat; }
+.monthview-partly-busy-time.cal-color-purple 		{ background: url(../images/month-busy-time-purple.png) left center fixed no-repeat; }
+.monthview-partly-busy-time.cal-color-teal 			{ background: url(../images/month-busy-time-teal.png) left center fixed no-repeat; }
 
 /* Week View: Events */
 .wv_event.cal-color-blue,
diff --git a/usr/palm/applications/com.palm.app.calendar/stylesheets/month.css b/usr/palm/applications/com.palm.app.calendar/stylesheets/month.css
index cafffaf..24b0ea7 100644
--- a/usr/palm/applications/com.palm.app.calendar/stylesheets/month.css
+++ b/usr/palm/applications/com.palm.app.calendar/stylesheets/month.css
@@ -124,12 +124,36 @@
 		float: left;
 }
 
+.monthview-partly-busy-time {
+		background: none;
+		background-image: url(../images/busy-time.png);
+		background-repeat: no-repeat;
+		background-attachment: fixed;
+		background-position: left center;
+		/*color: #FF0000;*/
+		width: 100%;
+		height: 16px;
+		float: left;
+}
+
+.monthview-partly-busy-time-pixi {
+		background: none;
+		background-image: url(../images/busy-time.png);
+		background-repeat: no-repeat;
+		background-attachment: fixed;
+		background-position: left center;
+		/*color: #FF0000;*/
+		width: 100%;
+		height: 10px;
+		float: left;
+}
+
 .monthview-busy-time {
 		background: none;
 		background-image: url(../images/busy-time.png);
-		background-repeat: repeat;
+		background-repeat: repeat-y;
 		background-attachment: fixed;
-		background-position: 0 0;
+		background-position: right 0;
 		/*color: #FF0000;*/
 		width: 100%;
 		height: 16px;
diff --git a/usr/palm/applications/com.palm.app.calendar/stylesheets/notification.css b/usr/palm/applications/com.palm.app.calendar/stylesheets/notification.css
index 4a84218..6c74f07 100644
--- a/usr/palm/applications/com.palm.app.calendar/stylesheets/notification.css
+++ b/usr/palm/applications/com.palm.app.calendar/stylesheets/notification.css
@@ -15,9 +15,13 @@
 
 #reminder-email,
 #reminder-dismiss,
-#reminder-snooze {
-    height: 45px;
-	position: fixed;
+#reminder-snooze,
+#reminder-setsnooze,
+#reminder-snz-advance-button,
+#reminder-snz-previous-button,
+#reminder-snz-chosen-button {
+	height: 45px;
+	overflow: hidden;
 	-webkit-box-sizing: border-box;
 	line-height: 45px;
 	text-align: center;
@@ -36,22 +40,50 @@
 #reminder-email .button-wrapper { -webkit-border-image:url(../images/button-contact.png) 0 15 45 15 repeat repeat; }
 #reminder-email:active .button-wrapper { -webkit-border-image:url(../images/button-contact.png) 45 15 0 15 repeat repeat; }
 
+#reminder-setsnooze .button-wrapper { -webkit-border-image:url(../images/button-contact.png) 0 15 45 15 repeat repeat; }
+#reminder-setsnooze:active .button-wrapper { -webkit-border-image:url(../images/button-contact.png) 45 15 0 15 repeat repeat; }
+
+#reminder-snz-advance-button .button-wrapper { -webkit-border-image:url(../images/button-contact.png) 0 15 45 15 repeat repeat; }
+#reminder-snz-advance-button:active .button-wrapper { -webkit-border-image:url(../images/button-contact.png) 45 15 0 15 repeat repeat; }
+
+#reminder-snz-previous-button .button-wrapper { -webkit-border-image:url(../images/button-contact.png) 0 15 45 15 repeat repeat; }
+#reminder-snz-previous-button:active .button-wrapper { -webkit-border-image:url(../images/button-contact.png) 45 15 0 15 repeat repeat; }
+
+#reminder-snz-chosen-button .button-wrapper { -webkit-border-image:url(../images/button-snooze.png) 0 15 45 15 repeat repeat; }
+#reminder-snz-chosen-button:active .button-wrapper { -webkit-border-image:url(../images/button-snooze.png) 45 15 0 15 repeat repeat; }
+
 #reminder-dismiss,
-#reminder-snooze {
+#reminder-snooze
+{
+	width: 40%;
+	float:left; 
+ 	padding-left: 5px;
+}
+
+#reminder-setsnooze {
+	width: 20%;
+	float:left; 
+ 	padding-left: 5px;
+}
+
+#reminder-snz-advance-button,
+#reminder-snz-previous-button {
+	width: 25%;
+}
+
+#reminder-snz-chosen-button {
 	width: 50%;
-    bottom: 10px;
 }
 
 #reminder-dismiss .button-wrapper { -webkit-border-image:url(../images/button-dismiss.png) 0 15 45 15 repeat repeat; }
 #reminder-dismiss:active .button-wrapper { -webkit-border-image:url(../images/button-dismiss.png) 45 15 0 15 repeat repeat; }
 
-#reminder-snooze {
- 	right: 0px; 
- 	padding-left: 5px;
-}
-
-#reminder-dismiss {
-    padding-right: 5px;
+#reminder-snz-advance-button,
+#reminder-snz-chosen-button,
+#reminder-snz-previous-button
+{
+ 	float:left;
+	padding-left: 5px;
 }
 
 #reminder-snooze .button-wrapper { -webkit-border-image:url(../images/button-snooze.png) 0 15 45 15 repeat repeat; }
diff --git a/usr/palm/applications/com.palm.app.calendar/stylesheets/week.css b/usr/palm/applications/com.palm.app.calendar/stylesheets/week.css
index 729ae53..43397ad 100644
--- a/usr/palm/applications/com.palm.app.calendar/stylesheets/week.css
+++ b/usr/palm/applications/com.palm.app.calendar/stylesheets/week.css
@@ -125,6 +125,16 @@
 #wv_eventsDay1 {
 	left: 321px;
 }
+#eventsTap {
+	position: absolute;
+	top:0;
+	display:block;
+	border-right:1px solid black;
+/*  for debugging events Tap Canvas
+	border-top:3px solid red;
+	border-bottom:3px solid blue;
+*/
+}
 #wv_eventsDay2 {
 	left: 642px;
 }
