diff --git a/usr/palm/services/com.palm.service.calendar.facebook/service/engine/on.event.js b/usr/palm/services/com.palm.service.calendar.facebook/service/engine/on.event.js
index 4a5dc4b..a7de1cb 100644
--- a/usr/palm/services/com.palm.service.calendar.facebook/service/engine/on.event.js
+++ b/usr/palm/services/com.palm.service.calendar.facebook/service/engine/on.event.js
@@ -4,12 +4,12 @@
 /*global Future, TimezoneManager */
 
 var OnEvent =
-{	tzm			: { convertTime: function (time) { return time; } }
+{	/*tzm			: { convertTime: function (time) { return time; } }
 
-,	initialize	: function (options /*{ calendarId: dbId, timezoneManager: Calendar.TimezoneManager }*/){
+,*/	initialize	: function (options /*{ calendarId: dbId, timezoneManager: Calendar.TimezoneManager }*/){
 		//console.log ("calendar.facebook.sync.OnEvent: calendarId: ", options.calendarId);
-		OnEvent.tzm			= options.timezoneManager || this.tzm;
-		OnEvent.tzId		= "America/Los_Angeles";
+		OnEvent.tzm			= options.timezoneManager; // || this.tzm;
+		OnEvent.tzId		= "America\/Los_Angeles";
 		OnEvent.accountId	= options.accountId;
 		OnEvent.calendarId	= options.calendarId;
 	}
@@ -25,8 +25,8 @@ var OnEvent =
 	,	allDay: function (from) {
 			// "type": "boolean"
 
-			var start	= from.start_time	&& new Date (OnEvent.tzm.convertTime (from.start_time	* 1000, OnEvent.tzId))
-			,	end		= from.end_time		&& new Date (OnEvent.tzm.convertTime (from.end_time		* 1000, OnEvent.tzId));
+			var start	= from.start_time	&& new Date (OnEvent.tzm.convertTime (from.start_time	* 1000, OnEvent.tzm.timezone, OnEvent.tzId))
+			,	end		= from.end_time		&& new Date (OnEvent.tzm.convertTime (from.end_time		* 1000, OnEvent.tzm.timezone, OnEvent.tzId));
 
 			// It's an "all day" event if the start and end aren't the same,
 			// and the start and end times are midnight.  That means "all 
@@ -102,14 +102,17 @@ var OnEvent =
 			// "type": "long",
 			// "description": "start date and time of the event. Formerly startTimestamp"
 			// 2010.06.18: Facebook provides timestamp in seconds since the epoch, Calendar requires milliseconds. 
-			return from.start_time * 1000;
+			var dt = OnEvent.tzm.convertTime (from.start_time	* 1000, OnEvent.tzm.timezone, OnEvent.tzId);
+			return dt;
 		}
 
 	,	dtend: function (from) {
 			// "type": "long",
 			// "description": "end date and time of the event. Formerly endTimestamp"
 			// 2010.06.18: Facebook provides timestamp in seconds since the epoch, Calendar requires milliseconds. 
-			return from.end_time * 1000;
+			var dt = OnEvent.tzm.convertTime (from.end_time	* 1000, OnEvent.tzm.timezone, OnEvent.tzId);
+			return dt;
+			//return from.end_time * 1000;
 		}
 
 	,	guid: function (from) {
