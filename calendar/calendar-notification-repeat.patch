diff --git a/usr/palm/applications/com.palm.app.calendar/app/controllers/app-assistant.js b/usr/palm/applications/com.palm.app.calendar/app/controllers/app-assistant.js
index 5375929..a6d18b0 100644
--- a/usr/palm/applications/com.palm.app.calendar/app/controllers/app-assistant.js
+++ b/usr/palm/applications/com.palm.app.calendar/app/controllers/app-assistant.js
@@ -117,6 +117,9 @@ var AppAssistant = Class.create({
 			Mojo.Log.info("$$$$$$$$ AppAssistant handleLaunch : alarmclose");
 			this.closeReminder(launchParams.alarmclose);
 		} 
+		else if (launchParams.playalarmsound){
+			this.playAlarmSound();
+		}
 		else if (launchParams.dayChange){
 			this.dayChange();
 		}
@@ -267,6 +270,13 @@ var AppAssistant = Class.create({
 		Mojo.Log.info("$$$$$$$$ AppAssistant closeReminder:end");
 	},
 	
+	playAlarmSound: function() {
+		if (this.openReminderAlert) {
+			this.openReminderAlert.playAlarmSound();
+			this.openReminderAlert = null;
+		}
+	},
+
 	scheduleNextReminder: function(eventId) {
 		Mojo.Log.info("$$$$$$$$ AppAssistant scheduleNextReminder: for event:"+eventId);
 		new Mojo.Service.Request('palm://com.palm.calendar', {
diff --git a/usr/palm/applications/com.palm.app.calendar/app/controllers/prefs-assistant.js b/usr/palm/applications/com.palm.app.calendar/app/controllers/prefs-assistant.js
index cebe803..5370044 100644
--- a/usr/palm/applications/com.palm.app.calendar/app/controllers/prefs-assistant.js
+++ b/usr/palm/applications/com.palm.app.calendar/app/controllers/prefs-assistant.js
@@ -179,6 +179,33 @@ var PrefsAssistant = Class.create({
 		this.controller.get('pv_default_allday_evt_alarm_value').update(allDayAlarmStr);
 	},
 	
+	renderNotificationRepeatValues: function(notificationRepeatIntervalStr, notificationMaxRepeatStr) {
+		//Mojo.Log.info('prefs-assistant: renderNotificationRepeatValues');
+		var obj = {};
+		
+		// Notification Repeat Interval
+		this.controller.get('pv_notification_repeat_interval_value').update(notificationRepeatIntervalStr);
+		
+		// Notification Max Repeat
+		this.controller.get('pv_notification_max_repeat_value').update(notificationMaxRepeatStr);
+	},
+	
+	getCurrentNotificationRepeatIntervalString: function() {
+		var index = 0;
+		for (index = 0; index < this.notificationRepeatIntervals.size(); index++) {
+			if (this.notificationRepeatIntervals[index].command == this.notificationRepeatInterval)
+				return this.notificationRepeatIntervals[index].label;
+		}
+	},
+	
+	getCurrentNotificationMaxRepeatString: function() {
+		var index = 0;
+		for (index = 0; index < this.notificationMaxRepeats.size(); index++) {
+			if (this.notificationMaxRepeats[index].command == this.notificationMaxRepeat)
+				return this.notificationMaxRepeats[index].label;
+		}
+	},
+	
 	getCurrentAlarmString: function() {
 		var index = 0;
 		for (index = 0; index < this.alarms.size(); index++) {
@@ -375,6 +402,40 @@ var PrefsAssistant = Class.create({
 	},
 	
 	setup: function() {
+		
+		//get notification repeat interval and max repeat values from cookie
+		this.notificationCookie = new Mojo.Model.Cookie("com.palm.app.calendar.notificationrepeat");
+
+		if (this.notificationCookie) 
+		{
+			var notificationCookie = this.notificationCookie.get();
+
+			if (notificationCookie) 
+			{			
+				if(notificationCookie.notificationRepeatInterval)
+				{
+					this.notificationRepeatInterval = notificationCookie.notificationRepeatInterval;
+				}
+				else
+				{
+					//set default value to 2 minutes
+					this.notificationRepeatInterval = '2';
+				}
+				
+				if(notificationCookie.notificationMaxRepeat)
+				{
+					this.notificationMaxRepeat = notificationCookie.notificationMaxRepeat;
+				}
+				else
+				{
+					//set default value to unlimited
+					this.notificationMaxRepeat = '99999';
+				}
+			}
+		}
+		
+		this.renderNotificationRepeatValues(this.getCurrentNotificationRepeatIntervalString(), this.getCurrentNotificationMaxRepeatString());
+		
 		// Retrieve the prefs from the service
 		this.prefs = getPrefs();
 		this.requests = [];
@@ -468,6 +529,16 @@ var PrefsAssistant = Class.create({
 	
 	cleanup: function() {
 		//Mojo.Log.info("prefs-assistant:cleanup");
+
+		//save notification repeat preferences
+		if (this.notificationCookie)
+		{
+			this.notificationCookie.put({
+										notificationRepeatInterval: this.notificationRepeatInterval,
+										notificationMaxRepeat: this.notificationMaxRepeat
+										});
+		}
+		
 		getCalendarsManager().stopObservingCalendars('prefs');
 		getPrefsManager().stopObservingCalendarPrefs('prefs');
 		
@@ -497,6 +568,12 @@ var PrefsAssistant = Class.create({
 		//Mojo.Log.info('prefs-assistant: activate');
 		getPrefsManager().validateDefaultCalPref();
 		
+		//repeat notification handlers
+		this.notificationRepeatIntervalClickHandler = this.handleNotificationRepeatIntervalClick.bindAsEventListener(this);
+		this.controller.get('pv_notification_repeat_interval').observe('mojo-tap', this.notificationRepeatIntervalClickHandler);
+		this.notificationMaxRepeatClickHandler = this.handleNotificationMaxRepeatClick.bindAsEventListener(this);
+		this.controller.get('pv_notification_max_repeat').observe('mojo-tap', this.notificationMaxRepeatClickHandler);
+		
 		this.startOfWeekClickHandler = this.handleStartOfWeekClick.bindAsEventListener(this);
 		this.controller.get('pv_start_of_week').observe('mojo-tap', this.startOfWeekClickHandler);
 		
@@ -539,6 +616,13 @@ var PrefsAssistant = Class.create({
 	
 	deactivate: function() {
 		//Mojo.Log.info('prefs-assistant: deactivate');
+		
+		//stop observing notification repeat controls
+		this.controller.get('pv_notification_repeat_interval').stopObserving('mojo-tap', this.notificationRepeatIntervalClickHandler);
+		this.notificationRepeatIntervalClickHandler = undefined;
+		this.controller.get('pv_notification_max_repeat').stopObserving('mojo-tap', this.notificationMaxRepeatClickHandler);
+		this.notificationMaxRepeatClickHandler = undefined;
+		
 		this.controller.get('pv_start_of_week').stopObserving('mojo-tap', this.startOfWeekClickHandler);
 		
 		this.controller.get('pv_default_evt_alarm').stopObserving('mojo-tap', this.defaultEventAlarmClickHandler);
@@ -565,6 +649,48 @@ var PrefsAssistant = Class.create({
 	},
 	
 	// *** EVENT HANDLERS ***
+
+	notificationRepeatIntervalChoose: function(value) {
+		//Mojo.Log.info('prefs-assistant: defaultNotificationRepeatIntervalChoose');
+		
+		if (value != undefined && value != this.notificationRepeatInterval) {
+			this.notificationRepeatInterval = value;
+			this.renderNotificationRepeatValues(this.getCurrentNotificationRepeatIntervalString(), this.getCurrentNotificationMaxRepeatString());
+			this.dirty = true;
+		}
+	},
+	
+	handleNotificationRepeatIntervalClick: function(event) {
+		//Mojo.Log.info('prefs-assistant: handleNotificationRepeatIntervalClick');
+
+		Event.stop(event);
+		this.controller.popupSubmenu({
+				onChoose: this.notificationRepeatIntervalChoose.bind(this),
+				toggleCmd: this.notificationRepeatInterval,
+				items: this.notificationRepeatIntervals
+			});
+	},
+	
+	notificationMaxRepeatChoose: function(value) {
+		//Mojo.Log.info('prefs-assistant: notificationMaxRepeatChoose');
+		
+		if (value != undefined && value != this.notificationMaxRepeat) {
+			this.notificationMaxRepeat = value;
+			this.renderNotificationRepeatValues(this.getCurrentNotificationRepeatIntervalString(), this.getCurrentNotificationMaxRepeatString());
+			this.dirty = true;
+		}
+	},
+	
+	handleNotificationMaxRepeatClick: function(event) {
+		//Mojo.Log.info('prefs-assistant: handleNotificationMaxRepeatClick');
+
+		Event.stop(event);
+		this.controller.popupSubmenu({
+				onChoose: this.notificationMaxRepeatChoose.bind(this),
+				toggleCmd: this.notificationMaxRepeat,
+				items: this.notificationMaxRepeats
+			});
+	},
 	
 	handleDefaultCalClick: function(event) {
 		//Mojo.Log.info("prefs-assistant: handleDefaultCalClick");
@@ -746,6 +872,50 @@ var PrefsAssistant = Class.create({
 	
 	// *** WIDGET ATTRS & MODELS
 
+	notificationRepeatIntervals: [
+		{label:$L('Disabled'), command:'0'},
+		{label:$L('5 Seconds'), command:'.083'},
+		{label:$L('10 Seconds'), command:'.167'},
+		{label:$L('15 Seconds'), command:'.25'},
+		{label:$L('20 Seconds'), command:'.333'},
+		{label:$L('25 Seconds'), command:'.417'},
+		{label:$L('30 Seconds'), command:'.5'},
+		{label:$L('1 Minutes'), command:'1'},
+		{label:$L('2 Minutes'), command:'2'},
+		{label:$L('3 Minutes'), command:'3'},
+		{label:$L('4 Minutes'), command:'4'},
+		{label:$L('5 Minutes'), command:'5'},
+		{label:$L('10 Minutes'), command:'10'},
+		{label:$L('15 Minutes'), command:'15'}
+	],
+	
+	notificationMaxRepeats: [
+		{label:$L('Unlimited'), command:'99999'}, //this should be a large enough value to be conisdered unlimited for our purpose.
+		{label:$L('1'), command:'1'},
+		{label:$L('2'), command:'2'},
+		{label:$L('3'), command:'3'},
+		{label:$L('4'), command:'4'},
+		{label:$L('5'), command:'5'},
+		{label:$L('10'), command:'10'},
+		{label:$L('15'), command:'15'},
+		{label:$L('20'), command:'20'},
+		{label:$L('25'), command:'25'},
+		{label:$L('30'), command:'30'},
+		{label:$L('35'), command:'35'},
+		{label:$L('40'), command:'40'},
+		{label:$L('45'), command:'45'},
+		{label:$L('50'), command:'50'},
+		{label:$L('55'), command:'55'},
+		{label:$L('60'), command:'60'},
+		{label:$L('65'), command:'65'},
+		{label:$L('70'), command:'70'},
+		{label:$L('75'), command:'75'},
+		{label:$L('80'), command:'80'},
+		{label:$L('85'), command:'85'},
+		{label:$L('90'), command:'90'},
+		{label:$L('95'), command:'95'},
+		{label:$L('100'), command:'100'}
+	],
 	
 	acctsListAttrs : {
 		itemTemplate: 'prefs/prefs-account',
diff --git a/usr/palm/applications/com.palm.app.calendar/app/controllers/reminder-assistant.js b/usr/palm/applications/com.palm.app.calendar/app/controllers/reminder-assistant.js
index d190fd1..1b28853 100644
--- a/usr/palm/applications/com.palm.app.calendar/app/controllers/reminder-assistant.js
+++ b/usr/palm/applications/com.palm.app.calendar/app/controllers/reminder-assistant.js
@@ -1,5 +1,6 @@
 /* Copyright 2009 Palm, Inc.  All rights reserved. */
 
+g_notificationRepeatCount = 0;
 
 var ReminderAssistant = Class.create({
 	initialize: function(eventId,needThrobbing) {
@@ -28,6 +29,40 @@ var ReminderAssistant = Class.create({
 	
 	setup: function() {
 		Mojo.Log.info("$$$$$$$$ Reminder-assistant setup:start");
+		
+		//load the notification repeat preferences.
+		//doing this here instead of in initialze to avoid conflict with snooze duration patch
+		//get notification repeat interval and max repeat values from cookie
+		this.notificationCookie = new Mojo.Model.Cookie("com.palm.app.calendar.notificationrepeat");
+		
+		if (this.notificationCookie) 
+		{
+			var notificationCookie = this.notificationCookie.get();
+
+			if (notificationCookie) 
+			{			
+				if(notificationCookie.notificationRepeatInterval)
+				{
+					this.notificationRepeatInterval = notificationCookie.notificationRepeatInterval;
+				}
+				else
+				{
+					//set default value to 2 minutes
+					this.notificationRepeatInterval = '2';
+				}
+				
+				if(notificationCookie.notificationMaxRepeat)
+				{
+					this.notificationMaxRepeat = notificationCookie.notificationMaxRepeat;
+				}
+				else
+				{
+					//set default value to unlimited
+					this.notificationMaxRepeat = '99999';
+				}
+			}
+		}
+		
 		this.service = getCalendarService();
 
 		this.reminders.observeReminders('alert', this);
@@ -60,6 +95,9 @@ var ReminderAssistant = Class.create({
 			}
 		}
 		Mojo.Log.info("$$$$$$$$ Reminder-assistant cleanup:end:");
+
+		//remove the Notification repeat task
+		this.removePlayAlarmSoundTask();
 	},
 	
 	remindersUpdated: function() {
@@ -95,6 +133,9 @@ var ReminderAssistant = Class.create({
 		this.scheduleAutoCloseTask();
 		this.updateDisplay();
 		Mojo.Log.info("$$$$$$$$ Reminder-assistant updateMostRecentReminder:end");
+
+		//setup the notification repeat task
+		this.schedulePlayAlarmSoundTask();
 	},
 
 	updateDisplay: function() {
@@ -373,6 +414,13 @@ var ReminderAssistant = Class.create({
 		this.reminders.stopObservingReminders('alert');
 		Mojo.Log.info("$$$$$$$$ Reminder-assistant closeAlert: window.close() ");
 		this.controller.window.close();
+		
+		//reset the notification repeat counter
+		if( this.dismissed || this.snoozed )
+		{
+			g_notificationRepeatCount = 0;
+		}
+			
 		Mojo.Log.info("$$$$$$$$ Reminder-assistant closeAlert: end ");
 	},
 	
@@ -383,6 +431,13 @@ var ReminderAssistant = Class.create({
 		Mojo.Log.info("$$$$$$$$ Reminder-assistant autoCloseAlert: end " + this.reminder.id);
 	},
 	
+	playAlarmSound: function() {
+		//temporarily set the snooze to 0 will immediately re-trigger allert to get our attention.
+		this.dismissed = false;
+		this.DEFAULT_SNOOZE = 0;
+		this.closeAlert();
+	},
+
 	specialCleanup:function(){
 		//we need to do this so that cleanup cleans the reminder rightaway		
 		Mojo.Log.info("$$$$$$$$ Reminder-assistant specialCleanup: window Name:" + this.controller.window.name);
@@ -432,6 +487,35 @@ var ReminderAssistant = Class.create({
 		Mojo.Log.info("$$$$$$$$ Reminder-assistant removeAutoCloseTask: end " + this.reminder.id);
 	},
 	
+	schedulePlayAlarmSoundTask: function() {
+		//retrigger reminder every X minutes until we acknowledge it.
+		//notificationRepeatInterval disables the notification repeat
+		//also check to make sure we have not exceeded the max repeat value
+		if( parseFloat(this.notificationRepeatInterval) != 0 && g_notificationRepeatCount < parseInt(this.notificationMaxRepeat))
+		{
+			g_notificationRepeatCount++;
+			
+			var playSoundTime = new Date();
+			playSoundTime = new Date(playSoundTime.getTime() + parseFloat(this.notificationRepeatInterval)*60*1000);
+
+			this.controller.serviceRequest('palm://com.palm.taskScheduler', {
+				method: 'updateTask',
+				parameters: {uri: 'palm://com.palm.applicationManager/open',
+				arguments: {'id': 'com.palm.app.calendar',
+						'params': {'playalarmsound': 'true'}},
+				key: 'calendar-playalarmsound',
+				start: {date: playSoundTime.toUTCString()}}
+			});
+		}
+	},
+
+	removePlayAlarmSoundTask: function() {
+		this.controller.serviceRequest('palm://com.palm.taskScheduler', {
+			method: 'removeTask',
+			parameters: {key: 'calendar-playalarmsound'}
+		});
+	},
+
   	replaceHTML: function(element, content) {
 		Mojo.Log.info("$$$$$$$$ Reminder-assistant replaceHTML:start");
       	var range = element.ownerDocument.createRange();
diff --git a/usr/palm/applications/com.palm.app.calendar/app/views/prefs/prefs-scene.html b/usr/palm/applications/com.palm.app.calendar/app/views/prefs/prefs-scene.html
index 3f1e673..9383d50 100644
--- a/usr/palm/applications/com.palm.app.calendar/app/views/prefs/prefs-scene.html
+++ b/usr/palm/applications/com.palm.app.calendar/app/views/prefs/prefs-scene.html
@@ -42,6 +42,25 @@
 	</div>
 </div>
 
+<div id='pv_notificationrepeat_div' class="palm-group">
+	<div class="palm-group-title" x-mojo-loc="">Notification Repeat</div>
+	 	<div class="palm-list">
+			<div id="pv_notification_repeat_interval" class="palm-row">
+				<div class="palm-row-wrapper">
+		 				<div class="label" x-mojo-loc="">Repeat Interval</div>
+		 				<div id="pv_notification_repeat_interval_value" class="title"></div>
+				</div>
+			</div>
+			
+			<div id="pv_notification_max_repeat" class="palm-row">
+				<div class="palm-row-wrapper">
+		 				<div class="label" x-mojo-loc="">Max Repeats</div>
+		 				<div id="pv_notification_max_repeat_value" class="title"></div>
+				</div>
+			</div>
+		</div>
+</div>	
+
 <div id='pv_defaulteventalarm_div' class="palm-group">
 	<div class="palm-group-title" x-mojo-loc="">Default event reminder</div>
 	 	<div class="palm-list">
