diff --git a/usr/palm/applications/com.palm.app.browser/app/controllers/page-applicationmenu.js b/usr/palm/applications/com.palm.app.browser/app/controllers/page-applicationmenu.js
index 6bf5870..d1d1e7b 100644
--- a/usr/palm/applications/com.palm.app.browser/app/controllers/page-applicationmenu.js
+++ b/usr/palm/applications/com.palm.app.browser/app/controllers/page-applicationmenu.js
@@ -37,6 +37,11 @@ MenuData.ApplicationMenu = {
 		checkEnabled: true
 	},
 	
+	TogglePrivate: {
+		label: $L('Enable Private Browsing'),
+		command: 'enable-private-cmd'
+	},
+	
 	ShowHistory: {
 		label: $L('History'),
 		command: 'show-history-cmd',
diff --git a/usr/palm/applications/com.palm.app.browser/app/controllers/page-assistant.js b/usr/palm/applications/com.palm.app.browser/app/controllers/page-assistant.js
index 388cffc..d15b6a7 100644
--- a/usr/palm/applications/com.palm.app.browser/app/controllers/page-assistant.js
+++ b/usr/palm/applications/com.palm.app.browser/app/controllers/page-assistant.js
@@ -93,8 +93,29 @@ PageAssistant.prototype.setup = function() {
 		this._updateOrientation();
 
 		// Allow override of 'back' gesture in landscape mode.
-		this.controller.useLandscapePageUpDown(true);
 
+		this.getTweaksOptions = new Mojo.Service.Request("palm://org.webosinternals.tweaks.prefs/", {
+				method: 'get', parameters: {'owner': "browser-behavior-options-tweaks", 
+				keys: ["gestureScroll", "goFullscreen"]},
+				onSuccess: function(response) {
+					if(response) {
+						if(response.gestureScroll == false) {
+							this.gestureScroll = false;
+						} else {
+							this.gestureScroll = true;
+						}
+						if(response.goFullscreen == true) {
+							this.goFullscreen = true;
+						} else {
+							this.goFullscreen = false;
+						}
+					}
+		}.bind(this)});
+		
+		this.controller.useLandscapePageUpDown(this.gestureScroll);
+		
+
+		
 		// Create the browser server status control.
 		this._browserServerStatus = new BrowserServerStatus(this.controller);
 		this._browserServerStatus.setup({
@@ -117,7 +138,10 @@ PageAssistant.prototype.setup = function() {
 		this.savedFlickRatio = scroller.mojo.kFlickRatio;
 		scroller.mojo.updatePhysicsParameters({flickSpeed: 0.12, flickRatio: 0.2});
 
-
+		if (this.goFullscreen) {
+			this.controller.enableFullScreenMode(true);
+		}
+		
 		// Listen for drag events, and stop them when appropriate
 		Mojo.Event.listen(this.controller.getSceneScroller(), Mojo.Event.dragStart, this._stopSceneScrolling, true);
 
@@ -217,6 +241,10 @@ PageAssistant.prototype._updateOrientation = function() {
 		this._orientation = Mojo.Controller.appController.getScreenOrientation();
 		targetWindow.PalmSystem.setWindowOrientation(this._orientation);
 	}
+	
+	if (this.goFullscreen) {
+			this.controller.enableFullScreenMode(true);
+	}
 };
 
 PageAssistant.prototype.orientationChanged = function(event) {
@@ -245,6 +273,10 @@ PageAssistant.prototype.orientationChanged = function(event) {
 	}
 
 	this._setOrientation(this._orientation);
+	
+	if (this.goFullscreen) {
+			this.controller.enableFullScreenMode(true);
+	}
 };
 
 /*
@@ -304,6 +336,11 @@ PageAssistant.prototype.activate = function(message) {
 		
 		this._updateOrientation();
 		
+		if (this.goFullscreen) {
+			this.controller.enableFullScreenMode(true);
+		}
+
+		
 		// Update any pending web preferences changes
 		AppAssistant.WebPreferences.activate(this._webView.mojo);
 
@@ -804,6 +841,20 @@ PageAssistant.prototype._setupMenus = function() {
 		};
 
 		this.controller.setupWidget(Mojo.Menu.appMenu, undefined, this.appMenuModel);
+		
+		this.getTweaksMainMenu = new Mojo.Service.Request("palm://org.webosinternals.tweaks.prefs/", {
+			method: 'get', parameters: {'owner': "browser-behavior-options-tweaks", 
+			keys: ["privateBrowsing", "viewSource"]},
+			onSuccess: function(response) {
+				if(response) {
+					if(response.privateBrowsing == true)
+						this.appMenuModel.items.push(this.togglePrivate = MenuData.ApplicationMenu.TogglePrivate);
+					if(response.viewSource == true)
+						this.appMenuModel.items.push({label:"View Source", command:"view-source-cmd"});
+				}
+		}.bind(this)});
+		
+		this.controller.modelChanged(this.appMenuModel);
 
 		// Create the URL Bar
 		this._addressBar = new AddressBar(this.controller);
@@ -1066,6 +1117,10 @@ PageAssistant.prototype._updateHistory = function() {
 	if (!this.currentUrl || (this.currentUrl.length === 0)) {
 		return;
 	}
+	
+	if (this.togglePrivate.enabled) {
+		return;
+	}
 
 	var title = this.currentTitle || null;
 	this.historyStore.addHistory(this.currentUrl, title, new Date(),
@@ -1946,6 +2001,10 @@ PageAssistant.prototype.moved = function(scrollState) {
 			this._addressBar.hide();
 			this.chrome.hide();
 
+			if(this.goFullscreen) {
+				this.controller.enableFullScreenMode(true);
+			}
+
 			// Only focus this webview widget if this assistant has
 			// focus. All page-assisants can receive 'moved' events
 			// so we have to be careful when explicitly setting the
@@ -1969,6 +2028,10 @@ PageAssistant.prototype.moved = function(scrollState) {
 		//Mojo.Log.info("-> TOP > 0 SO SHOWING");
 		this._addressBar.show();
 		this.chrome.show();
+		
+		if(this.goFullscreen) {
+			this.controller.enableFullScreenMode(false);
+		}
 
 	} else {
 		//Mojo.Log.info("-> TOP == 0 Do Nothing.");
@@ -2180,6 +2243,41 @@ PageAssistant.prototype.handleCommand = function(event) {
 				case MenuData.NavigationMenu.Back.command:
 					this._goBack();
 					break;
+				
+				//PRIVATE BROWSING
+					
+				case 'enable-private-cmd':
+					this.togglePrivate.command = 'disable-private-cmd';
+					this.togglePrivate.label = $L('Disable Private Browsing');
+					
+					this.togglePrivate.enabled = true;
+					
+					this.controller.modelChanged(this.appMenuModel);
+					Mojo.Controller.getAppController().showBanner("Private Browsing: Enabled!",  {source: 'notification'});
+					break;
+					
+				case 'disable-private-cmd':
+					this.togglePrivate.command = 'enable-private-cmd';
+					this.togglePrivate.label = $L('Enable Private Browsing');
+					
+					this.togglePrivate.enabled = false;
+					
+					this.controller.modelChanged(this.appMenuModel);
+					Mojo.Controller.getAppController().showBanner("Private Browsing: Disabled!",  {source: 'notification'});
+					break;		
+
+				//VIEW SOURCE
+				case "view-source-cmd":
+					this.controller.serviceRequest("palm://com.palm.applicationManager", {
+						method: "open",
+						parameters: {
+							id: "ca.canucksoftware.internalz",
+							params: {
+								target: "view-source://" + this.currentUrl
+							}
+						}
+					});
+					break;
 
 				case MenuData.NavigationMenu.Forward.command:
 					this._goForward();
diff --git a/usr/palm/applications/com.palm.app.browser/app/controllers/page-controls.js b/usr/palm/applications/com.palm.app.browser/app/controllers/page-controls.js
index 6ad7ebd..cb55074 100644
--- a/usr/palm/applications/com.palm.app.browser/app/controllers/page-controls.js
+++ b/usr/palm/applications/com.palm.app.browser/app/controllers/page-controls.js
@@ -112,7 +112,7 @@ PageControls.prototype={
 		// The spacer... right aligns the following button.
 		this._model.items.push(idleModel);
 		this._controller.modelChanged(this._model);
-
+		this._controller.setMenuVisible(Mojo.Menu.commandMenu, false);
 		this._currentPageModel = idleModel;
 	},
 
@@ -142,7 +142,7 @@ PageControls.prototype={
 			this._model.items.push(progressModel);
 			this._controller.modelChanged(this._model);
 			this._animation.start(0);
-
+			this._controller.setMenuVisible(Mojo.Menu.commandMenu, true);
 			this._currentPageModel = progressModel;
 
 		} catch (e) {
@@ -187,7 +187,7 @@ PageControls.prototype={
 			this._model.items.push(searchModel);
 			this._controller.modelChanged(this._model);
 			this._animation.start();
-
+			this._controller.setMenuVisible(Mojo.Menu.commandMenu, true);
 			this._currentPageModel = searchModel;
 
 		} catch (e) {
@@ -204,6 +204,7 @@ PageControls.prototype={
 					this._model.items[i].type='flash';
 					this._model.items[i].icon= MenuData.NavigationMenu.Cancel.icon;
 					this._model.items[i].command=MenuData.NavigationMenu.Cancel.command;
+					this._controller.setMenuVisible(Mojo.Menu.commandMenu, true);
 					break;
 				}
 				
@@ -219,6 +220,7 @@ PageControls.prototype={
 					this._model.items[i].type='idle';
 					this._model.items[i].icon= MenuData.NavigationMenu.Reload.icon;
 					this._model.items[i].command=MenuData.NavigationMenu.Reload.command;
+					this._controller.setMenuVisible(Mojo.Menu.commandMenu, false);
 					break;
 				}
 				
diff --git a/usr/palm/applications/com.palm.app.browser/app/controllers/startpage-assistant.js b/usr/palm/applications/com.palm.app.browser/app/controllers/startpage-assistant.js
index 0fbc276..8d767c9 100644
--- a/usr/palm/applications/com.palm.app.browser/app/controllers/startpage-assistant.js
+++ b/usr/palm/applications/com.palm.app.browser/app/controllers/startpage-assistant.js
@@ -24,6 +24,16 @@ StartpageAssistant.prototype.setup = function() {
 
 	// Allow override of 'back' gesture in landscape mode.
 	this.controller.useLandscapePageUpDown(true);
+	this.goFullscreen = false;
+	this.getTweaksOptions = new Mojo.Service.Request("palm://org.webosinternals.tweaks.prefs/", {
+			method: 'get', parameters: {'owner': "browser-behavior-options-tweaks", 
+			keys: ["gestureScroll"]},
+			onSuccess: function(response) {
+				if(response) {
+					if(response.gestureScroll == false)
+						this.controller.useLandscapePageUpDown(false);
+				}
+		}.bind(this)});
 
 	// Listen for scene scope keyboard events.
 	this.controller.listen(this.controller.sceneElement, Mojo.Event.keydown, this._onKeyDownEventHandler);
@@ -53,6 +63,16 @@ StartpageAssistant.prototype.setup = function() {
 			MenuData.ApplicationMenu.ShowBookmarks,
 			MenuData.ApplicationMenu.ShowHistory]
 	};
+	
+	this.getTweaksPrefs = new Mojo.Service.Request("palm://org.webosinternals.tweaks.prefs/", {
+			method: 'get', parameters: {'owner': "browser-behavior-options-tweaks", 
+			keys: ["privateBrowsing" ]},
+			onSuccess: function(response) {
+				if(response) {
+					if(response.privateBrowsing == true)
+						this.appMenuModel.items.splice(3,0,this.togglePrivate = MenuData.ApplicationMenu.TogglePrivate);
+				}
+		}.bind(this)});
 
 	this.controller.setupWidget(Mojo.Menu.appMenu, undefined, this.appMenuModel);
 
@@ -367,7 +387,27 @@ StartpageAssistant.prototype.handleCommand = function(event) {
 				case MenuData.ApplicationMenu.ShowHistory.command:
 					this._openHistoryView();
 					break;
-
+				
+				case 'enable-private-cmd':
+					this.togglePrivate.command = 'disable-private-cmd';
+					this.togglePrivate.label = $L('Disable Private Browsing');
+					
+					this.togglePrivate.enabled = true;
+					
+					this.controller.modelChanged(this.appMenuModel);
+					Mojo.Controller.getAppController().showBanner("Private Browsing: Enabled!",  {source: 'notification'});
+					break;
+					
+				case 'disable-private-cmd':
+					this.togglePrivate.command = 'enable-private-cmd';
+					this.togglePrivate.label = $L('Enable Private Browsing');
+					
+					this.togglePrivate.enabled = false;
+					
+					this.controller.modelChanged(this.appMenuModel);
+					Mojo.Controller.getAppController().showBanner("Private Browsing: Disabled!",  {source: 'notification'});
+					break;
+				
 				case MenuData.ApplicationMenu.ShowBookmarks.command:
 					this._openBookmarkView();
 					break;
