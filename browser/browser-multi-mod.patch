diff --git a/usr/palm/applications/com.palm.app.browser/app/controllers/chrome.js b/usr/palm/applications/com.palm.app.browser/app/controllers/chrome.js
index 9656522..bce7d9e 100644
--- a/usr/palm/applications/com.palm.app.browser/app/controllers/chrome.js
+++ b/usr/palm/applications/com.palm.app.browser/app/controllers/chrome.js
@@ -102,12 +102,39 @@ Chrome.prototype._hidePortrait = function() {
 	}
 };
 
+Chrome.prototype.show = UrlBar.prototype._showNoOp;
+Chrome.prototype.hide = UrlBar.prototype._hideNoOp;
+
 Chrome.prototype._showNoOp = function() {
 	// DO NOTHING - We don't show anything in landscape.	
+	var animator;
+	var element = this.controller.get(this._elementName);
+
+	// If we are visible then the current spacer height is 
+	if (element && (this._currentHeight === 0)) {
+		animator = Mojo.Animation.animateStyle(element, 'height', 'linear', {
+			from: 0,
+			to: this._maxHeight,
+			duration: 0.15,
+			reverse: false
+		});
+		this._currentHeight = this._maxHeight;
+	}
 };
 
 Chrome.prototype._hideNoOp = function() {
 	// DO NOTHING - We should not be displayed in landscape.
+	var animator;
+	var element = this.controller.get(this._elementName);
+	if (element && (this._currentHeight > 0)) {
+		animator = Mojo.Animation.animateStyle(element, 'height', 'linear', {
+			from: 0,
+			to: this._maxHeight,
+			duration: 0.15,
+			reverse: true
+		});
+		this._currentHeight = 0;
+	}
 };
 
 Chrome.prototype.isVisible = function() {
diff --git a/usr/palm/applications/com.palm.app.browser/app/controllers/downloaddialog-assistant.js b/usr/palm/applications/com.palm.app.browser/app/controllers/downloaddialog-assistant.js
new file mode 100644
index 0000000..d039415
--- /dev/null
+++ b/usr/palm/applications/com.palm.app.browser/app/controllers/downloaddialog-assistant.js
@@ -0,0 +1,46 @@
+/**
+ * A dialog assistant for display of yes/no box.
+ */
+DownloadDialogAssistant = Class.create({
+
+	initialize: function(params) {
+		this.onDismiss = params.onDismiss;
+		this.onAccept = params.onAccept;
+		this.controller= params.sceneAssistant.controller;
+
+		// Button handlers.
+		this.onDismissHandler = this.handleDismiss.bindAsEventListener(this);
+		this.onAcceptHandler = this.handleAccept.bindAsEventListener(this);
+	},
+
+	setup: function(widget) {
+		this.widget = widget;
+		this.controller.get('acceptButton').addEventListener(Mojo.Event.tap, this.onAcceptHandler);
+		this.controller.get('acceptButton').focus();
+		this.controller.get('dismissButton').addEventListener(Mojo.Event.tap, this.onDismissHandler);
+		this.controller.get('dismissButton').focus();
+	},
+	handleDismiss: function() {
+		this.onDismiss();
+		delete this.onDismiss;
+		this.widget.mojo.close();
+	},
+	handleAccept: function() {
+		this.onAccept();
+		delete this.onAccept;
+		delete this.onDismiss;
+		this.widget.mojo.close();
+        },
+
+	cleanup: function() {
+		Mojo.Log.info("NetworkDialogAssistant#cleanup()");
+		Mojo.Event.stopListening(this.controller.get('dismissButton'), Mojo.Event.tap, this.onDismissHandler);
+		Mojo.Event.stopListening(this.controller.get('acceptButton'), Mojo.Event.tap, this.onAcceptHandler);
+
+		// Send a dismiss if NOT already sent a response
+		if (this.onDismiss) {
+			this.onDismiss();
+		}
+	}
+});
+
diff --git a/usr/palm/applications/com.palm.app.browser/app/controllers/page-assistant.js b/usr/palm/applications/com.palm.app.browser/app/controllers/page-assistant.js
index 09c898f..1698976 100644
--- a/usr/palm/applications/com.palm.app.browser/app/controllers/page-assistant.js
+++ b/usr/palm/applications/com.palm.app.browser/app/controllers/page-assistant.js
@@ -627,6 +627,7 @@ PageAssistant.prototype._onWebViewSingleTap = function(event) {
 				{label: $L('Open In New Card'), command:'openNew'},
 				{label: $L('Share Link'), command:'shareUrl'},
 				{label: $L('Copy URL'), command:'copyUrl'},
+				{label: $L('Download URL'), command:'downloadUrl'},
 				{label: $L('Copy to Photos'), command:'copyToPhotos'},
 				{label: $L('Share Image'), command:'shareImage'},
 				{label: $L('Set Wallpaper'), command:'setWallpaper'}
@@ -678,6 +679,9 @@ PageAssistant.prototype._onWebViewSingleTap = function(event) {
 					case 'copyUrl':
 						this.controller.stageController.setClipboard(urlInfo.url);
 						break;
+					case 'downloadUrl':
+						this._downloadResource(urlInfo.url);
+						break;
 					case 'copyToPhotos':
 						this._webView.mojo.saveImageAtPoint(tapPt.left, tapPt.top, "/media/internal", saveImageCallback);
 						break;
@@ -698,6 +702,7 @@ PageAssistant.prototype._onWebViewSingleTap = function(event) {
 					usedItems.push( findItem('openNew') );
 					usedItems.push( findItem('shareUrl') );
 					usedItems.push( findItem('copyUrl') );
+					usedItems.push( findItem('downloadUrl') );
 				}
 
 				if (response.src) {
@@ -1214,6 +1219,31 @@ PageAssistant.prototype._newBrowserPage = function(url, pageIdentifier){
  */
 PageAssistant.prototype._streamResource = function(uri, appid, mimeType){
 
+	if(appid === 'com.palm.app.email' || appid === 'com.palm.app.docviewer' || appid === 'com.palm.app.pdfviewer' || appid === 'com.palm.app.maps' || appid === 'com.palm.app.phone' || appid === 'com.palm.app.youtube')
+	//a phone #, Google Map, docviewer, email, pdfviewer, or YouTube link was clicked, so we bypass the download dialog and open the app.
+	{
+		var params = {target: uri, mimeType: mimeType};
+		this.controller.serviceRequest('palm://com.palm.applicationManager',{
+			method: 'open',
+			parameters: {
+				'id': appid,
+				'params': params
+			}}
+		);
+		return;
+	}
+	this._downloadWidgetElement = this.controller.showDialog({
+		uri: uri,
+		mimeType: mimeType,
+		appid: appid,
+		template: 'download/download-stream-popup',
+		assistant: new DownloadDialogAssistant({
+			sceneAssistant: this,
+			onDismiss: function(cParams) { // DOWNLOAD
+				this._downloadResource(uri);
+			}.bind(this),
+			onAccept: function(cParams) { // STREAM
+
 	// Only a few select applications can be
 	var crossAppScene = {
 		'com.palm.app.videoplayer': 'nowplaying',
@@ -1221,11 +1251,9 @@ PageAssistant.prototype._streamResource = function(uri, appid, mimeType){
 	};
 	var params = {target: uri, mimeType: mimeType};
 	if (crossAppScene[appid]) {
-
 		var args = { appId: appid, name: crossAppScene[appid] };
 		this.controller.stageController.pushScene(args, params);
-	}
-	else {
+	} else {
 		this.controller.serviceRequest('palm://com.palm.applicationManager', {
 			method: 'open',
 			parameters: {
@@ -1234,6 +1262,9 @@ PageAssistant.prototype._streamResource = function(uri, appid, mimeType){
 			}
 		});
 	}
+			}.bind(this)
+		});
+	});
 };
 
 /**
@@ -2304,6 +2335,28 @@ PageAssistant.prototype._onKeyDownEvent = function(event) {
 		// allowed to trigger the bar.
 		if (this._addressBar.isAGotoAddressBarEvent(event.originalEvent)) {
 			this._gotoUrlBar();
+		} else {
+			var key = event.originalEvent.keyCode;
+			var scroller = this.controller.getSceneScroller();
+			var pageHeight = scroller.mojo.scrollerSize().height;
+			if (pageHeight > 50) pageHeight = pageHeight - 50;
+			if (key == Mojo.Char.spaceBar) {
+				scroller.mojo.adjustBy(0, -1*pageHeight);
+				this._addressBar.hide();
+			} else if (key == Mojo.Char.period) {
+				scroller.mojo.adjustBy(0, pageHeight);
+			} else if (key == Mojo.Char.sym) {
+				scroller.mojo.adjustBy(0, -25);
+				this._addressBar.hide();
+			} else if (key == Mojo.Char.backspace) {
+				scroller.mojo.revealTop(0);
+				this._addressBar.show();
+			} else if (key == Mojo.Char.enter) {
+				scroller.mojo.revealBottom(0);
+				this._addressBar.hide();
+			} else {
+				Mojo.Log.error("Ignoring keyCode", key);
+			}
 		}
 	}
 };
diff --git a/usr/palm/applications/com.palm.app.browser/app/controllers/urlbar.js b/usr/palm/applications/com.palm.app.browser/app/controllers/urlbar.js
index 735e4e3..af393bc 100644
--- a/usr/palm/applications/com.palm.app.browser/app/controllers/urlbar.js
+++ b/usr/palm/applications/com.palm.app.browser/app/controllers/urlbar.js
@@ -49,6 +49,10 @@ UrlBar.prototype.setOrientation = function(orientation) {
 	if (orientation !== 'up') {
 		// In landscape and down we ALWAYS hide the BAR so we make sure it's
 		// already hidden by calling' 'hide'.
+		this.show = this._showNoOp;
+		this.hide = this._hideNoOp;
+	} else {
+		// Default is portrait.
 		this._hidePortrait();
 	}
 
@@ -75,6 +79,12 @@ UrlBar.prototype.setup = function(properties) {
 	this._onPropertyChange = properties.onPropertyChange || function(){};
 	this._configOrientation(properties.orientation || 'up');
 
+	if (properties.orientation === 'up') {                               
+		this.owidth = 271;                                                
+	} else {                                                             
+		this.owidth = 430;                                                
+	}
+
 	this.models = {
 		urlInput: {
 			template: 'page/url-field',
@@ -92,7 +102,7 @@ UrlBar.prototype.setup = function(properties) {
 				url: ''
 			},
 
-			width: 271
+			width: this.owidth
 		},
 
 		// Beware: These are shallow copies.
@@ -360,12 +370,25 @@ UrlBar.prototype._hidePortrait = function() {
 	this.controller.setMenuVisible(Mojo.Menu.viewMenu, false);
 };
 
+UrlBar.prototype.show = UrlBar.prototype._showNoOp;
+UrlBar.prototype.hide = UrlBar.prototype._hideNoOp;
+
 UrlBar.prototype._showNoOp = function() {
 	// DO NOTHING - We don't show anything in landscape.
+	var menuAssistant = this.controller._menu.assistant;
+	var spacerHeight = menuAssistant.viewSpacerHeight;
+
+	menuAssistant.viewSpacerHeight = 0;
+	this.controller.setMenuVisible(Mojo.Menu.viewMenu, true);
 };
 
 UrlBar.prototype._hideNoOp = function() {
 	// DO NOTHING - We should not be displayed in landscape.
+	var menuAssistant = this.controller._menu.assistant;
+	var spacerHeight = menuAssistant.viewSpacerHeight;
+
+	menuAssistant.viewSpacerHeight = 0;
+	this.controller.setMenuVisible(Mojo.Menu.viewMenu, false);
 };
 
 UrlBar.prototype.isVisible = function() {
diff --git a/usr/palm/applications/com.palm.app.browser/app/views/download/download-stream-popup.html b/usr/palm/applications/com.palm.app.browser/app/views/download/download-stream-popup.html
new file mode 100644
index 0000000..ed9be14
--- /dev/null
+++ b/usr/palm/applications/com.palm.app.browser/app/views/download/download-stream-popup.html
@@ -0,0 +1,9 @@
+<div id="palm-dialog-content" class="palm-dialog-content">
+	<div class="dialog-message" x-mojo-loc="">This file type has been registered as a streaming media file. Would you like to download it to /media/internal/downloads instead?</div>
+</div>
+
+<div class="palm-dialog-buttons">
+	<div class="dismiss palm-button" id="acceptButton" x-mojo-loc="" x-mojo-tap-highlight="momentary">Stream</div>
+	<div class="dismiss palm-button" id="dismissButton" x-mojo-loc="" x-mojo-tap-highlight="momentary">Download</div>
+</div>
+
diff --git a/usr/palm/applications/com.palm.app.browser/sources.json b/usr/palm/applications/com.palm.app.browser/sources.json
index 54187ce..a66b9f5 100644
--- a/usr/palm/applications/com.palm.app.browser/sources.json
+++ b/usr/palm/applications/com.palm.app.browser/sources.json
@@ -48,6 +48,9 @@
   	"source": "app\/controllers\/download-controller.js",
   },
   {  
+	"source":"app\/controllers\/downloaddialog-assistant.js"
+  },
+  {  
   	"source": "app\/controllers\/preferences-assistant.js",
   },
   {
diff --git a/usr/palm/applications/com.palm.app.browser/stylesheets/browser.css b/usr/palm/applications/com.palm.app.browser/stylesheets/browser.css
index baf23e2..609dbd3 100644
--- a/usr/palm/applications/com.palm.app.browser/stylesheets/browser.css
+++ b/usr/palm/applications/com.palm.app.browser/stylesheets/browser.css
@@ -736,7 +736,7 @@ div#historyScroller {
 }
 
 .search-results-container .palm-list {
-	width: 304px;
+	width: 95%;
 }
 
 .search-results-container .search.first {
