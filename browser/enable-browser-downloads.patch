diff --git a/usr/palm/applications/com.palm.app.browser/app/controllers/global_code.js b/usr/palm/applications/com.palm.app.browser/app/controllers/global_code.js
index b2c8848..d541ea7 100644
--- a/usr/palm/applications/com.palm.app.browser/app/controllers/global_code.js
+++ b/usr/palm/applications/com.palm.app.browser/app/controllers/global_code.js
@@ -1449,6 +1449,8 @@ PageAssistant.prototype.setup = function() {
 		this._webView.addEventListener(Mojo.Event.webViewUrlRedirect, this._onUrlRedirect.bind(this), false);
 		this._webView.addEventListener(Mojo.Event.webViewModifierTap, this._onModifierTapHandler, false);
 		this._webView.addEventListener(Mojo.Event.webViewUpdateHistory, this._onUpdateHistoryHandler, false);
+	    this._downloadController = new DownloadController(this.controller);
+        this._downloadController.setup();
 	}
 	catch (e) {
 		Mojo.Log.logException(e, 'PageAssistant#setup');
@@ -2287,28 +2289,116 @@ PageAssistant.prototype._newBrowserPage = function(url, pageIdentifier){
  */
 PageAssistant.prototype._streamResource = function(uri, appid, mimeType){
 
-	Mojo.Log.info("Streaming: '%s' with '%s' (%s)", uri, appid, mimeType);
-
+	Mojo.Log.error("Streaming: '%s' with '%s' (%s)", uri, appid, mimeType);
+    	if(appid === 'com.palm.app.email')
+{
+    //an email was clicked, so we bypass the download dialog and open the email app.
+    var params = {target: uri, mimeType: mimeType};
+    this.controller.serviceRequest('palm://com.palm.applicationManager',{
+        method: 'open',
+        parameters: {
+            'id': appid,
+            'params': params
+        }}
+    );
+    return;
+}
+		if(appid === 'com.palm.app.docviwer')
+{
+    //a doc was clicked, so we bypass the download dialog and open the docviewer app.
+    var params = {target: uri, mimeType: mimeType};
+    this.controller.serviceRequest('palm://com.palm.applicationManager',{
+        method: 'open',
+        parameters: {
+            'id': appid,
+            'params': params
+        }}
+    );
+    return;
+}
+		if(appid === 'com.palm.app.pdfviewer')
+{
+    //a pdf was clicked, so we bypass the download dialog and open the pdfviewer app.
+    var params = {target: uri, mimeType: mimeType};
+    this.controller.serviceRequest('palm://com.palm.applicationManager',{
+        method: 'open',
+        parameters: {
+            'id': appid,
+            'params': params
+        }}
+    );
+    return;
+}
+		if(appid === 'com.palm.app.maps')
+{
+    //a map was clicked, so we bypass the download dialog and open the maps app.
+    var params = {target: uri, mimeType: mimeType};
+    this.controller.serviceRequest('palm://com.palm.applicationManager',{
+        method: 'open',
+        parameters: {
+            'id': appid,
+            'params': params
+        }}
+    );
+    return;
+}
+		if(appid === 'com.palm.app.youtube')
+		{
+    //a youtube video was clicked, so we bypass the download dialog and open the youtube app.
+    var params = {target: uri, mimeType: mimeType};
+    this.controller.serviceRequest('palm://com.palm.applicationManager',{
+        method: 'open',
+        parameters: {
+            'id': appid,
+            'params': params
+        }}
+    );
+    return;
+}
+		if(appid === 'com.palm.app.phone')
+{		
+    //a phone # was clicked, so we bypass the download dialog and open the phone app.
+    var params = {target: uri, mimeType: mimeType};
+    this.controller.serviceRequest('palm://com.palm.applicationManager',{
+        method: 'open',
+        parameters: {
+            'id': appid,
+            'params': params
+        }}
+    );
+    return;
+}
+    this._downloadWidgetElement = this.controller.showDialog({
+        uri: uri,
+        mimeType: mimeType,
+        appid: appid,
+        template: 'download/download-stream-popup',
+        assistant: new DownloadDialogAssistant({
+        sceneAssistant: this,
+        onDismiss: function(cParams) { // DOWNLOAD
+                //this._onPopupHandler('close');
+                this._downloadController.downloadResource(uri);
+        }.bind(this),
+        onAccept: function(cParams) { // STREAM
+                var params = {target: uri, mimeType: mimeType, appid: appid};
 	// Only a few select applications can be
-	crossAppScene = {
+                var crossAppScene = {
 		'com.palm.app.videoplayer': 'nowplaying',
 		'com.palm.app.streamingmusicplayer': 'nowplaying'
 	};
-	var params = {target: uri, mimeType: mimeType};
+                //this._onPopupHandler('close');
 	if (crossAppScene[appid]) {
-
 		var args = { appId: appid, name: crossAppScene[appid] };
 		this.controller.stageController.pushScene(args, params);
 	}
 	else {
-		this.controller.serviceRequest('palm://com.palm.applicationManager', {
-			method: 'open',
-			parameters: {
-				'id': appid,
-				'params': params
+                    this._downloadController.downloadResource(uri);
 			}
+        }.bind(this)})
 		});
-	}
+    // Record we have a popup
+    //this._onPopupHandler('open');
+
 };
 
 /**
@@ -2323,11 +2413,24 @@ PageAssistant.prototype._downloadResource = function(uri) {
 	try {
 		// We should no longer download a resource but inform the user
 		// we are unable to perform the download.
-		this.controller.showAlertDialog({
-			onChoose: function(value) { /* Do Nothing */},
-			message: $L('Cannot find an application which can open this file.'),
-			choices:[{label:$L('OK'), value:'1', type:'dismiss'}]
+                if (!this._downloadWidgetElement) {
+                        this._downloadWidgetElement = this.controller.showDialog({
+                                template: 'download/download-popup',
+                                assistant: new DownloadDialogAssistant({
+                                        sceneAssistant: this,
+                                        onDismiss: function() {
+                                                //this._onPopupHandler('close');
+                                                delete this._downloadWidgetElement;
+                                        }.bind(this),
+                                        onAccept: function() {
+                                                //this._onPopupHandler('close');
+                                                this._downloadController.downloadResource(uri);
+                                        }.bind(this)})
 		});
+
+                        // Record we have a popup
+                        //this._onPopupHandler('open');
+                }
 	} catch (e) {
 		Mojo.Log.logException(e, "#_downloadResource");
 	}
@@ -3167,6 +3270,31 @@ PageAssistant.prototype._onKeyDownEvent = function(event) {
 		// allowed to trigger the bar.
 		if (this._addressBar.isAGotoAddressBarEvent(event.originalEvent)) {
 			this._gotoUrlBar();
+               } else {
+                       var key = event.originalEvent.keyCode;
+                       var scroller = this.controller.getSceneScroller();
+                       var pageHeight = scroller.mojo.scrollerSize().height;
+                       if (pageHeight > 50) pageHeight = pageHeight - 50;
+                       if (key == 32) {
+                               // alternate method for scrolling, gives visual feedback, but slower
+                               //var currentTop = scroller.mojo.getScrollPosition().top;
+                               //currentTop += scroller.mojo.scrollerSize().height - 50;
+                               //scroller.mojo.scrollTo(undefined, currentTop, true);
+                               scroller.mojo.adjustBy(0, -1*pageHeight);
+                               this._addressBar.hide();
+                       } else if (key == 0) {
+                               scroller.mojo.adjustBy(0, pageHeight);
+                       } else if (key == 190) {
+                               scroller.mojo.adjustBy(0, -25);
+                               this._addressBar.hide();
+                       } else if (key == 8) {
+                               scroller.mojo.revealTop(0);
+                       } else if (key == 13) {
+                               scroller.mojo.revealBottom(0);
+                               this._addressBar.hide();
+                       } else {
+                               Mojo.Log.error("Ignoring keyCode", key);
+                       }
 		}
 	}
 };
@@ -4956,8 +5084,10 @@ UrlBar.prototype.isAGotoUrlBarKey = function(keycode) {
 UrlBar.prototype.setOrientation = function(orientation) {
 
 	if (orientation !== 'up') {
-		// In landscape and down we ALWAYS hide the BAR so we make sure it's
-		// already hidden by calling' 'hide'.
+		this.show = this._showNoOp;
+		this.hide = this._hideNoOp;
+	} else {
+		// Default is portrait.
 		this._hidePortrait();
 	}
 
@@ -4984,6 +5114,12 @@ UrlBar.prototype.setup = function(properties) {
 	this._onPropertyChange = properties.onPropertyChange || function(){};
 	this._configOrientation(properties.orientation || 'up');
 
+        if (properties.orientation === 'up') {                               
+                owidth = 271;                                                
+        } else {                                                             
+                owidth = 430;                                                
+        }                                                                    
+                
 	this.models = {
 		urlInput: {
 			template: 'page/url-field',
@@ -5001,7 +5137,7 @@ UrlBar.prototype.setup = function(properties) {
 				url: ''
 			},
 
-			width: 271
+			width: owidth
 		},
 
 		// Beware: These are shallow copies.
@@ -5327,12 +5463,25 @@ UrlBar.prototype._hidePortrait = function() {
 	this.controller.setMenuVisible(Mojo.Menu.viewMenu, false);
 };
 
+UrlBar.prototype.show = UrlBar.prototype._showNoOp;
+UrlBar.prototype.hide = UrlBar.prototype._hideNoOp;
+
 UrlBar.prototype._showNoOp = function() {
-	// DO NOTHING - We don't show anything in landscape.
+
+	var menuAssistant = this.controller._menu.assistant;
+	var spacerHeight = menuAssistant.viewSpacerHeight;
+
+	menuAssistant.viewSpacerHeight = 0;
+	this.controller.setMenuVisible(Mojo.Menu.viewMenu, true);
 };
 
 UrlBar.prototype._hideNoOp = function() {
-	// DO NOTHING - We should not be displayed in landscape.
+
+	var menuAssistant = this.controller._menu.assistant;
+	var spacerHeight = menuAssistant.viewSpacerHeight;
+
+	menuAssistant.viewSpacerHeight = 0;
+	this.controller.setMenuVisible(Mojo.Menu.viewMenu, false);
 };
 
 UrlBar.prototype.isVisible = function() {
@@ -5738,12 +5887,43 @@ Chrome.prototype._hidePortrait = function() {
 	}
 };
 
+Chrome.prototype.show = UrlBar.prototype._showNoOp;
+Chrome.prototype.hide = UrlBar.prototype._hideNoOp;
+
 Chrome.prototype._showNoOp = function() {
-	// DO NOTHING - We don't show anything in landscape.	
+	
+	var animator;
+	var element = this.controller.get(this._elementName);
+	
+	// If we are visible then the current spacer height is 
+	if (element && (this._currentHeight === 0)) {
+		animator = Mojo.Animation.animateStyle(element, 'height', 'linear', {
+			from: 0,
+			to: this._maxHeight,
+			duration: 0.15,
+			reverse: false
+		});
+	
+		this._currentHeight = this._maxHeight;
+	}
 };
 
 Chrome.prototype._hideNoOp = function() {
-	// DO NOTHING - We should not be displayed in landscape.
+
+	var animator;
+	var element = this.controller.get(this._elementName);
+
+	if (element && (this._currentHeight > 0)) {
+		animator = Mojo.Animation.animateStyle(element, 'height', 'linear', {
+			from: 0,
+			to: this._maxHeight,
+			duration: 0.15,
+			reverse: true
+		});
+	
+	
+		this._currentHeight = 0;
+	}
 };
 
 Chrome.prototype.isVisible = function() {
diff --git a/usr/palm/applications/com.palm.app.browser/app/views/download/download-container.html b/usr/palm/applications/com.palm.app.browser/app/views/download/download-container.html
index b5f171f..a838cda 100644
--- a/usr/palm/applications/com.palm.app.browser/app/views/download/download-container.html
+++ b/usr/palm/applications/com.palm.app.browser/app/views/download/download-container.html
@@ -1,3 +1,3 @@
 <div x-mojo-elements="List" class="palm-list no-lines">
-	#{listElements}
+	#{-listElements}
 </div>
\ No newline at end of file
diff --git a/usr/palm/applications/com.palm.app.browser/app/views/page/page-scene.html b/usr/palm/applications/com.palm.app.browser/app/views/page/page-scene.html
index a8fc62d..68bad1b 100644
--- a/usr/palm/applications/com.palm.app.browser/app/views/page/page-scene.html
+++ b/usr/palm/applications/com.palm.app.browser/app/views/page/page-scene.html
@@ -16,5 +16,9 @@
 <div id="server-disconnected" class="palm-scrim"> 
 	<div id="server-disconnected-spinner" x-mojo-element="Spinner"></div> 
 </div> 
+<div id="downloadListScroller" class="browser-download" x-mojo-element="Scroller">
+	<div id="downloadList" class="palm-list" x-mojo-element="List"></div>
+</div>
+
 
 
diff --git a/usr/palm/applications/com.palm.app.browser/sources.json b/usr/palm/applications/com.palm.app.browser/sources.json
index bc485bf..74fb77a 100644
--- a/usr/palm/applications/com.palm.app.browser/sources.json
+++ b/usr/palm/applications/com.palm.app.browser/sources.json
@@ -1,5 +1,17 @@
 [
  {
+	"source":"app\/models\/download-model.js"
+ },
+ {
+	"source":"app\/controllers\/download-request.js"
+ },
+ {
+	"source":"app\/controllers\/download-controller.js"
+ },
+ {
+    "source":"app\/controllers\/downloaddialog-assistant.js"
+ },
+ {
   "source": "app\/controllers\/global_code.js"
  }
 ]
diff --git a/usr/palm/applications/com.palm.app.browser/stylesheets/browser.css b/usr/palm/applications/com.palm.app.browser/stylesheets/browser.css
index 4be566b..5a0f544 100644
--- a/usr/palm/applications/com.palm.app.browser/stylesheets/browser.css
+++ b/usr/palm/applications/com.palm.app.browser/stylesheets/browser.css
@@ -753,7 +753,7 @@ div#historyScroller {
 }
 
 .search-results-container .palm-list {
-	width: 304px;
+	width=100%;
 }
 
 .search-results-container .search.first {
