diff --git a/usr/lib/luna/system/luna-systemui/app/controllers/devicemenu-assistant.js b/usr/lib/luna/system/luna-systemui/app/controllers/devicemenu-assistant.js
index 08f7f75..11300b2 100644
--- a/usr/lib/luna/system/luna-systemui/app/controllers/devicemenu-assistant.js
+++ b/usr/lib/luna/system/luna-systemui/app/controllers/devicemenu-assistant.js
@@ -29,10 +29,14 @@ var DevicemenuAssistant = Foundations.Class.create({
 		this.controller.get('palm-device-menu').addClassName('palm-touch-rows-'+Mojo.Environment.DeviceInfo.touchableRows);
 			
 		var date = new Date();
-		this.controller.get('dm_date').innerHTML = Mojo.Format.formatDate(date,{date:'EEE '}) +  Mojo.Format.formatDate(date,{date:'long'});
+		this.controller.get('dm_date').innerHTML = Mojo.Format.formatDate(date,{date:'EEE '}) +  Mojo.Format.formatDate(date,{date:'long'}) +
+			" " + Mojo.Format.formatPercent(this.barAssistant.getBatteryLevel());
 		var msg = $L("Battery: #{batlevel}");
 		this.controller.get('dm_battery').innerHTML = new Template(msg).evaluate({"batlevel": Mojo.Format.formatPercent(this.barAssistant.getBatteryLevel())});
-						
+		this.controller.get('dm_battery').style.display = 'none';
+		this.controller.get('dm_battery').parentNode.style.display = 'none';
+		this.controller.get('dm_battery').parentNode.parentNode.style.display = 'none';
+
 		this.modesModel = {scrollbars: false, mode: "vertical"},
 		this.controller.setupWidget('devicescroller', {}, this.modesModel);
 		this.menuscroller = this.controller.get('devicescroller');
@@ -59,6 +63,67 @@ var DevicemenuAssistant = Foundations.Class.create({
 		this.controller.get('dm_ime').hide();
 		this.controller.hideWidgetContainer(this.controller.get('dm_ime'));
 		
+		var injection = this.controller.get('dm_airplanemode');
+
+		var newDiv1 = this.controller.document.createElement("div");
+		newDiv1.setAttribute("id", "gsm_umts");
+		newDiv1.setAttribute("x-mojo-tap-highlight", "momentary");
+		newDiv1.setAttribute("class", "palm-row");
+		newDiv1.innerHTML = '<div class="palm-row-wrapper"><div class="title truncating-text">' +
+				'<div class="label right" id="ratStatus">&nbsp;</div><span>Network Type</span></div>' +
+				'</div>';
+		injection.parentNode.insertBefore(newDiv1, injection);
+
+		var newDiv2 = this.controller.document.createElement("div");
+		newDiv2.setAttribute("id", "gsmdetails");
+		newDiv2.setAttribute("x-mojo-element", "Drawer");
+		newDiv2.innerHTML = '<div id="gsm_umts_auto" class="palm-row first" x-mojo-tap-highlight="momentary"><div class="palm-row-wrapper">' +
+				'<div class="title truncating-text"><span>Auto</span></div></div></div>' +
+				'<div id="gsm_umts_2g" class="palm-row" x-mojo-tap-highlight="momentary"><div class="palm-row-wrapper">' +
+				'<div class="title truncating-text"><span>2G</span></div></div></div>' +
+				'<div id="gsm_umts_3g" class="palm-row" x-mojo-tap-highlight="momentary"><div class="palm-row-wrapper">' +
+				'<div class="title truncating-text"><span>3G</span></div></div></div>' +
+				'<div id="gsm_data" class="palm-row last" x-mojo-tap-highlight="momentary"><div class="palm-row-wrapper">' +
+				'<div class="title truncating-text"><span>Data</span></div></div></div>';
+		injection.parentNode.insertBefore(newDiv2, injection);
+
+		var newDiv3 = this.controller.document.createElement("div");
+		newDiv3.setAttribute("class", "palm-section-divider");
+		injection.parentNode.insertBefore(newDiv3, injection);
+
+		var newDiv4 = this.controller.document.createElement("div");
+		newDiv4.setAttribute("id", "dm_gps");
+		newDiv4.setAttribute("x-mojo-tap-highlight", "momentary");
+		newDiv4.setAttribute("class", "palm-row");
+		newDiv4.innerHTML = '<div class="palm-row-wrapper"><div class="title truncating-text"><div class="label right" id="gpsStatus">&nbsp;</div>' +
+				'<span x-mojo-loc="">GPS</span></div></div>';
+		injection.parentNode.insertBefore(newDiv4, injection);
+
+		this.controller.setupWidget('gsmdetails', {modelProperty:'myOpenProperty'}, this.drawerModel);
+		this.gsmdrawer = this.controller.get('gsmdetails');
+		
+		injection = this.controller.get('dm_wifi');
+
+		newDiv1 = this.controller.document.createElement("div");
+		newDiv1.setAttribute("id", "brightRow");
+		newDiv1.setAttribute("x-mojo-tap-highlight", "momentary");
+		newDiv1.setAttribute("class", "palm-row");
+		newDiv1.innerHTML = '<div class="palm-row-wrapper"><div id="dm_brightness" class="title"></div></div>';
+		injection.parentNode.insertBefore(newDiv1, injection);
+
+		newDiv2 = this.controller.document.createElement("div");
+		newDiv2.setAttribute("id", "brightdetails");
+		newDiv2.setAttribute("x-mojo-element", "Drawer");
+		newDiv2.innerHTML = '<div class="palm-row first"><div class="palm-row-wrapper"><div x-mojo-element="Slider" id="brightSlider" style="padding-top: 30px; height: 50px;"></div></div></div>';
+		injection.parentNode.insertBefore(newDiv2, injection);
+
+		newDiv3 = this.controller.document.createElement("div");
+		newDiv3.setAttribute("class", "palm-section-divider");
+		injection.parentNode.insertBefore(newDiv3, injection);
+
+		this.controller.setupWidget('brightSlider', {minValue: 0, maxValue: 100}, this.brightModel = { value: 50});
+		this.controller.setupWidget('brightdetails', {modelProperty:'myOpenProperty'}, this.drawerModel);
+
 		this.wifiListModel = {
 			items: this.wifiAPList
         };     
@@ -95,6 +160,8 @@ var DevicemenuAssistant = Foundations.Class.create({
 			this.controller.get('dm_airplanemode_status').innerHTML = $L('Turn off Airplane Mode');
 		else
 			this.controller.get('dm_airplanemode_status').innerHTML = $L('Turn on Airplane Mode');
+
+		this.controller.get('ratStatus').innerText = "???";
 		
 		var btstate = this.barAssistant.getCurrentBluetoothState();
 		if(btstate === 'Off') {
@@ -150,6 +217,9 @@ var DevicemenuAssistant = Foundations.Class.create({
 	},
 	
 	activate: function() {
+		this.controller.get('dm_gps').addEventListener(Mojo.Event.tap, this.toggleGPS.bind(this));
+		this.controller.get('brightSlider').addEventListener(Mojo.Event.propertyChange, this.handleBrightSlider.bind(this));
+		this.controller.get('brightRow').addEventListener(Mojo.Event.tap, this.handleBrightTap.bind(this));
 		this.controller.get('dm_airplanemode').addEventListener(Mojo.Event.tap, this.toggleAirplaneMode.bind(this));
 		this.controller.get('wifilist').addEventListener(Mojo.Event.listTap,this.handleWiFiTap.bind(this));
 		this.controller.get('btlist').addEventListener(Mojo.Event.listTap,this.handleBTTap.bind(this));
@@ -157,10 +227,15 @@ var DevicemenuAssistant = Foundations.Class.create({
 		this.controller.get('dm_wifi').addEventListener(Mojo.Event.tap, this.togglewifiList.bind(this));
 		this.controller.get('dm_vpn').addEventListener(Mojo.Event.tap, this.toggleVPNList.bind(this));
 		this.controller.get('dm_bluetooth').addEventListener(Mojo.Event.tap, this.togglebluetoothList.bind(this));
+		this.controller.get('gsm_umts').addEventListener(Mojo.Event.tap, this.togglegsmList.bind(this));
 		this.controller.get('wifi_radio').addEventListener(Mojo.Event.tap, this.toggleWifiRadio.bind(this));
 		this.controller.get('bt_radio').addEventListener(Mojo.Event.tap, this.toggleBTRadio.bind(this));
 		this.controller.get('bt_pref').addEventListener(Mojo.Event.tap,this.handleBluetoothLaunch.bind(this));
 		this.controller.get('wifi_pref').addEventListener(Mojo.Event.tap,this.handleWiFiLaunch.bind(this));
+		this.controller.get('gsm_umts_auto').addEventListener(Mojo.Event.tap, this.toggleGSM_Auto.bind(this));
+		this.controller.get('gsm_umts_2g').addEventListener(Mojo.Event.tap, this.toggleGSM_2G.bind(this));
+		this.controller.get('gsm_umts_3g').addEventListener(Mojo.Event.tap, this.toggleGSM_3G.bind(this));
+		this.controller.get('gsm_data').addEventListener(Mojo.Event.tap, this.toggleGSM_Data.bind(this));
 		this.controller.get('vpn_pref').addEventListener(Mojo.Event.tap,this.handleVPNLaunch.bind(this));
 		this.controller.get('ime_OnOff').addEventListener(Mojo.Event.tap, this.toggleIMEOnOff.bind(this));
 		this.controller.get('imelist').addEventListener(Mojo.Event.listTap,this.handleIMETap.bindAsEventListener(this));
@@ -171,6 +246,18 @@ var DevicemenuAssistant = Foundations.Class.create({
 		this._stageRef = 1;
 		this.toggleDeviceMenu();						
 	},	
+
+	handleBrightTap: function(event) {
+		this.controller.get('brightdetails').mojo.setOpenState(!this.controller.get('brightdetails').mojo.getOpenState());
+	},
+
+	handleBrightSlider: function(event) {
+		this.controller.serviceRequest('palm://com.palm.display/control', {
+			method: 'setProperty',
+			parameters:{maximumBrightness:Math.round(event.value)}
+		});
+		this.controller.get('dm_brightness').innerText = "Brightness: " + Math.round(event.value) + "%";
+	},
 		
 	cleanup: function() {
 		Mojo.Log.error("Device Menu - Clean up called");
@@ -224,6 +311,82 @@ var DevicemenuAssistant = Foundations.Class.create({
 		}
 		this.apModeInProgress = false;
 	},
+
+	toggleGSM_Auto: function(event) {
+		this.toggleGSM(event, "automatic");
+	},
+	
+	toggleGSM_2G: function(event) {
+		this.toggleGSM(event, "gsm");
+	},
+	
+	toggleGSM_3G: function(event) {
+		this.toggleGSM(event, "umts");
+	},
+	
+	toggleGSM_Data: function(event) {
+		if(this.dataDisabled=="on") {
+			this.dataDisabled = "off";
+		} else {
+			this.dataDisabled = "on";
+		}
+		this.controller.serviceRequest('palm://com.palm.wan', {
+			method: 'set',
+			parameters: {
+				disablewan: this.dataDisabled
+			}
+		});
+		this.setRatLabel();
+		this.toggleDeviceMenu.bind(this).delay(0.2);
+	},
+
+	// "automatic", "gsm", "umts"
+	toggleGSM: function(event, rat) {
+		this.currentRat = rat;
+		var request = new Mojo.Service.Request('palm://com.palm.telephony', {
+			method: "ratSet",
+			parameters: {
+				"mode": this.currentRat
+			}
+		});
+		this.setRatLabel();
+		this.toggleDeviceMenu.bind(this).delay(0.2);
+	},
+
+	setRatLabel: function() {
+		if (this.currentRat == "gsm") {
+			this.controller.get('ratStatus').innerText = "2G";
+		} else if(this.currentRat == "umts") {
+			this.controller.get('ratStatus').innerText = "3G";
+		} else if(this.currentRat == "automatic") {
+			this.controller.get('ratStatus').innerText = "Auto";
+		} else {
+			this.controller.get('ratStatus').innerText = "???";
+		}
+		if (this.dataDisabled == "off") {
+			this.controller.get('ratStatus').innerText += " +";
+		} else {
+			this.controller.get('ratStatus').innerText += " -";
+		}
+	},
+	
+	/*
+	 * Toggles the Bluetooth List to show and Hide when tapping on the Bluetooth Row.
+	 */	
+	togglegsmList: function(event) {
+		
+		//Ignore the tap event if Airplane Mode is in Progress
+		if(this.apModeInProgress)
+			return;
+				
+		if (this.gsmdrawer.mojo.getOpenState()) {			
+			this.controller.hideWidgetContainer(this.controller.get('gsmdetails'));	
+		}
+		else {
+			this.controller.showWidgetContainer(this.controller.get('gsmdetails'));			
+		}	
+		this.gsmdrawer.mojo.setOpenState(!this.gsmdrawer.mojo.getOpenState());						
+	},
 	
 	updateAirplaneModeProgress: function() {
 		if(this.barAssistant.getAirplaneMode()) {
@@ -1269,6 +1432,11 @@ var DevicemenuAssistant = Foundations.Class.create({
 		if(this.imedrawer.mojo.getOpenState()) {
 			this.imedrawer.mojo.setOpenState(false);
 		}		
+		if (this.gsmdrawer.mojo.getOpenState()) {
+			this.controller.hideWidgetContainer(this.controller.get('gsmdetails'));
+			this.gsmdrawer.mojo.setOpenState(false);	
+		}		
+		this.controller.get('brightdetails').mojo.setOpenState(false);
 	},
 
 	//IME
@@ -1462,12 +1630,59 @@ var DevicemenuAssistant = Foundations.Class.create({
 		else {
 			this.isVisible = true;
 			var date = new Date();		
-			this.controller.get('dm_date').innerHTML = Mojo.Format.formatDate(date,{date:'EEE '})  +  Mojo.Format.formatDate(date,{date:'long'});
+			this.controller.get('dm_date').innerHTML = Mojo.Format.formatDate(date,{date:'EEE '}) +  Mojo.Format.formatDate(date,{date:'long'}) +
+				" " + Mojo.Format.formatPercent(this.barAssistant.getBatteryLevel());
 			
+			this.controller.serviceRequest('palm://com.palm.display/control', {
+				method: 'getProperty',
+				parameters:{properties:['maximumBrightness']},
+				onSuccess: function(response) {
+					if(response.maximumBrightness != undefined) {
+						this.brightModel.value = parseInt(response.maximumBrightness);
+						this.controller.modelChanged(this.brightModel);
+						this.controller.get('dm_brightness').innerText = "Brightness: " + response.maximumBrightness + "%";
+					} else {
+						this.controller.get('dm_brightness').innerText = "Brightness: ??%";
+					}
+				}.bind(this)
+			});
+
 			if(this.turningOnBtRadio) {
 				this.btspinnerModel.spinning = true;
 				this.controller.modelChanged(this.btspinnerModel);
 			}
+			this.controller.serviceRequest('palm://com.palm.location', {
+				method: 'getUseGps',
+				parameters: {},
+				onSuccess: function(response) {
+					this.gpsEnabled = response.useGps;
+					this.setGPSLabel();
+				}.bind(this)
+			});
+			this.controller.serviceRequest('palm://com.palm.telephony', {
+				method: 'ratQuery',
+				parameters: {},
+				onComplete: function(response) {
+					if(response && response.extended && response.extended.mode) {
+						this.currentRat = response.extended.mode;
+						this.setRatLabel();
+					} else {
+						this.currentRat = "???";
+					}
+				}.bind(this)
+			});
+			this.controller.serviceRequest('palm://com.palm.connectionmanager', {
+				method: 'getstatus',
+				parameters: {},
+				onSuccess: function(response) {
+					if(response.wan.state === "disconnected") {
+						this.dataDisabled = "on";
+					} else if(response.wan.state === "connected") {
+						this.dataDisabled = "off";
+					}
+					this.setRatLabel();
+				}.bind(this)
+			});
 			this.activateStage();
 			
 			var animateDialog = function(){
@@ -1535,6 +1750,9 @@ var DevicemenuAssistant = Foundations.Class.create({
 		this.controller.get('dm_battery').innerHTML = new Template(msg).evaluate({
 			"batlevel": Mojo.Format.formatPercent(batlevel)
 		});
+		var date = new Date();
+		this.controller.get('dm_date').innerHTML = Mojo.Format.formatDate(date,{date:'EEE '})  +  Mojo.Format.formatDate(date,{date:'long'}) +
+			" <span style='float:right;'>" + Mojo.Format.formatPercent(batlevel) + "</span>";
 	},
 
 	appMenuClosed: function(e) {
@@ -1605,6 +1823,25 @@ var DevicemenuAssistant = Foundations.Class.create({
 		});
 	},
 
+	toggleGPS: function(event) {
+		this.gpsEnabled = !this.gpsEnabled;
+		this.controller.serviceRequest('palm://com.palm.location', {
+			method: 'setUseGps',
+			parameters: {
+				useGps: this.gpsEnabled
+			}
+		});
+		this.setGPSLabel();
+	},
+
+	setGPSLabel: function() {
+		if(this.gpsEnabled) {
+			this.controller.get('gpsStatus').innerText = "on";
+		} else {
+			this.controller.get('gpsStatus').innerText = "off";
+		}
+	},
+
 	activateStage: function() {
 		if (!this._stageRef) {
 			this._stageRef = 1;
