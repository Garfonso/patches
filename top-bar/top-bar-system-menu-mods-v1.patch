--- .orig/usr/lib/luna/system/luna-systemui/app/controllers/bar-assistant.js
+++ /usr/lib/luna/system/luna-systemui/app/controllers/bar-assistant.js
@@ -19,6 +19,7 @@
 		this.bluetoothState = 'Off';
 		this.wifiState = 'Off';	
 		this.wifiRadio = false;	
+		this.gpsState = 'Off';
 		
 		$('rssi').className = 'nobars';
 		$('datanet').className = 'off';
@@ -44,6 +45,9 @@
 		//Get the Carrier Name by querying the Carrier DB
 		this.getCarrierName();
 		
+		// Initialize the Gps icon once the service is running
+		this.initOnServerStart("com.palm.location", this.gpsInit.bind(this), this.gpsDeinit.bind(this));
+
 		// Initialize the Bluetooth icon once the service is running
 		this.initOnServerStart("com.palm.btmonitor", this.btMonitorInit.bind(this), this.btMonitorDeinit.bind(this));
 		this.initOnServerStart("com.palm.bluetooth", this.btInit.bind(this), this.btDeInit.bind(this));
@@ -569,6 +573,7 @@
 		
 		var stageController = Mojo.Controller.getAppController().getStageProxy("DeviceMenu");
 		if (stageController) {
+			this.gpsGetRadioStatus();
 			this.hideSystemMenus("device");
 			stageController.delegateToSceneAssistant("toggleDeviceMenu");			
 		} else {
@@ -1783,6 +1788,47 @@
 },
 
 /*
+ * Initialize GPS status on device menu
+ */
+gpsInit:function(payload) {
+	// Initial value
+	this.gpsState = 'Off';
+	
+	this.gpsGetRadioStatus();
+},
+
+// Get gps radio status and update the state	
+gpsGetRadioStatus:function() {
+	if(this.gpsRadioStatusRequest) {
+		this.gpsRadioStatusRequest.cancel();
+	}
+
+	this.gpsRadioStatusRequest=new Mojo.Service.Request('palm://com.palm.location/',{
+		method:'getUseGps',
+		parameters: {"subscribe": true},
+		onSuccess: this.gpsHandleRadioStatus.bind(this)
+	});
+},
+
+gpsHandleRadioStatus:function(payload) {
+	if (payload.useGps != undefined) {
+		if(payload.useGps)
+			this.gpsState = 'On';
+		else
+			this.gpsState = 'Off';
+
+		// Update the Device Menu
+		var stageController = Mojo.Controller.getAppController().getStageProxy("DeviceMenu");
+		if (stageController) {
+			stageController.delegateToSceneAssistant("updateGps",this.gpsState);
+		}
+	}
+},
+
+gpsDeinit:function(payload) {
+},
+
+/*
  * Handle power and charging notifications
  */
 handlePowerNotifications: function(payload) {
@@ -1860,7 +1906,11 @@
 			//Update the System Menu
 			var stageController = Mojo.Controller.getAppController().getStageProxy("DeviceMenu");
 			if (stageController) {
-				stageController.delegateToSceneAssistant("updateBatteryLevel", this.batteryLevel);			
+				if(this.isCharging)
+					var batterystate = "Charging";
+				else
+					var batterystate = "Discharging";
+				stageController.delegateToSceneAssistant("updateBatteryInfo", this.batteryLevel, batterystate);			
 			}					
 			return;
 		}		 
@@ -1953,6 +2003,13 @@
 	return this.batteryLevel;
 },
 
+getBatteryState: function() {
+	if(this.isCharging)
+		return "Charging";
+	else
+		return "Discharging";
+},
+
 queryBatteryStatus: function() {
 	this.queryBatteryStatusReq = new Mojo.Service.Request('palm://com.palm.power/com/palm/power/', {
 		method: 'batteryStatusQuery',});
@@ -2021,8 +2078,10 @@
 	
 	 Mojo.Log.info("SystemUI -WAN Notification "+ Object.toJSON(payload));
 	 
-	 if(payload.returnValue != undefined && payload.returnValue)
-	 	return;
+	 if(payload.returnValue != undefined && payload.returnValue) {
+	 	this.dataRoaming = false;
+ 	 	return;
+	 }	 
 		
 	 var mipFailureCode, causeCode;	
 			
@@ -2094,6 +2153,13 @@
 		Mojo.Log.error("SystemUI - Updating WAN Icon - Status - Removed " + Object.toJSON(payload));
 	}          
 		
+	// Update the Data Roaming Settings
+	this.dataRoaming = (payload.roamGuard === "disable") ? true : false;
+	
+	var stageController = Mojo.Controller.getAppController().getStageProxy("DeviceMenu");	
+	if (stageController) {
+		stageController.delegateToSceneAssistant("updateDataRoamingSettings");
+	}			
 },
 
 /*
@@ -2774,6 +2840,21 @@
 	$('today').innerHTML = Mojo.Format.formatDate(date,{date:'short'});
 },
 
+//Returns the Data Roaming settings. Called by DeviceMenu.
+getDataRoaming: function() {	
+	return this.dataRoaming;
+},
+
+//Turn on / off the Data Roaming. Makes service call set the Roamguard state.
+setDataRoaming: function(mode) {
+	Mojo.Log.info("SystemUI - Setting Data Roaming ");
+	this.dataRoaming = mode;
+	this.controller.serviceRequest('palm://com.palm.wan/', {
+		method: 'set',
+		parameters: {roamguard: (this.dataRoaming === true) ? 'disable' : 'enable'},
+	});
+},
+
 /*
  * Query the System Service to get the value of Airplane Mode key.
  */
@@ -3097,6 +3178,10 @@
 			
 },
 
+getCurrentGpsState: function() {
+	return this.gpsState;
+},
+
 getCurrentBluetoothState: function() {
 	return this.bluetoothState;
 },
--- .orig/usr/lib/luna/system/luna-systemui/app/controllers/devicemenu-assistant.js
+++ /usr/lib/luna/system/luna-systemui/app/controllers/devicemenu-assistant.js
@@ -1,6 +1,6 @@
 /* Copyright 2009 Palm, Inc.  All rights reserved. */
 
-var RadioState = new Hash({wifi: undefined, bluetooth: undefined});
+var RadioState = new Hash({wifi: undefined, bluetooth: undefined, gps: undefined});
 
 var DevicemenuAssistant = Class.create({
 	
@@ -32,10 +32,8 @@
 		//Add a touchable row class
 		this.controller.get('palm-device-menu').addClassName('palm-touch-rows-'+Mojo.Environment.DeviceInfo.touchableRows);
 			
-		var date = new Date();
-		this.controller.get('dm_date').innerHTML = Mojo.Format.formatDate(date,{date:'EEE '}) +  Mojo.Format.formatDate(date,{date:'long'});
-		var msg = $L("Battery: #{batlevel}");
-		this.controller.get('dm_battery').innerHTML = new Template(msg).evaluate({"batlevel": Mojo.Format.formatPercent(this.barAssistant.getBatteryLevel())});
+		var msg = $L("Battery: #{batlevel}, #{batstate}");
+		this.controller.get('dm_battery').innerHTML = new Template(msg).evaluate({"batlevel": Mojo.Format.formatPercent(this.barAssistant.getBatteryLevel()), "batstate": this.barAssistant.getBatteryState()});
 						
 		this.modesModel = {scrollbars: false, mode: "vertical"},
 		this.controller.setupWidget('devicescroller', {}, this.modesModel);
@@ -44,8 +42,10 @@
 		this.drawerModel = {myOpenProperty:false};
 		this.controller.setupWidget('wifidetails', {modelProperty:'myOpenProperty'}, this.drawerModel);
 		this.controller.setupWidget('btdetails', {modelProperty:'myOpenProperty'}, this.drawerModel);
+		this.controller.setupWidget('gpsdetails', {modelProperty:'myOpenProperty'}, this.drawerModel);
 		this.wifidrawer = this.controller.get('wifidetails');
 		this.btdrawer = this.controller.get('btdetails');
+		this.gpsdrawer = this.controller.get('gpsdetails');
 		
 		this.wifiListModel = {
 			items: this.wifiAPList
@@ -69,14 +69,25 @@
 		//Spinner for BT
 		this.controller.setupWidget('btSpinner', this.spinnerAttrs, this.btspinnerModel);
 		
-		//Spinner for Airplande Mode
-		//this.controller.setupWidget('apSpinner', this.spinnerAttrs, this.apSpinnerModel);	    	
-			
-		if(this.barAssistant.getAirplaneMode()) 			
-			this.controller.get('dm_airplanemode_status').innerHTML = $L('Turn off Airplane Mode');
+		if(this.barAssistant.getDataRoaming()) 			
+			this.controller.get('dm_dataroaming_status').innerHTML = $L('Turn off Data Roaming');
 		else
-			this.controller.get('dm_airplanemode_status').innerHTML = $L('Turn on Airplane Mode');
-			
+			this.controller.get('dm_dataroaming_status').innerHTML = $L('Turn on Data Roaming');
+		
+		var gpsstate = this.barAssistant.getCurrentGpsState();
+		if(gpsstate === 'Off') {
+			this.controller.get('gpsmsg').innerHTML = $L('Off');
+			RadioState.set('gps',false);
+		}			
+		else {
+			RadioState.set('gps',true);
+					
+			if(gpsstate === 'On')
+				this.controller.get('gpsmsg').innerHTML = $L('On');
+			else
+				this.controller.get('gpsmsg').innerHTML = gpsstate.escapeHTML();	
+		}
+		
 		var btstate = this.barAssistant.getCurrentBluetoothState();
 		if(btstate === 'Off') {
 			this.controller.get('btmsg').innerHTML = $L('Off');
@@ -121,15 +132,18 @@
 	},
 	
 	activate: function() {
-		this.controller.get('dm_airplanemode').addEventListener(Mojo.Event.tap, this.toggleAirplaneMode.bindAsEventListener(this));
+		this.controller.get('dm_dataroaming').addEventListener(Mojo.Event.tap, this.toggleDataRoaming.bindAsEventListener(this));
 		this.controller.get('wifilist').addEventListener(Mojo.Event.listTap,this.handleWiFiTap.bindAsEventListener(this));
 		this.controller.get('btlist').addEventListener(Mojo.Event.listTap,this.handleBTTap.bindAsEventListener(this));		
 		this.controller.get('dm_wifi').addEventListener(Mojo.Event.tap, this.togglewifiList.bindAsEventListener(this));
 		this.controller.get('dm_bluetooth').addEventListener(Mojo.Event.tap, this.togglebluetoothList.bindAsEventListener(this));
+		this.controller.get('dm_gps').addEventListener(Mojo.Event.tap, this.toggleGpsList.bindAsEventListener(this));
 		this.controller.get('wifi_radio').addEventListener(Mojo.Event.tap, this.toggleWifiRadio.bindAsEventListener(this));
 		this.controller.get('bt_radio').addEventListener(Mojo.Event.tap, this.toggleBTRadio.bindAsEventListener(this));
-		this.controller.get('bt_pref').addEventListener(Mojo.Event.tap,this.handleBluetoothLaunch.bindAsEventListener(this));
+		this.controller.get('gps_radio').addEventListener(Mojo.Event.tap, this.toggleGpsRadio.bindAsEventListener(this));
 		this.controller.get('wifi_pref').addEventListener(Mojo.Event.tap,this.handleWiFiLaunch.bindAsEventListener(this));
+		this.controller.get('bt_pref').addEventListener(Mojo.Event.tap,this.handleBluetoothLaunch.bindAsEventListener(this));
+		this.controller.get('gps_pref').addEventListener(Mojo.Event.tap,this.handleGpsLaunch.bindAsEventListener(this));
 		this.controller.get('scrim').addEventListener(Mojo.Event.tap, this.toggleDeviceMenu.bindAsEventListener(this));
 		//Close the App because this is a first launch.
 		this.toggleDeviceMenu();						
@@ -143,59 +157,120 @@
 	btdeviceList: [],
 		
 	/*
-	 * Toggles the AirplaneMode.
+	 * Toggles the Data Roaming.
 	 * 
-	 * When Airplane Mode is enabled, it turns off the Phone. Also, it saves the current state of Bluetooth and WiFi and turn them off. 
-	 * The Airplan Mode setting gets stored in the System Preferences.
+	 * When Data Roaming is enabled the data connection is also used in foreign networks. 
 	 */	 
 	
-	toggleAirplaneMode: function() {
+	toggleDataRoaming: function() {
 		
 		//Ignore the tap event if Airplane Mode is in Progress
-		if(this.apModeInProgress)
+		if(this.barAssistant.getAirplaneModeInProgress())
 			return;
 		
-		//this.apSpinnerModel.spinning = true;
-		//this.controller.modelChanged(this.apSpinnerModel);	
-				
-		if(this.barAssistant.getAirplaneMode()) {
-			Mojo.Log.info("SystemUI - Turning off Airplane Mode - Device Menu");
-			this.barAssistant.setAirplaneMode(false);
-			this.controller.get('dm_airplanemode_status').innerHTML = $L('Turning off Airplane Mode');			
+		if(this.barAssistant.getDataRoaming() == undefined)
+			return;
+		
+		if(this.barAssistant.getDataRoaming()) {
+			Mojo.Log.info("SystemUI - Turning off Data Roaming - Device Menu");
+			this.barAssistant.setDataRoaming(false);
 		}			
 		else {
-			Mojo.Log.info("SystemUI - Turning on Airplane Mode - Device Menu");
-			this.barAssistant.setAirplaneMode(true);
-			this.controller.get('dm_airplanemode_status').innerHTML = $L('Turning on Airplane Mode');
+			Mojo.Log.info("SystemUI - Turning on Data Roaming - Device Menu");
+			this.barAssistant.setDataRoaming(true);
 		}
-		this.apModeInProgress = true;
+		
+		this.updateDataRoamingSettings();
 		this.toggleDeviceMenu.bind(this).delay(0.2);		
 	},
 	
-	updateAirplaneModeSettings: function() {
-		
-		//this.apSpinnerModel.spinning = false;
-		//this.controller.modelChanged(this.apSpinnerModel);
+	updateDataRoamingSettings: function() {
 		
-		if(this.barAssistant.getAirplaneMode()) {
-			this.controller.get('dm_airplanemode_status').innerHTML = $L('Turn off Airplane Mode');			
+		if(this.barAssistant.getDataRoaming()) {
+			this.controller.get('dm_dataroaming_status').innerHTML = $L('Turn off Data Roaming');			
 		}			
 		else {			
-			this.controller.get('dm_airplanemode_status').innerHTML = $L('Turn on Airplane Mode');
+			this.controller.get('dm_dataroaming_status').innerHTML = $L('Turn on Data Roaming');
 		}
-		this.apModeInProgress = false;
 	},
-	
-	updateAirplaneModeProgress: function() {
-		if(this.barAssistant.getAirplaneMode()) {
-			this.controller.get('dm_airplanemode_status').innerHTML = $L('Turning on Airplane Mode');
+ 		
+	toggleGpsRadio: function(event) {
+		if(RadioState.get('gps')) {
+			this.controller.serviceRequest('palm://com.palm.location/', {
+				method: 'setUseGps',
+				parameters: {useGps: false}});
+			this.updateGps('Off');
 		}			
 		else {
-			this.controller.get('dm_airplanemode_status').innerHTML = $L('Turning off Airplane Mode');
+			this.controller.serviceRequest('palm://com.palm.location/', {
+				method: 'setUseGps',
+				parameters: {useGps: true}});
+			this.updateGps('On');
 		}
-		this.apModeInProgress = true;
+
+		this.toggleDeviceMenu.bind(this).delay(0.2);		
 	},
 	
+	/*
+	 * Toggles the GPS List to show and hide when tapping on the GPS Row.
+	 */
+
+	toggleGpsList: function(event) {
+		
+		//Ignore the tap event if Airplane Mode is on
+		if(this.barAssistant.getAirplaneMode())
+			return;
+				
+		if (this.gpsdrawer.mojo.getOpenState()) {			
+			this.controller.hideWidgetContainer(this.controller.get('gpsdetails'));	
+		}
+		else {
+			if (this.wifidrawer.mojo.getOpenState())
+				this.wifidrawer.mojo.setOpenState(false);
+			else if (this.btdrawer.mojo.getOpenState())
+				this.btdrawer.mojo.setOpenState(false);
+			
+			if(RadioState.get('gps')) {
+				this.controller.get('gps_radio').innerHTML = $L('Turn off GPS');
+			}				
+			else
+				this.controller.get('gps_radio').innerHTML = $L('Turn on GPS');	
+					
+			this.controller.showWidgetContainer(this.controller.get('gpsdetails'));			
+		}	
+		this.gpsdrawer.mojo.setOpenState(!this.gpsdrawer.mojo.getOpenState());						
+	},
+
+	handleGpsLaunch: function(event) {
+		this.launchGps.bind(this).delay(0.2,true);
+	},
+
+	launchGps: function(toggleMenu) {
+		this.serviceRequest = new Mojo.Service.Request('palm://com.palm.applicationManager', {
+				method: 'open',
+				parameters: {'id': 'com.palm.app.location','params':{}}
+		});
+		if(toggleMenu)
+			this.toggleDeviceMenu();
+	},
+
+	/*
+	 * Update the GPS Label to display the GPS State
+	 */
+			
+	updateGps: function(value) {
+		if(value === 'On') {
+			this.controller.get('gpsmsg').innerHTML = $L('On');
+			this.controller.get('gps_radio').innerHTML = $L('Turn off GPS');					
+			RadioState.set('gps', true);
+		}
+		else {
+			this.controller.get('gpsmsg').innerHTML = $L('Off');
+			this.controller.get('gps_radio').innerHTML = $L('Turn on GPS');
+			RadioState.set('gps', false);
+		}
+	},
+
 	toggleBTRadio: function(event) {
 		
 		if(this.turningOnBtRadio)
@@ -222,8 +297,8 @@
 	 */	
 	togglebluetoothList: function(event) {
 		
-		//Ignore the tap event if Airplane Mode is in Progress
-		if(this.apModeInProgress)
+		//Ignore the tap event if Airplane Mode is On
+		if(this.barAssistant.getAirplaneMode())
 			return;
 				
 		this.clearBTList();
@@ -232,6 +307,10 @@
 			this.controller.hideWidgetContainer(this.controller.get('btdetails'));	
 		}
 		else {
+			if (this.wifidrawer.mojo.getOpenState())
+				this.wifidrawer.mojo.setOpenState(false);
+			else if (this.gpsdrawer.mojo.getOpenState())
+				this.gpsdrawer.mojo.setOpenState(false);
 						
 			if (RadioState.get('bluetooth')) {
 				this.controller.get('bt_radio').innerHTML = $L('Turn off Bluetooth');
@@ -439,39 +518,41 @@
 		if(!payload || !payload.returnValue ||!payload.trusteddevices)
 			return;
 		
-		for (var i = 0; i < payload.trusteddevices.length; i++) {			
-			var device = {
-				DISPNAME: payload.trusteddevices[i].name,
-				CONNECTSTATE: payload.trusteddevices[i].status,
-				BT_ADDR: payload.trusteddevices[i].address,
-				COD: payload.trusteddevices[i].cod,
-				showSelected: ''
-			};
-			
-			if(isHFGSupported(payload.trusteddevices[i].cod) || isA2DPSupported(payload.trusteddevices[i].cod)) {
-				if(payload.trusteddevices[i].status == 'connected') {
-					device.showConnected = 'connected';	
-					if (this.btProfileStatus['hfg'].status == "connected" && this.btProfileStatus['hfg'].address == payload.trusteddevices[i].address ||
-					this.btProfileStatus['a2dp'].status == "connected" && this.btProfileStatus['a2dp'].address == payload.trusteddevices[i].address) 
-						device.showConnected = 'connected';
+		if(payload.trusteddevices) {
+			for (var i = 0; i < payload.trusteddevices.length; i++) {			
+				var device = {
+					DISPNAME: payload.trusteddevices[i].name,
+					CONNECTSTATE: payload.trusteddevices[i].status,
+					BT_ADDR: payload.trusteddevices[i].address,
+					COD: payload.trusteddevices[i].cod,
+					showSelected: ''
+				};
+			
+				if(isHFGSupported(payload.trusteddevices[i].cod) || isA2DPSupported(payload.trusteddevices[i].cod)) {
+					if(payload.trusteddevices[i].status == 'connected') {
+						device.showConnected = 'connected';	
+						if (this.btProfileStatus['hfg'].status == "connected" && this.btProfileStatus['hfg'].address == payload.trusteddevices[i].address ||
+						this.btProfileStatus['a2dp'].status == "connected" && this.btProfileStatus['a2dp'].address == payload.trusteddevices[i].address) 
+							device.showConnected = 'connected';
+						else {
+							device.showConnected = 'none';
+							device.CONNECTSTATE = 'disconnected';
+						}				
+					}
+					else if(payload.trusteddevices[i].status == 'connecting') {
+						device.showconnected = 'none';
+						device.STATUS = $L('Connecting...');
+						device.showErrorIfConnectFails = true;
+						device.showSelected = 'selected';
+					}					
 					else {
-						device.showConnected = 'none';
-						device.CONNECTSTATE = 'disconnected';
+						device.showConnected = 'none';					
 					}				
-				}
-				else if(payload.trusteddevices[i].status == 'connecting') {
-					device.showconnected = 'none';
-					device.STATUS = $L('Connecting...');
-					device.showErrorIfConnectFails = true;
-					device.showSelected = 'selected';
-				}					
-				else {
-					device.showConnected = 'none';					
-				}				
-				this.btdeviceList.push(device);
-				var items = [device];
-				this.btListWidget.mojo.noticeAddedItems(this.btListWidget.mojo.getLength(), items);							
-			}		
+					this.btdeviceList.push(device);
+					var items = [device];
+					this.btListWidget.mojo.noticeAddedItems(this.btListWidget.mojo.getLength(), items);							
+				}		
+			}
 		}				
 	},
 	
@@ -706,8 +787,8 @@
 	//Toggles the WiFi list to show or hide.		
 	togglewifiList: function(event) {	
 		
-		//Ignore the tap event if Airplane Mode is in Progress
-		if(this.apModeInProgress)
+		//Ignore the tap event if Airplane Mode is on
+		if(this.barAssistant.getAirplaneMode())
 			return;
 		
 		this.clearWiFiList();
@@ -717,6 +798,11 @@
 			this.controller.hideWidgetContainer(this.controller.get('wifidetails'));
 		}
 		else {
+			if (this.btdrawer.mojo.getOpenState())
+				this.btdrawer.mojo.setOpenState(false);
+			else if (this.gpsdrawer.mojo.getOpenState())
+				this.gpsdrawer.mojo.setOpenState(false);
+			
 			if(RadioState.get('wifi')) {
 				this.controller.get('wifi_radio').innerHTML = $L('Turn off Wi-Fi');
 				this.spinOn();	
@@ -1040,6 +1126,10 @@
 		if(this.isVisible) {			
 			this.isVisible = false;
 			
+			this.wifidrawer.mojo.setOpenState(false);
+			this.btdrawer.mojo.setOpenState(false);
+			this.gpsdrawer.mojo.setOpenState(false);
+
 			this.btspinnerModel.spinning = false;
 			this.controller.modelChanged(this.btspinnerModel);
 			//animate the submenu onto the scene
@@ -1071,8 +1161,6 @@
 		}
 		else {
 			this.isVisible = true;
-			var date = new Date();		
-			this.controller.get('dm_date').innerHTML = Mojo.Format.formatDate(date,{date:'EEE '})  +  Mojo.Format.formatDate(date,{date:'long'});
 			
 			if(this.turningOnBtRadio) {
 				this.btspinnerModel.spinning = true;
@@ -1106,10 +1194,11 @@
 		}		  
 	},
 	
-	updateBatteryLevel: function(batlevel) {		
-		var msg = $L("Battery: #{batlevel}");
+	updateBatteryInfo: function(batlevel, batstate) {		
+		var msg = $L("Battery: #{batlevel}, #{batstate}");
 		this.controller.get('dm_battery').innerHTML = new Template(msg).evaluate({
-			"batlevel": Mojo.Format.formatPercent(batlevel)
+			"batlevel": Mojo.Format.formatPercent(batlevel),
+			"batstate": batstate
 		});		
 	},
 	
--- .orig/usr/lib/luna/system/luna-systemui/app/views/devicemenu/devicemenu-scene.html
+++ /usr/lib/luna/system/luna-systemui/app/views/devicemenu/devicemenu-scene.html
@@ -15,13 +15,6 @@
 			<div class="palm-list">          
 				
 				<div class="palm-row first"><div class="palm-row-wrapper">
-					<div id="dm_date" class="title dim"></div>
-				</div></div>
-				
-				<div class="palm-section-divider">
-				</div> 
-				
-				<div class="palm-row"><div class="palm-row-wrapper">
 					<div id="dm_battery" class="title dim"></div>
 				</div></div> 
 				
@@ -97,13 +90,37 @@
 				
 				<div class="palm-section-divider"></div>
 				
-				<div id="dm_airplanemode" class="palm-row last menu-end" x-mojo-tap-highlight='momentary'><div class="palm-row-wrapper">
-					<div id="dm_airplanemode_status" class="title truncating-text">
-					 </div>
-					 <!--<div id='apSpinner' class='label' x-mojo-element="Spinner"></div>-->
+				<div class="palm-row" id="dm_gps" x-mojo-tap-highlight='momentary'><div class="palm-row-wrapper">
+						<div class="title truncating-text">
+							<div class="label right" id="gpsmsg">&nbsp;</div>
+							<span x-mojo-loc=''>GPS</span>					
+						</div>				
+				</div></div>
+				
+				<div id="gpsdetails" x-mojo-element="Drawer">
+					
+					<div class="palm-row" x-mojo-tap-highlight='momentary'><div class="palm-row-wrapper">
+						<div id="gps_radio" class="title truncating-text">
+						</div>								
+					</div></div>
+					
+					<div class="palm-section-divider"></div>					
+					
+					<div id="gps_pref" class="palm-row last" x-mojo-tap-highlight='momentary'><div class="palm-row-wrapper">
+						<div class="title truncating-text">
+							<span x-mojo-loc=''>GPS Preferences</span>
+						</div>
+					</div></div>
+					
+				</div>
+
+				<div class="palm-section-divider"></div>
+ 				
+				<div id="dm_dataroaming" class="palm-row last menu-end" x-mojo-tap-highlight='momentary'><div class="palm-row-wrapper">
+					<div id="dm_dataroaming_status" class="title truncating-text">
+					</div>
 				</div></div>   
 				
-				</div>       
 			</div>
 		</div>
 	</div>                          
