diff --git a/usr/lib/luna/system/luna-systemui/app/controllers/devicemenu-assistant.js b/usr/lib/luna/system/luna-systemui/app/controllers/devicemenu-assistant.js
index 5beb152..87800c1 100644
--- a/usr/lib/luna/system/luna-systemui/app/controllers/devicemenu-assistant.js
+++ b/usr/lib/luna/system/luna-systemui/app/controllers/devicemenu-assistant.js
@@ -31,13 +31,20 @@ var DevicemenuAssistant = Foundations.Class.create({
 		var date = new Date();
 		this.controller.get('dm_date').innerHTML = Mojo.Format.formatDate(date,{date:'EEE '}) +  Mojo.Format.formatDate(date,{date:'long'});
 		var msg = $L("Battery: #{batlevel}");
-		this.controller.get('dm_battery').innerHTML = new Template(msg).evaluate({"batlevel": Mojo.Format.formatPercent(this.barAssistant.getBatteryLevel())});
-						
+		this.controller.get('dm_battery').innerHTML = new Template(msg).evaluate({"batlevel": Mojo.Format.formatPercent(this.barAssistant.getBatteryLevel())});	
+		this.controller.setupWidget('brightSlider', {minValue: 1, maxValue: 100}, this.brightModel = { value: 50});
+		this.controller.setupWidget('mvolSlider', {minValue: 0, maxValue: 100}, this.mvolModel = { value: 50});
+		this.controller.setupWidget('svolSlider', {minValue: 0, maxValue: 100}, this.svolModel = { value: 50});		
+
 		this.modesModel = {scrollbars: false, mode: "vertical"},
 		this.controller.setupWidget('devicescroller', {}, this.modesModel);
 		this.menuscroller = this.controller.get('devicescroller');
 		
 		this.drawerModel = {myOpenProperty:false};
+		this.controller.setupWidget('brightdetails', {modelProperty:'myOpenProperty'}, this.drawerModel);
+		this.controller.setupWidget('mvoldetails', {modelProperty:'myOpenProperty'}, this.drawerModel);
+		this.controller.setupWidget('svoldetails', {modelProperty:'myOpenProperty'}, this.drawerModel);		
+		this.controller.setupWidget('phonedetails', {modelProperty:'myOpenProperty'}, this.drawerModel);		
 		this.controller.setupWidget('imedetails', {modelProperty:'myOpenProperty'}, this.drawerModel);
 		this.controller.setupWidget('wifidetails', {modelProperty:'myOpenProperty'}, this.drawerModel);
 		this.controller.setupWidget('btdetails', {modelProperty:'myOpenProperty'}, this.drawerModel);
@@ -130,6 +137,12 @@ var DevicemenuAssistant = Foundations.Class.create({
 			this.controller.hideWidgetContainer(this.controller.get('dm_wifi'));
 		}
 
+		//setup battery temperature label
+		var battery = this.controller.get("dm_battery");
+		battery.id = "batteryRow";
+		battery.innerHTML = '<span id="dm_battery">' + battery.innerHTML + '</span>' +
+				'<div class="label right" id="tempmsg" style="font-size:0.9em;">&nbsp;</div>';
+		
 		//set up the the menu div
 		this.scrim = this.controller.sceneElement.querySelector('div[x-mojo-scrim]');
 		this.systemmenu = this.controller.sceneElement.querySelector('#palm-device-menu');
@@ -151,6 +164,18 @@ var DevicemenuAssistant = Foundations.Class.create({
 	
 	activate: function() {
 		this.controller.get('dm_airplanemode').addEventListener(Mojo.Event.tap, this.toggleAirplaneMode.bind(this));
+		this.controller.get('brightSlider').addEventListener(Mojo.Event.propertyChange, this.handleBrightSlider.bindAsEventListener(this));
+		this.controller.get('brightRow').addEventListener(Mojo.Event.tap, this.handleBrightTap.bindAsEventListener(this));
+		this.controller.get('mvolSlider').addEventListener(Mojo.Event.propertyChange, this.handleMvolSlider.bindAsEventListener(this));
+		this.controller.get('mvolRow').addEventListener(Mojo.Event.tap, this.handleMvolTap.bindAsEventListener(this));
+		this.controller.get('svolSlider').addEventListener(Mojo.Event.propertyChange, this.handleSvolSlider.bindAsEventListener(this));
+		this.controller.get('svolRow').addEventListener(Mojo.Event.tap, this.handleSvolTap.bindAsEventListener(this));		
+		this.controller.get('phoneRow').addEventListener(Mojo.Event.tap, this.handlePhoneTap.bindAsEventListener(this));
+		this.controller.get('phone_radio').addEventListener(Mojo.Event.tap, this.togglePhone.bindAsEventListener(this));
+		this.controller.get('phone_data').addEventListener(Mojo.Event.tap, this.toggleData.bindAsEventListener(this));
+		this.controller.get('phone_roam').addEventListener(Mojo.Event.tap, this.toggleRoam.bindAsEventListener(this));
+		this.controller.get('dm_gps').addEventListener(Mojo.Event.tap, this.toggleGPS.bindAsEventListener(this));
+		this.controller.get('dm_flash').addEventListener(Mojo.Event.tap, this.toggleFlash.bindAsEventListener(this));		
 		this.controller.get('wifilist').addEventListener(Mojo.Event.listTap,this.handleWiFiTap.bind(this));
 		this.controller.get('btlist').addEventListener(Mojo.Event.listTap,this.handleBTTap.bind(this));
 		this.controller.get('vpnlist').addEventListener(Mojo.Event.listTap,this.handleVPNTap.bind(this));		
@@ -174,6 +199,166 @@ var DevicemenuAssistant = Foundations.Class.create({
 		
 	cleanup: function() {
 		Mojo.Log.error("Device Menu - Clean up called");
+	},
+	
+	handleBrightTap: function(event) {
+		this.controller.get('brightdetails').mojo.setOpenState(!this.controller.get('brightdetails').mojo.getOpenState());
+	},
+
+	handleBrightSlider: function(event) {
+		this.controller.serviceRequest('palm://com.palm.display/control', {
+			method: 'setProperty',
+			parameters:{maximumBrightness:Math.round(event.value)}
+		});
+		this.controller.get('dm_brightness').innerText = "Brightness: " + Math.round(event.value) + "%";
+	},
+	
+	handleMvolTap: function(event) {
+		this.controller.get('mvoldetails').mojo.setOpenState(!this.controller.get('mvoldetails').mojo.getOpenState());
+	},
+	
+	handleMvolSlider: function(event) {
+		this.controller.serviceRequest('palm://com.palm.audio/media', {
+			method: 'setVolume',
+			parameters:{volume:Math.round(event.value)}
+		});
+		this.controller.get('dm_mvol').innerText = "Media Volume = " + Math.round(event.value);
+	},
+
+	handleSvolTap: function(event) {
+		this.controller.get('svoldetails').mojo.setOpenState(!this.controller.get('svoldetails').mojo.getOpenState());
+	},
+	
+	handleSvolSlider: function(event) {
+		this.controller.serviceRequest('palm://com.palm.audio/system', {
+			method: 'setVolume',
+			parameters:{volume:Math.round(event.value)}
+		});
+		this.controller.get('dm_svol').innerText = "System Volume = " + Math.round(event.value);	
+	},
+	
+	handlePhoneTap: function(event) {
+		this.controller.get('phonedetails').mojo.setOpenState(!this.controller.get('phonedetails').mojo.getOpenState());
+	},
+	
+	togglePhone: function(event) {
+		if(this.phoneState=="on") {
+			this.phoneState = "off";
+		} else {
+			this.phoneState = "on";
+		}
+		this.controller.serviceRequest('palm://com.palm.telephony', {
+			method: 'powerSet',
+			parameters: {
+				state: this.phoneState
+			}
+		});
+		this.setPhoneLabel();
+	},
+
+	setPhoneLabel: function() {
+		this.controller.get('phoneStatus').innerText = this.phoneState;
+	},
+	
+	toggleData: function(event) {
+		if(this.phoneState=="on") {
+			if(this.dataDisabled=="on") {
+				this.dataDisabled = "off";
+			} else {
+				this.dataDisabled = "on";
+			}
+			this.controller.serviceRequest('palm://com.palm.wan', {
+				method: 'set',
+				parameters: {
+					disablewan: this.dataDisabled
+				}
+			});
+			this.setDataLabel();
+		} else {
+			Mojo.Controller.errorDialog("Error: Phone radio needs to be on and "
+					+ "connected for this function");
+		}
+	},
+
+	setDataLabel: function() {
+		if(this.dataDisabled=="off") {
+			this.controller.get('dataStatus').innerText = "on";
+		} else {
+			this.controller.get('dataStatus').innerText = "off";
+		}
+	},
+	
+	toggleRoam: function(event) {
+		if(this.phoneState=="on") {
+			if(this.roamStatus=="roamonly") {
+				this.roamStatus="any";
+			} else {
+				this.roamStatus="roamonly";
+			}
+			this.controller.serviceRequest('palm://com.palm.telephony', {
+				method: 'roamModeSet',
+				parameters: {
+					mode: this.roamStatus,
+					client: Mojo.appName
+				}
+			});
+			this.setRoamLabel();
+		} else {
+			Mojo.Controller.errorDialog("Error: Phone radio needs to be on and "
+					+ "connected for this function");
+		}
+	},
+
+	setRoamLabel: function() {
+		if(this.roamStatus=="roamonly") {
+			this.controller.get('roamStatus').innerText = "on";
+		} else {
+			this.controller.get('roamStatus').innerText = "off";
+		}
+	},
+	
+	toggleGPS: function(event) {
+		this.gpsEnabled = !this.gpsEnabled;
+		this.controller.serviceRequest('palm://com.palm.location', {
+			method: 'setUseGps',
+			parameters: {
+				useGps: this.gpsEnabled
+			}
+		});
+		this.setGPSLabel();
+	},
+
+	setGPSLabel: function() {
+		if(this.gpsEnabled) {
+			this.controller.get('gpsStatus').innerText = "On";
+		} else {
+			this.controller.get('gpsStatus').innerText = "Off";
+		}
+	},
+	
+	toggleFlash: function() {
+		if(this.flashVal==0) {
+			this.flashVal = 100;
+		} else {
+			this.flashVal = 0;
+		}
+		this.controller.serviceRequest('palm://ca.canucksoftware.systoolsmgr', {
+			method: 'flashOn',
+			parameters: {
+				value: this.flashVal
+			},
+			onSuccess: function() {
+				this.setFlashLabel();
+			}.bind(this)
+		});
+	},
+	
+	setFlashLabel: function() {
+		if(this.flashVal==0) {
+			this.controller.get('flashStatus').innerText = "Off";
+		} else {
+			this.controller.get('flashStatus').innerText = "On";
+		}
 	},	
 			
 	wifiAPList: [],
@@ -1234,8 +1419,12 @@ var DevicemenuAssistant = Foundations.Class.create({
 		if(this.wifidrawer.mojo.getOpenState()) {
 			this.clearWiFiList();
 			this.controller.hideWidgetContainer(this.controller.get('wifidetails'));
-			this.wifidrawer.mojo.setOpenState(false);
+			this.wifidrawer.mojo.setOpenState(false);		
 		}
+		this.controller.get('brightdetails').mojo.setOpenState(false);
+		this.controller.get('mvoldetails').mojo.setOpenState(false);
+		this.controller.get('svoldetails').mojo.setOpenState(false);		
+		this.controller.get('phonedetails').mojo.setOpenState(false);
 		if(this.vpndrawer.mojo.getOpenState()) {
 			this.controller.hideWidgetContainer(this.controller.get('vpndetails'));
 			this.vpndrawer.mojo.setOpenState(false);
@@ -1437,11 +1626,123 @@ var DevicemenuAssistant = Foundations.Class.create({
 			this.isVisible = true;
 			var date = new Date();		
 			this.controller.get('dm_date').innerHTML = Mojo.Format.formatDate(date,{date:'EEE '})  +  Mojo.Format.formatDate(date,{date:'long'});
+			this.controller.serviceRequest('palm://com.palm.display/control', {
+				method: 'getProperty',
+				parameters:{properties:['maximumBrightness']},
+				onSuccess: function(response) {
+					if(response.maximumBrightness != undefined) {
+						this.brightModel.value = parseInt(response.maximumBrightness);
+						this.controller.modelChanged(this.brightModel);
+						this.controller.get('dm_brightness').innerText = "Brightness: " + response.maximumBrightness + "%";
+					} else {
+						this.controller.get('dm_brightness').innerText = "Brightness: ??%";
+					}
+				}.bind(this)
+			});
+			this.controller.serviceRequest('palm://com.palm.audio/media', {
+				method: 'getVolume',
+				parameters:{},
+				onSuccess: function(response) {
+					if(response.volume != undefined) {
+						this.mvolModel.value = parseInt(response.volume);
+						this.controller.modelChanged(this.mvolModel);
+						this.controller.get('dm_mvol').innerText = "Media Volume = " + response.volume;
+					} else {
+						this.controller.get('dm_mvol').innerText = "Media Volume = unknown";
+					}
+				}.bind(this)
+			});
+			this.controller.serviceRequest('palm://com.palm.audio/system', {
+				method: 'getVolume',
+				parameters:{},
+				onSuccess: function(response) {
+					if(response.volume != undefined) {
+						this.svolModel.value = parseInt(response.volume);
+						this.controller.modelChanged(this.svolModel);
+						this.controller.get('dm_svol').innerText = "System Volume = " + response.volume;
+					} else {
+						this.controller.get('dm_svol').innerText = "System Volume = unknown";
+					}
+				}.bind(this)
+			});			
+			this.controller.serviceRequest('palm://com.palm.telephony', {
+				method: 'powerQuery',
+				parameters: {},
+				onSuccess: function(response) {
+					this.phoneState = response.extended.powerState;
+					this.setPhoneLabel();
+				}.bind(this)
+			});			
+			this.controller.serviceRequest('palm://com.palm.connectionmanager', {
+				method: 'getstatus',
+				parameters: {},
+				onSuccess: function(response) {
+					if(response.wan.state === "disconnected") {
+						this.dataDisabled = "on";
+					} else if(response.wan.state === "connected") {
+						this.dataDisabled = "off";
+					}
+					this.setDataLabel();
+				}.bind(this)
+			});
+			this.controller.serviceRequest('palm://com.palm.telephony', {
+				method: 'roamModeQuery',
+				parameters: {},
+				onSuccess: function(response) {
+					this.roamStatus = response.extended.mode;
+					this.setRoamLabel();
+				}.bind(this)
+			});
+			this.controller.serviceRequest('palm://com.palm.location', {
+				method: 'getUseGps',
+				parameters: {},
+				onSuccess: function(response) {
+					this.gpsEnabled = response.useGps;
+					this.setGPSLabel();
+				}.bind(this)
+			});
+			this.flashVal = 0;
+			this.controller.serviceRequest('palm://ca.canucksoftware.systoolsmgr', {
+				method: 'flashState',
+				parameters: {},
+				onSuccess: function(response) {
+					this.flashVal = response.value;
+					this.setFlashLabel();
+				}.bind(this),
+				onFailure: function(err) {
+					this.controller.get('flashStatus').innerText = "Error";
+				}.bind(this)
+			});			
 			
 			if(this.turningOnBtRadio) {
 				this.btspinnerModel.spinning = true;
 				this.controller.modelChanged(this.btspinnerModel);
 			}
+			this.controller.serviceRequest('palm://ca.canucksoftware.systoolsmgr', {
+				method: 'cpuTemperature',
+				onSuccess: function(payload) {
+					if(payload.value) {
+						this.controller.get("tempmsg").innerHTML = payload.value + "&deg;C";
+					}
+				}.bind(this),
+				onFailure: function(err) {
+					this.controller.serviceRequest('palm://com.palm.bus/signal/', {
+						method: 'addmatch',
+						parameters: {
+							"category":"/com/palm/power",
+							"method":"batteryStatus"
+						},
+						onSuccess: function(payload2) {
+							if(payload2.temperature_C) {
+								this.controller.get("tempmsg").innerHTML = payload2.temperature_C + "&deg;C";
+							}
+						}.bind(this)
+					});
+					this.controller.serviceRequest('palm://com.palm.power/com/palm/power/', {
+						method: 'batteryStatusQuery'
+					});
+				}.bind(this)
+			});			
 			this.activateStage();
 			
 			var animateDialog = function(){
diff --git a/usr/lib/luna/system/luna-systemui/app/views/devicemenu/devicemenu-scene.html b/usr/lib/luna/system/luna-systemui/app/views/devicemenu/devicemenu-scene.html
index e81161a..bf5d1b5 100644
--- a/usr/lib/luna/system/luna-systemui/app/views/devicemenu/devicemenu-scene.html
+++ b/usr/lib/luna/system/luna-systemui/app/views/devicemenu/devicemenu-scene.html
@@ -25,7 +25,65 @@
 					<div id="dm_battery" class="title dim"></div>
 				</div></div> 
 
+				<div class="palm-row first" id="brightRow" x-mojo-tap-highlight='momentary'><div class="palm-row-wrapper">
+					<div id="dm_brightness" class="title">&nbsp;
+					</div>
+ 				</div></div>
+
+				<div id="brightdetails" x-mojo-element="Drawer">
+					<div class="palm-row first"><div class="palm-row-wrapper">
+						<div x-mojo-element="Slider" id="brightSlider" style="padding-top: 30px; height: 50px;"></div>
+					</div></div>
+				</div>
+				
 				<div class="palm-section-divider"></div>
+
+				<div class="palm-row first" id="mvolRow" x-mojo-tap-highlight='momentary'><div class="palm-row-wrapper">
+					<div id="dm_mvol" class="title">&nbsp;
+					</div>
+				</div></div>
+
+				<div id="mvoldetails" x-mojo-element="Drawer">
+					<div class="palm-row first"><div class="palm-row-wrapper">
+						<div x-mojo-element="Slider" id="mvolSlider" style="padding-top: 30px; height: 50px;"></div>
+					</div></div>
+				</div>	
+
+				<div class="palm-section-divider">
+				</div>  
+
+				<div class="palm-row first" id="svolRow" x-mojo-tap-highlight='momentary'><div class="palm-row-wrapper">
+					<div id="dm_svol" class="title">&nbsp;
+					</div>
+				</div></div>
+
+				<div id="svoldetails" x-mojo-element="Drawer">
+					<div class="palm-row first"><div class="palm-row-wrapper">
+						<div x-mojo-element="Slider" id="svolSlider" style="padding-top: 30px; height: 50px;"></div>
+					</div></div>
+				</div>
+
+				<div class="palm-section-divider">
+ 				</div>			
+
+				<div class="palm-row first" id="phoneRow" x-mojo-tap-highlight='momentary'><div class="palm-row-wrapper">
+					<div id="dm_phone" class="title">Phone</div>
+				</div></div>
+
+				<div id="phonedetails" x-mojo-element="Drawer">
+					<div class="palm-row first" id="phone_radio" x-mojo-tap-highlight='momentary'><div class="palm-row-wrapper">
+						<div id="phoneStatus" class="label right">&nbsp;</div>
+						<div class="title">Phone Radio</div>
+					</div></div>
+					<div class="palm-row" id="phone_data" x-mojo-tap-highlight='momentary'><div class="palm-row-wrapper">
+						<div id="dataStatus" class="label right">&nbsp;</div>
+						<div class="title">Data Usage</div>
+					</div></div>
+					<div class="palm-row last" id="phone_roam" x-mojo-tap-highlight='momentary'><div class="palm-row-wrapper">
+						<div id="roamStatus" class="label right">&nbsp;</div>
+						<div class="title">Roam Only</div>
+					</div></div>
+				</div>
 				
 				<div class="palm-row" id="dm_ime" x-mojo-tap-highlight='momentary'><div class="palm-row-wrapper">
 					<div class="title truncating-text">
@@ -158,6 +216,24 @@
 				</div>	
 				
 				<div class="palm-section-divider"></div>
+				 
+				  <div class="palm-row" id="dm_gps" x-mojo-tap-highlight='momentary'><div class="palm-row-wrapper">
+					<div class="title truncating-text">
+						<div class="label right" id="gpsStatus">&nbsp;</div>
+						<span x-mojo-loc=''>GPS</span>
+					</div>
+				</div></div>
+
+				<div class="palm-section-divider"></div>
+
+				<div class="palm-row last menu-end" id="dm_flash"><div class="palm-row-wrapper">
+					<div class="title truncating-text">
+						<div class="label right" id="flashStatus">&nbsp;</div>
+						<span x-mojo-loc=''>Flashlight</span>
+					</div>
+				</div></div>
+
+				<div class="palm-section-divider"></div>				
 				
 				<div id="dm_airplanemode" class="palm-row last menu-end" x-mojo-tap-highlight='momentary'><div class="palm-row-wrapper">
 					<div id="dm_airplanemode_status" class="title truncating-text">
