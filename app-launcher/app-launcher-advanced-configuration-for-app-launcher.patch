--- .orig/usr/lib/luna/system/luna-applauncher/sources.json
+++ /usr/lib/luna/system/luna-applauncher/sources.json
@@ -7,6 +7,11 @@
 		"source": "app\/controllers\/launcher-assistant.js",
 		"scenes": "launcher"
 	},
+
+	{
+		"source": "app\/controllers\/prefs-assistant.js",
+		"scenes": "prefs"
+	},
 	
 	{
 		"source": "app\/controllers\/global-search-assistant.js"
--- .orig/usr/lib/luna/system/luna-systemui/app/controllers/bar-assistant.js
+++ /usr/lib/luna/system/luna-systemui/app/controllers/bar-assistant.js
@@ -33,6 +33,21 @@
 		
 		this.getBuildName();
 						
+		// Subscribe to the App Launcher and Quick Launch Bar prererences
+		this.appLauncherCfg = null;
+		this.quickLaunchCfg = null;
+
+		this.getPreferencesRequest = new Mojo.Service.Request('palm://com.palm.systemservice', {
+			method: 'getPreferences', parameters: {"keys":["appLauncherCfg", "quickLaunchCfg"],"subscribe": true},
+			onSuccess: function(payload) {
+				if(payload != undefined) {
+					if(payload.appLauncherCfg != undefined)
+						this.appLauncherCfg = payload.appLauncherCfg;
+					if(payload.quickLaunchCfg != undefined)
+						this.quickLaunchCfg = payload.quickLaunchCfg;
+				}
+			}.bind(this) });
+		
 		// Initialize the Battery Power Nofication and get the initial value
 		this.initOnServerStart("com.palm.power", this.powerInitialize.bind(this), this.powerDeInit.bind(this));
 		
@@ -294,6 +309,12 @@
 	this.phoneIsForeground = false;
 	this.updateIsForeground = false;
 	
+	if((this.appLauncherCfg) && (this.appLauncherCfg.names) && 
+		(this.appLauncherCfg.names[payload.id + "_default"] != undefined))
+	{
+		payload.appmenu = this.appLauncherCfg.names[payload.id + "_default"].replace("<br>", " ");
+	}
+	
 	if (payload.title) {
 		$('carrier').hide();
 		if (payload.id == "com.palm.app.phone" || payload.id == "com.palm.app.firstuse"){ 
@@ -316,6 +337,11 @@
 		$('carrier').show();
 		this.foregroundAppID=null;
 	}
+
+	if((this.quickLaunchCfg) && (this.quickLaunchCfg.mode == "hidden")) {
+		this.controller.serviceRequest('palm://com.palm.systemmanager', {
+			method: 'systemUi', parameters: {"quicklaunch": false} });
+	}
 },
 
 updatePhoneAppName: function(){
--- .orig/usr/lib/luna/system/luna-applauncher/app/controllers/global-search-assistant.js
+++ /usr/lib/luna/system/luna-applauncher/app/controllers/global-search-assistant.js
@@ -212,6 +212,13 @@
 			this.launcherHiddenAtFirstKeydown = true;
 		}
 		
+		this.viewMenuState = this.launcherAssistant.viewMenuModel.visible;
+		
+		if(this.launcherAssistant.viewMenuModel.visible) {
+			this.launcherAssistant.viewMenuModel.visible = false;
+			this.controller.modelChanged(this.launcherAssistant.viewMenuModel, this);
+		}
+			
 		// save the launchers scroller states
 		this.controller.hideWidgetContainer(this.controller.getSceneScroller());
 		this.controller.get('launcher-main').hide();
@@ -237,6 +244,11 @@
 			return;
 		}
 		
+		if(this.viewMenuState) {
+			this.launcherAssistant.viewMenuModel.visible = this.viewMenuState;
+			this.controller.modelChanged(this.launcherAssistant.viewMenuModel, this);
+		}
+			
 		// restore the launchers scroller states
 		this.controller.get('global-search-main').addClassName('offscreen');
 		this.controller.get('launcher-main').show();
@@ -249,9 +261,6 @@
 			SystemManagerService.showLauncher(false);
 			this.launcherHiddenAtFirstKeydown = false;
 		}
-		else {
-			SystemManagerService.showQuickLaunch(true);
-		}
 		
 		this.galInit();
 	},
@@ -265,15 +274,13 @@
 	},
 	
 	onKeyDown: function(event) {
-		
-		this.searchField.mojo.focus();
 
 		// block key events from global search
-		if (!this.searchEnabled) {
-			event.stop();
+		if (!this.searchEnabled)
 			return;
-		}
 		
+		this.searchField.mojo.focus();
+
 		// track whether we should hide the launcher when exiting global search
 		if (this.searchTerm.length === 0 && !Mojo.Controller.stageController.isActiveAndHasScenes()) {			
 			this.launcherHiddenAtFirstKeydown = true;
@@ -283,10 +290,8 @@
 	onKeyUp: function(event) {
 		
 		// block key events from global search
-		if (!this.searchEnabled) {
-			event.stop();
+		if (!this.searchEnabled)
 			return;
-		}
 	
 		// first key no longer being held
 		this.searchPressHoldTerm = "";
@@ -299,6 +304,10 @@
 	
 	onKeyPress: function(event) {
 		
+		// block key events from global search
+		if (!this.searchEnabled)
+			return;
+				
 		if(this.searchPressHoldTerm && this.searchPressHoldTerm.length > 0 && event.keyCode != this.searchPressHoldTerm.charCodeAt(0)) {
         	// first key no longer being held
             this.searchPressHoldTerm = "";
@@ -310,8 +319,7 @@
         } 
 
 		// block key events from global search and from repeating until the first key has been processed
-		if (!this.searchEnabled || 
-			this.searchPressHoldTerm.length !== 0 ||
+		if (this.searchPressHoldTerm.length !== 0 ||
 			(event.keyCode === Mojo.Char.spaceBar && !this.searchActive)) {
 			
 			event.stop();
@@ -341,6 +349,10 @@
 	
 	onSearchTermChanged: function(event) {
 		
+		// block key events from global search
+		if (!this.searchEnabled)
+			return;
+		
 		if (event.originalEvent && event.originalEvent.keyCode === Mojo.Char.enter) {
 			if (this.currentFilter.length > 0) {
 				// i'm feeling lucky
@@ -1734,6 +1746,12 @@
 			// appitem.title need to highlight matched search string
 			if ( this.currentFilter && this.currentFilter.length > 0) {
 				var apptitle = appitem.title;					
+
+				if((this.launcherAssistant.appLauncherCfg) && (this.launcherAssistant.appLauncherCfg.names)) {
+					if(this.launcherAssistant.appLauncherCfg.names[appitem.launchPointId] != undefined)
+						apptitle = this.launcherAssistant.appLauncherCfg.names[appitem.launchPointId];
+				}
+
 				apptitle = apptitle.replace(beginPattern, function(whole, match) {
 					return matchTemplate.replace('ZZZZ', match);
 				});
@@ -1783,8 +1801,8 @@
 		this.searchAppsReq = new Mojo.Service.Request('palm://com.palm.applicationManager', {
 			method: 'searchApps',
 			parameters: {'keyword': t},
-			onSuccess: this.handleSearchAppResults.bind(this),
-			onFailure: this.handleSearchAppResults.bind(this)
+			onSuccess: this.handleSearchAppResults.bind(this, t),
+			onFailure: this.handleSearchAppResults.bind(this, t)
 		});
 	
 		if (kEasterStrings.indexOf(t) !== -1) {
@@ -1792,17 +1810,34 @@
 		}
 	},
 	
-	handleSearchAppResults: function(response) {
+	handleSearchAppResults: function(keyword, response) {
 		if(!response.apps)
 			return;
 			
 		var matchingApps = response.apps;
 		var appInfoObj;
 		
+		var added = [];
+
+		if((this.launcherAssistant.appLauncherCfg) && (this.launcherAssistant.appLauncherCfg.names)) {
+			for(var key in this.launcherAssistant.appLauncherCfg.names) {
+				if(this.launcherAssistant.appLauncherCfg.names[key].substr(0, keyword.length).toLowerCase().replace("<br>", " ") == keyword) {
+					appInfoObj = this.launcherAssistant.pagesModel.getAppInfo(key);
+					if(appInfoObj != null) {
+						this.searchApps.push(appInfoObj);
+						
+						added.push(key);
+					}
+				}
+			}
+		}
+
 		for(var i = 0; i< matchingApps.length; i++) {
-			appInfoObj = this.launcherAssistant.pagesModel.getAppInfo(matchingApps[i].launchPoint);
-			if(appInfoObj != null)
-				this.searchApps.push(appInfoObj);
+			if(added.indexOf(matchingApps[i].launchPoint) == -1) {
+				appInfoObj = this.launcherAssistant.pagesModel.getAppInfo(matchingApps[i].launchPoint);
+				if(appInfoObj != null)
+					this.searchApps.push(appInfoObj);
+			}
 		}
 		
 		this.updateLauncherIconsDiv(this.searchApps);
--- .orig/usr/lib/luna/system/luna-applauncher/app/controllers/reorder-controller.js
+++ /usr/lib/luna/system/luna-applauncher/app/controllers/reorder-controller.js
@@ -239,6 +239,13 @@
 		for (var i = 0, len = this.appDivs.length; i < len; ++i) {
 			
 			var pos = this.launcherAssistant.calculateAppPosition(i);
+			
+			if((this.launcherAssistant.appLauncherCfg) && 
+				(this.launcherAssistant.appLauncherCfg.header != "none"))
+			{
+				pos.top = pos.top + 50;
+			}
+			
 			var item = new Element('div', {'class': 'droppable'});
 			item.style.left = pos.left+'px';
 			item.style.top = pos.top+'px';
@@ -314,7 +321,10 @@
 	
 	_startCyclePage: function(direction) {
 		if (!this.pagingTimer && !this.pagingAnimating) {
-			this.pagingTimer = this._cyclePage.bind(this, direction).delay(this.kHorizontalPageTimeout);
+			if((this.launcherAssistant.appLauncherCfg) && (this.launcherAssistant.appLauncherCfg.wrap))
+				this.pagingTimer = this._cyclePage.bind(this, direction).delay(this.kHorizontalPageTimeout * 2);
+			else
+				this.pagingTimer = this._cyclePage.bind(this, direction).delay(this.kHorizontalPageTimeout);
 			
 			Mojo.listen($('launcher_root'), Mojo.Event.scrollStarting, this.scrollerListenerHandler);
 		}
@@ -427,15 +437,41 @@
 	_cyclePage: function(direction) {
 		
 		var canPage = false;
+		var snapIndex = 0;
+
 		if (direction == -1 && this.activePage.previous() !== null) {
 			this.previousPage = this.activePage;
 			this.activePage = this.activePage.previous();
 			canPage = true;
+			snapIndex = this.launcherAssistant.activePageIndex + direction;
+		}
+		else if (direction == -1 && this.activePage.previous() == null) {
+			if((this.launcherAssistant.appLauncherCfg) && 
+				(this.launcherAssistant.appLauncherCfg.wrap))
+			{
+				this.previousPage = this.activePage;
+				while(this.activePage.next() !== null)
+					this.activePage = this.activePage.next();
+				canPage = true;
+				snapIndex = this.launcherAssistant.pagesModel.getNumPages() - 1;
+			}
 		}
 		else if (direction == 1 && this.activePage.next() !== null) {
 			this.previousPage = this.activePage;
 			this.activePage = this.activePage.next();
 			canPage = true;
+			snapIndex = this.launcherAssistant.activePageIndex + direction;
+		}
+		else if (direction == 1 && this.activePage.next() == null) {
+			if((this.launcherAssistant.appLauncherCfg) &&
+				(this.launcherAssistant.appLauncherCfg.wrap))
+			{
+				this.previousPage = this.activePage;
+				while(this.activePage.previous() !== null)
+					this.activePage = this.activePage.previous();
+				canPage = true;
+				snapIndex = 0;
+			}
 		}
 	    
 		if (canPage) {
@@ -446,7 +482,18 @@
 			this.activePage.show();
 			
 			this.pagingAnimating = true;
-			$('launcher_root').mojo.setSnapIndex(this.launcherAssistant.activePageIndex + direction, true);
+			
+			this.launcherAssistant.changePage(snapIndex, true);
+			
+			if((this.launcherAssistant.appLauncherCfg) && 
+				(this.launcherAssistant.appLauncherCfg.wrap))
+			{
+				this.launcherAssistant.onPageChange({value: snapIndex});
+				
+				this.pagingAnimating = false;
+				var previousPageIndex = this.launcherAssistant.getPageIndex(this.previousPage);
+				this._pagingComplete(previousPageIndex, this.launcherAssistant.activePageIndex);
+			}
 		}
 	},
 	
--- .orig/usr/lib/luna/system/luna-applauncher/app/controllers/launcher-assistant.js
+++ /usr/lib/luna/system/luna-applauncher/app/controllers/launcher-assistant.js
@@ -8,7 +8,7 @@
 	 * hardcoding the quick launch height until we can find a better way. 
 	 * This value = ql graphic height - the offset from the top (small fade area)
 	 */
-	kQuickLaunchHeight: 67,
+	kQuickLaunchHeight: 0,
 	
 	kPageIndicatorSpacing: 6, 	/* spacing between each page indicator */
 	kPageMargin: 10, /* 10 pixel margin on each side of a page */
@@ -23,11 +23,12 @@
 		visible: true,
 		label: $L('Launcher'),
         items: [
-			/*{ label: $L('New page'), command: 'newpage' },
-			{ label: $L('Delete page'), command: 'deletepage' },*/
 			Mojo.Menu.editItem,
-			{ label: $L('List Apps...'), command: 'listapps' },
-			{ label: $L('Default Applications'), command: 'defaultapps'},
+			{ label: $L('Preferences'), command: 'preferences' },
+			{ label: $L('Enter Edit Mode'), command: 'startedit' },
+			{ label: $L('Set As Default Page'), command: 'setdefault' },
+			{ label: $L('List All Applications'), command: 'listapps' },
+			{ label: $L('Default Applications'), command: 'defaultapps' },
 			Mojo.Menu.helpItem
 		]
     },
@@ -59,13 +60,59 @@
 		
 		this.dragStartHandler = this.onDragStart.bindAsEventListener(this);
 		this.launchApp = this.launchApp.bind(this);
+
+		this.pageText = "";
+		this.renaming = false;
+
+		this.activePageIndex = 0;
+		
+		this.pagingAnimating = false;
+		
+		this.appLauncherCfg = {header: "none", placement: "first", reset: false, wrap: false, 
+			indicators: true, grid: "small", icons: "large", titles: true, page: "default", 
+			pages: [], hidden: [], names: {}};
+		
+		this.quickLaunchCfg = {mode: "visible"};
 	},
 	
 	setup: function() {
 		
+		this.getPreferencesRequest = new Mojo.Service.Request('palm://com.palm.systemservice/', {
+			method: 'getPreferences', parameters: {subscribe: false, keys: ['appLauncherCfg', 'quickLaunchCfg']},
+			onSuccess: this.handlePreferences.bind(this) });
+
+		this.viewMenuModel = {visible: false, items: []};
+
+		this.controller.setupWidget(Mojo.Menu.viewMenu, {spacerHeight: 0, menuClass: 'no-fade'},
+			this.viewMenuModel);
+
+		this.commandMenuModel = {visible: false, items: [
+			{items: [
+				{ icon: "new", command: "addnewpage"},
+				{ icon: 'delete', command: 'deletepage'}
+			]},
+			{label: "Rename", command: "renamepage", width: 100},
+			{items: [
+				{ icon: "back", command: "movepageleft"},
+				{ icon: 'forward', command: 'movepageright'}
+			]} ]};
+
+		this.controller.setupWidget(Mojo.Menu.commandMenu, {spacerHeight: 0, menuClass: 'no-fade'},
+			this.commandMenuModel);
+
+		Mojo.listen(this.controller.document, Mojo.Event.activate, this.onActivate.bindAsEventListener(this));
 		Mojo.listen(this.controller.document, Mojo.Event.deactivate, this.onDeactivate.bindAsEventListener(this));
 		Mojo.listen(this.controller.window, 'resize', this.onResize.bindAsEventListener(this));
 		
+		this.launcherTapHandler = this.handleLauncherTap.bindAsEventListener(this);
+		Mojo.listen($('launcher_root'), Mojo.Event.tap, this.launcherTapHandler);
+		
+		this.headerTapHandler = this.handleHeaderTap.bindAsEventListener(this);
+		Mojo.listen($('page_header'), Mojo.Event.tap, this.headerTapHandler);
+		
+		this.appRenameHandler = this.handleAppRename.bindAsEventListener(this);
+		this.pageRenameHandler = this.handlePageRename.bindAsEventListener(this);
+
 		this.pagesModel = new LauncherPages({
 				onPagesLoaded: this.buildPages.bind(this),
 				onAppAdded: this.onAppAdded.bind(this),
@@ -84,10 +131,18 @@
 		this.controller.setupWidget('launcher_root', undefined, this.launcherRootModel);
 		
 		this.reorderController = new ReorderController(this, this.onReorderFinished.bind(this));
-		Mojo.listen($('launcher_root'), Mojo.Event.propertyChange, this.onPageChange.bindAsEventListener(this));
 		
-		this.controller.setupWidget(Mojo.Menu.appMenu, {omitDefaultItems:true}, this.appMenuModel);
+		this.pageChangeHandler = this.onPageChange.bindAsEventListener(this);
+		Mojo.listen($('launcher_root'), Mojo.Event.propertyChange, this.pageChangeHandler);
+		
+		this.scrollStartingHandler = this.scrollStarting.bindAsEventListener(this);
 
+		this.controller.setupWidget(Mojo.Menu.appMenu, {omitDefaultItems:true}, this.appMenuModel);
+		
+		this.pageNameModel = { value: this.pageText };
+		
+		this.controller.setupWidget('page_text', {disabled: false, changeOnKeyPress: true}, this.pageNameModel);
+		
 		// pre-calculate commonly used measurements
 		this.kPageWidth = $('launcher_root').getWidth();
 		this.kPageWidthNoMargin = (this.kPageWidth - this.kPageMargin * 2);
@@ -121,23 +176,60 @@
 				case 'defaultapps':
 					ApplicationService.launch(this.deviceInfo.id, this.deviceInfo.defaultAppParams);
 					break;
-				/*
-				case 'newpage':
-					if (this.pageDivs.length < 10) {
-						this.insertPage(this.activePageIndex, true);
+				case 'preferences':
+					this.controller.stageController.pushScene("prefs", this.appLauncherCfg, 
+						this.quickLaunchCfg, this.reloadPreferences.bind(this));
+					break;
+				case 'addnewpage':
+					if (this.pageDivs.length < 16) {
+						this.insertPage(this.pageDivs.length, true);
 					}
 					break;
 				case 'deletepage':
 					if (this.pageDivs.length > 1) {
-						this.deletePage(this.activePageIndex);
-						if (this.activePageIndex >= this.pageDivs.length) {
-							this.activePageIndex = this.pageDivs.length - 1;
-						}
+						this.confirmDelete();
 					}
 					break;
-				*/
+				case 'renamepage':
+					this.startPageRename();
+					break;
+				case 'movepageleft':
+					this.movePage("left");
+					break;
+				case 'movepageright':
+					this.movePage("right");
+					break;					
+				case 'startedit':
+					this.startEditMode(event);
+					break;
+				case 'setdefault':
+					this.setDefaultPage(event);
+					break;
+				case 'showpagemenu':
+					this.tabPageSelect(event);
+					break;
+				case 'selectpage1':
+					this.tabPageSelect(event, 0);
+					break;
+				case 'selectpage2':
+					this.tabPageSelect(event, 1);
+					break;
+				case 'selectpage3':
+					this.tabPageSelect(event, 2);
+					break;
+				case 'selectpage4':
+					this.tabPageSelect(event, 3);
+					break;
+				case 'selectpage5':
+					this.tabPageSelect(event, 4);
+					break;
 			}
 		}
+		else if(event.type == Mojo.Event.forward) {
+			var chooseCallback = this.jumpToPage.bind(this);
+
+			this.showPageMenus(false, $L("Jump to Page:"), chooseCallback);
+		}			
 		else if (event.type === Mojo.Event.commandEnable) {
 			switch (event.command) {
 				case Mojo.Menu.copyCmd:
@@ -157,16 +249,773 @@
 			}
 		}
 	},
+	
+	handlePreferences: function(payload) {
+		if(payload != undefined) {
+			if(payload.appLauncherCfg != undefined)
+				this.appLauncherCfg = payload.appLauncherCfg;
+			
+			if(payload.quickLaunchCfg != undefined)
+				this.quickLaunchCfg = payload.quickLaunchCfg;
+		}
+
+		// FIXME: remove at some point
 		
+		if(this.appLauncherCfg) {
+			if(this.appLauncherCfg.header == true) {
+				if(this.appLauncherCfg.visual == "tabs")
+					this.appLauncherCfg.header = "tabs";
+				else
+					this.appLauncherCfg.header = "name";
+			}
+			else if(this.appLauncherCfg.header == false)
+				this.appLauncherCfg.header = "none";
+
+			if(this.appLauncherCfg.placement == undefined)
+				this.appLauncherCfg.placement = "first";
+
+			if(this.appLauncherCfg.indicators == undefined)
+				this.appLauncherCfg.indicators = true;
+
+			if(this.appLauncherCfg.grid == undefined)
+				this.appLauncherCfg.grid = "small";
+
+			if(this.appLauncherCfg.icons == undefined)
+				this.appLauncherCfg.icons = "large";
+
+			if(this.appLauncherCfg.titles == undefined)
+				this.appLauncherCfg.titles = true;;
+			
+			if(this.appLauncherCfg.titles == true)
+				this.controller.get("launcher-main").removeClassName("notitles");
+			else
+				this.controller.get("launcher-main").addClassName("notitles");
+
+			if(this.appLauncherCfg.indicators == true)
+				this.controller.get("launcher-main").removeClassName("noindicators");
+			else
+				this.controller.get("launcher-main").addClassName("noindicators");
+		
+			this.controller.get("launcher_root").className = "grid_" + this.appLauncherCfg.grid;
+		
+			this.controller.get("pages_container").className = "icons_" + this.appLauncherCfg.icons;
+
+			if(this.appLauncherCfg.page == "default")
+				this.appMenuModel.items[3].label = "Set As Default Page";
+			else
+				this.appMenuModel.items[3].label = "Unset Default Page";
+		
+			this.controller.modelChanged(this.appMenuModel, this);
+
+			this.updateAppLauncher(true);
+			this.updateQuickLaunch(true);
+
+			this.setPreferencesRequest = new Mojo.Service.Request('palm://com.palm.systemservice/', {
+				method: 'setPreferences', parameters: {'appLauncherCfg': this.appLauncherCfg}});
+
+			this.getPreferencesRequest = new Mojo.Service.Request('palm://com.palm.systemservice/', {
+				method: 'getPreferences', parameters: {subscribe: true, keys: ['appLauncherCfg']},
+				onSuccess: this.handlePreferencesUpdate.bind(this) });
+		}
+	},
+
+	handlePreferencesUpdate: function(payload) {
+		if((this.appLauncherCfg) && (payload != undefined) && 
+			(payload.appLauncherCfg != undefined))
+		{
+			var oldHidden = [];
+		
+			if(this.appLauncherCfg.hidden)
+				oldHidden = this.appLauncherCfg.hidden;
+	
+			this.appLauncherCfg = payload.appLauncherCfg;
+		
+			for(var i = 0; i < oldHidden.length; i++) {
+				if(this.appLauncherCfg.hidden.indexOf(oldHidden[i]) == -1) {
+					var location = {page: 0, position: 0};
+			
+					for (var j=0, numPages=this.pagesModel.getNumPages(); j<numPages; j++) {
+						var page = this.pagesModel.getPage(j);
+		
+						location.page = j;
+					
+						for (var k=0; k<page.length; k++) {
+							var appInfo = this.pagesModel.getAppInfo(page[k]);
+
+							if(appInfo.launchPointId == oldHidden[i]) {
+								location.position = k;
+								this.insertApp(location, appInfo);
+							}
+						}
+					}
+				}
+			}
+		
+			for(var i = 0; i < this.appLauncherCfg.hidden.length; i++) {
+				if(oldHidden.indexOf(this.appLauncherCfg.hidden[i]) == -1) {
+					this.deleteApp(this.appLauncherCfg.hidden[i], true);
+				}
+			}
+		}
+	},
+	
+	reloadPreferences: function(buildPages) {
+		this.updateAppLauncher(false);
+		this.updateQuickLaunch(false);
+	
+		if(this.appLauncherCfg.titles == true)
+			this.controller.get("launcher-main").removeClassName("notitles");
+		else
+			this.controller.get("launcher-main").addClassName("notitles");
+
+		if(this.appLauncherCfg.indicators == true)
+			this.controller.get("launcher-main").removeClassName("noindicators");
+		else
+			this.controller.get("launcher-main").addClassName("noindicators");
+			
+		this.controller.get("launcher_root").className = "grid_" + this.appLauncherCfg.grid;
+
+		this.controller.get("pages_container").className = "icons_" + this.appLauncherCfg.icons;
+		
+		if(buildPages)
+			this.buildPages();		
+	},
+
+	startEditMode: function(event) {
+		var chooseCallback = this.selectPage.bind(this);
+		
+		this.showPageMenus(true, $L("Edit Launcher Pages:"), chooseCallback);
+	},
+	
+	setDefaultPage: function(event) {
+		if(this.appLauncherCfg.page == "default") {
+			this.appMenuModel.items[3].label = $L("Unset Default Page");
+			this.appLauncherCfg.page = this.activePageIndex;
+		}
+		else {
+			this.appMenuModel.items[3].label = $L("Set As Default Page");
+			this.appLauncherCfg.page = "default";
+		}
+		
+		this.controller.modelChanged(this.appMenuModel, this);
+			
+		if(this.setPreferencesRequest)
+			this.setPreferencesRequest.cancel();
+	
+		this.setPreferencesRequest = new Mojo.Service.Request('palm://com.palm.systemservice/', {
+			method: 'setPreferences', parameters: {'appLauncherCfg': this.appLauncherCfg} });
+	},
+	
+	updateAppLauncher: function(init) {
+		if(!this.appLauncherCfg)
+			return;
+	
+		if(this.appLauncherCfg.header == "none") {
+			this.controller.get('page_header').style.display = "none";
+			this.controller.get('page_name').style.display = "none";
+			
+			this.viewMenuModel.visible = false;
+			this.controller.modelChanged(this.viewMenuModel, this);
+		}
+		else if(this.appLauncherCfg.header == "name") {
+			this.controller.get('page_header').style.display = "block";
+			this.controller.get('page_name').style.display = "block";
+		
+			this.viewMenuModel.visible = false;
+		}
+		else if(this.appLauncherCfg.header == "tabs") {
+			this.controller.get('page_header').style.display = "none";
+			this.controller.get('page_name').style.display = "none";
+
+			this.viewMenuModel.visible = true;
+		}
+
+		this.controller.modelChanged(this.viewMenuModel, this);
+
+		this.updatePageTabs();
+		this.updatePageHeader();
+
+		if(this.appLauncherCfg.wrap)
+			Mojo.listen($('launcher_root'), Mojo.Event.scrollStarting, this.scrollStartingHandler);
+		else
+			Mojo.stopListening($('launcher_root'), Mojo.Event.scrollStarting, this.scrollStartingHandler);
+
+		for(var i = 0; i < this.pageDivs.length; i++)
+			this.updatePageLayout(i, 0);
+	},
+
+	updateQuickLaunch: function(init) {
+		if(!this.quickLaunchCfg)
+			return;
+			
+		if(this.quickLaunchCfg.mode == "visible") {
+			SystemManagerService.showQuickLaunch(true);
+			this.kQuickLaunchHeight = 67;
+		}	
+		else if(this.quickLaunchCfg.mode == "hidden") {
+			SystemManagerService.showQuickLaunch(false);
+			this.kQuickLaunchHeight = 0;
+		}	
+		else if(this.quickLaunchCfg.mode == "mixed") {
+			SystemManagerService.showQuickLaunch(init);
+			this.kQuickLaunchHeight = 0;
+		}
+
+		this.adjustLayout();
+	},
+
+	updatePageHeader: function() {
+		if(this.appLauncherCfg.header == "name") {
+			var pageName = this.getPageName(this.activePageIndex);
+			
+			this.controller.get('page_name').update(pageName);
+
+			this.controller.get('page_header').style.display = "block";
+			this.controller.get('page_text').style.display = "none";
+			this.controller.get('page_name').style.display = "block";
+		}
+	},
+	
+	updatePageTabs: function() {
+		if(this.appLauncherCfg.header == "tabs") {
+			this.viewMenuModel.visible = true;
+
+			var tabs = [];
+			var size = 325 / this.pageDivs.length;
+			
+			if(this.pageDivs.length > 5) {
+				tabs.push({label: "#1", command: "selectpage1"});
+				tabs.push({label: "#2", command: "selectpage2"});
+				tabs.push({label: "Menu", command: "showpagemenu"});
+				tabs.push({label: "#3", command: "selectpage3"});
+				tabs.push({label: "#4", command: "selectpage4"});
+			}
+			else {
+				for(var i = 0; i < this.pageDivs.length; i++) {
+					tabs.push({label: "#" + (i + 1), command: "selectpage" + (i + 1), width: size});
+				}
+			}
+		
+			this.viewMenuModel.items.clear();
+			this.viewMenuModel.items.push({items: []}, {items: tabs}, {items: []});
+			
+			this.viewMenuModel.items[1].toggleCmd = 'selectpage' + (parseInt(this.activePageIndex) + 1);
+
+			this.controller.modelChanged(this.viewMenuModel);
+		}
+	},
+	
+	tabPageSelect: function(event, index) {
+		if(index != undefined)
+			this.viewMenuModel.items[1].toggleCmd = 'selectpage' + index;
+		else
+			this.viewMenuModel.items[1].toggleCmd = 'selectpagemenu';
+	
+		if((event.originalEvent.up) && ( event.originalEvent.up.altKey || event.originalEvent.up.metaKey )) {
+			if((this.pageDivs.length <= 5) || (index == undefined)) {		
+				var chooseCallback = this.selectPage.bind(this);
+
+				this.showPageMenus(true, $L("Edit Launcher Pages:"), chooseCallback);
+			}
+			else if(index + 4 < this.pageDivs.length) {
+				this.changePage(index + 4, true);
+			}	
+		}
+		else {
+			if(index == undefined) {
+				var chooseCallback = this.jumpToPage.bind(this);
+
+				for(var i = 0; i < this.viewMenuModel.items[1].items.length; i++)
+					this.viewMenuModel.items[1].items[i].disabled = true;
+					
+				this.controller.modelChanged(this.viewMenuModel, this);
+			
+				this.showPageMenus(false, null, chooseCallback);
+			}
+			else
+				this.changePage(index, true);
+		}
+	},
+		
+	handleLauncherTap: function(event) {
+		if((event.up) && ( event.up.altKey || event.up.metaKey )) {
+			var chooseCallback = this.selectPage.bind(this);
+
+			this.showPageMenus(true, $L("Edit Launcher Pages:"), chooseCallback);
+		}
+		else {
+			if(event.count == 2) {
+				var chooseCallback = this.jumpToPage.bind(this);
+
+				this.showPageMenus(false, $L("Jump to Page:"), chooseCallback);
+			}
+		}
+	},
+	
+	handleHeaderTap: function(event) {
+		if((event.up) && ( event.up.altKey || event.up.metaKey )) {
+			var chooseCallback = this.selectPage.bind(this);
+
+			this.showPageMenus(true, $L("Edit Launcher Pages:"), chooseCallback);
+		}
+		else {
+			var chooseCallback = this.jumpToPage.bind(this);
+
+			this.showPageMenus(false, $L("Jump to Page:"), chooseCallback);
+		}
+	},
+	
+	startAppRename: function(appInfo) {
+		Mojo.stopListening($('page_header'), Mojo.Event.tap, this.headerTapHandler);
+
+		Mojo.listen($('page_text'), Mojo.Event.propertyChange, this.appRenameHandler);
+		
+		if(this.appLauncherCfg.header == "tabs") {
+			this.viewMenuModel.visible = false;
+			this.controller.modelChanged(this.viewMenuModel, this);
+		}
+
+		this.controller.get('page_header').style.display = "block";
+		this.controller.get('page_name').style.display = "none";
+		this.controller.get('page_text').style.display = "block";
+
+		if((this.appLauncherCfg.names) && (this.appLauncherCfg.names[appInfo.launchPointId] != undefined))
+			this.pageNameModel.value = this.appLauncherCfg.names[appInfo.launchPointId];
+		else
+			this.pageNameModel.value = appInfo.title;
+		
+		this.pageNameModel.id = appInfo.launchPointId;
+			
+		this.controller.modelChanged(this.pageNameModel);			
+				
+		var curPos = this.pageNameModel.value.length;
+			
+		this.controller.get('page_text').mojo.setCursorPosition(curPos, curPos);
+		this.controller.get('page_text').mojo.focus();
+	},
+
+	handleAppRename: function(event) {
+		if((!event) || (Mojo.Char.isEnterKey(event.originalEvent.keyCode))) {
+			Mojo.listen($('page_header'), Mojo.Event.tap, this.headerTapHandler);
+
+			Mojo.stopListening($('page_text'), Mojo.Event.propertyChange, this.appRenameHandler);
+
+			this.controller.get('page_header').style.display = "none";
+			this.controller.get('page_text').style.display = "none";
+		
+			if(this.appLauncherCfg.header == "name") {
+				this.controller.get('page_header').style.display = "block";
+				this.controller.get('page_name').style.display = "block";
+			}
+			else if(this.appLauncherCfg.header == "tabs") {
+				this.viewMenuModel.visible = true;
+				this.controller.modelChanged(this.viewMenuModel, this);
+			}
+
+			var element = $(this.pageNameModel.id);
+
+			if (element) {
+				if(!this.appLauncherCfg.names) 
+					this.appLauncherCfg.names = {};
+			
+				this.appLauncherCfg.names[this.pageNameModel.id] = this.pageNameModel.value;
+
+				var elm = element.down('.name');
+				
+				elm.innerHTML = this.pageNameModel.value;
+			}
+
+			this.globalSearchAssistant.enable(true);
+
+			if(this.setPreferencesRequest)
+				this.setPreferencesRequest.cancel();
+		
+			this.setPreferencesRequest = new Mojo.Service.Request('palm://com.palm.systemservice/', {
+				method: 'setPreferences', parameters: {'appLauncherCfg': this.appLauncherCfg} });
+		}	
+	},
+	
+	startPageRename: function(refresh) {
+	 	this.globalSearchAssistant.enable(false);
+	
+		if((!refresh) && (this.renaming)) {
+			this.handlePageRename();
+		}
+		else {	
+			this.renaming = true;
+
+			Mojo.listen($('page_text'), Mojo.Event.propertyChange, this.pageRenameHandler);
+
+			if(!refresh) {
+				this.commandMenuModel.items[1].label = "Done";
+				this.controller.modelChanged(this.commandMenuModel);
+
+				this.pageNameModel.value = this.getPageName(this.activePageIndex);
+				this.controller.modelChanged(this.pageNameModel);
+			}
+
+			this.controller.get('page_name').style.display = "none";
+			this.controller.get('page_text').style.display = "block";
+			
+			var curPos = this.pageNameModel.value.length;
+			
+			this.controller.get('page_text').mojo.setCursorPosition(curPos, curPos);
+			this.controller.get('page_text').mojo.focus();
+		}
+	},
+	
+	handlePageRename: function(event) {
+		if((!event) || (Mojo.Char.isEnterKey(event.originalEvent.keyCode))) {
+			this.renaming = false;
+
+			Mojo.stopListening($('page_text'), Mojo.Event.propertyChange, this.pageRenameHandler);
+
+			this.setPageName(this.activePageIndex, this.pageNameModel.value);
+
+			this.controller.get('page_name').style.display = "block";
+			this.controller.get('page_text').style.display = "none";
+
+			this.selectPage(this.activePageIndex);
+
+			this.commandMenuModel.items[1].label = "Rename";
+			this.controller.modelChanged(this.commandMenuModel);
+
+			if(this.setPreferencesRequest)
+				this.setPreferencesRequest.cancel();
+	
+			this.setPreferencesRequest = new Mojo.Service.Request('palm://com.palm.systemservice/', {
+				method: 'setPreferences', parameters: {'appLauncherCfg': this.appLauncherCfg} });
+		}
+	},
+
+	selectPage: function(index) {
+		if((index == undefined) && (!this.renaming))
+			this.hidePageMenus();
+		else {
+			if(index != undefined) {
+				if(this.renaming)
+					this.handlePageRename();
+
+				this.changePage(index, true);
+
+				var chooseCallback = this.selectPage.bind(this);
+			
+				this.showPageMenus(true, $L("Edit Launcher Pages:"), chooseCallback);
+			}
+			else
+				setTimeout(this.hideSymbolMenu.bind(this), 5);
+		}
+	},
+
+	hideSymbolMenu: function() {
+		var chooseCallback = this.selectPage.bind(this);
+		
+		this.showPageMenus(true, $L("Edit Launcher Pages:"), chooseCallback);
+
+		if(this.renaming)
+			this.startPageRename(true);
+	},
+
+	jumpToPage: function(index) {
+		if(index == undefined) {
+			this.hidePageMenus();
+		}
+		else {
+			this.changePage(index, true);
+			
+			this.hidePageMenus();		
+		}
+	},
+	
+	movePage: function(direction) {
+		if(direction == "left") {
+			var newIndex = parseInt(this.activePageIndex) - 1;
+			
+			if(newIndex < 0)
+				return;
+		}
+		else if(direction == "right") {
+			var newIndex = parseInt(this.activePageIndex) + 1;
+
+			if(newIndex == this.pageDivs.length)
+				return;
+		}
+	
+		if(this.appLauncherCfg.page != "default") {
+			if(this.appLauncherCfg.page == this.activePageIndex)
+				this.appLauncherCfg.page = newIndex;			
+		}
+		
+		var oldIndex = parseInt(this.activePageIndex);
+
+		var tmp = this.appLauncherCfg.pages.splice(oldIndex,1);
+
+		this.appLauncherCfg.pages.splice(newIndex,0,tmp[0]);
+
+		this.pagesModel.switchPages(oldIndex, newIndex);
+
+		this.pagesModel.save();
+						
+		var apps1 = this.getAppContainer(oldIndex).select('.app');
+		var apps2 = this.getAppContainer(newIndex).select('.app');
+
+		var container1 = this.getAppContainer(oldIndex);
+		var container2 = this.getAppContainer(newIndex);
+
+		apps1.each(function(app) {
+			container1.removeChild(app);
+			container2.appendChild(app);
+		}.bind(this));
+
+		apps2.each(function(app) {
+			container2.removeChild(app);
+			container1.appendChild(app);
+		}.bind(this));
+
+		if (apps1.length > 0)
+			this.updatePageLayout(oldIndex, apps1.length);
+
+		if (apps2.length > 0)
+			this.updatePageLayout(newIndex, apps2.length);
+
+		this.selectPage(newIndex);
+		
+		if(this.setPreferencesRequest)
+			this.setPreferencesRequest.cancel();
+		
+		this.setPreferencesRequest = new Mojo.Service.Request('palm://com.palm.systemservice/', {
+			method: 'setPreferences', parameters: {'appLauncherCfg': this.appLauncherCfg} });
+	},
+	
+	movePageApp: function(appInfo, index) {
+		if(index == undefined) {
+			this.hidePageMenus();
+			return;
+		}
+
+		if(this.pageDivs[index] != undefined) {
+			var from = this.pagesModel.findApplication(appInfo.launchPointId);
+			var to = {page: parseInt(index), position: -1};
+
+			this.moveApp(appInfo.launchPointId, to);
+			this.pagesModel.moveApplication(from, to);
+
+			this.pagesModel.save();
+		}
+
+		this.hidePageMenus();
+	},
+
+	changePage: function(index, animate) {
+		if(this.appLauncherCfg.reset) {
+			var scroller = this.getPageScroller(this.activePageIndex);
+			
+			if (scroller && scroller.mojo) { scroller.mojo.revealTop(); }
+		}
+		
+		if(this.activePageIndex != index) {
+			this.activePageIndex = index;
+
+			if(this.appLauncherCfg.wrap)
+				$('launcher_root').mojo.scrollTo((index) * -this.kPageWidth, undefined, false, true);
+			else {
+				$('launcher_root').mojo.setSnapIndex(parseInt(index), animate);
+			}
+		}
+	},
+
+	showPageMenus: function(viewMenu, menuTitle, chooseCallback) {
+		Mojo.stopListening($('launcher_root'), Mojo.Event.propertyChange, this.pageChangeHandler);
+
+		if(menuTitle)
+			Mojo.stopListening($('page_header'), Mojo.Event.tap, this.headerTapHandler);
+					
+		this.globalSearchAssistant.enable(false);
+
+		var pageItems = [];
+
+		for(var i = 0; i < this.pageDivs.length; i++) {
+			var pageName = this.getPageName(i);
+			
+			pageItems.push({command: i, label: pageName, chosen: (i == this.activePageIndex)});
+		}
+
+		if(viewMenu)
+			var menuClass = "pageMenu";
+		else
+			var menuClass = "jumpMenu";
+
+		this.controller.popupSubmenu({
+			popupClass: menuClass,
+			scrimClass: "pageMenuScrim",
+			manualPlacement: true,
+
+			items: pageItems,
+
+			onChoose: chooseCallback
+		});
+
+		if(menuTitle) {
+			if(this.appLauncherCfg.header == "tabs") {
+				this.viewMenuModel.visible = false;
+				this.controller.modelChanged(this.viewMenuModel, this);
+			}
+		
+			this.controller.get('page_header').style.display = "block";
+
+			this.controller.get('page_text').style.display = "none";
+			this.controller.get('page_name').style.display = "block";
+
+			this.controller.get('page_name').update(menuTitle);
+		}
+		
+		if(this.quickLaunchCfg.mode == "visible") {
+			SystemManagerService.showQuickLaunch(false);
+			this.kQuickLaunchHeight = 0;
+			this.adjustLayout();
+		}
+
+		if(viewMenu) {
+			this.commandMenuModel.visible = true;
+			this.controller.modelChanged(this.commandMenuModel);
+		}
+	},
+	
+	hidePageMenus: function() {
+		Mojo.listen($('page_header'), Mojo.Event.tap, this.headerTapHandler);
+
+		Mojo.listen($('launcher_root'), Mojo.Event.propertyChange, this.pageChangeHandler);
+
+	 	this.globalSearchAssistant.enable(true);
+
+		this.controller.get('page_header').style.display = "none";
+		this.controller.get('page_name').style.display = "none";
+
+		this.updatePageHeader();
+		this.updatePageTabs();
+
+		this.updatePageIndicators();
+		
+		this.commandMenuModel.visible = false;
+		this.controller.modelChanged(this.commandMenuModel);
+		
+		if(this.quickLaunchCfg.mode == "visible") {
+			SystemManagerService.showQuickLaunch(true);
+			this.kQuickLaunchHeight = 67;
+			this.adjustLayout();
+		}
+	},
+
+	getPageName: function(index) {
+		if(this.appLauncherCfg.pages[parseInt(index)] == undefined)
+			this.appLauncherCfg.pages[parseInt(index)] = "Launcher Page " + (parseInt(index) + 1);
+
+		return this.appLauncherCfg.pages[parseInt(index)];
+	},
+
+	setPageName: function(index, pageName) {
+		if((pageName.length > 0) && (pageName.split(' ').join('').length > 0))
+			this.appLauncherCfg.pages[parseInt(index)] = this.pageNameModel.value;
+		else
+			this.appLauncherCfg.pages[parseInt(index)] = "Launcher Page " + (parseInt(index) + 1);
+	},
+
+	confirmDelete: function() {
+		var apps = this.getAppContainer(this.activePageIndex).select('.app');
+	
+		if(apps.length == 0)
+			this.deletePage(this.activePageIndex);
+		else {
+			this.controller.showAlertDialog({
+				title: "Delete Launcher Page",
+				message: "Are you sure that you want to delete the current launcher page?",
+				choices:[
+					{label:'Delete', value:"delete", type:'negative'},
+					{label:'Cancel', value:"cancel", type:'default'}],
+				preventCancel: false,
+				allowHTMLMessage: false,
+				onChoose: function(value) {
+					if(value == "delete")
+					this.deletePage(this.activePageIndex);
+
+					var chooseCallback = this.selectPage.bind(this);
+
+					this.showPageMenus(true, $L("Edit Launcher Page:"), chooseCallback);
+				}.bind(this)});
+
+			SystemManagerService.showQuickLaunch(false);
+		}
+	},
+
+	scrollStarting: function(event) {
+		event.scroller.addListener(this);
+	},
+	
+	moved: function(scrollEnded, position) {
+		if(scrollEnded) {
+			this.pagingAnimating = false;
+		}
+		else {
+			this.pagingAnimating = true;
+			
+			if(this.appLauncherCfg.reset) {
+				var scroller = this.getPageScroller(this.activePageIndex);
+
+				if(scroller && scroller.mojo) { scroller.mojo.revealTop(); }
+			}
+
+			if(Math.abs(position.x) > ((this.pageDivs.length - 1) * this.kPageWidth))
+				$('launcher_root').mojo.scrollTo(0, undefined, false, true);
+			else if(position.x > 0 )
+				$('launcher_root').mojo.scrollTo((this.pageDivs.length - 1) * -this.kPageWidth , undefined, false, true);
+			else if( this.activePageIndex * -this.kPageWidth > position.x )
+				$('launcher_root').mojo.scrollTo( (this.activePageIndex + 1) * -this.kPageWidth, undefined, false, true);
+			else if( this.activePageIndex * -this.kPageWidth < position.x )
+				$('launcher_root').mojo.scrollTo( (this.activePageIndex - 1) * -this.kPageWidth, undefined, false, true);
+		}
+		
+		this.activePageIndex = Math.abs($('launcher_root').mojo.getScrollPosition().left) / this.kPageWidth;
+			
+		this.updatePageHeader();
+		this.updatePageIndicators();
+	},	
+
 	/* keep track of which page we are on */
 	onPageChange: function(event) {
-		this.activePageIndex = event.value;
-		this.updatePageIndicators();
+		if(this.appLauncherCfg.reset) {
+			var scroller = this.getPageScroller(this.activePageIndex);
+
+			if (scroller && scroller.mojo) { scroller.mojo.revealTop(); }
+		}
+
+		if((!this.appLauncherCfg.wrap) || (this.reorderController.reordering)) {
+			this.activePageIndex = event.value;
+					
+			this.updatePageHeader();
+			this.updatePageIndicators();
+		}
+
+		if((this.appLauncherCfg.header == "tabs")) {
+			this.viewMenuModel.items[1].toggleCmd = 'selectpage' + (event.value + 1);
+	
+			this.controller.modelChanged(this.viewMenuModel);
+		}
+	},
+
+	/* hide quick launch */
+	onActivate: function(event) {
+		if(this.appLauncherCfg.page != "default") {
+			this.changePage(this.appLauncherCfg.page, false);
+
+			this.updatePageHeader();
+			this.updatePageIndicators();
+		}
+
+		this.updateQuickLaunch(false);
 	},
 	
 	/* clean and hide global search */
 	onDeactivate: function(event) {
-		
 		this.globalSearchAssistant.deactivate();
 		
 		this.reorderController.cancel();
@@ -174,8 +1023,19 @@
 		if (this.appDialog) {
 			this.appDialog.mojo.close();
 		}
+
+		if(this.appLauncherCfg.page != "default") {
+			this.changePage(this.appLauncherCfg.page, false);
+
+			this.updatePageHeader();
+			this.updatePageIndicators();
+		}
 		
-		SystemManagerService.showQuickLaunch(true);
+		if(this.quickLaunchCfg.mode != "hidden") {
+			SystemManagerService.showQuickLaunch(true);
+			this.kQuickLaunchHeight = 67;
+			this.adjustLayout();
+		}
 		
 		this.launchRequest = undefined;
 	},
@@ -202,12 +1062,12 @@
 	
 	/* helper to consolidate all the places accessing these types of elements */
 	getAppContainer: function(pageIndex) {
-		Mojo.assert(this.pageDivs.length > pageIndex, "Attempting to access invalid page #{page}", {page: pageIndex});
+		Mojo.assert(this.pageDivs.length >= pageIndex, "Attempting to access invalid page #{page}", {page: pageIndex});
 		return this.pageDivs[pageIndex].down('.page_scroller_container');
 	},
 	
 	getPageScroller: function(pageIndex) {
-		Mojo.assert(this.pageDivs.length > pageIndex, "Attempting to access invalid page #{page}", {page: pageIndex});
+		Mojo.assert(this.pageDivs.length >= pageIndex, "Attempting to access invalid page #{page}", {page: pageIndex});
 		return this.pageDivs[pageIndex].down('.page_scroller');
 	},
 	
@@ -255,15 +1115,59 @@
 		
 		// tell our scroller widget that it has a new page element to snap
 		this.updatePageSnappingPoints();
+
+		if(createPage) {
+			this.appLauncherCfg.pages.splice(newPageIndex, 0, "Launcher Page " + (parseInt(newPageIndex) + 1));
+
+			this.changePage(newPageIndex, true);
+			
+			var chooseCallback = this.selectPage.bind(this);
+
+			this.showPageMenus(true, $L("Edit Launcher Pages:"), chooseCallback);
+			
+			if(this.setPreferencesRequest)
+				this.setPreferencesRequest.cancel();
+		
+			this.setPreferencesRequest = new Mojo.Service.Request('palm://com.palm.systemservice/', {
+				method: 'setPreferences', parameters: {'appLauncherCfg': this.appLauncherCfg} });
+		}
 	},
 	
 	deletePage: function(pageIndex) {
+
 		// move all apps still on page[pageIndex] to the previous/next page  
 		var moveIndex = (pageIndex == 0 ? 1 : pageIndex-1);
 		if (!this.pagesModel.removePage(pageIndex, moveIndex)) {
 			return false;
 		}
 		
+		// Weird problem in changePage / setsnapindex, no page change when index 0
+
+		if(this.pageDivs.length == 2) {
+			this.activePageIndex = 0;
+			$('launcher_root').mojo.scrollTo(0, undefined, true, false);
+		}
+		else {
+			// snap to a valid location
+			if(pageIndex >= this.pageDivs.length - 1)
+				this.changePage(this.pageDivs.length - 2, true);
+			else
+				this.changePage(pageIndex, true);
+		}
+		
+		if(this.appLauncherCfg.page != "default") {
+			if(this.appLauncherCfg.page == pageIndex)
+				this.setupAppLauncher(null, "page");
+		}
+
+		this.appLauncherCfg.pages.splice(pageIndex,1);
+
+		if(this.setPreferencesRequest)
+			this.setPreferencesRequest.cancel();
+		
+		this.setPreferencesRequest = new Mojo.Service.Request('palm://com.palm.systemservice/', {
+			method: 'setPreferences', parameters: {'appLauncherCfg': this.appLauncherCfg} });
+
 		// move appDivs over to their new home
 		var apps = this.getAppContainer(pageIndex).select('.app');
 		var startIndex = apps.length;
@@ -298,13 +1202,9 @@
 		// remove the pages indicator
 		this.deletePageIndicator();
 		
-		// snap to a valid location
-		if (pageIndex >= this.pageDivs.length) {
-			$('launcher_root').mojo.setSnapIndex(this.pageDivs.length-1, true);
-		}
-		else {
-			$('launcher_root').mojo.setSnapIndex(pageIndex, true);
-		}
+		var chooseCallback = this.selectPage.bind(this);
+
+		this.showPageMenus(true, $L("Edit Launcher Pages:"), chooseCallback);
 		
 		this.updatePageSnappingPoints();
 	},
@@ -326,6 +1226,10 @@
 			var appContainer = this.getAppContainer(location.page);
 			var content = Mojo.View.render({object:newAppInfo, template: "launcher/page-item"});
 			var children = appContainer.select('.app');
+
+			if(location.position == null)
+				location.position = children.length;
+
 			if (location.position >= children.length) {
 				appContainer.insert({bottom:content});
 			} else {
@@ -336,9 +1240,35 @@
 			newAppDiv = $(newAppInfo.launchPointId);
 			Mojo.assert(newAppDiv !== undefined, "Application (%d) was inserted into the DOM but unable to be retrieved!", newAppInfo.launchPointId);
 			if (isNaN(this.kAppWidth) || isNaN(this.kAppHeight)) {
-				this.kAppWidth = newAppDiv.getWidth();
-				this.kAppHeight = newAppDiv.getHeight();
-				this.kAppsPerRow = Math.round(this.kPageWidthNoMargin / this.kAppWidth);
+				if(this.appLauncherCfg.grid == "small") {
+					this.kAppWidth = 104;
+					this.kAppsPerRow = 3;
+				}
+				else if(this.appLauncherCfg.grid == "medium") {
+					this.kAppWidth = 76;
+					this.kAppsPerRow = 4;
+				}
+				else if(this.appLauncherCfg.grid == "large") {
+					this.kAppWidth = 63;
+					this.kAppsPerRow = 5;
+				}
+
+				if(this.appLauncherCfg.titles == true) {
+					if(this.appLauncherCfg.icons == "small")
+						this.kAppHeight = 84;
+					else if(this.appLauncherCfg.icons == "medium")
+						this.kAppHeight = 94;
+					else if(this.appLauncherCfg.icons == "large")
+						this.kAppHeight = 104;
+				}
+				else {
+					if(this.appLauncherCfg.icons == "small")
+						this.kAppHeight = 72;
+					else if(this.appLauncherCfg.icons == "medium")
+						this.kAppHeight = 82;
+					else if(this.appLauncherCfg.icons == "large")
+						this.kAppHeight = 92;
+				}
 			}
 			
 			Mojo.listen(newAppDiv, Mojo.Event.tap, this.onAppTapped.bindAsEventListener(this));
@@ -348,6 +1278,15 @@
 			// stash the application's data in the element
 			newAppDiv._info = newAppInfo;
 
+			// set the application name if renamed
+			elm = newAppDiv.down('.name');
+
+			if((elm) && (this.appLauncherCfg.names) && 
+				(this.appLauncherCfg.names[newAppInfo.launchPointId] != undefined))
+			{
+				elm.innerHTML = this.appLauncherCfg.names[newAppInfo.launchPointId];
+			}			
+
 			this._updateBadge(newAppDiv, newAppInfo);
 		
 			/* adjust page position and height */
@@ -435,14 +1374,20 @@
 		if (elm) {
 			var newTitle = "";
 			if (newAppInfo.update && newAppInfo.update.title) {
-				newTitle = newAppInfo.update.title.escapeHTML();
+				if((this.appLauncherCfg.names) && (this.appLauncherCfg.names[newAppInfo.update.launchPointId] != undefined))
+					newTitle = this.appLauncherCfg.names[newAppInfo.update.launchPointId];
+				else
+					newTitle = newAppInfo.update.title.escapeHTML();
 				if (newTitle !== elm.innerHTML) {
 					Mojo.Log.info("Updating title of app div, old: %d | new: %d", elm.innerHTML, newTitle);
 					elm.innerHTML = newTitle;
 				}
 			}
 			else if (newAppInfo.title) {
-				newTitle = newAppInfo.title.escapeHTML();
+				if((this.appLauncherCfg.names) && (this.appLauncherCfg.names[newAppInfo.launchPointId] != undefined))
+					newTitle = this.appLauncherCfg.names[newAppInfo.launchPointId];	
+				else		
+					newTitle = newAppInfo.title.escapeHTML();
 				if (elm.innerHTML !== newTitle) {
 					Mojo.Log.info("Updating title of app div, old: %d | new: %d", elm.innerHTML, newTitle);
 					elm.innerHTML = newTitle;
@@ -514,6 +1459,10 @@
 		for (var i=offset, len = children.length; i<len; i++) {
 			var item = children[i];
 			var appPos = this.calculateAppPosition(i);
+			
+			if(this.appLauncherCfg.header != "none")
+				appPos.top = appPos.top + 50;
+			
 			if (animate) {
 				LauncherAnimation.animateApp(item, appPos);
 			} else {
@@ -535,8 +1484,15 @@
 	
 	/* determines the position of an app element at appIndex within a page */
 	calculateAppPosition: function(appIndex) {
+		if(this.appLauncherCfg.grid == "small")
+			var margin = 5;
+		else if(this.appLauncherCfg.grid == "medium")
+			var margin = -5;
+		else if(this.appLauncherCfg.grid == "large")
+			var margin = -16;
+	
 		return {
-			left: (((appIndex % this.kAppsPerRow) * this.kAppWidth) + this.kPageMargin),
+			left: (((appIndex % this.kAppsPerRow) * this.kAppWidth) + margin),
 			top: (Math.floor(appIndex/this.kAppsPerRow) * this.kAppHeight)
 		};
 	},
@@ -577,17 +1533,51 @@
 				return;
 			}
 		}
+
+		if(this.quickLaunchCfg.mode == "visible") {
+			SystemManagerService.showQuickLaunch(false);
+			this.kQuickLaunchHeight = 0;
+			this.adjustLayout();
+		}
 		
-		SystemManagerService.showQuickLaunch(false);
 		this.globalSearchAssistant.enable(false);
 		
 		var appInfoAssistant = new AppInfoAssistant(appInfo,
 													this.controller,
-													function() {
+													function(appInfo, action) {
 														this.appDialog = undefined;
-														SystemManagerService.showQuickLaunch(true);
-														this.globalSearchAssistant.enable(true);
-													}.bind(this));
+														if(this.quickLaunchCfg.mode == "visible") {
+															SystemManagerService.showQuickLaunch(true);
+															this.kQuickLaunchHeight = 67;
+															this.adjustLayout();
+														}
+														if(action == "move") { 
+															var chooseCallback = this.movePageApp.bind(this, appInfo);
+															
+															this.showPageMenus(false, "Move Application:", chooseCallback);
+														}
+														else if(action == "hide") {
+															if(!this.appLauncherCfg.hidden)
+																this.appLauncherCfg.hidden = [];
+																
+															this.appLauncherCfg.hidden.push(appInfo.launchPointId);
+															
+															this.globalSearchAssistant.enable(true);
+															
+															this.deleteApp(appInfo.launchPointId, true);
+															
+															if(this.setPreferencesRequest)
+																this.setPreferencesRequest.cancel();
+
+															this.setPreferencesRequest = new Mojo.Service.Request('palm://com.palm.systemservice/', {
+																method: 'setPreferences', parameters: {'appLauncherCfg': this.appLauncherCfg} });
+														}
+														else if(action == "rename") {
+															this.startAppRename(appInfo);
+														}
+														else
+															this.globalSearchAssistant.enable(true);
+													}.bind(this, appInfo));
 
 		this.appDialog = this.controller.showDialog({
 							template: 'launcher/dialogs/app-info',
@@ -602,22 +1592,53 @@
 		
 		this.deleteAllPages();
 		
+		var allApps = [];
+					
 		var location = {page: 0, position: 0};
 		for (var i=0, numPages=this.pagesModel.getNumPages(); i<numPages; i++) {
 			// create a new page
 			this.insertPage(i);
+
+			var skip = 0;
 			
 			// insert all the applications for this page into the page container
 			var page = this.pagesModel.getPage(i);
 			location.page = i;
 			for (var j=0; j<page.length; j++) {
-				location.position = j;
-				this.insertApp(location, this.pagesModel.getAppInfo(page[j]));
+				var appInfo = this.pagesModel.getAppInfo(page[j]);
+			
+				allApps.push(appInfo.launchPointId);
+			
+				if(this.appLauncherCfg.hidden) {
+					if(this.appLauncherCfg.hidden.indexOf(appInfo.launchPointId) != -1) {
+						skip++;
+						continue;
+					}
+				}
+			
+				location.position = j - skip;
+				this.insertApp(location, appInfo);
+			}
+		}
+
+		if(this.appLauncherCfg.names) {
+			for(var key in this.appLauncherCfg.names) {
+				if(allApps.indexOf(key) == -1)
+					delete this.appLauncherCfg.names[key];
 			}
 		}
 		
+		if(this.setPreferencesRequest)
+			this.setPreferencesRequest.cancel();
+	
+		this.setPreferencesRequest = new Mojo.Service.Request('palm://com.palm.systemservice/', {
+			method: 'setPreferences', parameters: {'appLauncherCfg': this.appLauncherCfg} });
+		
 		this.globalSearchAssistant.enable(true);
 
+		if(this.appLauncherCfg.header == "tabs")
+			this.updatePageTabs();
+
 		PalmSystem.launcherReady();
 	},
 	
@@ -633,10 +1654,12 @@
 	 * its starting position
 	 */
 	createPageIndicator: function() {
-		var indicator = new Element('div', {'class': 'page_indicator'});
-		$('page_indicators').appendChild(indicator);
-		this.indicators.push({element: indicator});
-		this.recalculateIndicatorRanges();
+		if(this.appLauncherCfg.indicators) {
+			var indicator = new Element('div', {'class': 'page_indicator'});
+			$('page_indicators').appendChild(indicator);
+			this.indicators.push({element: indicator});
+			this.recalculateIndicatorRanges();
+		}
 	},
 	
 	/*
@@ -644,65 +1667,85 @@
 	 * the remaining page indicators
 	 */
 	deletePageIndicator: function() {
+		if(this.appLauncherCfg.indicators) {		
+			var indicator = this.indicators.pop();
+			if (indicator) {
+				indicator.element.remove();
+			}
 		
-		var indicator = this.indicators.pop();
-		if (indicator) {
-			indicator.element.remove();
+			this.recalculateIndicatorRanges();
 		}
-		
-		this.recalculateIndicatorRanges();
 	},
 	
 	/* Updates the positions of all page indicators. */
 	updatePageIndicators: function() {
+		if(this.appLauncherCfg.indicators) {
+			if (this.indicators.length <= 0) {
+				return;
+			}
 		
-		if (this.indicators.length <= 0) {
-			return;
-		}
-		
-		for (var i = 0; i < this.indicators.length; i++) {
-			if (i < this.activePageIndex) {
-				this.moveIndicator(i, this.indicators[i].range.left);
-			} else {
-				this.moveIndicator(i, this.indicators[i].range.right);
+			for (var i = 0; i < this.indicators.length; i++) {
+				if (i < this.activePageIndex) {
+					this.moveIndicator(i, this.indicators[i].range.left);
+				} else {
+					this.moveIndicator(i, this.indicators[i].range.right);
+				}
 			}
 		}
 	},
 	
 	/* recalculates the cached set of page indicator ranges and then redraws them */
 	recalculateIndicatorRanges: function() {
+		if(this.appLauncherCfg.indicators) {		
+			var indicator = this.indicators.first();
+			if (indicator === undefined) {
+				return;
+			}
 		
-		var indicator = this.indicators.first();
-		if (indicator === undefined) {
-			return;
-		}
-		
-		var indicatorWidth = this.kPageIndicatorSpacing + indicator.element.getWidth();
+			var indicatorWidth = this.kPageIndicatorSpacing; // + indicator.element.getWidth();
 		
-		for (var i=0; i<this.indicators.length; i++) {
+			for (var i=0; i<this.indicators.length; i++) {
 			
-			var left = (i+1) * indicatorWidth;
-			var right = this.kPageWidthNoMargin - ((this.indicators.length-i-1) * indicatorWidth);
-			this.indicators[i].range = {left: left, right: right};
+				var left = (i+1) * indicatorWidth;
+				var right = this.kPageWidthNoMargin - ((this.indicators.length-i-1) * indicatorWidth);
+				this.indicators[i].range = {left: left, right: right};
+			}
+			this.updatePageIndicators();
 		}
-		this.updatePageIndicators();
 	},
 	
 	/* Moves the indicator to newPosition */
 	moveIndicator: function(indicatorIndex, newPosition) {
-		
-		var indicator = this.indicators[indicatorIndex];
-		if (newPosition < indicator.range.left) {
-			newPosition = indicator.range.left;
-		} else if (newPosition > indicator.range.right) {
-			newPosition = indicator.range.right;
+		if(this.appLauncherCfg.indicators) {
+			var indicator = this.indicators[indicatorIndex];
+			if (newPosition < indicator.range.left) {
+				newPosition = indicator.range.left;
+			} else if (newPosition > indicator.range.right) {
+				newPosition = indicator.range.right;
+			}
+			indicator.element.style.left = newPosition + 'px';
 		}
-		indicator.element.style.left = newPosition + 'px';
 	},
 /********** Page Indicator end **********/
 		
 	/* handler called by the pages model when a new application has been added */
 	onAppAdded: function(newAppInfo, newLocation) {
+		newLocation.position = null;
+		if((this.appLauncherCfg) && (this.appLauncherCfg.placement)) {
+			if(this.appLauncherCfg.placement == "first")
+				newLocation.page = 0;
+			else if(this.appLauncherCfg.placement == "last")
+				newLocation.page = this.pageDivs.length - 1;
+			else if(this.appLauncherCfg.placement == "active")
+				newLocation.page = this.activePageIndex;
+			else if(this.appLauncherCfg.placement == "default") {
+				if((this.appLauncherCfg.page != undefined) &&
+					(this.appLauncherCfg.page != "default"))
+				{
+					newLocation.page = this.appLauncherCfg.page;
+				}			
+			}	
+		}
 		this.insertApp(newLocation, newAppInfo);
 	},
 	
@@ -720,7 +1763,7 @@
 	onAppTapped: function(event) {
 		var target = event.currentTarget;
 		var appInfo = target._info;
-		if (event.up && event.up.altKey) {
+		if (event.up && event.up.altKey || event.up && event.up.metaKey) {
 			// open app-info dialog
 			this.showAppInfoMenu(appInfo);
 		} else if (!this.launchRequest) { // are we already trying to launch something?
--- .orig/usr/lib/luna/system/luna-applauncher/app/views/launcher/launcher-scene.html
+++ /usr/lib/luna/system/luna-applauncher/app/views/launcher/launcher-scene.html
@@ -17,9 +17,13 @@
 		<div class="palm-header-spacer strut"></div>
 	</div>
 	
-	<div id="launcher-main">
-		<div id="launcher_root" x-mojo-element="Scroller">
-			<div id="pages_container"></div>
+	<div id="launcher-main" class="view">
+		<div id="page_header" style="display: none;" class="palm-header center" x-mojo-touch-feedback="immediate">
+			<div id="page_name" style="display: block;">Launcher Page</div>
+			<div id="page_text" style="display: none;" x-mojo-element="TextField"></div>
+		</div>
+		<div id="launcher_root" class="grid_small" x-mojo-element="Scroller">
+			<div id="pages_container" class="icons_large"></div>
 		</div>
 		<div id="page_indicators"></div>
 	</div>
--- .orig/usr/lib/luna/system/luna-applauncher/app/controllers/app-info-assistant.js
+++ /usr/lib/luna/system/luna-applauncher/app/controllers/app-info-assistant.js
@@ -7,7 +7,12 @@
 		this.isDynamic = this.isDynamicLaunchPoint(this.appInfo);
 		this.closeCallback = closeCallback;
 
-		this.onDone = this.onDone.bind(this);
+		this.action = "";
+
+		this.onRename = this.onDone.bind(this, "rename");
+		this.onHide = this.onDone.bind(this, "hide");
+		this.onMove = this.onDone.bind(this, "move");
+		this.onDone = this.onDone.bind(this, "done");
 	},
 	
 	setup: function(widget) {
@@ -86,7 +91,9 @@
 	
 	setupButtons: function() {
 		
-		var doneModel = {buttonLabel: $L('Done')}
+		var renameModel = {buttonLabel: $L('Rename')}
+		var hideModel = {buttonLabel: $L('Hide')}
+		var moveModel = {buttonLabel: $L('Move')}		
 		
 		if (this.appInfo.removable) {
 			
@@ -97,19 +104,33 @@
 				disabled: false
 			};
 			
+			if(this.isDynamic) 
+				this.sceneController.get('hide-btn').hide();
+			
 			this.sceneController.setupWidget('delete-btn', {type: Mojo.Widget.activityButton}, this.deleteModel);
 			this.sceneController.listen('delete-btn', Mojo.Event.tap, this.onDelete.bindAsEventListener(this));
 			this.sceneController.get('delete-btn').show();
-			
-			// done button
-			doneModel.buttonClass = 'dismiss';
-			
+
+			// rename button
+			renameModel.buttonClass = 'dismiss';
+
+			// hide button
+			hideModel.buttonClass = 'dismiss';
+
+			// mode button
+			moveModel.buttonClass = 'dismiss';
 		} else {
 			this.sceneController.get('delete-btn').hide();
 		}
+
+		this.sceneController.setupWidget('rename-btn', undefined, renameModel);
+		this.sceneController.listen('rename-btn', Mojo.Event.tap, this.onRename);
+
+		this.sceneController.setupWidget('hide-btn', undefined, hideModel);
+		this.sceneController.listen('hide-btn', Mojo.Event.tap, this.onHide);
 		
-		this.sceneController.setupWidget('done-btn', undefined, doneModel);
-		this.sceneController.listen('done-btn', Mojo.Event.tap, this.onDone);
+		this.sceneController.setupWidget('move-btn', undefined, moveModel);
+		this.sceneController.listen('move-btn', Mojo.Event.tap, this.onMove);
 	},
 
 	isDynamicLaunchPoint: function(appInfo) {
@@ -136,7 +157,9 @@
 		}
 	},
 
-	onDone: function() {
+	onDone: function(action) {
+		this.action = action;
+		
 		var deleteBtn = this.sceneController.get('delete-btn');
 		if (deleteBtn && deleteBtn.mojo && deleteBtn.mojo.deactivate) {
 			deleteBtn.mojo.deactivate();
@@ -163,6 +186,6 @@
 			this.appSizeRequest.cancel();
 			this.appSizeRequest = undefined;
 		}
-		this.closeCallback();
+		this.closeCallback(this.action);
 	}
 });
--- .orig/usr/lib/luna/system/luna-applauncher/app/views/launcher/dialogs/app-info.html
+++ /usr/lib/luna/system/luna-applauncher/app/views/launcher/dialogs/app-info.html
@@ -9,5 +9,7 @@
 <div class="palm-dialog-separator"></div>
 <div class="palm-dialog-buttons">
 	<div id='delete-btn' x-mojo-element="Button"></div>	
-	<div id='done-btn' x-mojo-element="Button"></div>
+	<div id='rename-btn' x-mojo-element="Button"></div>
+	<div id='hide-btn' x-mojo-element="Button"></div>
+	<div id='move-btn' x-mojo-element="Button"></div>
 </div>
--- .orig/usr/lib/luna/system/luna-applauncher/app/models/launcher-pages.js
+++ /usr/lib/luna/system/luna-applauncher/app/models/launcher-pages.js
@@ -4,7 +4,7 @@
 var LauncherPages = Class.create({
 	kDepotOptions: {version: 1, name: 'paged_launcher_apps'},
 	kDepotDataKey: "Pages",
-	kMaxPages: 10,
+	kMaxPages: 16,
 	
 	initialize: function(callbacks) {
 		
@@ -240,6 +240,12 @@
 		return true;
 	},
 	
+	switchPages: function(firstIndex, secondIndex) {
+		var page = this._storedPages.splice(firstIndex, 1);
+
+		this._storedPages.splice(secondIndex, 0, page[0]);
+	},
+	
 	getNumPages: function() {
 		return this._storedPages.length;
 	},
--- .orig/usr/lib/luna/system/luna-applauncher/stylesheets/launcher.css
+++ /usr/lib/luna/system/luna-applauncher/stylesheets/launcher.css
@@ -33,6 +33,10 @@
 	-webkit-palm-mouse-target: ignore;
 }
 
+.noindicators .launcher_fade_bottom {
+	background: none;
+}
+
 .launcher_arrow_bottom {
 	position: absolute;
 	width: 100%;
@@ -43,6 +47,10 @@
 	-webkit-palm-mouse-target: ignore;
 }
 
+.noindicators .launcher_arrow_bottom {
+	background: none;
+}
+
 .launcher_fade_top {
 	position:absolute;
 	background: url(../images/launcher-page-fade-top.png) center center no-repeat;
@@ -54,6 +62,10 @@
 	-webkit-palm-mouse-target: ignore;
 }
 
+.noindicators .launcher_fade_top {
+	background: none;
+}
+
 .launcher_arrow_top {
 	position: absolute;
 	width: 100%;
@@ -64,6 +76,10 @@
 	-webkit-palm-mouse-target: ignore;
 }
 
+.noindicators .launcher_arrow_top {
+	background: none;
+}
+
 #pages_container {
 	position:relative;
 	left:0px;
@@ -140,6 +156,70 @@
 	z-index:5;
 }
 
+.grid_small .icons_small .launcher_page .name {	
+	top: 48px;
+	width: 100px;
+	font-size: 12px;
+}
+
+.grid_small .icons_medium .launcher_page .name {	
+	top: 58px;
+	width: 100px;
+	font-size: 13px;	
+}
+
+.grid_small .icons_large .launcher_page .name {	
+	top: 64px;
+	width: 100px;
+	font-size: 14px;	
+}
+
+.grid_medium .icons_small .launcher_page .name {	
+	top: 48px;
+	width: 84px;
+	left: 8px;
+	font-size: 12px;
+}
+
+.grid_medium .icons_medium .launcher_page .name {	
+	top: 56px;
+	width: 84px;
+	left: 8px;
+	font-size: 13px;	
+}
+
+.grid_medium .icons_large .launcher_page .name {	
+	top: 64px;
+	width: 84px;
+	left: 8px;
+	font-size: 14px;	
+}
+
+.grid_large .icons_small .launcher_page .name {	
+	top: 48px;
+	width: 60px;
+	left: 18px;
+	font-size: 12px;	
+}
+
+.grid_large .icons_medium .launcher_page .name {	
+	top: 58px;
+	width: 60px;
+	left: 18px;
+	font-size: 13px;	
+}
+
+.grid_large .icons_large .launcher_page .name {	
+	top: 64px;
+	width: 60px;
+	left: 18px;
+	font-size: 14px;	
+}
+
+.notitles .launcher_page .name {	
+	display: none;
+}
+
 .app.ghost .name {
 	color: #CCCCCC;
 }
@@ -262,7 +342,23 @@
 	z-index:2;
 }
 
-.draggable {
+.icons_small .draggable {
+	width:48px;
+	height:48px;
+	margin: 0 auto;
+	-webkit-user-drag: any;
+	-webkit-user-select: none;
+}
+
+.icons_medium .draggable {
+	width:56px;
+	height:56px;
+	margin: 0 auto;
+	-webkit-user-drag: any;
+	-webkit-user-select: none;
+}
+
+.icons_large .draggable {
 	width:64px;
 	height:64px;
 	margin: 0 auto;
@@ -342,3 +438,87 @@
 	text-overflow: ellipsis;
 	white-space: nowrap;
 }
+
+/* page names element */
+
+#page_text {
+	min-width: 100%;
+	width: 100%;
+}
+                                                                                                               
+#page_text input {
+	min-width: 100%;
+	font-weight: bold;
+	height: 46px;
+	outline: none;
+	background: none;
+	border-width: 0 0 0 0;
+	font-size: 16px;
+	line-height: 22px;
+	color: white;
+	margin: 0 16px 0 0px;
+	padding: 0;
+	text-align: center;
+}
+
+.jumpMenu {
+	position: fixed;
+	top: 28px;
+	width:300px;
+	left: 10px;
+	z-index: 32;
+}
+
+.pageMenu {
+	position: fixed;
+	top: 28px;
+	width:300px;
+	left: 10px;
+	z-index: 32;
+	max-height: 340px;
+}
+
+.pageMenu .palm-popup-content .palm-list {
+	max-height: 340px;
+}
+
+.jumpMenu .palm-popup-content,
+.pageMenu .palm-popup-content {
+	margin: 12px 8px 10px 8px;
+}
+
+.jumpMenu .palm-popup-content .palm-list .chosen .title,
+.pageMenu .palm-popup-content .palm-list .chosen .title {
+
+	font-weight: bold;
+}
+
+.jumpMenu .palm-popup-content .palm-list .title,
+.pageMenu .palm-popup-content .palm-list .title {
+	line-height: 42px;
+	min-height: 46px;
+	font-size: 18px;
+	text-align: center;
+	margin:0px;
+	padding:0px;
+}
+
+.jumpMenu .palm-popup-content .chosen .popup-item-checkmark,
+.pageMenu .palm-popup-content .chosen .popup-item-checkmark {
+  display: none;
+}
+
+.jumpMenu .palm-popup-content .palm-list .palm-row,
+.pageMenu .palm-popup-content .palm-list .palm-row {
+	line-height: 42px;
+	min-height: 46px;
+	max-height: 46px;
+	margin:0px;
+	padding:0px;
+}
+
+.pageMenuScrim {
+	background: transparent;
+	z-index: 10;
+}
+
--- .orig/usr/palm/applications/com.palm.app.deviceinfo/app/controllers/more-assistant.js
+++ /usr/palm/applications/com.palm.app.deviceinfo/app/controllers/more-assistant.js
@@ -93,14 +93,14 @@
             itemTemplate: 'more/palmapp-item',
 			listTemplate: 'more/listcontainer'
         }, this.palmAppModel);
-		Mojo.Event.listen(this.palmApplicationListWidget, Mojo.Event.listTap, this.otherSelectionHandler.bind(this));
+		Mojo.Event.listen(this.palmApplicationListWidget, Mojo.Event.listTap, this.otherSelectionHandler.bind(this, "palmApplicationList"));
 		
 		this.otherApplicationListWidget = this.controller.get('otherApplicationList');
         this.controller.setupWidget('otherApplicationList', {
             itemTemplate: 'more/otherapp-item',
 			listTemplate: 'more/listcontainer'
         }, this.otherAppModel);
-		Mojo.Event.listen(this.otherApplicationListWidget, Mojo.Event.listTap, this.otherSelectionHandler.bind(this));
+		Mojo.Event.listen(this.otherApplicationListWidget, Mojo.Event.listTap, this.otherSelectionHandler.bind(this, "otherApplicationList"));
 
         this.controller.setupWidget('phoneList', {
             itemTemplate: 'list/item',
@@ -148,11 +148,25 @@
 		
 		this.btPanChange = AppAssistant.telephonyService.getBtPanRouteStatus(this.btPanChangeCallback.bind(this), this.controller);
 		
-		this.appManagerQuery = AppAssistant.appManagerService.listLaunchPoints(this.takeApps.bind(this), this.controller);
-		
 		this._subscribeToAppChanges();
+		
+		this.appLauncherCfg = null;
+		
+		this.getPreferencesRequest = this.controller.serviceRequest('palm://com.palm.systemservice/', {
+			method: 'getPreferences', parameters: {subscribe: false, keys: ['appLauncherCfg']},
+			onSuccess: this.handlePreferences.bind(this) });
     },
 
+	handlePreferences: function(payload) {
+		if(payload != undefined) {
+			if(payload.appLauncherCfg != undefined) {
+				this.appLauncherCfg = payload.appLauncherCfg;
+			}
+		}
+
+		this.appManagerQuery = AppAssistant.appManagerService.listLaunchPoints(this.takeApps.bind(this), this.controller);
+	},
+
 	btPanChangeCallback: function(response) {
 		Mojo.Log.info("btPanChangeCallback ", Object.toJSON(response));
 		var route = this.btRouteUp;
@@ -170,19 +184,28 @@
 		}
 	},
 	
-	otherSelectionHandler: function(event) {
+	otherSelectionHandler: function(element, event) {
 		var item = event.item;
 		Mojo.Log.info("listSelectionHandler item: " + Object.toJSON(item));
+
+		var hidden = false;
+		
+		if((this.appLauncherCfg) && (this.appLauncherCfg.hidden)) {
+			if(this.appLauncherCfg.hidden.indexOf(item.launchPointId) != -1)
+				hidden = true;
+		}
+		
+		var cb = this.controller.get(element).mojo.noticeUpdatedItems.bind(this, 0, event.model.items);
+		
 		this.controller.showDialog({
 			template: 'more/dialogs/app-info',
-			assistant: new AppInfoAssistant(this, item),
+			assistant: new AppInfoAssistant(this, item, hidden, cb),
 			icon: item.icon,
 			title: item.title,
 			version: item.version,
 			vendor: item.vendor,
 			vendorUrl: item.vendorUrl
 		});
-
 	},
 	
 	handleCommand: function(event) {
@@ -292,6 +315,17 @@
 	},
 	
 	insertItem: function(item, model, widget) {
+		item.color = "black";
+		
+		if((this.appLauncherCfg) && (this.appLauncherCfg.hidden)) {
+			if(this.appLauncherCfg.hidden.indexOf(item.launchPointId) != -1)
+				item.color = "gray";
+		}
+
+		if((this.appLauncherCfg) && (this.appLauncherCfg.names)) {
+			if(this.appLauncherCfg.names[item.launchPointId] != undefined)
+				item.title = this.appLauncherCfg.names[item.launchPointId].replace("<br>", " ");
+		}
 		
 		var inserted = false;
 		$A(model.items).each(function(a, index) {
@@ -407,6 +441,21 @@
 		
 //		this.allApps = payload.apps;
 		this.allApps = payload.launchPoints;
+		
+		this.allApps.each(function(item, index){
+			item.color = "black";
+
+			if((this.appLauncherCfg) && (this.appLauncherCfg.hidden)) {
+				if(this.appLauncherCfg.hidden.indexOf(item.launchPointId) != -1)
+					item.color = "gray";
+			}
+
+			if((this.appLauncherCfg) && (this.appLauncherCfg.names)) {
+				if(this.appLauncherCfg.names[item.launchPointId] != undefined)
+					item.title = this.appLauncherCfg.names[item.launchPointId].replace("<br>", " ");
+			}
+		}.bind(this));
+		
 		this.allApps.sort(this.sortFunction);
 		
 		$A(this.palmAppModel.items).clear();
--- .orig/usr/palm/applications/com.palm.app.deviceinfo/app/controllers/app-info-assistant.js
+++ /usr/palm/applications/com.palm.app.deviceinfo/app/controllers/app-info-assistant.js
@@ -1,8 +1,10 @@
 /* Copyright 2009 Palm, Inc.  All rights reserved. */
 
 var AppInfoAssistant = Class.create({
-	initialize: function(sceneAssistant, app) {
+	initialize: function(sceneAssistant, app, hidden, refresh) {
 		this.app = app;
+		this.hidden = hidden;
+		this.refresh = refresh;
 		this.sceneAssistant = sceneAssistant;
 		this.controller = this.sceneAssistant.controller;
 	},
@@ -69,22 +71,74 @@
 			this.controller.setupWidget('delete-btn', deleteAttrs, deleteModel);
 			this.controller.listen('delete-btn', Mojo.Event.tap, this.onDelete.bindAsEventListener(this));	
 			this.controller.get('delete-btn').show();
-			// done button is light
-			var doneModel = {
-				buttonLabel: $L('Done'),
+			// show button is light
+			var showModel = {
+				buttonLabel: $L('Show'),
+				buttonClass: 'dismiss'
+			};
+			// hide button is light
+			var hideModel = {
+				buttonLabel: $L('Hide'),
 				buttonClass: 'dismiss'
 			};
 		} else {
 			// hide 
 			this.controller.get('delete-btn').hide();
 			// done button is dark by default
-			var doneModel = {
-				buttonLabel: $L('Done')
+			var showModel = {
+				buttonLabel: $L('Show')
+			};
+			var hideModel = {
+				buttonLabel: $L('Hide')
 			};
 		}	
 
-		this.controller.setupWidget('done-btn', undefined, doneModel);
-		this.controller.listen('done-btn', Mojo.Event.tap, this.close.bindAsEventListener(this));
+		if(this.hidden)
+			this.controller.get('hide-btn').hide();
+		else
+			this.controller.get('show-btn').hide();
+		
+		this.controller.setupWidget('show-btn', undefined, showModel);
+		this.controller.listen('show-btn', Mojo.Event.tap, this.onShow.bindAsEventListener(this));
+	
+		this.controller.setupWidget('hide-btn', undefined, hideModel);
+		this.controller.listen('hide-btn', Mojo.Event.tap, this.onHide.bindAsEventListener(this));
+	},
+	
+	onShow: function() {
+		if(this.sceneAssistant.appLauncherCfg) {
+			this.app.color = "black";
+			this.refresh();
+
+			var index = this.sceneAssistant.appLauncherCfg.hidden.indexOf(this.app.launchPointId);
+		
+			this.sceneAssistant.appLauncherCfg.hidden.splice(index, 1);
+		
+			if(this.setPreferencesRequest)
+				this.setPreferencesRequest.cancel();
+	
+			this.setPreferencesRequest = new Mojo.Service.Request('palm://com.palm.systemservice/', {
+				method: 'setPreferences', parameters: {'appLauncherCfg': this.sceneAssistant.appLauncherCfg} });		
+		}
+	
+		this.close();
+	},
+
+	onHide: function() {
+		if(this.sceneAssistant.appLauncherCfg) {
+			this.app.color = "gray";
+			this.refresh();
+		
+			this.sceneAssistant.appLauncherCfg.hidden.push(this.app.launchPointId);
+		
+			if(this.setPreferencesRequest)
+				this.setPreferencesRequest.cancel();
+	
+			this.setPreferencesRequest = new Mojo.Service.Request('palm://com.palm.systemservice/', {
+				method: 'setPreferences', parameters: {'appLauncherCfg': this.sceneAssistant.appLauncherCfg} });		
+		}
+		
+		this.close();
 	},
 	
 	onDelete: function() {
--- .orig/usr/palm/applications/com.palm.app.deviceinfo/app/views/more/dialogs/app-info.html
+++ /usr/palm/applications/com.palm.app.deviceinfo/app/views/more/dialogs/app-info.html
@@ -9,5 +9,6 @@
 <div class="palm-dialog-separator"></div>
 <div class="palm-dialog-buttons">
 	<div id='delete-btn' x-mojo-element="Button"></div>	
-	<div id='done-btn' x-mojo-element="Button"></div>
-</div>
\ No newline at end of file
+	<div id='show-btn' x-mojo-element="Button"></div>
+	<div id='hide-btn' x-mojo-element="Button"></div>
+</div>
--- .orig/usr/palm/applications/com.palm.app.deviceinfo/app/views/more/otherapp-item.html
+++ /usr/palm/applications/com.palm.app.deviceinfo/app/views/more/otherapp-item.html
@@ -2,8 +2,8 @@
 	<div class="palm-row-wrapper">
 		<table>
 			<tr>
-				<td class="title">#{title}</td>
-				<td class="title right" x-mojo-loc="">v#{version}</td>
+				<td class="title" style="color:#{color};">#{title}</td>
+				<td class="title right" style="color:#{color};" x-mojo-loc="">v#{version}</td>
 			</tr>
 		</table>
 	</div>
--- .orig/usr/palm/applications/com.palm.app.deviceinfo/app/views/more/palmapp-item.html
+++ /usr/palm/applications/com.palm.app.deviceinfo/app/views/more/palmapp-item.html
@@ -2,8 +2,8 @@
 	<div class="palm-row-wrapper"> 
 		<table>
 			<tr>
-				<td class="title">#{title}</td>
-				<td class="title right" x-mojo-loc="">v#{version}</td>
+				<td class="title" style="color:#{color};">#{title}</td>
+				<td class="title right" style="color:#{color};" x-mojo-loc="">v#{version}</td>
 			</tr>
 		</table>
 	</div>
--- .orig/usr/palm/applications/com.palm.app.devmodeswitcher/appinfo.json
+++ /usr/palm/applications/com.palm.app.devmodeswitcher/appinfo.json
@@ -1,10 +1,10 @@
 {
-	"title": "DeveloperMode",
+	"title": "Developer Mode",
 	"type": "web",
 	"main": "index.html",
 	"id": "com.palm.app.devmodeswitcher",
 	"icon": "icon.png",
 	"noWindow": false,
-	"visible": false	
+	"visible": true	
 }
 
--- .orig/usr/palm/applications/com.palm.app.pdfviewer/appinfo.json
+++ /usr/palm/applications/com.palm.app.pdfviewer/appinfo.json
@@ -11,6 +11,6 @@
         "Adobe",
         "PDF Viewer"
     ],
-	"removable": true
+	"removable": false
 }
 
--- .orig/usr/palm/applications/com.palm.app.phoneprefs/appinfo.json
+++ /usr/palm/applications/com.palm.app.phoneprefs/appinfo.json
@@ -5,7 +5,7 @@
 	"id": "com.palm.app.phoneprefs",
 	"icon": "icon.png",
 	"splashicon": "icon-256x256.png",
-	"visible": false,
+	"visible": true,
 	"version": "1.0.0",
 	"vendor": "Palm"
 }
--- .orig/usr/palm/applications/com.palm.app.usbpassthrough/appinfo.json
+++ /usr/palm/applications/com.palm.app.usbpassthrough/appinfo.json
@@ -6,7 +6,7 @@
 	"icon": "icon.png",
 	"version": "1.0.31",
 	"noWindow": false,
-	"visible": false,
+	"visible": true,
 	"vendor": "Palm, Inc."
 }
 
