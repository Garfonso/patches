diff --git a/usr/lib/luna/system/luna-applauncher/app/controllers/launcher-assistant.js b/usr/lib/luna/system/luna-applauncher/app/controllers/launcher-assistant.js
index 114cfa8..7fe2a7c 100644
--- a/usr/lib/luna/system/luna-applauncher/app/controllers/launcher-assistant.js
+++ b/usr/lib/luna/system/luna-applauncher/app/controllers/launcher-assistant.js
@@ -28,6 +28,7 @@ var LauncherAssistant = Class.create({
 			Mojo.Menu.editItem,
 			{ label: $L('List Apps...'), command: 'listapps' },
 			{ label: $L('Default Applications'), command: 'defaultapps'},
+			{ label: $L('Advanced Options'), command: 'advanced'},
 			Mojo.Menu.helpItem
 		]
     },
@@ -115,6 +116,95 @@ var LauncherAssistant = Class.create({
 	handleCommand: function(event) {
 		if (event.type == Mojo.Event.command) {
 			switch (event.command) {
+				case 'advanced':
+					this.showQLBar = true;
+					if(this.kQuickLaunchHeight==0) {
+						this.showQLBar = false;
+					} else {
+						SystemManagerService.showQuickLaunch(false);
+					}
+					this.controller.serviceRequest('palm://com.palm.connectionmanager', {
+				    		method: 'getnovacommode',
+				    		parameters: {},
+						onSuccess: function(response){
+							var choices = [
+								{label:"Toggle DevMode", value:'devmode'},
+								{label:"Rescan Applications", value:'rescanapps'},
+								{label:"Rescan Fileindexer", value:'fileindexer'},
+								{label:"Run Garbage Collectors", value:'gc'},
+								{label:"Cancel", value:'cancel', type:'secondary'}
+							];
+							this.inDevMode = response.isEnabled;
+							if(this.inDevMode) {
+								choices[0].label = "Turn off DevMode";
+							} else {
+								choices[0].label = "Turn on DevMode";
+							}
+							this.controller.showAlertDialog({
+								onChoose: function(value) {
+									if(value=='devmode') {
+										this.controller.showAlertDialog({
+											onChoose: function(value){
+										        	if(value=='reset') {
+										             		this.controller.serviceRequest('palm://com.palm.connectionmanager', {
+														method: 'setnovacommode',
+				    										parameters: {
+				    											isEnabled:!this.inDevMode
+				    										},
+				    										onSuccess: function() {
+				    											this.controller.serviceRequest('palm://com.palm.power/shutdown', {
+																method: 'machineReboot',
+																parameters: {
+																	reason:"User initiated/DevMode status change"
+																}
+															});
+				    										}.bind(this)
+				    									});
+										    	    	}
+										    	    	SystemManagerService.showQuickLaunch(this.showQLBar);
+										        }.bind(this), 
+										    	title: "Restart Device?",
+										    	message: "Your device needs to restart for this action to happen.",
+										    	preventCancel: false,
+										    	choices: [
+										    		{label:"Continue and reset", value:'reset', type:'negative'},
+										    		{label:"Cancel", value:'cancel'}
+										        ]
+    										});
+									} else if(value=='fileindexer') {
+										this.controller.serviceRequest('palm://ca.canucksoftware.filemgr', {
+				    							method: 'rescanFileindexer',
+				    							parameters: {}
+				    						});
+				    						SystemManagerService.showQuickLaunch(this.showQLBar);
+									} else if(value=='rescanapps') {
+										this.controller.serviceRequest('com.palm.applicationManager', {
+											method: 'rescan',
+				    							parameters: {}
+				    						});
+				    						SystemManagerService.showQuickLaunch(this.showQLBar);
+									} else if(value=='gc') {
+										this.controller.serviceRequest('palm://ca.canucksoftware.filemgr', {
+				    							method: 'gc', //java garbage collect
+				    							parameters: {}
+				    						});
+										this.controller.serviceRequest('palm://com.palm.lunastats',{
+											method: 'gc', //javascript garbage collect
+											parameters: {},
+										});
+										SystemManagerService.showQuickLaunch(this.showQLBar);
+									} else {
+										SystemManagerService.showQuickLaunch(this.showQLBar);
+									}
+								}.bind(this),
+								title: "Advanced Options",
+								message: "",
+								preventCancel: false,
+								choices: choices
+							});
+				    		}.bind(this)
+        				});
+					break;
 				case Mojo.Menu.helpCmd:
 					ApplicationService.launch(this.helpInfo.id, this.helpInfo.params);
 					break;
