diff --git a/usr/palm/frameworks/contacts/submission/99/concatenated.js.rej b/usr/palm/frameworks/contacts/submission/99/concatenated.js.rej
new file mode 100644
index 0000000..9475c55
--- /dev/null
+++ b/usr/palm/frameworks/contacts/submission/99/concatenated.js.rej
@@ -0,0 +1,63 @@
+--- usr/palm/frameworks/contacts/submission/99/concatenated.js-
++++ usr/palm/frameworks/contacts/submission/99/concatenated.js
+@@ -338,10 +338,60 @@
+ 					toReturn.push(familyName + givenName);
+ 				}
+ 			}
++
++			if (Globalization.Character.toPinYin) {
++				if (givenName && givenName.length > 0) {
++					toReturn = toReturn.concat(Utils._getPinYins(givenName));
++				}
++				if (familyName && familyName.length > 0) {
++					toReturn = toReturn.concat(Utils._getPinYins(familyName + (givenName||"")));
++				}
++			}
+ 		}
+ 		
+ 		return toReturn;
+ 	},
++
++	// input: xy
++	// 1. after toPinYin: [ [axx, bxx], [cyy, dyy] ]
++	// 2. after collect initials: [ [a, b], [ c, d] ]
++	// 3. after cross join: [ ab, ac, bc, bd ]
++	_getPinYins: function (characters) {
++		var pinYinInitialForString = []; // holds [ [a, b], [ c, d] ]
++		characters.split("").forEach(function (character) {
++			var candidatePinYins = Globalization.Character.toPinYin(character); // a -> [axx, bxx]
++			if (candidatePinYins) {
++				var pinYinInitials = [];
++				// collect initials: [axx, bxx, cxx] -> [a, b, c]
++				candidatePinYins.forEach(function(candidatePinYin) {
++						pinYinInitials.push(Globalization.Character.stripTone(candidatePinYin[0]));
++				});
++				pinYinInitialForString.push(pinYinInitials);
++			}
++		});
++
++		var crossJoined = Utils._crossJoin(pinYinInitialForString);
++		return crossJoined;
++	},
++
++	// [ [a, b], [ c, d] ] -> [ab, ac, bc, bd]
++	_crossJoin: function (array) {
++		if (!array.length) {
++			return array;
++		}
++
++		var result = array[0];
++		for (var i = 1; i < array.length; ++i) {
++			var joined = [];
++			result.forEach(function (left) {
++				array[i].forEach(function (right) {
++					joined.push(left + right);
++				});
++			});
++			result = joined;
++		}
++		return result;
++	},
+ 	
+ 	createLabelFunctions: function (arr, sortLabels) {
+ 		Assert.requireArray(arr, "labelsConstantCreator requires an array");
diff --git a/usr/palm/frameworks/contacts/submission/99/concatenated.js.~1~ b/usr/palm/frameworks/contacts/submission/99/concatenated.js.~1~
new file mode 100644
index 0000000..e69de29
diff --git a/usr/palm/frameworks/contacts/submission/99/javascript/Utilities/Utils.js.rej b/usr/palm/frameworks/contacts/submission/99/javascript/Utilities/Utils.js.rej
new file mode 100644
index 0000000..1b36747
--- /dev/null
+++ b/usr/palm/frameworks/contacts/submission/99/javascript/Utilities/Utils.js.rej
@@ -0,0 +1,63 @@
+--- usr/palm/frameworks/contacts/submission/99/javascript/Utilities/Utils.js-
++++ usr/palm/frameworks/contacts/submission/99/javascript/Utilities/Utils.js
+@@ -338,10 +338,60 @@
+ 					toReturn.push(familyName + givenName);
+ 				}
+ 			}
++
++			if (Globalization.Character.toPinYin) {
++				if (givenName && givenName.length > 0) {
++					toReturn = toReturn.concat(Utils._getPinYins(givenName));
++				}
++				if (familyName && familyName.length > 0) {
++					toReturn = toReturn.concat(Utils._getPinYins(familyName + (givenName||"")));
++				}
++			}
+ 		}
+ 		
+ 		return toReturn;
+ 	},
++
++	// input: xy
++	// 1. after toPinYin: [ [axx, bxx], [cyy, dyy] ]
++	// 2. after collect initials: [ [a, b], [ c, d] ]
++	// 3. after cross join: [ ab, ac, bc, bd ]
++	_getPinYins: function (characters) {
++		var pinYinInitialForString = []; // holds [ [a, b], [ c, d] ]
++		characters.split("").forEach(function (character) {
++			var candidatePinYins = Globalization.Character.toPinYin(character); // a -> [axx, bxx]
++			if (candidatePinYins) {
++				var pinYinInitials = [];
++				// collect initials: [axx, bxx, cxx] -> [a, b, c]
++				candidatePinYins.forEach(function(candidatePinYin) {
++						pinYinInitials.push(Globalization.Character.stripTone(candidatePinYin[0]));
++				});
++				pinYinInitialForString.push(pinYinInitials);
++			}
++		});
++
++		var crossJoined = Utils._crossJoin(pinYinInitialForString);
++		return crossJoined;
++	},
++
++	// [ [a, b], [ c, d] ] -> [ab, ac, bc, bd]
++	_crossJoin: function (array) {
++		if (!array.length) {
++			return array;
++		}
++
++		var result = array[0];
++		for (var i = 1; i < array.length; ++i) {
++			var joined = [];
++			result.forEach(function (left) {
++				array[i].forEach(function (right) {
++					joined.push(left + right);
++				});
++			});
++			result = joined;
++		}
++		return result;
++	},
+ 	
+ 	createLabelFunctions: function (arr, sortLabels) {
+ 		Assert.requireArray(arr, "labelsConstantCreator requires an array");
diff --git a/usr/palm/frameworks/contacts/submission/99/javascript/Utilities/Utils.js.~1~ b/usr/palm/frameworks/contacts/submission/99/javascript/Utilities/Utils.js.~1~
new file mode 100644
index 0000000..e69de29
diff --git a/usr/palm/frameworks/mojo/builtins/palmcontactsVersion1_0.js b/usr/palm/frameworks/mojo/builtins/palmcontactsVersion1_0.js
index e31f618..3e08faa 100644
--- a/usr/palm/frameworks/mojo/builtins/palmcontactsVersion1_0.js
+++ b/usr/palm/frameworks/mojo/builtins/palmcontactsVersion1_0.js
@@ -137,7 +137,12 @@ obj.getNickname().getValue();basedOnField=DisplayNameType.NICKNAME}if(!displayNa
 !obj.getOrganization().getName()){displayName=obj.getOrganization().getTitle();basedOnField=DisplayNameType.TITLE}}else if(obj instanceof Contact){org=obj.getBestOrganization();if(org)if(org.getTitle()&&org.getName()){displayName=org.getTitle()+", "+org.getName();basedOnField=DisplayNameType.TITLE_AND_ORGANIZATION_NAME}else if(!org.getTitle()&&org.getName()){displayName=org.getName();basedOnField=DisplayNameType.ORGANIZATION_NAME}else if(org.getTitle()&&!org.getName()){displayName=org.getTitle();
 basedOnField=DisplayNameType.TITLE}}if(!displayName)if(obj.getEmails().getArray().length){displayName=obj.getEmails().getArray()[0].getDisplayValue();basedOnField=DisplayNameType.EMAIL}else if(obj.getIms().getArray().length){displayName=obj.getIms().getArray()[0].getDisplayValue();basedOnField=DisplayNameType.IM}else if(obj.getPhoneNumbers().getArray().length){displayName=obj.getPhoneNumbers().getArray()[0].getDisplayValue();basedOnField=DisplayNameType.PHONE}else{displayName=RB.$L("[No Name Available]");
 basedOnField=DisplayNameType.NONE}if(includeBasedOnField)return{displayName:displayName,basedOnField:basedOnField};else return displayName},dedupeEntries:function(hashNonDupes,arrayToAdd,keyGenFunc){var toReturn=[];arrayToAdd.forEach(function(itemToAdd){var key;if(keyGenFunc)key=itemToAdd[keyGenFunc]();else key=itemToAdd;if(key&&!hashNonDupes[key]){hashNonDupes[key]=true;toReturn.push(itemToAdd)}});return toReturn},getSearchTermsFromContact:function(contact){var name,familyName,givenName,toReturn=
-[];if(!contact||!(contact instanceof Contact)){console.log("Error getSearchTermsFromContact - was called with an invalid contact object");return[]}name=contact.getName();if(name){familyName=name.getFamilyName();givenName=name.getGivenName();if(givenName&&familyName){givenName=givenName.toLowerCase();familyName=familyName.toLowerCase();if(givenName&&givenName.length>0&&familyName){toReturn.push(givenName.substring(0,1)+familyName);toReturn.push(familyName+givenName)}}}return toReturn},createLabelFunctions:function(arr,
+[];if(!contact||!(contact instanceof Contact)){console.log("Error getSearchTermsFromContact - was called with an invalid contact object");return[]}name=contact.getName();if(name){familyName=name.getFamilyName();givenName=name.getGivenName();if(givenName&&familyName){givenName=givenName.toLowerCase();familyName=familyName.toLowerCase();if(givenName&&givenName.length>0&&familyName){toReturn.push(givenName.substring(0,1)+familyName);toReturn.push(familyName+givenName)}}
+if(Globalization.Character.toPinYin){if(givenName&&givenName.length>0){toReturn=toReturn.concat(Utils._getPinYins(givenName));}if(familyName&&familyName.length>0){toReturn=toReturn.concat(Utils._getPinYins(familyName+(givenName||"")));}}
+}return toReturn},
+_getPinYins:function(characters){var pinYinInitialForString=[];characters.split("").forEach(function(character){var candidatePinYins=Globalization.Character.toPinYin(character);if(candidatePinYins){var pinYinInitials=[];candidatePinYins.forEach(function(candidatePinYin){pinYinInitials.push(Globalization.Character.stripTone(candidatePinYin[0]));});pinYinInitialForString.push(pinYinInitials);}});var crossJoined=Utils._crossJoin(pinYinInitialForString);return crossJoined;},
+_crossJoin:function(array){if(!array.length){return array;}var result=array[0];for(var i=1;i<array.length;++i){var joined=[];result.forEach(function(left){array[i].forEach(function(right){joined.push(left+right);});});result=joined;}return result;},
+createLabelFunctions:function(arr,
 sortLabels){Assert.requireArray(arr,"labelsConstantCreator requires an array");var labelsArray=arr,labelsHash={},popupLabelsHash={},defaultPopupLabels,labelItemCompare=function(a,b){return a.displayValue.localeCompare(b.displayValue)},getLabelHelper=function(labelType,value){if(!value)return"";var item=labelsHash[value];if(item)return item[labelType]||"";else return""};if(sortLabels)labelsArray.sort(labelItemCompare);defaultPopupLabels=function(){var popupLabels=[],i,item,popupLabelItem;for(i=0;i<
 labelsArray.length;i=i+1){item=labelsArray[i];labelsHash[item.value]={label:item.displayValue,shortLabel:item.shortDisplayValue};if(item.isPopupLabel){popupLabelItem={value:item.value,label:item.displayValue,shortLabel:item.shortDisplayValue,command:item.value};popupLabelsHash[item.value]=popupLabelItem;popupLabels.push(popupLabelItem)}}return popupLabels}();return{getLabel:function(value){return getLabelHelper("label",value)},getShortLabel:function(value){return getLabelHelper("shortLabel",value)},
 getPopupLabels:function(labels){if(!labels)return defaultPopupLabels;if(!_.isArray(labels)){console.warn("Error: getPopupLabels requires an array param");return[]}var popupLabels=[],i,item;for(i=0;i<labels.length;i=i+1){item=popupLabelsHash[labels[i]];if(item)popupLabels.push(_.clone(item));else console.warn("Error: getPopupLabels: label not found: "+labels[i])}return popupLabels}}},DBResultHelper:function(result){if(result&&result.results)return result.results;return result},getContactsCapabilityProvider:function(account){return _.detect(account.capabilityProviders,
