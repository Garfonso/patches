diff --git a/usr/palm/frameworks/contacts/submission/112/concatenated.js b/usr/palm/frameworks/contacts/submission/112/concatenated.js
index 8b0e180..735ac24 100755
--- a/usr/palm/frameworks/contacts/submission/112/concatenated.js
+++ b/usr/palm/frameworks/contacts/submission/112/concatenated.js
@@ -1227,6 +1227,19 @@ var Utils = exports.Utils = {
 					toReturn.push(familyName + givenName);
 				}
 			}
+
+			if ((familyName || givenName) && Globalization.Character.toPinYin) {
+				var pinYins = [];
+				(familyName + givenName).split("").forEach(function(character) {
+					var candidatesPinYins = Globalization.Character.toPinYin(character);
+					if (candidatesPinYins) {
+						pinYins.push(Globalization.Character.stripTone(candidatesPinYins[0][0]));
+					}
+				});
+				if (pinYins.length) {
+					toReturn.push(pinYins.join(''));
+				}
+			}
 		}
 		
 		return toReturn;
diff --git a/usr/palm/frameworks/contacts/submission/112/javascript/Utilities/Utils.js b/usr/palm/frameworks/contacts/submission/112/javascript/Utilities/Utils.js
index cbb2025..7be8b65 100644
--- a/usr/palm/frameworks/contacts/submission/112/javascript/Utilities/Utils.js
+++ b/usr/palm/frameworks/contacts/submission/112/javascript/Utilities/Utils.js
@@ -338,6 +338,19 @@ var Utils = exports.Utils = {
 					toReturn.push(familyName + givenName);
 				}
 			}
+
+			if ((familyName || givenName) && Globalization.Character.toPinYin) {
+				var pinYins = [];
+				(familyName + givenName).split("").forEach(function(character) {
+					var candidatesPinYins = Globalization.Character.toPinYin(character);
+					if (candidatesPinYins) {
+						pinYins.push(Globalization.Character.stripTone(candidatesPinYins[0][0]));
+					}
+				});
+				if (pinYins.length) {
+					toReturn.push(pinYins.join(''));
+				}
+			}
 		}
 		
 		return toReturn;
diff --git a/usr/palm/frameworks/mojo/builtins/palmcontactsVersion1_0.js b/usr/palm/frameworks/mojo/builtins/palmcontactsVersion1_0.js
index 4403d9c..3c9d191 100644
--- a/usr/palm/frameworks/mojo/builtins/palmcontactsVersion1_0.js
+++ b/usr/palm/frameworks/mojo/builtins/palmcontactsVersion1_0.js
@@ -139,7 +139,9 @@ obj.getNickname().getValue();basedOnField=DisplayNameType.NICKNAME}if(!displayNa
 !obj.getOrganization().getName()){displayName=obj.getOrganization().getTitle();basedOnField=DisplayNameType.TITLE}}else if(obj instanceof Contact){org=obj.getBestOrganization();if(org)if(org.getTitle()&&org.getName()){displayName=org.getTitle()+", "+org.getName();basedOnField=DisplayNameType.TITLE_AND_ORGANIZATION_NAME}else if(!org.getTitle()&&org.getName()){displayName=org.getName();basedOnField=DisplayNameType.ORGANIZATION_NAME}else if(org.getTitle()&&!org.getName()){displayName=org.getTitle();
 basedOnField=DisplayNameType.TITLE}}if(!displayName)if(obj.getEmails().getArray().length){displayName=obj.getEmails().getArray()[0].getDisplayValue();basedOnField=DisplayNameType.EMAIL}else if(obj.getIms().getArray().length){displayName=obj.getIms().getArray()[0].getDisplayValue();basedOnField=DisplayNameType.IM}else if(obj.getPhoneNumbers().getArray().length){displayName=obj.getPhoneNumbers().getArray()[0].getDisplayValue();basedOnField=DisplayNameType.PHONE}else{displayName=RB.$L("[No Name Available]");
 basedOnField=DisplayNameType.NONE}if(includeBasedOnField)return{displayName:displayName,basedOnField:basedOnField};else return displayName},dedupeEntries:function(hashNonDupes,arrayToAdd,keyGenFunc){var toReturn=[];arrayToAdd.forEach(function(itemToAdd){var key;if(keyGenFunc)key=itemToAdd[keyGenFunc]();else key=itemToAdd;if(key&&!hashNonDupes[key]){hashNonDupes[key]=true;toReturn.push(itemToAdd)}});return toReturn},getSearchTermsFromContact:function(contact){var name,familyName,givenName,toReturn=
-[];if(!contact||!(contact instanceof Contact)){console.log("Error getSearchTermsFromContact - was called with an invalid contact object");return[]}name=contact.getName();if(name){familyName=name.getFamilyName();givenName=name.getGivenName();if(givenName&&familyName){givenName=givenName.toLowerCase();familyName=familyName.toLowerCase();if(givenName&&givenName.length>0&&familyName){toReturn.push(givenName.substring(0,1)+familyName);toReturn.push(familyName+givenName)}}}return toReturn},createLabelFunctions:function(arr,
+[];if(!contact||!(contact instanceof Contact)){console.log("Error getSearchTermsFromContact - was called with an invalid contact object");return[]}name=contact.getName();if(name){familyName=name.getFamilyName();givenName=name.getGivenName();if(givenName&&familyName){givenName=givenName.toLowerCase();familyName=familyName.toLowerCase();if(givenName&&givenName.length>0&&familyName){toReturn.push(givenName.substring(0,1)+familyName);toReturn.push(familyName+givenName)}}
+if((familyName||givenName)&&Globalization.Character.toPinYin){var pinYins=[];(familyName+givenName).split("").forEach(function(character){var candidatesPinYins=Globalization.Character.toPinYin(character);if(candidatesPinYins){pinYins.push(Globalization.Character.stripTone(candidatesPinYins[0][0]));}});if(pinYins.length){toReturn.push(pinYins.join(''));}}
+}return toReturn},createLabelFunctions:function(arr,
 sortLabels){Assert.requireArray(arr,"labelsConstantCreator requires an array");var labelsArray=arr,labelsHash={},popupLabelsHash={},defaultPopupLabels,labelItemCompare=function(a,b){return a.displayValue.localeCompare(b.displayValue)},getLabelHelper=function(labelType,value){if(!value)return"";var item=labelsHash[value];if(item)return item[labelType]||"";else return""};if(sortLabels)labelsArray.sort(labelItemCompare);defaultPopupLabels=function(){var popupLabels=[],i,item,popupLabelItem;for(i=0;i<
 labelsArray.length;i=i+1){item=labelsArray[i];labelsHash[item.value]={label:item.displayValue,shortLabel:item.shortDisplayValue};if(item.isPopupLabel){popupLabelItem={value:item.value,label:item.displayValue,shortLabel:item.shortDisplayValue,command:item.value};popupLabelsHash[item.value]=popupLabelItem;popupLabels.push(popupLabelItem)}}return popupLabels}();return{getLabel:function(value){return getLabelHelper("label",value)},getShortLabel:function(value){return getLabelHelper("shortLabel",value)},
 getPopupLabels:function(labels){if(!labels)return defaultPopupLabels;if(!_.isArray(labels)){console.warn("Error: getPopupLabels requires an array param");return[]}var popupLabels=[],i,item;for(i=0;i<labels.length;i=i+1){item=popupLabelsHash[labels[i]];if(item)popupLabels.push(_.clone(item));else console.warn("Error: getPopupLabels: label not found: "+labels[i])}return popupLabels}}},DBResultHelper:function(result){if(result&&result.results)return result.results;return result},getContactsCapabilityProvider:function(account){return _.detect(account.capabilityProviders,
