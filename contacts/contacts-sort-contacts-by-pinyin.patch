diff --git a/usr/palm/frameworks/contacts/submission/112/javascript/properties/SortKey.js b/usr/palm/frameworks/contacts/submission/112/javascript/properties/SortKey.js
index 2f67609..46b2fa7 100644
--- a/usr/palm/frameworks/contacts/submission/112/javascript/properties/SortKey.js
+++ b/usr/palm/frameworks/contacts/submission/112/javascript/properties/SortKey.js
@@ -66,7 +66,6 @@ SortKey.generateSortKey = function (person, optionalConfigParams) {
 		}
 	});
 	
-	/*
 	//then, we determine the correct value for shouldConvertToPinyin param, if we weren't passed it
 	future.then(function () {
 		var dummy = future.result,
@@ -92,7 +91,7 @@ SortKey.generateSortKey = function (person, optionalConfigParams) {
 	future.then(function () {
 		var result = future.result;
 				
-		if (result && result.contactSort === "pinyin") {
+		if (1 || result && result.contactSort === "pinyin") {
 			configParams.shouldConvertToPinyin = true;
 		} else {
 			//if we didn't make the request or it failed for some reason, we just assume false if we're not passed anything
@@ -100,8 +99,11 @@ SortKey.generateSortKey = function (person, optionalConfigParams) {
 				configParams.shouldConvertToPinyin = false;
 			}
 		}
+		if (!Globalization.Character.toPinYin) {
+			configParams.shouldConvertToPinyin = false;
+		}
+		return true;
 	});
-	*/
 	
 	future.then(function () {
 		var dummy = future.result;
@@ -134,7 +136,7 @@ SortKey._generateSortKeyFromSortOrder = function (person, configParams) {
 		Assert.require(person, "SortKey.generateSortKey requires a person that is truthy");
 		Assert.requireObject(configParams, "SortKey.generateSortKey requires an object as the configParams");
 		Assert.requireString(configParams.listSortOrder, "SortKey.generateSortKey requires a listSortOrder that is a string");
-		//Assert.requireDefined(configParams.shouldConvertToPinyin, "SortKey.generateSortKey requires a shouldConvertToPinyin argument");
+		Assert.requireDefined(configParams.shouldConvertToPinyin, "SortKey.generateSortKey requires a shouldConvertToPinyin argument");
 		
 		if (person instanceof Person) {
 			name = person.getName();
@@ -164,7 +166,6 @@ SortKey._generateSortKeyFromSortOrder = function (person, configParams) {
 			displayName = Person.generateDisplayNameFromRawPerson(person) || "";
 		}
 		
-		/*
 		//if configParams.shouldConvertToPinyin, convert the sortkey fields from Chinese characters to pinyin
 		if (configParams.shouldConvertToPinyin) {
 			return SortKey._convertToPinyin(familyName, givenName, companyName, displayName);
@@ -177,7 +178,7 @@ SortKey._generateSortKeyFromSortOrder = function (person, configParams) {
 		var input = future.result,
 			startRetrieveCandidateIndex, endRetrieveCandidateIndex;
 		
-		if (configParams.shouldConvertToPinyin) {
+		if (input && configParams.shouldConvertToPinyin) {
 			// Go through each part of the result candidates array and pull out the section of the 
 			// candidates array that should hold the given name part and
 			// run that through our retrieveCandidateStringFromPinyinConversion function and get
@@ -201,7 +202,6 @@ SortKey._generateSortKeyFromSortOrder = function (person, configParams) {
 			endRetrieveCandidateIndex += displayName.length;
 			displayName = SortKey._retrieveCandidateStringFromPinyinConversion(input.candidates.slice(startRetrieveCandidateIndex, endRetrieveCandidateIndex)); 
 		}
-		*/
 		
 		familyName = Globalization.Name.getSortName(familyName); //to sort "van der Muellen" under 'M'
 		
@@ -213,14 +213,11 @@ SortKey._generateSortKeyFromSortOrder = function (person, configParams) {
 	return future;
 };
 
-/*
 SortKey._retrieveCandidateStringFromPinyinConversion = function (candidates) {
 	var toReturn = "";
 	
 	candidates.forEach(function (candidate) {
-		if ("<unknown>" !== candidate) {
-			toReturn = toReturn.concat(candidate);
-		}
+		toReturn += Globalization.Character.stripTone(candidate[0].charAt(0));
 	});
 	
 	return toReturn;
@@ -246,6 +243,7 @@ SortKey._convertToPinyin = function (familyName, givenName, companyName, display
 	
 	//console.log("rui: the uniString to convert is" + arrayChar.toString());
 	if (convertedCharacterArray.length > 0) {
+		/*
 		innerFuture = PalmCall.call("palm://com.palm.ime/", "lookupWords", {
 			"unicode": convertedCharacterArray
 		});
@@ -254,6 +252,16 @@ SortKey._convertToPinyin = function (familyName, givenName, companyName, display
 			PalmCall.cancel(innerFuture);
 			innerFuture.result = result;
 		});
+		*/
+		innerFuture = new Future();
+		innerFuture.now(function() {
+			var candidates = [];
+			convertedCharacterArray.forEach(function(character) {
+				var pinYins = Globalization.Character.toPinYin(character);
+				candidates[candidates.length] = pinYins ? pinYins : [character];
+			});
+			innerFuture.result = { candidates: candidates };
+		});
 		return innerFuture;
 	} 
 	
@@ -265,6 +273,8 @@ SortKey._convertToPinyinHelper = function (stringToConvert) {
 	var charArray = stringToConvert.split(""),
 		toReturn = [],
 		hexString = "\\u";
+
+	return charArray;
 	
 	charArray.forEach(function (character) {
 		var charToPush = character;
@@ -285,7 +295,6 @@ SortKey._convertToPinyinHelper = function (stringToConvert) {
 	
 	return toReturn;
 };
-*/
 
 /**
  * PRIVATE
