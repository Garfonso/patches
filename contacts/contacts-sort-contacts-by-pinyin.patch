diff --git a/usr/palm/frameworks/contacts/submission/112/concatenated.js b/usr/palm/frameworks/contacts/submission/112/concatenated.js
index 8b0e180..9ca95fc 100755
--- a/usr/palm/frameworks/contacts/submission/112/concatenated.js
+++ b/usr/palm/frameworks/contacts/submission/112/concatenated.js
@@ -6737,7 +6737,6 @@ SortKey.generateSortKey = function (person, optionalConfigParams) {
 		}
 	});
 	
-	/*
 	//then, we determine the correct value for shouldConvertToPinyin param, if we weren't passed it
 	future.then(function () {
 		var dummy = future.result,
@@ -6763,7 +6762,7 @@ SortKey.generateSortKey = function (person, optionalConfigParams) {
 	future.then(function () {
 		var result = future.result;
 				
-		if (result && result.contactSort === "pinyin") {
+		if (1 || result && result.contactSort === "pinyin") {
 			configParams.shouldConvertToPinyin = true;
 		} else {
 			//if we didn't make the request or it failed for some reason, we just assume false if we're not passed anything
@@ -6771,8 +6770,11 @@ SortKey.generateSortKey = function (person, optionalConfigParams) {
 				configParams.shouldConvertToPinyin = false;
 			}
 		}
+		if (!Globalization.Character.toPinYin) {
+			configParams.shouldConvertToPinyin = false;
+		}
+		return true;
 	});
-	*/
 	
 	future.then(function () {
 		var dummy = future.result;
@@ -6805,7 +6807,7 @@ SortKey._generateSortKeyFromSortOrder = function (person, configParams) {
 		Assert.require(person, "SortKey.generateSortKey requires a person that is truthy");
 		Assert.requireObject(configParams, "SortKey.generateSortKey requires an object as the configParams");
 		Assert.requireString(configParams.listSortOrder, "SortKey.generateSortKey requires a listSortOrder that is a string");
-		//Assert.requireDefined(configParams.shouldConvertToPinyin, "SortKey.generateSortKey requires a shouldConvertToPinyin argument");
+		Assert.requireDefined(configParams.shouldConvertToPinyin, "SortKey.generateSortKey requires a shouldConvertToPinyin argument");
 		
 		if (person instanceof Person) {
 			name = person.getName();
@@ -6835,7 +6837,6 @@ SortKey._generateSortKeyFromSortOrder = function (person, configParams) {
 			displayName = Person.generateDisplayNameFromRawPerson(person) || "";
 		}
 		
-		/*
 		//if configParams.shouldConvertToPinyin, convert the sortkey fields from Chinese characters to pinyin
 		if (configParams.shouldConvertToPinyin) {
 			return SortKey._convertToPinyin(familyName, givenName, companyName, displayName);
@@ -6848,7 +6849,7 @@ SortKey._generateSortKeyFromSortOrder = function (person, configParams) {
 		var input = future.result,
 			startRetrieveCandidateIndex, endRetrieveCandidateIndex;
 		
-		if (configParams.shouldConvertToPinyin) {
+		if (input && configParams.shouldConvertToPinyin) {
 			// Go through each part of the result candidates array and pull out the section of the 
 			// candidates array that should hold the given name part and
 			// run that through our retrieveCandidateStringFromPinyinConversion function and get
@@ -6872,7 +6873,6 @@ SortKey._generateSortKeyFromSortOrder = function (person, configParams) {
 			endRetrieveCandidateIndex += displayName.length;
 			displayName = SortKey._retrieveCandidateStringFromPinyinConversion(input.candidates.slice(startRetrieveCandidateIndex, endRetrieveCandidateIndex)); 
 		}
-		*/
 		
 		familyName = Globalization.Name.getSortName(familyName); //to sort "van der Muellen" under 'M'
 		
@@ -6884,14 +6884,11 @@ SortKey._generateSortKeyFromSortOrder = function (person, configParams) {
 	return future;
 };
 
-/*
 SortKey._retrieveCandidateStringFromPinyinConversion = function (candidates) {
 	var toReturn = "";
 	
 	candidates.forEach(function (candidate) {
-		if ("<unknown>" !== candidate) {
-			toReturn = toReturn.concat(candidate);
-		}
+		toReturn += Globalization.Character.stripTone(candidate[0].charAt(0));
 	});
 	
 	return toReturn;
@@ -6917,6 +6914,7 @@ SortKey._convertToPinyin = function (familyName, givenName, companyName, display
 	
 	//console.log("rui: the uniString to convert is" + arrayChar.toString());
 	if (convertedCharacterArray.length > 0) {
+		/*
 		innerFuture = PalmCall.call("palm://com.palm.ime/", "lookupWords", {
 			"unicode": convertedCharacterArray
 		});
@@ -6925,6 +6923,16 @@ SortKey._convertToPinyin = function (familyName, givenName, companyName, display
 			PalmCall.cancel(innerFuture);
 			innerFuture.result = result;
 		});
+		*/
+		innerFuture = new Future();
+		innerFuture.now(function() {
+			var candidates = [];
+			convertedCharacterArray.forEach(function(character) {
+				var pinYins = Globalization.Character.toPinYin(character);
+				candidates[candidates.length] = pinYins ? pinYins : [character];
+			});
+			innerFuture.result = { candidates: candidates };
+		});
 		return innerFuture;
 	} 
 	
@@ -6936,6 +6944,8 @@ SortKey._convertToPinyinHelper = function (stringToConvert) {
 	var charArray = stringToConvert.split(""),
 		toReturn = [],
 		hexString = "\\u";
+
+	return charArray;
 	
 	charArray.forEach(function (character) {
 		var charToPush = character;
@@ -6956,7 +6966,6 @@ SortKey._convertToPinyinHelper = function (stringToConvert) {
 	
 	return toReturn;
 };
-*/
 
 /**
  * PRIVATE
diff --git a/usr/palm/frameworks/contacts/submission/112/javascript/properties/SortKey.js b/usr/palm/frameworks/contacts/submission/112/javascript/properties/SortKey.js
index 2f67609..46b2fa7 100644
--- a/usr/palm/frameworks/contacts/submission/112/javascript/properties/SortKey.js
+++ b/usr/palm/frameworks/contacts/submission/112/javascript/properties/SortKey.js
@@ -66,7 +66,6 @@ SortKey.generateSortKey = function (person, optionalConfigParams) {
 		}
 	});
 	
-	/*
 	//then, we determine the correct value for shouldConvertToPinyin param, if we weren't passed it
 	future.then(function () {
 		var dummy = future.result,
@@ -92,7 +91,7 @@ SortKey.generateSortKey = function (person, optionalConfigParams) {
 	future.then(function () {
 		var result = future.result;
 				
-		if (result && result.contactSort === "pinyin") {
+		if (1 || result && result.contactSort === "pinyin") {
 			configParams.shouldConvertToPinyin = true;
 		} else {
 			//if we didn't make the request or it failed for some reason, we just assume false if we're not passed anything
@@ -100,8 +99,11 @@ SortKey.generateSortKey = function (person, optionalConfigParams) {
 				configParams.shouldConvertToPinyin = false;
 			}
 		}
+		if (!Globalization.Character.toPinYin) {
+			configParams.shouldConvertToPinyin = false;
+		}
+		return true;
 	});
-	*/
 	
 	future.then(function () {
 		var dummy = future.result;
@@ -134,7 +136,7 @@ SortKey._generateSortKeyFromSortOrder = function (person, configParams) {
 		Assert.require(person, "SortKey.generateSortKey requires a person that is truthy");
 		Assert.requireObject(configParams, "SortKey.generateSortKey requires an object as the configParams");
 		Assert.requireString(configParams.listSortOrder, "SortKey.generateSortKey requires a listSortOrder that is a string");
-		//Assert.requireDefined(configParams.shouldConvertToPinyin, "SortKey.generateSortKey requires a shouldConvertToPinyin argument");
+		Assert.requireDefined(configParams.shouldConvertToPinyin, "SortKey.generateSortKey requires a shouldConvertToPinyin argument");
 		
 		if (person instanceof Person) {
 			name = person.getName();
@@ -164,7 +166,6 @@ SortKey._generateSortKeyFromSortOrder = function (person, configParams) {
 			displayName = Person.generateDisplayNameFromRawPerson(person) || "";
 		}
 		
-		/*
 		//if configParams.shouldConvertToPinyin, convert the sortkey fields from Chinese characters to pinyin
 		if (configParams.shouldConvertToPinyin) {
 			return SortKey._convertToPinyin(familyName, givenName, companyName, displayName);
@@ -177,7 +178,7 @@ SortKey._generateSortKeyFromSortOrder = function (person, configParams) {
 		var input = future.result,
 			startRetrieveCandidateIndex, endRetrieveCandidateIndex;
 		
-		if (configParams.shouldConvertToPinyin) {
+		if (input && configParams.shouldConvertToPinyin) {
 			// Go through each part of the result candidates array and pull out the section of the 
 			// candidates array that should hold the given name part and
 			// run that through our retrieveCandidateStringFromPinyinConversion function and get
@@ -201,7 +202,6 @@ SortKey._generateSortKeyFromSortOrder = function (person, configParams) {
 			endRetrieveCandidateIndex += displayName.length;
 			displayName = SortKey._retrieveCandidateStringFromPinyinConversion(input.candidates.slice(startRetrieveCandidateIndex, endRetrieveCandidateIndex)); 
 		}
-		*/
 		
 		familyName = Globalization.Name.getSortName(familyName); //to sort "van der Muellen" under 'M'
 		
@@ -213,14 +213,11 @@ SortKey._generateSortKeyFromSortOrder = function (person, configParams) {
 	return future;
 };
 
-/*
 SortKey._retrieveCandidateStringFromPinyinConversion = function (candidates) {
 	var toReturn = "";
 	
 	candidates.forEach(function (candidate) {
-		if ("<unknown>" !== candidate) {
-			toReturn = toReturn.concat(candidate);
-		}
+		toReturn += Globalization.Character.stripTone(candidate[0].charAt(0));
 	});
 	
 	return toReturn;
@@ -246,6 +243,7 @@ SortKey._convertToPinyin = function (familyName, givenName, companyName, display
 	
 	//console.log("rui: the uniString to convert is" + arrayChar.toString());
 	if (convertedCharacterArray.length > 0) {
+		/*
 		innerFuture = PalmCall.call("palm://com.palm.ime/", "lookupWords", {
 			"unicode": convertedCharacterArray
 		});
@@ -254,6 +252,16 @@ SortKey._convertToPinyin = function (familyName, givenName, companyName, display
 			PalmCall.cancel(innerFuture);
 			innerFuture.result = result;
 		});
+		*/
+		innerFuture = new Future();
+		innerFuture.now(function() {
+			var candidates = [];
+			convertedCharacterArray.forEach(function(character) {
+				var pinYins = Globalization.Character.toPinYin(character);
+				candidates[candidates.length] = pinYins ? pinYins : [character];
+			});
+			innerFuture.result = { candidates: candidates };
+		});
 		return innerFuture;
 	} 
 	
@@ -265,6 +273,8 @@ SortKey._convertToPinyinHelper = function (stringToConvert) {
 	var charArray = stringToConvert.split(""),
 		toReturn = [],
 		hexString = "\\u";
+
+	return charArray;
 	
 	charArray.forEach(function (character) {
 		var charToPush = character;
@@ -285,7 +295,6 @@ SortKey._convertToPinyinHelper = function (stringToConvert) {
 	
 	return toReturn;
 };
-*/
 
 /**
  * PRIVATE
diff --git a/usr/palm/frameworks/mojo/builtins/palmcontactsVersion1_0.js b/usr/palm/frameworks/mojo/builtins/palmcontactsVersion1_0.js
index 4403d9c..c56260c 100644
--- a/usr/palm/frameworks/mojo/builtins/palmcontactsVersion1_0.js
+++ b/usr/palm/frameworks/mojo/builtins/palmcontactsVersion1_0.js
@@ -259,11 +259,19 @@ Utils.defineConstant("DEFAULT_BIG_PHOTO",LIB_ROOT+"images/detail_avatar.png",Con
 PhoneNumber.normalizePhoneNumber(value);this.setNormalizedValue(normalizedValue);this.doGenerateNormalizedValue=false}return normalizedValue}},{dbFieldName:"speedDial",defaultValue:"",setterName:"setSpeedDial",getterName:"getSpeedDial"}]});PhoneNumberExtended.prototype._extendedGetDBObject=function(dbObject){dbObject.normalizedValue=this.getNormalizedValue();return dbObject};var ReadOnly=PropertyBase.create({data:[{dbFieldName:"",defaultValue:false,setterName:"setValue",getterName:"getValue"}]});var Relation=exports.Relation=PropertyBase.create({data:[{dbFieldName:"value",defaultValue:"",setterName:"setValue",getterName:"getValue"},{dbFieldName:"type",defaultValue:"",setterName:"setType",getterName:"getType"},{dbFieldName:"primary",defaultValue:false,setterName:"setPrimary",getterName:"getPrimary"}]});Relation.prototype.getNormalizedHashKey=function(){return this.getValue()+":(|)"+this.getType()};
 Relation.prototype.equals=function(obj){if(obj instanceof Relation)return this.getValue()===obj.getValue()&&this.getType()===obj.getType()&&this.getPrimary()===obj.getPrimary();return false};Relation.prototype.getDisplayValue=function(){return this.getValue()};Relation.prototype.__defineGetter__("x_displayValue",function(){return this.getDisplayValue()});
 Relation.TYPE=Utils.defineConstants({ASSISTANT:"type_assistant",BROTHER:"type_brother",CHILD:"type_child",DOMESTIC_PARTNER:"type_domestic_partner",FATHER:"type_father",FRIEND:"type_friend",MANAGER:"type_manager",MOTHER:"type_mother",PARENT:"type_parent",PARTNER:"type_partner",REFERRED_BY:"type_referred_by",RELATIVE:"type_relative",SISTER:"type_sister",SPOUSE:"type_spouse",OTHER:"type_other"});var Reminder=PropertyBase.create({data:[{dbFieldName:"",defaultValue:"",setterName:"setValue",getterName:"getValue"}]});var Ringtone=PropertyBase.create({data:[{dbFieldName:"name",defaultValue:"",setterName:"setName",getterName:"getName"},{dbFieldName:"location",defaultValue:"",setterName:"setLocation",getterName:"getLocation"}]});var SearchTerm=PropertyBase.create({data:[{dbFieldName:"",defaultValue:"",setterName:"setValue",getterName:"getValue"}]});var SimEntryType=PropertyBase.create({data:[{dbFieldName:"",defaultValue:"",setterName:"setValue",getterName:"getValue"}]});var SimIndex=PropertyBase.create({data:[{dbFieldName:"",defaultValue:-1,setterName:"setValue",getterName:"getValue"}]});var SortKey=exports.SortKey=PropertyBase.create({data:[{dbFieldName:"",defaultValue:"",setterName:"setValue",getterName:"getValue"}]});
-SortKey.generateSortKey=function(person,optionalConfigParams){var future=new Future,configParams;future.now(function(){Assert.require(person,"SortKey.generateSortKey requires a person that is truthy");configParams=optionalConfigParams||{};if(configParams.listSortOrder)return true;else var appPrefs=new AppPrefs(future.callback(function(){var dummy=future.result;configParams.listSortOrder=appPrefs.get(AppPrefs.Pref.listSortOrder);future.result=true}))});future.then(function(){var dummy=future.result;
+SortKey.generateSortKey=function(person,optionalConfigParams){var future=new Future,configParams;future.now(function(){Assert.require(person,"SortKey.generateSortKey requires a person that is truthy");configParams=optionalConfigParams||{};if(configParams.listSortOrder)return true;else var appPrefs=new AppPrefs(future.callback(function(){var dummy=future.result;configParams.listSortOrder=appPrefs.get(AppPrefs.Pref.listSortOrder);future.result=true}))});future.then(function() {var dummy=future.result;
+var innerFuture; if (configParams.shouldConvertToPinyin !== undefined) { return true; } else { innerFuture = PalmCall.call("palm://com.palm.systemservice/", "getPreferences", { "keys": ["contactSort"] }); return innerFuture; } });
+future.then(function () { var result = future.result; if (1 || result && result.contactSort === "pinyin") { configParams.shouldConvertToPinyin = true; } else { if (configParams.shouldConvertToPinyin === undefined) { configParams.shouldConvertToPinyin = false; } } if (!Globalization.Character.toPinYin) { configParams.shouldConvertToPinyin = false; } return true; });
+future.then(function(){var dummy=future.result;
 return SortKey._generateSortKeyFromSortOrder(person,configParams)});return future};
 SortKey._generateSortKeyFromSortOrder=function(person,configParams){var future=new Future,givenName="",familyName="",companyName="",displayName="";future.now(function(){var name,company;Assert.require(person,"SortKey.generateSortKey requires a person that is truthy");Assert.requireObject(configParams,"SortKey.generateSortKey requires an object as the configParams");Assert.requireString(configParams.listSortOrder,"SortKey.generateSortKey requires a listSortOrder that is a string");if(person instanceof
-Person){name=person.getName();if(name){givenName=name.getGivenName()||"";familyName=name.getFamilyName()||""}company=person.getOrganization();if(company)companyName=company.getName()||"";displayName=person.generateDisplayName()||""}else{name=person.name;if(name){givenName=name.givenName||"";familyName=name.familyName||""}company=person.organization;if(company)companyName=company.name||"";displayName=Person.generateDisplayNameFromRawPerson(person)||""}familyName=Globalization.Name.getSortName(familyName);
+Person){name=person.getName();if(name){givenName=name.getGivenName()||"";familyName=name.getFamilyName()||""}company=person.getOrganization();if(company)companyName=company.getName()||"";displayName=person.generateDisplayName()||""}else{name=person.name;if(name){givenName=name.givenName||"";familyName=name.familyName||""}company=person.organization;if(company)companyName=company.name||"";displayName=Person.generateDisplayNameFromRawPerson(person)||""}
+if (configParams.shouldConvertToPinyin) { return SortKey._convertToPinyin(familyName, givenName, companyName, displayName); } else { return true; } }); future.then(function () { var input = future.result, startRetrieveCandidateIndex, endRetrieveCandidateIndex; if (input && configParams.shouldConvertToPinyin) { startRetrieveCandidateIndex = 0; endRetrieveCandidateIndex = familyName.length; familyName = SortKey._retrieveCandidateStringFromPinyinConversion(input.candidates.slice(startRetrieveCandidateIndex, endRetrieveCandidateIndex)); startRetrieveCandidateIndex = endRetrieveCandidateIndex; endRetrieveCandidateIndex += givenName.length; givenName = SortKey._retrieveCandidateStringFromPinyinConversion(input.candidates.slice(startRetrieveCandidateIndex, endRetrieveCandidateIndex)); startRetrieveCandidateIndex = endRetrieveCandidateIndex; endRetrieveCandidateIndex += companyName.length; companyName = SortKey._retrieveCandidateStringFromPinyinConversion(input.candidates.slice(startRetrieveCandidateIndex, endRetrieveCandidateIndex)); startRetrieveCandidateIndex = endRetrieveCandidateIndex; endRetrieveCandidateIndex += displayName.length; displayName = SortKey._retrieveCandidateStringFromPinyinConversion(input.candidates.slice(startRetrieveCandidateIndex, endRetrieveCandidateIndex)); }
+familyName=Globalization.Name.getSortName(familyName);
 return SortKey._generateSortKeyHelper(configParams,givenName,familyName,companyName,displayName)});return future};
+SortKey._retrieveCandidateStringFromPinyinConversion = function (candidates) { var toReturn = ""; candidates.forEach(function (candidate) { toReturn += Globalization.Character.stripTone(candidate[0].charAt(0)); }); return toReturn; };
+SortKey._convertToPinyin = function (familyName, givenName, companyName, displayName) { var convertedCharacterArray = [], innerFuture; convertedCharacterArray = convertedCharacterArray.concat(SortKey._convertToPinyinHelper(familyName)); convertedCharacterArray = convertedCharacterArray.concat(SortKey._convertToPinyinHelper(givenName)); convertedCharacterArray = convertedCharacterArray.concat(SortKey._convertToPinyinHelper(companyName)); convertedCharacterArray = convertedCharacterArray.concat(SortKey._convertToPinyinHelper(displayName)); if (convertedCharacterArray.length > 0) { innerFuture = new Future(); innerFuture.now(function() { var candidates = []; convertedCharacterArray.forEach(function(character) { var pinYins = Globalization.Character.toPinYin(character); candidates[candidates.length] = pinYins ? pinYins : [character]; }); innerFuture.result = { candidates: candidates }; }); return innerFuture; } return true; };
+SortKey._convertToPinyinHelper = function (stringToConvert) { var charArray = stringToConvert.split(""), toReturn = [], hexString = "\\u"; return charArray; };
 SortKey._generateSortKeyHelper=function(configParams,givenName,familyName,companyName,displayName){var listSortOrder=configParams.listSortOrder,sortKey="",sortKeyDefaultItem=SortKey.DEFAULT_CHAR+SortKey.DEFAULT_CHAR,sortKeyDelimiter="\t",firstChar;givenName=givenName||"";familyName=familyName||"";companyName=companyName||"";displayName=displayName||"";givenName=givenName.trim();familyName=familyName.trim();companyName=companyName.trim();displayName=displayName.trim();if(listSortOrder===ListWidget.SortOrder.companyLastFirst||
 listSortOrder===ListWidget.SortOrder.companyFirstLast){sortKey+=companyName||sortKeyDefaultItem;sortKey+=sortKeyDelimiter}if(givenName||familyName)if(listSortOrder===ListWidget.SortOrder.companyFirstLast||listSortOrder===ListWidget.SortOrder.firstLast){if(givenName)sortKey+=givenName+sortKeyDelimiter;if(familyName)sortKey+=familyName+sortKeyDelimiter}else{if(familyName)sortKey+=familyName+sortKeyDelimiter;if(givenName)sortKey+=givenName+sortKeyDelimiter}else sortKey+=displayName+sortKeyDelimiter;
 sortKey=sortKey.trim();if(sortKey){firstChar=sortKey.charAt(0);if(firstChar!==SortKey.DEFAULT_CHAR&&firstChar!==sortKeyDelimiter&&!Globalization.Character.isLetter(firstChar))sortKey=SortKey.DEFAULT_CHAR+sortKey}else sortKey=sortKeyDefaultItem;return sortKey.toLocaleLowerCase().trim()};Utils.defineConstant("DEFAULT_CHAR","\ufad7",SortKey);Utils.defineConstant("DEFAULT_NAME_DIVIDER_TEXT","#",SortKey);Utils.defineConstant("DEFAULT_COMPANY_DIVIDER_TEXT",RB.$L("None"),SortKey);var SpeedDialHash=PropertyBase.create({data:[{dbFieldName:"hashedPhoneNumber",defaultValue:null,setterName:"setHashedPhoneNumber",getterName:"getHashedPhoneNumber"},{dbFieldName:"key",defaultValue:null,setterName:"setKey",getterName:"getKey"}]});SpeedDialHash.prototype.equals=function(value){if(value instanceof SpeedDialHash)return this.getHashedPhoneNumber()===value.getHashedPhoneNumber()&&this.getKey()===value.getKey();return false};
