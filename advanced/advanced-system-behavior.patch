--- .orig/usr/palm/applications/com.palm.app.browser/app/controllers/page-assistant.js
+++ /usr/palm/applications/com.palm.app.browser/app/controllers/page-assistant.js
@@ -81,6 +81,10 @@
 	this._onSpotlightEndHandler = this._onSpotlightEnd.bind(this);
 
 	this._stopSceneScrolling = this._stopSceneScrolling.bindAsEventListener(this);
+
+	// Power scroll handlers
+	this.gestureStart = this.handleGestureStart.bindAsEventListener(this);
+	this.gestureEnd = this.handleGestureEnd.bindAsEventListener(this);
 }
 
 /**
@@ -276,6 +280,34 @@
 	}
 };
 
+PageAssistant.prototype.handleGestureStart = function(event) {
+	this.gestureStartY = event.centerY;
+	this.gestureStartX = event.centerX;
+};
+ 
+PageAssistant.prototype.handleGestureEnd = function(event) {
+	if(((event.centerY - this.gestureStartY) > 200) &&
+		(Math.abs(event.centerX - this.gestureStartX) < 45))
+	{
+		this.controller.getSceneScroller().mojo.revealTop();
+	}
+	else if(((event.centerY - this.gestureStartY) < -200) &&
+		(Math.abs(event.centerX - this.gestureStartX) < 45))
+	{
+		this.controller.getSceneScroller().mojo.revealBottom();
+	}
+	else if(((this.gestureStartX - event.centerX) > 200) &&
+		(Math.abs(event.centerY - this.gestureStartY) < 45))
+	{	
+		this._openHistoryView();
+	}
+	else if(((this.gestureStartX - event.centerX) < -200) &&
+		(Math.abs(event.centerY - this.gestureStartY) < 45))
+	{
+		this._openBookmarkView();
+	}
+};
+
 /**
  * Show the startpage which displays the list of current bookmarks.
  */
@@ -310,6 +342,11 @@
 		// Signal we are interested in showing browser server status.
 		this._browserServerStatus.showActivateState();
 
+		// Add power scroll listening
+		
+		this.controller.listen(this.controller.document, "gesturestart", this.gestureStart);
+		this.controller.listen(this.controller.document, "gestureend", this.gestureEnd);
+
 		this.controller.document.addEventListener(Mojo.Event.activate, this._onCardActivateHandler, false);
 		this.controller.document.addEventListener(Mojo.Event.deactivate, this._onCardDeactivateHandler, false);
 
@@ -414,6 +451,10 @@
 		// Signal we are not interesting in showing the browser server status.
 		this._browserServerStatus.showDeactivateState();
 
+		// Cleanup power scroll
+		this.controller.stopListening(this.controller.document, "gesturestart", this.gestureStart);
+		this.controller.stopListening(this.controller.document, "gestureend", this.gestureEnd);
+
 		// Cleanup focus handlers.
 		this.controller.document.removeEventListener(Mojo.Event.activate, this._onCardActivateHandler, false);
 		this.controller.document.removeEventListener(Mojo.Event.deactivate, this._onCardDeactivateHandler, false);
--- .orig/usr/palm/applications/com.palm.app.email/app/controllers/app-assistant.js
+++ /usr/palm/applications/com.palm.app.email/app/controllers/app-assistant.js
@@ -323,10 +323,15 @@
 		
 		if(stage) {
 			Mojo.Log.info("AppAssistant.showEmailStage: Reusing existing stage.");
-			stage.popScenesTo('accounts');
 			stage.activate();
-			skipAccountsPush = true;
-			stageExists(stage);
+
+			if(options.message)
+				setTimeout(AppAssistant.launchEmailCard.bind(this, options), 500);
+			else {
+				stage.popScenesTo('accounts');
+				skipAccountsPush = true;
+				stageExists(stage);
+			}
 		} else {
 			Mojo.Log.info("AppAssistant.showEmailStage: Creating new stage.");
 
@@ -376,6 +381,18 @@
 	
 };
 
+AppAssistant.launchEmailCard = function(params) {
+	var stageParams = {
+		name: 'childCard' + AppAssistant.childCardId++,
+		lightweight: Mojo.Controller.appInfo.lwStages
+	};
+
+	var callback = function(controller) {
+		controller.pushScene('message', params.message, true, null, true);
+	};
+
+	Mojo.Controller.getAppController().createStageWithCallback(stageParams, callback);
+};
 
 AppAssistant.focusEmailStage = function focusEmailStage() {
 	var emailStageController = Mojo.Controller.appController.getStageController("email");
@@ -384,7 +401,7 @@
 	}
 };
 
-AppAssistant.composeStageId = 0;
+AppAssistant.childCardId = 0;
 AppAssistant.openComposeStage = function openComposeStage(composeOptions, composeDoneFunc) {
 	// Ensure the stage name is unique for each compose stage
 	var createStage = function(stageName) {
@@ -401,8 +418,7 @@
 		};
 		Mojo.Controller.getAppController().createStageWithCallback(params, callback, undefined, composeDoneFunc); // Call through to the composeDoneFunc if the stage fails to open.
 	};
-	AppAssistant.composeStageId++;
-	createStage("compose"+AppAssistant.composeStageId);
+	createStage("childCard"+AppAssistant.childCardId++);
 };
 
 AppAssistant.prototype.clearDebounce = function(debounce) {
@@ -496,7 +512,14 @@
 			params = {params: params};
 		}
 
-		AppAssistant.openComposeStage(params);
+		var stageController = Mojo.Controller.appController.getStageController("email");
+		
+		if(stageController) {
+			stageController.activate();
+			setTimeout(AppAssistant.openComposeStage.bind(this, params), 500);
+		}
+		else
+			AppAssistant.openComposeStage(params);
 	};
 	
 	
--- .orig/usr/palm/applications/com.palm.app.email/app/views/list/email_entry.html
+++ /usr/palm/applications/com.palm.app.email/app/views/list/email_entry.html
@@ -1,4 +1,4 @@
-<div class="palm-row #{-readFlag} email-entry" id="#{-id}" x-mojo-tap-highlight="momentary">
+<div class="palm-row #{-readFlag} email-entry" id="#{-_id}" x-mojo-tap-highlight="momentary">
 		
 		#{-unreadFlaggedIcon}
 		#{-replyIcon}
--- .orig/usr/palm/applications/com.palm.app.email/app/controllers/list-assistant.js
+++ /usr/palm/applications/com.palm.app.email/app/controllers/list-assistant.js
@@ -187,6 +187,7 @@
 	this.emailListElement.addEventListener(Mojo.Event.listTap, this.handleClick.bind(this));
 	this.emailListElement.addEventListener(Mojo.Event.listDelete, this.handleDelete.bind(this));
 	this.emailListElement.addEventListener(Mojo.Event.filterImmediate, this.handleFilterChange.bind(this));
+	this.emailListElement.addEventListener(Mojo.Event.hold, this.handleListHold.bind(this));
 	this.controller.listen('email_list', Mojo.Event.filter, this.handleFilterBound, true);
 
 
@@ -228,6 +229,7 @@
 	if (this.emailListElement) {
 		this.emailListElement.removeEventListener(Mojo.Event.listTap, this);
 		this.emailListElement.removeEventListener(Mojo.Event.listDelete, this.handleDelete);
+		this.emailListElement.removeEventListener(Mojo.Event.hold, this);
 	}
 
 	EmailApp.accounts.removeListener(this.handleAccountsChanged);
@@ -709,6 +711,67 @@
 	});
 };
 
+ListAssistant.prototype.handleListHold = function (event) {
+	var folderId = this.folder._id;
+	var that = this;
+	
+	if(this.handleClickInProgress) {
+		return;
+	}
+	
+	if((event.target.parentNode) && (event.target.parentNode.id)) {
+	 	event.target.parentNode.className = "palm-row read email-entry";
+	 
+		var emailMessageId = event.target.parentNode.id;
+
+		var stageController = Mojo.Controller.appController.getStageController("email" + emailMessageId);
+
+		if(stageController) {
+			stageController.activate();
+			return;
+		}
+
+		this.handleClickInProgress = true;
+
+		Foundations.Data.DB.get([emailMessageId]).then(function(future) {
+			that.handleClickInProgress = false;
+
+			var email = future.result.results[0];
+			var sendStatus = email.sendStatus;
+
+			if((folderId !== that.mailAccount.draftsFolderId) &&
+				(folderId !== that.mailAccount.outboxFolderId || sendStatus || sendStatus.fatalError))
+			{
+				that.eventAlreadyHandled = true;
+			
+				var emailParams = {
+					accountId: that.folder.accountId,
+					orderBy: that.orderBy,
+					isDescending: that.sortDesc,
+					nextPrevWhereClause: that.makeWhere()
+				};
+
+				if(that.filter) {
+					params.folderFilter = that.filter;
+					params.filteredSet = that.dataAssistant.localDSA.itemsArray;
+				}
+				
+				var appAssistant = Mojo.Controller.getAppController().assistant;
+				
+				var stageParams = { 
+					name: 'childCard' + appAssistant.childCardId++, 
+					lightweight: Mojo.Controller.appInfo.lwStages
+				};
+
+				var callback = function(controller) {
+					controller.pushScene('message', {email: email, emailArgs: emailParams}, true, null, true);
+				};
+
+				Mojo.Controller.getAppController().createStageWithCallback(stageParams, callback);
+			}
+		});
+	}
+};
 
 ListAssistant.prototype.handleClick = function (event) {
 	var id = event.item._id;
@@ -719,6 +782,11 @@
 		return;
 	}
 
+	if(this.eventAlreadyHandled) {
+		this.eventAlreadyHandled = false;
+		return;
+	}
+
 	Mojo.Log.info("Trying to open email %s", event.item._id);
 	if (id) {
 
--- .orig/usr/palm/applications/com.palm.app.email/app/controllers/message-assistant.js
+++ /usr/palm/applications/com.palm.app.email/app/controllers/message-assistant.js
@@ -11,9 +11,11 @@
 
 
 
-var MessageAssistant = function(targetEmail, focusStage, detailsObj){
+var MessageAssistant = function(targetEmail, focusStage, detailsObj, childCard){
 	//window.logger.log("MessageAssistant ctor");
 
+	this.childCard = childCard;
+
 	this.lastPosition = Mojo.Controller.appController.getScreenOrientation();
 	this.positions = [
         "face up",
@@ -94,7 +96,8 @@
 	this.handleShowHideAttachmentList = this.showHideAttachmentList.bind(this);
 	
 	if (focusStage === true) {
-		this.focusStageTimer = _.delay(this.focusEmailStage.bind(this), 600);
+		this.focusEmailStage();
+//		this.focusStageTimer = _.delay(this.focusEmailStage.bind(this), 600);
 	}
 	
 	//window.logger.log("MessageAssistant ctor done");
@@ -967,6 +970,7 @@
 	
 	
 	MessageAssistant.prototype.addAsScrollListener = function(event) {
+		if((event) && (event.scroller))
         event.scroller.addListener(this);
 	};
 
@@ -1003,6 +1007,9 @@
 	* @param {Object} resp
 	*/
 	MessageAssistant.prototype.displayContactAvatarAndPresence = function(baseId, storageId, contactPerson) {
+		if(!this.controller)
+			return;
+
 		var personId = contactPerson.getId();
 		this.contactResponses[personId] = contactPerson;
 		var nameId = baseId + "-name";
@@ -2557,7 +2564,10 @@
 
 	MessageAssistant.prototype.deleteEmail = function() {
 		Message.deleteMessage(this.targetEmail._id);
-		this.controller.stageController.popScene();
+		if(this.childCard)
+			this.controller.window.close();
+		else
+			this.controller.stageController.popScene();
 	};
 	
 	/** 
--- .orig/usr/palm/applications/com.palm.app.messaging/app/controllers/app-assistant.js
+++ /usr/palm/applications/com.palm.app.messaging/app/controllers/app-assistant.js
@@ -35,7 +35,7 @@
 //		this.appController.serviceRequest = this.serviceRequestHelper.serviceRequest.bind(this.serviceRequestHelper);
 		
 		this.considerForNotification = appController.notificationAssistant.considerForNotification.bind(appController.notificationAssistant);
-			
+		this.appController.childCardId = 0;	
 	},
 	
 	handleLaunch: function(param){
@@ -104,6 +104,31 @@
 		}		
 	},
 	
+	launchChatInNewCard: function(chatThreadId, params) {
+		var stageController = Mojo.Controller.appController.getStageController("messaging" + chatThreadId);
+
+		if(stageController) {
+			stageController.activate();
+		}
+		else {
+			if(!params)
+				params = {};
+
+			params.childCard = true;
+		
+			var stageParams = {
+				name: 'childCard' + chatThreadId,
+				lightweight: Mojo.Controller.appInfo.lwStages
+			};
+
+			var callback = function(controller) {
+				controller.pushScene('chatview', chatThreadId, params);
+			};
+
+			Mojo.Controller.getAppController().createStageWithCallback(stageParams, callback);
+		}
+	},
+
 	launchChatWithId: function(stageController, chatThreadId) {
 		if (stageController) {			
 			// Don't pop/push if the chat we want is already open
@@ -111,12 +136,16 @@
 				return;
 			}
 			
-			var params = {
+/*			var params = {
 				focusWindow: true
 			};			
 			this.addListViewClearBadgeForChatFnToParams(params,chatThreadId);				
 			stageController.popScenesTo("listview");
 			stageController.pushScene("chatview", chatThreadId, params);
+*/
+
+			stageController.activate();
+			setTimeout(this.launchChatInNewCard.bind(this, chatThreadId), 500);
 		} else {
 			var afterCreate = function(stageController){
 				stageController.pushScene({name:'listview', id:CONSTANTS.SCENE_ID_LISTVIEW}, {});
@@ -141,8 +170,10 @@
 					focusWindow: true
 				};
 				this.addListViewClearBadgeForChatFnToParams(params, resp.chatThreadId);				
-				stageController.popScenesTo("listview", {});
-				stageController.pushScene("chatview", resp.chatThreadId, params);				
+				stageController.activate();
+				setTimeout(this.launchChatInNewCard.bind(this, resp.chatThreadId, params), 500);
+//				stageController.popScenesTo("listview", {});
+//				stageController.pushScene("chatview", resp.chatThreadId, params);				
 			} else {
 				var afterCreate = function(stageController){
 					stageController.pushScene({name:'listview', id:CONSTANTS.SCENE_ID_LISTVIEW}, {});
@@ -231,8 +262,10 @@
 						
 					launchParams.focusWindow = true;
 					this.addListViewClearBadgeForChatFnToParams(launchParams, conversation._id);			
-					stageController.popScenesTo("listview", {});
-					stageController.pushScene("chatview", conversation._id, launchParams);
+					stageController.activate();
+					setTimeout(this.launchChatInNewCard.bind(this, conversation._id, launchParams), 500);
+//					stageController.popScenesTo("listview", {});
+//					stageController.pushScene("chatview", conversation._id, launchParams);
 				} else {
 					var afterCreate = function(stageController){
 						stageController.pushScene({name:'listview', id:CONSTANTS.SCENE_ID_LISTVIEW}, {});
@@ -305,7 +338,12 @@
 
 	launchCompose: function(stageController, composeParams) {
 		composeParams.focusWindow = true;
-		
+
+		if (stageController)
+			stageController.activate();
+
+		setTimeout(this.launchComposeInNewCard.bind(this, composeParams), 500);
+/*		
 		if (stageController) {
 			stageController.popScenesTo("listview", {});
 			stageController.pushScene("compose", composeParams);
@@ -316,6 +354,22 @@
 			};
 			this.createWindow(afterCreate, 'images/splash-messaging-chatview.png');
 		}		
+*/
+	},
+
+	launchComposeInNewCard: function(params) {
+		params.childCard = true;
+	
+		var stageParams = {
+			name: 'childCard' + this.appController.childCardId++,
+			lightweight: Mojo.Controller.appInfo.lwStages
+		};
+
+		var callback = function(controller) {
+			controller.pushScene('compose', params);
+		};
+
+		Mojo.Controller.getAppController().createStageWithCallback(stageParams, callback);
 	},
 	
 	launchListView: function(stageController, forceListView) {
--- .orig/usr/palm/applications/com.palm.app.messaging/app/views/listview/buddyList-row.html
+++ /usr/palm/applications/com.palm.app.messaging/app/views/listview/buddyList-row.html
@@ -3,7 +3,7 @@
 	<div class="avatar-set" style="background-image:url(#{avatar})"><div class="avatar-frame"></div></div>
     <div class="icon left status-#{availabilityClass} status-icon"></div>
     <div class="title #{hideCustomMessage} #{unreadCountClass}" id="buddyBageContainer#{chatId}">
-      <div class="truncating-text im-name-info">#{displayName}</div>
+      <div class="truncating-text im-name-info" id="#{displayNameDivId}">#{displayName}</div>
       <div class="unread-count-container">
         <div class="unread-count-wrapper">#{unreadCount}</div>
       </div>
--- .orig/usr/palm/applications/com.palm.app.messaging/app/controllers/chatview-assistant.js
+++ /usr/palm/applications/com.palm.app.messaging/app/controllers/chatview-assistant.js
@@ -315,7 +315,7 @@
 			hintText: $L('Enter message here...'),
 			multiline: true,
 			focus: false,
-			enterSubmits: true,
+			enterSubmits: false,
 			inputName: "messageTextElement",
 			className: " ",
 			changeOnKeyPress: true
@@ -739,8 +739,10 @@
 					break;
 			}
 		} else if (event.type === Mojo.Event.back) {
-			event.stop();
-			this.popAndRevealListView();
+			if(!this.params.childCard) {
+				event.stop();
+				this.popAndRevealListView();
+			}
 			return;
 		}
 	},
@@ -2066,6 +2068,7 @@
 				}
 				//msg.messageText = PalmSystem.runTextIndexer(msg.messageText);
 				delayed.messageText = msg.messageText;
+				msg.messageText = msg.messageText.replace(/\n/g,"<br>");
 			}
 			
 			var icons = this.Messaging.IMAccounts.getIcons(msg.serviceName);
@@ -2107,9 +2110,9 @@
 				
 				// Only show the message sent time if it is less than two days old
 				// from when it arrived on device
-				if (today - msg.timeStamp <= 172800000) { //172800000 = (1000*60*60*24*2)
+//				if (today - msg.timeStamp <= 172800000) { //172800000 = (1000*60*60*24*2)
 					msg.timeStampDeltaMsg = new Template($L("Message Sent: #{dateTime}")).evaluate({dateTime:Mojo.Format.formatDate(sentTimeStamp,'short')});
-				}
+//				}
 //			}
 
 			if (msg.callbackNumber) {
@@ -2925,39 +2928,84 @@
 	},
 	
 	handleTextAreaKeyDown: function(event) {
-		// Check for return keys, and put a fake highlight on the send button.
-		// It will be cleared on key up.
 		if (event) {
-			if (Mojo.Char.isEnterKey(event.keyCode)) {
-				this.sendButton.addClassName('selected');
-			} else if (event.keyCode===129) {
+			if (event.keyCode===129) {
+				if (this.enterSendTimeout)
+					this.clearSendTimeout();
 				this.ctrlKeyPressed = true;
+			} else if (Mojo.Char.isEnterKey(event.keyCode)) {
+				if (!this.ctrlKeyPressed) {
+					Event.stop(event);
+					
+					var selectedTransport = this.transportModel.getSelectedTransport();
+					
+					if (selectedTransport.serviceName != "sms")
+						this.sendButton.addClassName('selected');
+				}
+				else if (this.enterSendTimeout)
+					this.clearSendTimeout();
 			} else if (event.keyCode===Mojo.Char.spaceBar && this.ctrlKeyPressed) {
-				Event.stop(event);
-				var controller = this.controller;
+				if (this.enterSendTimeout)
+					this.clearSendTimeout();
+				var messageTextElement = this.messageTextElement;
 				var onselect = function onEmoticonSelect(emoticon) {
-					controller.document.execCommand("insertText", true, emoticon);
+					messageTextElement.setValue(messageTextElement.getValue() + emoticon);
 				};
 				var emoticonPicker = new EmoticonPickerDialogAssistant(this, onselect);
 				emoticonPicker.show();
 			}
+			else if (this.enterSendTimeout)
+				this.clearSendTimeout();
 		}
 	},
 
 	handleTextAreaKeyUp: function(event) {
 		if (event) {
-			if (Mojo.Char.isEnterKey(event.keyCode)) {
-				this.considerForSend();
-				Event.stop(event);
-				
-				// Remove highlight that was added on keydown.
-				this.sendButton.removeClassName('selected');
-			} else if (event.keyCode===129) {
+			if (event.keyCode===129) {
 				this.ctrlKeyPressed = false;
 			}
+			else if (Mojo.Char.isEnterKey(event.keyCode)) {
+				if (this.ctrlKeyPressed) {
+					this.messageTextElement.blur();
+					this.messageTextElement.focus();
+				}
+				else {
+					var selectedTransport = this.transportModel.getSelectedTransport();
+					
+					if (selectedTransport.serviceName != "sms") {
+						this.considerForSend();
+						this.sendButton.removeClassName('selected');
+					}
+					else {
+						if (this.enterSendTimeout) {
+							this.clearSendTimeout();
+							this.considerForSend();
+						}
+						else {
+							this.setupSendTimeout();
+						}
+					}
+								
+					Event.stop(event);
+				}
+			}
 		}
 	},
 
+	setupSendTimeout: function() {
+		this.sendButton.addClassName('selected');
+		this.enterSendTimeout = setTimeout(this.clearSendTimeout.bind(this), 3000);				
+	},
+
+	clearSendTimeout: function() {
+		this.sendButton.removeClassName('selected');
+
+		if(this.enterSendTimeout)
+			clearTimeout(this.enterSendTimeout);
+
+		this.enterSendTimeout = null;
+	},
+
 	handleTextAreaChange: function() {
 		if (this.messageTextElement && this.messageTextElement.value === '' && this.outboundAttachment === undefined) {
 			this.actionButton.removeClassName('textentry');
--- .orig/usr/palm/applications/com.palm.app.messaging/app/controllers/compose-assistant.js
+++ /usr/palm/applications/com.palm.app.messaging/app/controllers/compose-assistant.js
@@ -30,6 +30,8 @@
 			this.launchedWithParams = true;
 			var i;
 			
+			this.childCard = params.childCard;
+			
 			if (params.launchedAsForward){
 				this.launchedAsForward = true;
 			}
@@ -123,6 +125,7 @@
 		this.attachFilePicker = this.attachFilePicker.bind(this);
 		this.handleTextAreaChange = this.handleTextAreaChange.bind(this);
 		this.handleTextAreaKeyUp = this.handleTextAreaKeyUp.bind(this);
+		this.handleTextAreaKeyDown = this.handleTextAreaKeyDown.bind(this);
 		this.handleCancelAttachment = this.resetTextBox.bind(this,false);		
 		this.handleRecipientsChanged = this.handleRecipientsChanged.bind(this);
 
@@ -164,7 +167,7 @@
 		    hintText: $L('Enter message here...'),
 		    multiline: true,
 		    focus: (this.prePopulatedRecipients.length > 0),
-		    enterSubmits: true,
+		    enterSubmits: false,
 			requiresEnterKey: true,
 		    modelProperty: "value",
 			changeOnKeyPress: true
@@ -197,6 +200,7 @@
 
 	ready: function() {
 		this.actionButton = this.controller.get('ActionButton');
+		this.sendButton = this.controller.get('SendButton');
 		this.addressingForm = this.controller.get('addressingForm');
 		this.messageTextWidget = this.controller.get('messageTextWidget');
 		this.messageTextElement  = this.messageTextWidget.querySelector('[name=messageTextElement]');
@@ -204,6 +208,7 @@
 		this.addressingWidgetSpacer = this.controller.get('addressingWidgetSpacer');
 
 		this.messageTextElement.observe('keyup', this.handleTextAreaKeyUp);
+		this.messageTextElement.observe('keydown', this.handleTextAreaKeyDown);
 		this.messageTextWidget.observe(Mojo.Event.propertyChange, this.handleTextAreaChange);
 	
 	    // Observe add/delete to the addressing widget
@@ -631,8 +636,14 @@
 			params = {};
 		}
 		// swapScene
-		this.controller.stageController.swapScene({name:'chatview', transition:Mojo.Transition.crossFade}, chatThreadId, params);
+//		this.controller.stageController.swapScene({name:'chatview', transition:Mojo.Transition.crossFade}, chatThreadId, params);
 		//this.controller.stageController.swapScene('chatview', chatThreadId, params);
+		
+		this.controller.serviceRequest("palm://com.palm.applicationManager", {
+			method: "launch", parameters: {id: "com.palm.app.messaging",
+			params: {chatThreadId: chatThreadId}} });
+			
+		this.controller.window.close();
 	},
 	
 //	_handleSentMessageResponse: function (result) {
@@ -667,11 +678,101 @@
 		} 
 	},
 
+	handleTextAreaKeyDown: function(event) {
+		if (event) {
+			if (event.keyCode===129) {
+				if (this.enterSendTimeout)
+					this.clearSendTimeout();
+				this.ctrlKeyPressed = true;
+			} else if (Mojo.Char.isEnterKey(event.keyCode)) {
+				if (!this.ctrlKeyPressed) {
+					Event.stop(event);
+					
+					var hasSMSRecipients = false;
+					
+					var recipients = Mojo.View.serializeMojo(this.addressingForm, true).to$A;
+					
+					for (var i = 0; i < recipients.length; i++) {
+						if (MessagingLib.Utils.isTextMessage(recipients[i].serviceName)) {
+							hasSMSRecipients = true;
+							break;
+						}
+					}
+					
+					if (!hasSMSRecipients)
+						this.sendButton.addClassName('selected');
+				}
+				else if (this.enterSendTimeout)
+					this.clearSendTimeout();
+			} else if (event.keyCode===Mojo.Char.spaceBar && this.ctrlKeyPressed) {
+				if (this.enterSendTimeout)
+					this.clearSendTimeout();
+				var messageTextElement = this.messageTextElement;
+				var onselect = function onEmoticonSelect(emoticon) {
+					messageTextElement.setValue(messageTextElement.getValue() + emoticon);
+				};
+				var emoticonPicker = new EmoticonPickerDialogAssistant(this, onselect);
+				emoticonPicker.show();
+			}
+			else if (this.enterSendTimeout)
+				this.clearSendTimeout();
+		}
+	},
+
 	handleTextAreaKeyUp: function(event) {
-		if (event && Mojo.Char.isEnterKey(event.keyCode)) {
-			this.considerForSend();
-			Event.stop(event);
-		}		
+		if (event) {
+			if (event.keyCode===129) {
+				this.ctrlKeyPressed = false;
+			}
+			else if (Mojo.Char.isEnterKey(event.keyCode)) {
+				if (this.ctrlKeyPressed) {
+					this.messageTextElement.blur();
+					this.messageTextElement.focus();
+				}
+				else {
+					var hasSMSRecipients = false;
+					
+					var recipients = Mojo.View.serializeMojo(this.addressingForm, true).to$A;
+					
+					for (var i = 0; i < recipients.length; i++) {
+						if (MessagingLib.Utils.isTextMessage(recipients[i].serviceName)) {
+							hasSMSRecipients = true;
+							break;
+						}
+					}
+					
+					if (!hasSMSRecipients) {
+						this.considerForSend();
+						this.sendButton.removeClassName('selected');
+					}
+					else {
+						if (this.enterSendTimeout) {
+							this.clearSendTimeout();
+							this.considerForSend();
+						}
+						else {
+							this.setupSendTimeout();
+						}
+					}
+								
+					Event.stop(event);
+				}
+			}
+		}
+	},
+
+	setupSendTimeout: function() {
+		this.sendButton.addClassName('selected');
+		this.enterSendTimeout = setTimeout(this.clearSendTimeout.bind(this), 3000);				
+	},
+
+	clearSendTimeout: function() {
+		this.sendButton.removeClassName('selected');
+
+		if(this.enterSendTimeout)
+			clearTimeout(this.enterSendTimeout);
+
+		this.enterSendTimeout = null;
 	},
 
 	handleTextAreaChange: function() {
@@ -811,6 +912,7 @@
 	    });
 	
 		this.messageTextElement.stopObserving('keyup', this.handleTextAreaKeyUp);
+		this.messageTextElement.stopObserving('keydown', this.handleTextAreaKeyDown);
 		this.messageTextWidget.stopObserving(Mojo.Event.propertyChange, this.handleTextAreaChange);
 	
 		this.characterCounter.destroy();
@@ -835,7 +937,7 @@
 				event.stop();
 			} 
 		} else if(event.type === Mojo.Event.back) {
-			if (this.launchedAsForward === undefined) {
+			if ((this.launchedAsForward === undefined) && (!this.childCard)) {
 				event.stop();
 				this.saveDraft = false;
 				this.controller.stageController.popScenesTo('listview');
--- .orig/usr/palm/applications/com.palm.app.messaging/app/controllers/listview-assistant.js
+++ /usr/palm/applications/com.palm.app.messaging/app/controllers/listview-assistant.js
@@ -212,6 +212,8 @@
 		
 		this.filterImmediate = this.filterImmediate.bind(this);
 		this.filter = this.filter.bind(this);
+		this.handleHistoryListHold = this.handleHistoryListHold.bindAsEventListener(this);
+		this.handleBuddyListHold = this.handleBuddyListHold.bindAsEventListener(this);
 		this.handleHistoryListTap = this.handleHistoryListTap.bindAsEventListener(this);
 		this.handleHistoryListDelete = this.handleHistoryListDelete.bindAsEventListener(this);
 		this.handleBuddyListTap = this.handleBuddyListTap.bindAsEventListener(this);
@@ -429,9 +431,11 @@
 
 		// observe clicks on the buddy list & history list
 		this.historyIndexedList.observe(Mojo.Event.listTap, this.handleHistoryListTap);
+		this.historyIndexedList.observe(Mojo.Event.hold, this.handleHistoryListHold);
 		// observe swipe to delete on the history list
 		this.historyIndexedList.observe(Mojo.Event.listDelete, this.handleHistoryListDelete);
 		this.buddyIndexedList.observe(Mojo.Event.listTap, this.handleBuddyListTap);
+		this.buddyIndexedList.observe(Mojo.Event.hold, this.handleBuddyListHold);
 	
 		//set hint text later
 		this.customMessageTextWidgetAttributes = {
@@ -627,19 +631,78 @@
 
 	    return dsa;
 	},
+
+	handleHistoryListHold: function(e) {
+		if(!e.target.hasClassName("im-name-info"))
+			var element = e.target.up(1).down(".im-name-info");
+		else
+			var element = e.target;
+
+		if((element) && (element.id)) {
+			this.eventAlreadyHandled = true;
+		
+			var chatThreadId = element.id.substring(16, element.id.length - 12);
+
+			var ele = e.target.up(".chat-balloon");
+			ele.removeClassName("selected");
+			
+			this.launchChatInNewCard(chatThreadId);
+		}
+	},
+
+	handleBuddyListHold: function(e) {
+		if(!e.target.hasClassName("im-name-info"))
+			var element = e.target.up(1).down(".im-name-info");
+		else
+			var element = e.target;
+
+		if((element) && (element.id)) {
+			this.eventAlreadyHandled = true;		
+		
+			var personId = element.id.substring(14, element.id.length - 12);
+
+			var ele = e.target.up(".buddyListRow");
+			ele.removeClassName("selected");
+
+			var future = MessagingDB.Conversations.findFromBuddy({personId: personId}, false);
+
+			future.then(this, function(future) {
+				this.launchChatInNewCard(future.result._id, {selectIMTransport: true});
+
+				future.result = true;
+			});
+
+		}
+	},      
 	
 	handleHistoryListTap: function(e) {
+		if(this.eventAlreadyHandled) {
+			this.eventAlreadyHandled = false;
+			return;
+		}
+	
 		this.launchChatView(e.item._id);
 	},
 	
 	handleHistoryListDelete: function(event) {
 		var chatThreadId = event.item._id;
+		
+		var stageController = Mojo.Controller.appController.getStageController("messaging" + chatThreadId);
+
+		if(stageController)
+			Mojo.Controller.getAppController().closeStage("messaging" + chatThreadId);
+		
 		MessagingDB.Conversations.delChatAndMessages(chatThreadId);
 		//Mojo.Controller.appController.notificationAssistant.clearNotificationsForChat(chatThreadId);
 		//this.clearSpecificListBadgeForChatThreadId(chatThreadId, "buddyBageContainer", this.buddyIndexedList);
 	},
 	
 	handleBuddyListTap: function(e) {
+		if(this.eventAlreadyHandled) {
+			this.eventAlreadyHandled = false;
+			return;
+		}
+
 		var buddyStatusRec = e.item;
 		var future = MessagingDB.Conversations.findFromBuddy(buddyStatusRec, false);
 		future.then(this, function(future) {
@@ -1003,6 +1066,9 @@
 		var unreadCountCache = this.getCacheUnreadCount();
 		for (var i = 0; i < result.length; i++) {
 			var buddy = result[i];
+			
+			buddy.displayNameDivId = "buddyList-row-"+buddy.personId+"-displayName";
+					
 			if(unreadCountCache.hasElement(buddy.personId)){
 				buddy.unreadCount = unreadCountCache.get(buddy.personId);
 			}
@@ -1691,7 +1757,23 @@
 	},
 	
 	loadComposeView: function(params) {
-		this.controller.stageController.pushScene('compose', params);
+		if(!params)
+			params = {};
+
+		params.childCard = true;
+
+		var stageParams = {
+			name: 'childCard' + this.appController.childCardId++,
+			lightweight: Mojo.Controller.appInfo.lwStages
+		};
+
+		var callback = function(controller) {
+			controller.pushScene('compose', params);
+		};
+
+		Mojo.Controller.getAppController().createStageWithCallback(stageParams, callback);
+	
+//		this.controller.stageController.pushScene('compose', params);
 	},
 	
 	loadPreferencesView: function() {
@@ -1715,6 +1797,25 @@
 		this.controller.stageController.pushScene('chatview', chatThreadId, params);
 	},
 	
+	launchChatInNewCard: function(chatThreadId) {
+		var stageController = Mojo.Controller.appController.getStageController("messaging" + chatThreadId);
+
+		if(stageController) {
+			stageController.activate();
+			return;
+		}
+
+		var stageParams = { 
+			name: 'childCard' + chatThreadId,
+			lightweight: Mojo.Controller.appInfo.lwStages };
+
+		var callback = function(controller) {
+			controller.pushScene('chatview', chatThreadId, {focusWindow: true, childCard: true});             
+		};
+
+		Mojo.Controller.getAppController().createStageWithCallback(stageParams, callback);
+	},
+
 	clearListBadgeForChatThreadId: function(chatThreadId) {
 		this.clearSpecificListBadgeForChatThreadId(chatThreadId, "buddyBageContainer", this.buddyIndexedList);
 		this.clearSpecificListBadgeForChatThreadId(chatThreadId, "historyBageContainer", this.historyIndexedList);
@@ -1749,6 +1850,8 @@
 		this.Messaging.IMAccounts.stopObserving(this.handleIMAccountsChange);
 		this.filterField.stopObserving(Mojo.Event.filterImmediate, this.filterImmediate);
 		this.filterField.stopObserving(Mojo.Event.filter, this.filter);
+		this.historyIndexedList.stopObserving(Mojo.Event.hold, this.handleHistoryListHold);
+		this.buddyIndexedList.stopObserving(Mojo.Event.hold, this.handleBuddyListHold);
 		this.historyIndexedList.stopObserving(Mojo.Event.listTap, this.handleHistoryListTap);
 		this.historyIndexedList.stopObserving(Mojo.Event.listDelete, this.handleHistoryListDelete);
 		this.buddyIndexedList.stopObserving(Mojo.Event.listTap, this.handleBuddyListTap);
--- .orig/usr/palm/applications/com.palm.app.messaging/stylesheets/messaging.css
+++ /usr/palm/applications/com.palm.app.messaging/stylesheets/messaging.css
@@ -526,6 +526,8 @@
 .chatRow .message .delayedMessage {
 		font-style: italic;
 		color: #747474;
+		font-size: 12px;
+		margin-top: -10px;
 }
 
 /* grouped buttons */
--- .orig/usr/lib/luna/system/luna-systemui/app/controllers/bar-assistant.js
+++ /usr/lib/luna/system/luna-systemui/app/controllers/bar-assistant.js
@@ -97,6 +97,9 @@
 		// Initialize and Subscribe for VPN Notification
 		this.initOnServerStart("com.palm.vpn", this.VPNInit.bind(this), this.VPNDeInit.bind(this));
 		
+		//Subscribe to Keypad Notification.
+		this.monitorKeypadSwitch();
+
 		//Initialize and Subscribe for Storage / Media Mode Notification.			
 		this.storageInit();
 		
@@ -2231,6 +2234,85 @@
 },
 
 /*
+ * Initialize keypad monitoring
+ */
+monitorKeypadSwitch: function() {
+	this.sliderStateSubscribtion = new Mojo.Service.Request('palm://com.palm.keys/switches', {
+		method: 'status', parameters: {subscribe: true}, 
+		onSuccess: function(data) {
+			if(data.key == "slider") {
+				if(data.state == 'up') {
+					this.invertKeypadBrightness(true);
+
+					//Do this to catch quick up & down movements
+					this.checkSliderState.bind(this).delay(1); 
+				}
+				else if(data.state == 'down') {
+					this.invertKeypadBrightness(false);
+				}
+			}
+		}.bind(this)
+	});
+},
+
+invertKeypadBrightness: function(state) {
+	if(state == true) {
+		this.controller.serviceRequest('palm://com.palm.display/control', {
+			method: 'getProperty', parameters: {properties: ["maximumBrightness"]},
+			onSuccess: function(response) {
+				if(response.maximumBrightness != undefined) {
+					var keypadBrightness = 101 - parseInt(response.maximumBrightness);
+
+					if(keypadBrightness < 25)
+						keypadBrightness = 25;
+					else if(keypadBrightness > 75)
+						keypadBrightness = 75;
+
+					this.controller.serviceRequest('palm://com.palm.power/backlight', {
+						method: 'set', parameters: {keypad: {brightness: keypadBrightness}} });
+
+					if(!this.displayStateSubscribtion) {
+						this.displayStateSubscribtion = this.controller.serviceRequest('palm://com.palm.display/control', {
+							method: 'status', parameters: {subscribe: true},
+							onSuccess: function(response) {
+								if((response) && (response.event)) {
+									if(response.event == "displayOn")
+										this.checkSliderState();
+								}
+							}.bind(this)
+						});
+					}
+				}
+			}.bind(this)
+		});
+	}
+	else if(state == false) {
+		if(this.displayStateSubscribtion) {
+			this.displayStateSubscribtion.cancel();
+
+			delete this.displayStateSubscribtion;
+		}
+
+		this.controller.serviceRequest('palm://com.palm.power/backlight', {
+			method: 'set', parameters:{keypad:{brightness: 0}} });
+	}
+},
+
+checkSliderState: function() {
+	this.controller.serviceRequest('palm://com.palm.keys/switches', {
+		method: 'status', parameters: {'get': 'slider'},
+		onSuccess: function(data) {
+			if(data.key === "slider") {
+				if(data.state === 'down')
+					this.invertKeypadBrightness(false);
+				else if (data.state === 'up')
+					this.invertKeypadBrightness(true);
+			}
+		}.bind(this)
+	});
+},
+
+/*
  * Initialize power
  */
 powerInit:function() {
