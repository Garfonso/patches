--- .orig/usr/palm/applications/com.palm.app.contacts/app/models/AppSettings.js
+++ /usr/palm/applications/com.palm.app.contacts/app/models/AppSettings.js
@@ -4,7 +4,7 @@
 /*global Mojo, ContactsUI */
 
 var AppSettings = function () {
-	this.cookieVersion = 1;
+	this.cookieVersion = 2;
 	this.cookieContainer = new Mojo.Model.Cookie("contacts");
 	this.cookie = this.cookieContainer.get();
 	
@@ -12,14 +12,28 @@
 		this.cookie = {
 			version: this.cookieVersion,
 			firstUse: true,
+			listViewDisplayMode: "default",
 			listViewDisplayType: ContactsUI.PersonListWidget.VIEW.PERSON_LIST
 		};
 		this.cookieContainer.put(this.cookie);
 	} else if (this.cookie.version && this.cookie.version !== this.cookieVersion) {
 		// Handle cookie migration here
+		this.cookie.version = this.cookieVersion;
+		this.cookie.listViewDisplayMode = "default";
+
+		this.cookieContainer.put(this.cookie);
 	}
 };
 
+AppSettings.prototype.getListViewDisplayMode = function () {
+	return this.cookie.listViewDisplayMode;
+};
+
+AppSettings.prototype.setListViewDisplayMode = function (mode) {
+	this.cookie.listViewDisplayMode = mode;
+	this.cookieContainer.put(this.cookie);
+};
+
 AppSettings.prototype.isFirstLaunch = function () {
 	return this.cookie.firstUse;
 };
--- .orig/usr/palm/applications/com.palm.app.contacts/app/controllers/app-assistant.js
+++ /usr/palm/applications/com.palm.app.contacts/app/controllers/app-assistant.js
@@ -374,6 +374,10 @@
 				} else if (launchType === "editContact") {
 					this.pushEditScene.apply(this, pushSceneArgs);
 				
+				// [Launch Param: "launchType" === "editUnknown"] - Pushes the prefs scene with unknown contacts view
+				} else if (launchType === "editUnknown") {
+					this.pushPrefsSceneEditUnknown.apply(this, pushSceneArgs);
+				
 				// [Launch Param: "launchType" === "reminder"] - Pushes the detail scene + reminder scene
 				} else if (launchType === "reminder") {
 					this.pushReminderScene.apply(this, pushSceneArgs);
@@ -464,6 +468,21 @@
 			});
 		});
 	},
+
+	pushPrefsSceneEditUnknown: function (stageController, launchParams, shouldFocus, transition) {
+		this.popAllScenesAndPushListView(stageController, transition);
+		stageController.pushScene({
+			name: "prefs",
+			transition: transition
+		}, "unknown_prefs");
+		stageController.pushScene({
+			name: "accountlogin",
+			transition: transition
+		}, {
+			account: launchParams.account,
+			template: launchParams.template
+		});
+	},
 	
 	transformContact: function (contact) {
 		//the old schema needs to be mapped to the new schema
--- .orig/usr/palm/applications/com.palm.app.contacts/stylesheets/common.css
+++ /usr/palm/applications/com.palm.app.contacts/stylesheets/common.css
@@ -65,6 +65,8 @@
 
 .palm-menu-icon.favorite { background-image: url(../images/menu-icon-favorites.png); }
 .palm-menu-icon.new-contact	{ background-image: url(../images/menu-icon-new-contact.png); }
+.palm-menu-icon.new-favorite	{ background-image: url(../images/menu-icon-new-favorite.png); }
+.palm-menu-icon.notification { background-image: url(../images/menu-icon-notifications.png); }
 
 /* Account Icons */      
                             
--- .orig/usr/palm/applications/com.palm.app.contacts/app/controllers/detail-assistant.js
+++ /usr/palm/applications/com.palm.app.contacts/app/controllers/detail-assistant.js
@@ -321,6 +321,12 @@
 		
 	if (person) {
 		items.push({
+			label: $L('Notifications'),
+			icon: "notification",			
+			command: "notifications"
+		});
+
+		items.push({
 			label: $L('Edit'),
 			command: MenuHandler.editContact,
 			disabled: enableEditItem ? false : true
@@ -764,7 +770,7 @@
 	}
 };
 
-DetailAssistant.prototype.handleEdit = function () {
+DetailAssistant.prototype.handleEdit = function (view) {
 	var detailSceneCallback = this.handleReturnFromEditScene.bind(this);
 
 	if (this.currentlyLinking) { 
@@ -772,6 +778,7 @@
 	}
 
 	this.controller.stageController.pushScene('edit', {
+		editView: view,
 		person: this.detailWidget.getPerson(),
 		//updateDetailCallback: updateDetailID,
 		detailSceneCallback: detailSceneCallback
@@ -781,7 +788,7 @@
 DetailAssistant.prototype.handleReturnFromEditScene = function (response) {
 	Mojo.Log.info("RESPONSE: " + JSON.stringify(response) + "\n\n\n\n");
 
-	this.updateCommandMenu(false);
+//	this.updateCommandMenu(false);
 
 	try {
 		//this.cmdMenuModel.items = this.commandMenuModel;
@@ -1072,6 +1079,8 @@
 		} else if (event.command === MenuHandler.deleteContact) {
 			Mojo.Event.stop(event);
 			this.handleDelete();
+		} else if (event.command === "notifications") {
+			this.handleEdit("prefs");
 		} else if (event.command === "sendbluetooth") {
 			Mojo.Event.stop(event);
 			this.sendContactBluetooth();
--- .orig/usr/palm/applications/com.palm.app.contacts/app/controllers/edit-assistant.js
+++ /usr/palm/applications/com.palm.app.contacts/app/controllers/edit-assistant.js
@@ -44,6 +44,8 @@
 // --------------------------------------------
 // --NTRP
 var EditAssistant = function (params) {
+	this.editView = params.editView;
+
 	// Flag for the activate method below that
 	// indicates whether or not the contactPoints (addresses, url, ims)
 	// need to be setup and drawn to the screne 
@@ -162,7 +164,7 @@
 	
 	// Check if the ringtone exists. If it does then display it, otherwise
 	// show the set a ringtone button.
-	if (this.person.getRingtone().getName()) {
+/*	if (this.person.getRingtone().getName()) {
 		this.person.ringtoneDisplay = this.person.getRingtone().getName();
 		this.person.ringtoneSet = "ringtone-set";
 	} else {
@@ -174,7 +176,7 @@
 		object: this.person,
 		template: "edit/ringtones"
 	});
-	
+*/	
 	var that = this,
 		notes = [],
 		phoneNumbers = [],
@@ -947,10 +949,10 @@
 	// pop the edit scene.
 	this.controller.setupWidget(Mojo.Menu.commandMenu, undefined, {
 		visible: true,
-		items: [{
+		items: [{}, {
 			label: $L('Done'),
 			command: this.finished.bind(this)
-		}]
+		}, {}]
 	});
 	
 	// I believe this is the spinner that is shown when it takes a long time to 
@@ -1125,7 +1127,7 @@
 	// Attach the eventhandlers to the name, photo, and ringtone fields.
 	this.eventListenerManager.addListener(this.controller.get('NameSyncPickerWrapper'), Mojo.Event.tap, this.popupContactChooser.bind(this));
 	this.eventListenerManager.addListener(this.controller.get('edit-photo'), Mojo.Event.tap, this.attachFilePicker.bind(this));
-	this.eventListenerManager.addListener(this.controller.get('RingtoneBox'), Mojo.Event.tap, this.attachRingtonePicker.bind(this));
+//	this.eventListenerManager.addListener(this.controller.get('RingtoneBox'), Mojo.Event.tap, this.attachRingtonePicker.bind(this));
 	
 	// Sets up the labels for the popup on the entries in the contactPoint lists. (Home, Work, ...)
 	this.renderLabels();
@@ -1144,6 +1146,258 @@
 		this.controller.setInitialFocusedElement(null);
 	}
 	
+	// SETUP contact prefs view
+	
+	var firstName = this.person.getName().getGivenName() || "";
+	var lastName = this.person.getName().getFamilyName() || "";
+
+	this.controller.get("ContactName").innerHTML = firstName + " " + lastName;
+
+	this.choicesCallAction = [
+		{label: $L("Alert Normally"), value: "none"},
+		{label: $L("Direct to Voicemail"), value: "direct2vm"},
+		{label: $L("Hang Up Automatically"), value: "autohangup"} ];
+
+	this.modelCallAction = {value: this.person.getCallAction().getAction() ||Â "none"};
+
+	if((this.modelCallAction.value == "direct2vm") || (this.modelCallAction.value == "autohangup"))
+	{
+		this.controller.get("PhoneAlertRow").style.display = "none";
+		this.controller.get("PhoneRingtoneRow").style.display = "none";
+	}
+
+	this.controller.setupWidget("CallAction", {
+		label: $L("Action"),
+		labelPlacement: "left", 		
+		choices: this.choicesCallAction},
+		this.modelCallAction);
+
+	this.eventListenerManager.addListener(this.controller.get("CallAction"), Mojo.Event.propertyChange, 
+		this.saveContactPreferences.bind(this, "call"));
+
+	this.choicesPhoneAlert = [
+		{label: $L("Use Default"), value: "default"},
+		{label: $L("Ringtone"), value: "ringtone"},
+		{label: $L("Mute"), value: "none"} ];
+
+	this.modelCallAlert = {value: this.person.getCallAlert().getAlert() || "default"};
+
+	if(this.modelCallAlert.value != "ringtone")
+		this.controller.get("PhoneRingtoneRow").style.display = "none";
+
+	this.controller.setupWidget("PhoneAlert", {
+		label: $L("Alert"),
+		labelPlacement: "left", 							
+		choices: this.choicesPhoneAlert},
+		this.modelCallAlert);
+
+	this.eventListenerManager.addListener(this.controller.get("PhoneAlert"), Mojo.Event.propertyChange, 
+		this.saveContactPreferences.bind(this, "call"));
+
+	this.controller.get("PhoneRingtone").innerHTML = this.person.getRingtone().getName() || "";
+
+	this.eventListenerManager.addListener(this.controller.get("PhoneRingtoneRow"), Mojo.Event.tap, 
+		this.selectRingtone.bind(this, "call"));
+
+	this.choicesMsgAlert = [
+		{label: $L("Use Default"), value: "default"},
+		{label: $L("System Sound"), value: "alert"},
+		{label: $L("Ringtone"), value: "ringtone"},
+		{label: $L("Vibrate"), value: "vibrate"},
+		{label: $L("Mute"), value: "none"} ];
+
+	this.modelMsgAlert = {value: this.person.getMsgAlert().getAlert() || "default"};
+
+	if(this.modelMsgAlert.value != "ringtone")
+		this.controller.get("MsgRingtoneRow").style.display = "none";
+
+	this.controller.setupWidget("MsgAlert", {
+		label: $L("Alert"),
+		labelPlacement: "left", 							
+		choices: this.choicesMsgAlert},
+		this.modelMsgAlert);
+
+	this.eventListenerManager.addListener(this.controller.get("MsgAlert"), Mojo.Event.propertyChange, 
+		this.saveContactPreferences.bind(this, "msg"));
+
+	this.controller.get("MsgRingtone").innerHTML = this.person.getMsgRingtone().getName() || "";
+
+	this.eventListenerManager.addListener(this.controller.get("MsgRingtoneRow"), Mojo.Event.tap, 
+		this.selectRingtone.bind(this, "msg"));
+
+	this.choicesIMsgAlert = [
+		{label: $L("Use Default"), value: "default"},
+		{label: $L("System Sound"), value: "alert"},
+		{label: $L("Ringtone"), value: "ringtone"},
+		{label: $L("Vibrate"), value: "vibrate"},
+		{label: $L("Mute"), value: "none"} ];
+
+	this.modelIMsgAlert = {value: this.person.getIMsgAlert().getAlert() || "default"};
+
+	if(this.modelIMsgAlert.value != "ringtone")
+		this.controller.get("IMsgRingtoneRow").style.display = "none";
+
+	this.controller.setupWidget("IMsgAlert", {
+		label: $L("Alert"),
+		labelPlacement: "left", 							
+		choices: this.choicesIMsgAlert},
+		this.modelIMsgAlert);
+
+	this.eventListenerManager.addListener(this.controller.get("IMsgAlert"), Mojo.Event.propertyChange, 
+		this.saveContactPreferences.bind(this, "imsg"));
+
+	this.controller.get("IMsgRingtone").innerHTML = this.person.getIMsgRingtone().getName() || "default";
+
+	this.eventListenerManager.addListener(this.controller.get("IMsgRingtoneRow"), Mojo.Event.tap, 
+		this.selectRingtone.bind(this, "imsg"));
+
+	// Show correct view
+	
+	if(this.editView == "prefs") {
+		this.controller.get("contact_detail").style.display = "none";
+		this.controller.get("contact_prefs").style.display = "block";		
+	}
+};
+
+EditAssistant.prototype.saveContactPreferences = function(group) {
+	this.person.dirty = true;
+
+	if(group == "call") {
+		if(this.modelCallAction.value != "none") {
+			this.controller.get("CallActionRow").style.className = "single";
+			this.controller.get("PhoneAlertRow").style.display = "none";		
+			this.controller.get("PhoneRingtoneRow").style.display = "none";
+
+			this.modelCallAlert.value = "default";
+			this.controller.modelChanged(this.modelCallAlert);
+
+			this.controller.get("PhoneRingtone").innerHTML = "";
+		}
+		else {
+			this.controller.get("CallActionRow").style.className = "first";
+			this.controller.get("PhoneAlertRow").style.display = "block";		
+
+			if(this.modelCallAlert.value != "ringtone") {
+				this.controller.get("PhoneRingtoneRow").style.display = "none";
+				this.controller.get("PhoneRingtone").innerHTML = "";
+			}
+			else {
+				this.controller.get("PhoneRingtoneRow").style.display = "block";
+				
+				if((!this.person.getRingtone().getName()) || (this.person.getRingtone().getName() == ""))
+					this.selectRingtone("call", null);
+				else
+					this.controller.get("PhoneRingtone").innerHTML = this.person.getRingtone().getName() || "";
+			}
+		}
+
+		this.person.getCallAction().setAction(this.modelCallAction.value);
+		this.person.getCallAlert().setAlert(this.modelCallAlert.value);
+	} else if(group == "msg") {
+		if(this.modelMsgAlert.value != "ringtone") {
+			this.controller.get("MsgRingtoneRow").style.display = "none";
+			this.controller.get("MsgRingtone").innerHTML = "";	
+		}
+		else {
+			this.controller.get("MsgRingtoneRow").style.display = "block";	
+
+			if((!this.person.getMsgRingtone().getName()) || (this.person.getMsgRingtone().getName() == ""))
+				this.selectRingtone("msg", null);
+			else
+				this.controller.get("MsgRingtone").innerHTML = this.person.getMsgRingtone().getName() || "";
+		}
+		
+		this.person.getMsgAlert().setAlert(this.modelMsgAlert.value);
+	} else if(group == "imsg") {
+		if(this.modelIMsgAlert.value != "ringtone") {
+			this.controller.get("IMsgRingtoneRow").style.display = "none";
+			this.controller.get("IMsgRingtone").innerHTML = "";	
+		}
+		else {
+			this.controller.get("IMsgRingtoneRow").style.display = "block";	
+
+			if((!this.person.getIMsgRingtone().getName()) || (this.person.getIMsgRingtone().getName() == ""))
+				this.selectRingtone("imsg", null);
+			else
+				this.controller.get("IMsgRingtone").innerHTML = this.person.getIMsgRingtone().getName() || "";		
+		}
+		
+		this.person.getIMsgAlert().setAlert(this.modelIMsgAlert.value);
+	}
+};
+
+EditAssistant.prototype.selectRingtone = function(config, event) {
+	var ringtone = "";
+
+	if(config == "call")
+		ringtone = this.person.getRingtone().getLocation();
+	else if(config == "msg")
+		ringtone = this.person.getMsgRingtone().getLocation();
+	else if(config == "imsg")
+		ringtone = this.person.getIMsgRingtone().getLocation();
+
+	Mojo.FilePicker.pickFile({actionType: 'attach', kinds: ['ringtone'], defaultKind: 'ringtone',
+		filePath: ringtone, onSelect: this.setRingtone.bind(this, config),
+		onCancel: this.cancelRingtone.bind(this, config)},
+		this.controller.stageController);
+};
+
+EditAssistant.prototype.setRingtone = function(config, file) {
+	var ringtonePath = file.fullPath.replace(/^\s*/, '').replace(/\s*$/, '');
+	if(ringtonePath.indexOf("file://") == 0) 
+		ringtonePath = ringtonePath.substring(7);
+
+	if(config == "call") {
+		this.controller.get("PhoneRingtone").innerHTML = file.name;
+		this.person.getRingtone().setName(file.name);
+		this.person.getRingtone().setLocation(ringtonePath);
+		this.person.dirty = true;
+	}
+	else if(config == "msg") {
+		this.controller.get("MsgRingtone").innerHTML = file.name;
+		this.person.getMsgRingtone().setName(file.name);
+		this.person.getMsgRingtone().setLocation(ringtonePath);
+		this.person.dirty = true;
+	}
+	else if(config == "imsg") {
+		this.controller.get("IMsgRingtone").innerHTML = file.name;
+		this.person.getIMsgRingtone().setName(file.name);
+		this.person.getIMsgRingtone().setLocation(ringtonePath);
+		this.person.dirty = true;
+	}
+};
+
+EditAssistant.prototype.cancelRingtone = function(config) {
+	if(config == "call") {
+		if((!this.person.getRingtone().getLocation()) && (this.person.getRingtone().getLocation() == "")) {
+			this.controller.get("PhoneRingtoneRow").style.display = "none";
+
+			this.modelCallAlert.value = "default";
+			this.controller.modelChanged(this.modelCallAlert);
+			
+			this.saveContactPreferences("phone");
+		}
+	}
+	else if(config == "msg") {
+		if((!this.person.getMsgRingtone().getLocation()) && (this.person.getMsgRingtone().getLocation() == "")) {
+			this.controller.get("MsgRingtoneRow").style.display = "none";
+
+			this.modelMsgAlert.value = "default";
+			this.controller.modelChanged(this.modelMsgAlert);
+			
+			this.saveContactPreferences("msg");
+		}
+	}
+	else if(config == "imsg") {
+		if((!this.person.getIMsgRingtone().getLocation()) && (this.person.getIMsgRingtone().getLocation() == "")) {
+			this.controller.get("IMsgRingtoneRow").style.display = "none";
+
+			this.modelIMsgAlert.value = "default";
+			this.controller.modelChanged(this.modelIMsgAlert);
+			
+			this.saveContactPreferences("imsg");
+		}
+	}
 };
 
 // --------------------------------------------
@@ -3057,7 +3311,7 @@
 	return newPath;
 };
 
-EditAssistant.prototype.attachRingtonePicker = function (event) {
+/*EditAssistant.prototype.attachRingtonePicker = function (event) {
 	var ringtoneObject = this.person.getRingtone();
 	if (ringtoneObject.getLocation()) {
 		this.controller.popupSubmenu({
@@ -3108,7 +3362,7 @@
 	//Mojo.Log.info("ContactMulti Picking a ringtone for " + this.contact.firstName + " " + this.contact.lastName);
 	Mojo.FilePicker.pickFile(params, this.controller.stageController);
 };
-
+*/
 EditAssistant.prototype.attachFilePicker = function (event) {
 	if (AppAssistant.accountsList.isContactReadOnly(this.selectedContact)) {
 		return;
@@ -3183,7 +3437,7 @@
 	return future;
 };
 
-EditAssistant.prototype.attachRingtone = function (ringtonePath, name) {
+/*EditAssistant.prototype.attachRingtone = function (ringtonePath, name) {
 	if (ringtonePath) {
 		this.person.dirty = true;
 		this.person.getRingtone().setName(name);
@@ -3196,5 +3450,5 @@
 		});
 	}
 };
-
+*/
 /////////////////////////
--- .orig/usr/palm/applications/com.palm.app.contacts/app/views/edit/edit-scene.html
+++ /usr/palm/applications/com.palm.app.contacts/app/views/edit/edit-scene.html
@@ -62,4 +62,76 @@
 			</div>
 		</div>
 	</div>
-</div>
\ No newline at end of file
+</div>
+
+<div id="contact_prefs" style="display:none;">
+	<div class="palm-page-header">
+		<div class="palm-page-header-wrapper">
+			<div class="icon notification-prefs"></div>
+  	      <div class="title" x-mojo-loc='' id="ContactName"></div>
+		</div>
+	</div>
+
+	<div class="palm-group" id="PhoneCallGroup">
+		<div class="palm-group-title">Phone Call</div>
+	
+		<div class="palm-list">
+			<div class="palm-row first" id="CallActionRow">
+				<div class="palm-row-wrapper">
+					<div id="CallAction" x-mojo-element="ListSelector"></div>
+				</div>
+			</div>
+		
+			<div class="palm-row" id="PhoneAlertRow">
+				<div class="palm-row-wrapper">
+					<div id="PhoneAlert" x-mojo-element="ListSelector"></div>
+				</div>
+			</div>
+
+			<div class="palm-row last" id="PhoneRingtoneRow">
+				<div class="palm-row-wrapper">
+					<div class="label right" id="PhoneRingtone">Ringtone</div>
+					<div class="title">Ringtone</div>
+				</div>
+			</div>
+		</div>
+	</div>
+
+	<div class="palm-group">
+		<div class="palm-group-title">SMS Message</div>
+	
+		<div class="palm-list">
+			<div class="palm-row single">
+				<div class="palm-row-wrapper">
+					<div id="MsgAlert" x-mojo-element="ListSelector"></div>
+				</div>
+			</div>
+
+			<div class="palm-row last" id="MsgRingtoneRow">
+				<div class="palm-row-wrapper">
+					<div class="label right" id="MsgRingtone">Ringtone</div>
+					<div class="title">Ringtone</div>
+				</div>
+			</div>
+		</div>
+	</div>
+
+	<div class="palm-group">
+		<div class="palm-group-title">IM Message</div>
+	
+		<div class="palm-list">
+			<div class="palm-row single">
+				<div class="palm-row-wrapper">
+					<div id="IMsgAlert" x-mojo-element="ListSelector"></div>
+				</div>
+			</div>
+
+			<div class="palm-row last" id="IMsgRingtoneRow">
+				<div class="palm-row-wrapper">
+					<div class="label right" id="IMsgRingtone">Ringtone</div>
+					<div class="title">Ringtone</div>
+				</div>
+			</div>
+		</div>
+	</div>
+</div>
--- .orig/usr/palm/applications/com.palm.app.contacts/app/controllers/list-assistant.js
+++ /usr/palm/applications/com.palm.app.contacts/app/controllers/list-assistant.js
@@ -65,7 +65,10 @@
 		//this.dataSource = new ActiveRecordListBridge(AppAssistant.contactsService.newList.bind(this, this.controller), AppAssistant.contactsService.count.bind(this, this.controller), this.transformListResults);
 		//this.dataSource.setHandleUpdateCount(this.handleUpdateCount);
 		
-		viewType = AppAssistant.appSettings.getListViewDisplayType() || ContactsUI.PersonListWidget.VIEW.PERSON_LIST;
+		viewType = AppAssistant.appSettings.getListViewDisplayMode() || "default";
+		
+		if(viewType == "default")
+			viewType = AppAssistant.appSettings.getListViewDisplayType() || ContactsUI.PersonListWidget.VIEW.PERSON_LIST;
 
 		// Set up the top (view) menu
 		this.topMenuModel = {
@@ -91,8 +94,12 @@
 		this.controller.setupWidget(Mojo.Menu.commandMenu, undefined, {
 			items: [{
 				icon: 'new-contact',
-				label: $L('New'),
-				command: 'new'
+				label: $L('New Contact'),
+				command: 'new-contact'
+			},{},{
+				icon: 'new-favorite',
+				label: $L('New Favorite'),
+				command: 'new-favorite'
 			}]
 		});
 		
@@ -107,6 +114,9 @@
 			omitDefaultItems: true
 		}, {
 			items: [Mojo.Menu.editItem, {
+				label:$L("Sync Now"),
+				command:"syncnow"
+			},	{
 				label: $L("Send All to Car Kit"),
 				command: "sendcontacts"
 			}, prefsItem, {
@@ -125,6 +135,7 @@
 		this.personListWidget = new ContactsUI.PersonListWidget();
 		personListModel = {
 			listTapCallback: this.handleListTap.bind(this),
+			personListDeleteCallback: this.handlePersonListDelete.bind(this),
 			mode: ContactsUI.PersonListWidget.MODE.PERSON_AND_FAVORITE_LIST,
 			defaultView: viewType,
 			sortOrder: AppAssistant.appPrefs.get(Contacts.AppPrefs.Pref.listSortOrder)
@@ -336,12 +347,19 @@
 	
 	handleCommand: function (event) {
 		if (event.type === Mojo.Event.command) {
-			if (event.command === 'new') {
+			if (event.command === 'new-contact') {
 				this.controller.stageController.pushScene('edit', {
 					newContact: true,
 					makeFavorite: (this.personListWidget.getCurrentView() === ContactsUI.PersonListWidget.VIEW.FAVORITE_LIST) ? true : false 
 				//onSaveCallback: this.dataSource.doUpdate.bind(this.dataSource)
 				});
+			} else if (event.command === "new-favorite") {
+				this.personListWidget.showFavoriteList(false);
+				this.topMenuModel.items[0].toggleCmd = "toggle-favorites";
+				this.controller.modelChanged(this.topMenuModel);
+				this.personListWidget.showAddFavorite();
+			} else if (event.command === "syncnow") {
+				this.syncAccounts();
 			} else if (event.command === "toggle-all") {
 				this.personListWidget.showPersonList(true);
 			} else if (event.command === "toggle-favorites") {
@@ -359,6 +377,63 @@
 		}
 	},
 	
+	syncAccounts: function() {
+		var that = this,
+			future;
+	
+		this.controller.showBanner($L("Syncing Accounts..."), {});
+	
+		//TODO: instead of pinging these service directly, this needs to set up background, user-initiated activities with the activity manager
+		future = Foundations.Control.mapReduce({
+			map: function (account) {
+				//get the contacts capability
+				var capabilityProvider = Contacts.Utils.getContactsCapabilityProvider(account),
+					future;
+			
+				//ping the sync method on this capability
+				if (capabilityProvider && capabilityProvider.sync) {
+					future = new Future();
+				
+					future.now(this, function () {
+						return PalmCall.call("palm://com.palm.activitymanager/", "create", {
+							activity: {
+								type: { 
+									explicit: true,
+									userInitiated: true,
+									background : true
+									//foreground: true
+								},
+								name: "'Sync Now' sync for " + account.templateId + ", account " + account._id,
+								description: "Background sync for account " + account._id + " from 'sync now' button",
+								callback: {
+									method: capabilityProvider.sync,
+									params: {
+										"accountId": account._id
+									}
+								}
+							},
+							start: true
+						});
+					});
+				
+					future.then(this, function () {
+						try {
+							var result = future.result;
+						} catch (ex) {
+							Mojo.Log.warn("Ignoring exception during background sync setup for sync now button: " + Contacts.Utils.stringify(ex));
+						}
+					
+						return true;
+					});
+				
+					return future;
+				} else {
+					return new Future(true);
+				}
+			}
+		}, AppAssistant.accountsList.getAccountsList());
+	},
+	
 	sendContacts: function () {
 		var params = {
 			"type": "bluetooth",
@@ -419,6 +494,33 @@
 		});
 	},
 	
+	handlePersonListDelete: function(event)Â {
+		var person = Contacts.PersonFactory.createPersonDisplay(event.item);
+
+		if (person.getLauncherId().getValue()) {
+			request = new Mojo.Service.Request("palm://com.palm.applicationManager/removeLaunchPoint", {
+				parameters: {
+					launchPointId: person.getLauncherId().getValue(),
+					id: "com.palm.app.contacts"
+				}
+			});
+		}
+		
+		var future = Contacts.Person.getLinkedContacts(person, Contacts.ContactFactory.ContactType.DISPLAYABLE);
+
+		future.then(this, function test() {
+			var contacts;
+			contacts = future.result || [];
+
+			for (i = 0; i < contacts.length; i += 1) {
+				var c = contacts[i];
+				if (!AppAssistant.accountsList.isProviderReadOnly(c.getAccountId().getValue())) {
+					c.deleteContact();
+				}
+			}
+		});
+	},
+	
 	peoplePickerDetailCallbackFailure: function (resp) {
 		this.controller.stageController.popScene(resp);
 	},
--- .orig/usr/palm/applications/com.palm.app.contacts/app/views/edit/lists-fake.html
+++ /usr/palm/applications/com.palm.app.contacts/app/views/edit/lists-fake.html
@@ -12,7 +12,7 @@
         </div>
     </div>
 </div>
-<div id="RingtoneBox">
+<!--<div id="RingtoneBox">
     <div class="palm-group unlabeled">
         <div class="palm-list">
             <div class="palm-row single" id="RingtoneButton" x-mojo-tap-highlight="momentary">
@@ -24,7 +24,7 @@
             </div>
         </div>
     </div>
-</div>
+</div>-->
 <div id="emailList" name="emailList" class="contactPointList">
     <div class="palm-group unlabeled">
         <div class="palm-list">
--- .orig/usr/palm/applications/com.palm.app.contacts/stylesheets/prefs.css
+++ /usr/palm/applications/com.palm.app.contacts/stylesheets/prefs.css
@@ -36,4 +36,9 @@
 
 .palm-page-header .icon.app {
 	background-image: url(../images/header-icon-contacts.png);
-}
\ No newline at end of file
+}
+
+.palm-page-header .icon.notification-prefs { 
+	background-image: url(../images/header-icon-notifications.png); 
+}
+
--- .orig/usr/palm/applications/com.palm.app.contacts/app/controllers/prefs-assistant.js
+++ /usr/palm/applications/com.palm.app.contacts/app/controllers/prefs-assistant.js
@@ -4,8 +4,19 @@
 /*global console, Mojo, AccountsLib, AppAssistant, $L, Utilities, Foundations, _, PalmCall, Future, Contacts, EventListenerManager, DB,
 setTimeout, clearTimeout, ContactsUI */
 
-var PrefsAssistant = function () {
+var PrefsAssistant = function (view) {
 	this.eventListenerManager = new EventListenerManager();
+
+	if(view)
+		this.prefsView = view;
+	else
+		this.prefsView = "common_prefs";
+
+	if(AppAssistant.appPrefs.get(Contacts.AppPrefs.Pref.blockedNumbers) == undefined)
+		AppAssistant.appPrefs.set(Contacts.AppPrefs.Pref.blockedNumbers, false);
+
+	if(AppAssistant.appPrefs.get(Contacts.AppPrefs.Pref.unknownNumbers) == undefined)
+		AppAssistant.appPrefs.set(Contacts.AppPrefs.Pref.unknownNumbers, false);
 };
 
 PrefsAssistant.prototype.setup = function () {
@@ -16,28 +27,68 @@
 	 * First we set up all the widgets
 	 */
 	
+	this.defaultViewModel = {
+		defaultView: AppAssistant.appSettings.getListViewDisplayMode() || "default"
+	};
+	this.controller.setupWidget("DefaultContactsView", {
+		choices: [{
+			label: $L("No Default View"), 
+			value: "default"
+		}, {
+			label: $L("All Contacts"), 
+			value: ContactsUI.PersonListWidget.VIEW.PERSON_LIST
+		}, {
+			label: $L("Favorites"), 
+			value: ContactsUI.PersonListWidget.VIEW.FAVORITE_LIST
+		}],
+		modelProperty: 'defaultView'
+	}, this.defaultViewModel);
+	this.eventListenerManager.addListener(this.controller.get('DefaultContactsView'), Mojo.Event.propertyChange, this.defaultViewChanged.bind(this));
+	
 	// Sort order selector
 	this.sortOrderModel = {
 		sortOrder: AppAssistant.appPrefs.get(Contacts.AppPrefs.Pref.listSortOrder)
 	};
 	this.controller.setupWidget('SortOrderSelector', {
 		choices: [{
-			label: $L('First name'),
+			label: $L('First Name'),
 			value: Contacts.ListWidget.SortOrder.firstLast
 		}, {
-			label: $L('Last name'),
+			label: $L('Last Name'),
 			value: Contacts.ListWidget.SortOrder.lastFirst
 		}, {
-			label: $L('Company & first name'),
+			label: $L('Company & First Name'),
 			value: Contacts.ListWidget.SortOrder.companyFirstLast
 		}, {
-			label: $L('Company & last name'),
+			label: $L('Company & Last Name'),
 			value: Contacts.ListWidget.SortOrder.companyLastFirst
 		}],
 		modelProperty: 'sortOrder'
 	}, this.sortOrderModel);
 	this.eventListenerManager.addListener(this.controller.get('SortOrderSelector'), Mojo.Event.propertyChange, this.sortOrderChanged.bind(this));
 	
+	this.blockedNumbersModel = {
+		blockedNumbers: AppAssistant.appPrefs.get(Contacts.AppPrefs.Pref.blockedNumbers)
+	};
+	this.controller.setupWidget('BlockedNumbers', {
+		falseLabel: $L("No"), 
+		trueLabel: $L("Yes"),
+		modelProperty: 'blockedNumbers'
+	}, this.blockedNumbersModel);
+	this.eventListenerManager.addListener(this.controller.get('BlockedNumbers'), Mojo.Event.propertyChange, this.blockedNumbersChanged.bind(this));
+
+	this.unknownNumbersModel = {
+		unknownNumbers: AppAssistant.appPrefs.get(Contacts.AppPrefs.Pref.unknownNumbers)
+	};
+	this.controller.setupWidget('UnknownNumbers', {
+		falseLabel: $L("No"), 
+		trueLabel: $L("Yes"),
+		modelProperty: 'unknownNumbers'
+	}, this.unknownNumbersModel);
+	this.eventListenerManager.addListener(this.controller.get('UnknownNumbers'), Mojo.Event.propertyChange, this.unknownNumbersChanged.bind(this));
+
+	this.eventListenerManager.addListener(this.controller.get('UnknownContactsOptions'), Mojo.Event.tap, this.unknownContactsTapped.bind(this));
+	
 	// Accounts list
 	this.controller.setupWidget("accountsList", {
 		filterBy: {
@@ -52,11 +103,11 @@
 	this.eventListenerManager.addListener(this.defaultAccountPicker, Mojo.Event.tap, this.openDefaultAccountPicker.bind(this));
 	
 	// Sync now button
-	this.controller.setupWidget("syncAccountsButton", {}, {
+/*	this.controller.setupWidget("syncAccountsButton", {}, {
 		buttonLabel: $L("Sync Now")
 	});
 	this.eventListenerManager.addListener(this.controller.get('syncAccountsButton'), Mojo.Event.tap, this.syncAccounts.bind(this));
-	
+*/	
 	// Add account button
 	this.controller.setupWidget("addAccountButton", {}, {
 		buttonLabel: $L("Add an account")
@@ -76,6 +127,274 @@
 	
 	// Set up the default account picker
 	this.updateDefaultAccountPicker();
+
+	// Setup unknown prefs
+	
+	this.unknownContacts = AppAssistant.appPrefs.get(Contacts.AppPrefs.Pref.unknownContacts);
+	
+	if(!this.unknownContacts) {
+		this.unknownContacts = {
+			callAction: "none",
+			callAlert: "default",
+			callRingtoneName: "",
+			callRingtonePath: "",
+			msgAlert: "default",
+			msgRingtoneName: "",
+			msgRingtonePath: "",
+			emailAlert: "default",
+			emailRingtoneName: "",
+			emailRingtonePath: ""	
+		};
+	}
+	
+	this.choicesCallAction = [
+		{label: $L("Alert Normally"), value: "none"},
+		{label: $L("Direct to Voicemail"), value: "direct2vm"},
+		{label: $L("Hang Up Automatically"), value: "autohangup"} ];
+
+	this.modelCallAction = {value: this.unknownContacts.callAction, disabled: false};
+
+	if((this.unknownContacts.callAction == "direct2vm") || (this.unknownContacts.callAction == "autohangup"))
+	{
+		this.controller.get("PhoneAlertRow").style.display = "none";
+		this.controller.get("PhoneRingtoneRow").style.display = "none";
+	}
+
+	this.controller.setupWidget("CallAction", {
+		label: $L("Action"),
+		labelPlacement: "left", 		
+		choices: this.choicesCallAction},
+		this.modelCallAction);
+
+	this.eventListenerManager.addListener(this.controller.get("CallAction"), Mojo.Event.propertyChange, 
+		this.saveUnknownPreferences.bind(this));
+
+	this.choicesPhoneAlert = [
+		{label: $L("Use Default"), value: "default"},
+		{label: $L("Ringtone"), value: "ringtone"},
+		{label: $L("Mute"), value: "none"} ];
+
+	this.modelCallAlert = {value: this.unknownContacts.callAlert, disabled: false};
+
+	if(this.unknownContacts.callAlert != "ringtone")
+		this.controller.get("PhoneRingtoneRow").style.display = "none";
+
+	this.controller.setupWidget("PhoneAlert", {
+		label: $L("Alert"),
+		labelPlacement: "left", 							
+		choices: this.choicesPhoneAlert},
+		this.modelCallAlert);
+
+	this.eventListenerManager.addListener(this.controller.get("PhoneAlert"), Mojo.Event.propertyChange, 
+		this.saveUnknownPreferences.bind(this));
+
+	if(this.unknownContacts.callRingtoneName != "")
+		this.controller.get("PhoneRingtone").innerHTML = this.unknownContacts.callRingtoneName;
+
+	this.eventListenerManager.addListener(this.controller.get("PhoneRingtoneRow"), Mojo.Event.tap, 
+		this.selectRingtone.bind(this, "call"));
+
+	this.choicesMsgAlert = [
+		{label: $L("Use Default"), value: "default"},
+		{label: $L("System Sound"), value: "alert"},
+		{label: $L("Ringtone"), value: "ringtone"},
+		{label: $L("Vibrate"), value: "vibrate"},
+		{label: $L("Mute"), value: "mute"} ];
+
+	this.modelMsgAlert = {value: this.unknownContacts.msgAlert, disabled: false};
+
+	if(this.unknownContacts.msgAlert != "ringtone")
+		this.controller.get("MsgRingtoneRow").style.display = "none";
+
+	this.controller.setupWidget("MsgAlert", {
+		label: $L("Alert"),
+		labelPlacement: "left", 							
+		choices: this.choicesMsgAlert},
+		this.modelMsgAlert);
+
+	this.eventListenerManager.addListener(this.controller.get("MsgAlert"), Mojo.Event.propertyChange, 
+		this.saveUnknownPreferences.bind(this));
+
+	if(this.unknownContacts.msgRingtonePath != "")
+		this.controller.get("MsgRingtone").innerHTML = this.unknownContacts.msgRingtoneName;
+
+	this.eventListenerManager.addListener(this.controller.get("MsgRingtoneRow"), Mojo.Event.tap, 
+		this.selectRingtone.bind(this, "msg"));
+
+	this.choicesEmailAlert = [
+		{label: $L("Use Default"), value: "default"},
+		{label: $L("System Sound"), value: "notifications"},
+		{label: $L("Ringtone"), value: "ringtone"},
+		{label: $L("Vibrate"), value: "vibrate"},
+		{label: $L("Mute"), value: "none"} ];
+
+	this.modelEmailAlert = {value: this.unknownContacts.emailAlert, disabled: false};
+
+	if(this.unknownContacts.emailAlert != "ringtone")
+		this.controller.get("EmailRingtoneRow").style.display = "none";
+
+	this.controller.setupWidget("EmailAlert", {
+		label: $L("Alert"),
+		labelPlacement: "left", 							
+		choices: this.choicesEmailAlert},
+		this.modelEmailAlert);
+
+	this.eventListenerManager.addListener(this.controller.get("EmailAlert"), Mojo.Event.propertyChange, 
+		this.saveUnknownPreferences.bind(this));
+
+	if(this.unknownContacts.emailRingtonePath != "")
+		this.controller.get("EmailRingtone").innerHTML = this.unknownContacts.emailRingtoneName;
+
+	this.eventListenerManager.addListener(this.controller.get("EmailRingtoneRow"), Mojo.Event.tap, 
+		this.selectRingtone.bind(this, "email"));
+
+	// Check changes for unknown contacts settings made by other applications
+
+	if(this.contactPrefs)
+		delete this.contactPrefs;
+
+	this.contactPrefs = new Contacts.AppPrefs(function() {
+		this.blockedNumbersModel.blockedNumbers = this.contactPrefs.get(Contacts.AppPrefs.Pref.blockedNumbers);
+		this.unknownNumbersModel.unknownNumbers = this.contactPrefs.get(Contacts.AppPrefs.Pref.unknownNumbers);
+
+		this.controller.modelChanged(this.blockedNumbersModel, this);
+		this.controller.modelChanged(this.unknownNumbersModel, this);
+	}.bind(this));
+
+	if(this.prefsView == "unknown_prefs")
+		this.unknownContactsTapped();
+};
+
+PrefsAssistant.prototype.saveUnknownPreferences = function() {
+	if(this.modelCallAction.value != "none") {
+		this.controller.get("CallActionRow").style.className = "single";
+		this.controller.get("PhoneAlertRow").style.display = "none";		
+		this.controller.get("PhoneRingtoneRow").style.display = "none";
+
+		this.modelCallAlert.value = "default";
+		this.controller.modelChanged(this.modelCallAlert);
+
+		this.controller.get("PhoneRingtone").innerHTML = "";
+	}
+	else {
+		this.controller.get("CallActionRow").style.className = "first";
+		this.controller.get("PhoneAlertRow").style.display = "block";		
+
+		if(this.modelCallAlert.value != "ringtone") {
+			this.controller.get("PhoneRingtoneRow").style.display = "none";
+			this.controller.get("PhoneRingtone").innerHTML = "";
+		}
+		else {
+			this.controller.get("PhoneRingtoneRow").style.display = "block";
+			
+			if(this.unknownContacts.callRingtoneName == "")
+				this.selectRingtone("call", null);
+			else
+				this.controller.get("PhoneRingtone").innerHTML = this.unknownContacts.callRingtoneName;
+		}
+	}
+
+	if(this.modelMsgAlert.value != "ringtone") {
+		this.controller.get("MsgRingtoneRow").style.display = "none";
+		this.controller.get("MsgRingtone").innerHTML = "";	
+	}
+	else {
+		this.controller.get("MsgRingtoneRow").style.display = "block";	
+
+		if(this.unknownContacts.msgRingtoneName == "")
+			this.selectRingtone("msg", null);
+		else
+			this.controller.get("MsgRingtone").innerHTML = this.unknownContacts.msgRingtoneName;
+	}
+	
+	if(this.modelEmailAlert.value != "ringtone") {
+		this.controller.get("EmailRingtoneRow").style.display = "none";
+		this.controller.get("EmailRingtone").innerHTML = "";	
+	}
+	else {
+		this.controller.get("EmailRingtoneRow").style.display = "block";	
+
+		if(this.unknownContacts.emailRingtoneName == "")
+			this.selectRingtone("email", null);
+		else
+			this.controller.get("EmailRingtone").innerHTML = this.unknownContacts.emailRingtoneName;
+	}
+		
+	this.unknownContacts.callAction = this.modelCallAction.value;
+	this.unknownContacts.callAlert = this.modelCallAlert.value;
+	this.unknownContacts.msgAlert = this.modelMsgAlert.value;
+	this.unknownContacts.emailAlert = this.modelEmailAlert.value;
+	
+	AppAssistant.appPrefs.set(Contacts.AppPrefs.Pref.unknownContacts, this.unknownContacts);
+};
+
+PrefsAssistant.prototype.selectRingtone = function(config, event) {
+	var ringtone = "";
+
+	if(config == "call")
+		ringtone = this.unknownContacts.callRingtonePath ||Â "";
+	else if(config == "msg")
+		ringtone = this.unknownContacts.msgRingtonePath ||Â "";
+	else if(config == "email")
+		ringtone = this.unknownContacts.emailRingtonePath ||Â "";
+
+	Mojo.FilePicker.pickFile({actionType: 'attach', kinds: ['ringtone'], defaultKind: 'ringtone',
+		filePath: ringtone, onSelect: this.setRingtone.bind(this, config),
+		onCancel: this.cancelRingtone.bind(this, config)},
+		this.controller.stageController);
+};
+
+PrefsAssistant.prototype.setRingtone = function(config, file) {
+	var ringtonePath = file.fullPath.replace(/^\s*/, '').replace(/\s*$/, '');
+	if(ringtonePath.indexOf("file://") == 0) 
+		ringtonePath = ringtonePath.substring(7);
+
+	if(config == "call") {
+		this.controller.get("PhoneRingtone").innerHTML = file.name;
+		this.unknownContacts.callRingtoneName = file.name;
+		this.unknownContacts.callRingtonePath = ringtonePath;
+	}
+	else if(config == "msg") {
+		this.controller.get("MsgRingtone").innerHTML = file.name;
+		this.unknownContacts.msgRingtoneName = file.name;
+		this.unknownContacts.msgRingtonePath = ringtonePath;
+	}
+	else if(config == "email") {
+		this.controller.get("EmailRingtone").innerHTML = file.name;
+		this.unknownContacts.emailRingtoneName = file.name;
+		this.unknownContacts.emailRingtonePath = ringtonePath;
+	}
+
+	this.saveUnknownPreferences();
+};
+
+PrefsAssistant.prototype.cancelRingtone = function(config) {
+	if(config == "call") {
+		if((!this.unknownContacts.callRingtoneName) || (this.unknownContacts.callRingtoneName == "")) {
+			this.controller.get("PhoneRingtoneRow").style.display = "none";
+
+			this.modelCallAlert.value = "default";
+			this.controller.modelChanged(this.modelCallAlert);
+		}
+	}
+	else if(config == "msg") {
+		if((!this.unknownContacts.msgRingtoneName) || (this.unknownContacts.msgRingtoneName == "")) {
+			this.controller.get("MsgRingtoneRow").style.display = "none";
+
+			this.modelMsgAlert.value = "default";
+			this.controller.modelChanged(this.modelMsgAlert);
+		}
+	}
+	else if(config == "email") {
+		if((!this.unknownContacts.emailRingtoneName) || (this.unknownContacts.emailRingtoneName == "")) {
+			this.controller.get("EmailRingtoneRow").style.display = "none";
+
+			this.modelEmailAlert.value = "default";
+			this.controller.modelChanged(this.modelEmailAlert);
+		}
+	}
+
+	this.saveUnknownPreferences();
 };
 
 PrefsAssistant.prototype.aboutToActivate = function (callback) {
@@ -96,6 +415,13 @@
 };
 
 /*
+ * Default view change handler
+ */
+PrefsAssistant.prototype.defaultViewChanged = function (event) {
+	AppAssistant.appSettings.setListViewDisplayMode(this.defaultViewModel.defaultView);
+};
+
+/*
  * Sort order change handler
  */
 PrefsAssistant.prototype.sortOrderChanged = function (event) {
@@ -111,6 +437,37 @@
 	}
 };
 
+/*
+ * Blocked & Unknown numbers change handlers
+ */
+PrefsAssistant.prototype.blockedNumbersChanged = function (event) {
+	AppAssistant.appPrefs.set(Contacts.AppPrefs.Pref.blockedNumbers, this.blockedNumbersModel.blockedNumbers);
+};
+
+PrefsAssistant.prototype.unknownNumbersChanged = function (event) {
+	AppAssistant.appPrefs.set(Contacts.AppPrefs.Pref.unknownNumbers, this.unknownNumbersModel.unknownNumbers);
+};
+
+/*
+ * Unknown contacts options tap handler
+ */
+PrefsAssistant.prototype.unknownContactsTapped = function (event) {
+	this.prefsView = "unknown_prefs";
+	this.controller.get("common_prefs").style.display = "none";
+	this.controller.get("unknown_prefs").style.display = "block";
+	this.controller.getSceneScroller().mojo.scrollTo(0,0);	
+};
+
+PrefsAssistant.prototype.handleCommand = function (event) {
+	if ((event.type === Mojo.Event.back) && (this.prefsView == "unknown_prefs")) {
+		Mojo.Event.stop(event);
+		this.prefsView = "common_prefs";
+		this.controller.get("unknown_prefs").style.display = "none";
+		this.controller.get("common_prefs").style.display = "block";
+		this.controller.getSceneScroller().mojo.scrollTo(0,0);
+	}
+};
+
 /*
  * Callbacks used for the SIM account preferences scene
  */
--- .orig/usr/palm/applications/com.palm.app.contacts/app/views/prefs/prefs-scene.html
+++ /usr/palm/applications/com.palm.app.contacts/app/views/prefs/prefs-scene.html
@@ -1,3 +1,4 @@
+<div id="common_prefs">
 <div class="palm-page-header multi-line">
 	<div class="palm-page-header-wrapper">
 	  <div class="icon app"></div>
@@ -8,7 +9,20 @@
 </div>                                                                                         
 
 <div class="palm-group">
-	<div class="palm-group-title" x-mojo-loc="">List order</div>
+	<div class="palm-group-title">Default Contacts View</div>
+
+	<div class="palm-list">
+		<div class="palm-row single" x-mojo-tap-highlight="momentary">
+			<div class="palm-row-wrapper">
+				<div id="DefaultContactsView" x-mojo-element="ListSelector"></div>
+			</div>
+		</div>
+	</div>
+</div>
+
+<div class="palm-group">
+	<div class="palm-group-title" x-mojo-loc="">Contacts List Order</div>
+
 		<div class="palm-list">
 			<div class="palm-row single" x-mojo-tap-highlight="momentary">
 				<div class="palm-row-wrapper">
@@ -18,6 +32,30 @@
 		</div>
 </div>
 	
+<div class="palm-group">
+	<div class="palm-group-title">Unknown Contacts</div>
+	
+	<div class="palm-list">
+		<div class="palm-row first">
+			<div class="palm-row-wrapper">
+				<div id="BlockedNumbers" x-mojo-element="ToggleButton"></div>
+				<div class="title left" x-mojo-loc="">Blocked Numbers</div>
+			</div>
+		</div>
+
+		<div class="palm-row last">
+			<div class="palm-row-wrapper">
+				<div id="UnknownNumbers" x-mojo-element="ToggleButton"></div>
+				<div class="title left" x-mojo-loc="">Unknown Numbers</div>
+			</div>
+		</div>
+	</div>
+</div>
+
+<div id="UnknownContactsOptions" class="palm-button" x-mojo-tap-highlight="momentary" x-mojo-loc="">
+	Unknown Contacts Options
+</div>
+	
 <div id="accountsList" x-mojo-element="AccountsList"></div>
 
 <div id="PrimaryAccountPickerContainer"></div>
@@ -29,8 +67,82 @@
 	        </div>
       	</div>
     </div>
+
+	<div x-mojo-loc="" class="palm-info-text">All added and imported contacts will default to this account.</div>
+
+<!--<div id="syncAccountsButton" x-mojo-element="Button"></div>-->
+	<div id="addAccountButton" x-mojo-element="Button"></div>
 </div>
-<div x-mojo-loc="" class="palm-info-text">New contacts will default to this account</div>
 
-<div id="syncAccountsButton" x-mojo-element="Button"></div>
-<div id="addAccountButton" x-mojo-element="Button"></div>
+<div id="unknown_prefs" style="display:none;">
+	<div class="palm-page-header">
+		<div class="palm-page-header-wrapper">
+			<div class="icon notification-prefs"></div>
+      <div class="title">Unknown Contacts</div>
+		</div>
+	</div>
+
+	<div class="palm-group" id="PhoneCallGroup">
+		<div class="palm-group-title">Phone Call</div>
+	
+		<div class="palm-list">
+			<div class="palm-row first" id="CallActionRow">
+				<div class="palm-row-wrapper">
+					<div id="CallAction" x-mojo-element="ListSelector"></div>
+				</div>
+			</div>
+		
+			<div class="palm-row" id="PhoneAlertRow">
+				<div class="palm-row-wrapper">
+					<div id="PhoneAlert" x-mojo-element="ListSelector"></div>
+				</div>
+			</div>
+
+			<div class="palm-row last" id="PhoneRingtoneRow">
+				<div class="palm-row-wrapper">
+					<div class="label right" id="PhoneRingtone">Ringtone</div>
+					<div class="title">Ringtone</div>
+				</div>
+			</div>
+		</div>
+	</div>
+
+	<div class="palm-group">
+		<div class="palm-group-title">SMS Message</div>
+	
+		<div class="palm-list">
+			<div class="palm-row single">
+				<div class="palm-row-wrapper">
+					<div id="MsgAlert" x-mojo-element="ListSelector"></div>
+				</div>
+			</div>
+
+			<div class="palm-row last" id="MsgRingtoneRow">
+				<div class="palm-row-wrapper">
+					<div class="label right" id="MsgRingtone">Ringtone</div>
+					<div class="title">Ringtone</div>
+				</div>
+			</div>
+		</div>
+	</div>
+
+	<div class="palm-group">
+		<div class="palm-group-title">Email Message</div>
+	
+		<div class="palm-list">
+			<div class="palm-row single">
+				<div class="palm-row-wrapper">
+					<div id="EmailAlert" x-mojo-element="ListSelector"></div>
+				</div>
+			</div>
+
+			<div class="palm-row last" id="EmailRingtoneRow">
+				<div class="palm-row-wrapper">
+					<div class="label right" id="EmailRingtone">Ringtone</div>
+					<div class="title">Ringtone</div>
+				</div>
+			</div>
+		</div>
+	</div>
+</div>
+	
--- .orig/etc/palm/db/kinds/com.palm.person
+++ /etc/palm/db/kinds/com.palm.person
@@ -559,6 +559,88 @@
 						"description": "The location on the filesystem where this ringtone is located."
 					}
 				}
+			},
+			"callAlert": {
+				"type": "object",
+				"optional": true,
+				"description": "The call alert that is associated with this person",
+				"properties": {
+					"alert": {
+						"type": "string",
+						"optional": true,
+						"description": "The type of the call alert."
+					}
+				}
+			},
+			"callAction": {
+				"type": "object",
+				"optional": true,
+				"description": "The call action that is associated with this person",
+				"properties": {
+					"action": {
+						"type": "string",
+						"optional": true,
+						"description": "The action to take when incoming call."
+					}
+				}
+			},
+			"msgRingtone": {
+				"type": "object",
+				"optional": true,
+				"description": "The message ringtone that is associated with this person",
+				"properties": {
+					"name": {
+						"type": "string",
+						"optional": true,
+						"description": "The displayable name of the message ringtone."
+					},
+					"location": {
+						"type": "string",
+						"optional": true,
+						"description": "The location on the filesystem where this message ringtone is located."
+					}
+				}
+			},
+			"msgAlert": {
+				"type": "object",
+				"optional": true,
+				"description": "The message alert that is associated with this person",
+				"properties": {
+					"alert": {
+						"type": "string",
+						"optional": true,
+						"description": "The type of the message alert."
+					}
+				}
+			},
+			"iMsgRingtone": {
+				"type": "object",
+				"optional": true,
+				"description": "The isntant messaging ringtone that is associated with this person",
+				"properties": {
+					"name": {
+						"type": "string",
+						"optional": true,
+						"description": "The displayable name of the instant messaging ringtone."
+					},
+					"location": {
+						"type": "string",
+						"optional": true,
+						"description": "The location on the filesystem where this instant messaging ringtone is located."
+					}
+				}
+			},
+			"iMsgAlert": {
+				"type": "object",
+				"optional": true,
+				"description": "The instant messaging alert that is associated with this person",
+				"properties": {
+					"alert": {
+						"type": "string",
+						"optional": true,
+						"description": "The type of the instant messaging alert."
+					}
+				}
 			}
 		}
 	},
--- .orig/etc/palm/db/permissions/com.palm.person
+++ /etc/palm/db/permissions/com.palm.person
@@ -14,6 +14,7 @@
 		"operations": {
 			"read": "allow",
 			"create": "allow",
+			"delete": "allow",
 			"update": "allow"
 		}
 	},
--- .orig/usr/palm/frameworks/accounts.ui/submission/40.3accounts_ui.js
+++ /usr/palm/frameworks/accounts.ui/submission/40.3accounts_ui.js
@@ -22,7 +22,7 @@
 cp.config)});_.extend(allConfigs,result.config);_.extend(allConfigs,result.defaultResult.result.config);if(result.otherResults&&_.isArray(result.otherResults))result.otherResults.forEach(function(other){if(other.result){_.extend(allCreds,other.result.credentials);_.extend(allConfigs,other.result.config)}});match=_.detect(existingAccounts,function(account){var caps=_.pluck(account.capabilityProviders,"capability");return requestedCapability&&account.username===result.username&&account.templateId===
 result.template.templateId&&!_.include(caps,requestedCapability)});if(match){result.template.capabilityProviders.forEach(function(cp){var matchingResult;if(cp.validator){matchingResult=_.detect(result.otherResults,isValidatorMatch,cp);if(matchingResult&&matchingResult.result)capabilityProviders.push({id:cp.id})}else capabilityProviders.push({id:cp.id})});scene.serviceRequest("palm://com.palm.service.accounts",{method:"modifyAccount",parameters:{accountId:match._id,object:{capabilityProviders:capabilityProviders}},
 onSuccess:handleCreateSuccess,onFailure:handleCreateFailure})}else scene.serviceRequest("palm://com.palm.service.accounts",{method:"createAccount",parameters:{templateId:result.template.templateId,alias:toSave.alias,capabilityProviders:selectedCapabilities||[],username:result.username,credentials:allCreds,config:allConfigs},onSuccess:handleCreateSuccess,onFailure:handleCreateFailure})}}}();var AccountsListWidget=function(){var stylesheets=["stylesheets/accounts-list.css"];function styleop(op,div,relativePath){var fn;if(op==="load")fn=Mojo.loadStylesheet;else if(op==="unload")fn=Mojo.unloadStylesheet;if(fn)fn(div.ownerDocument,relativePath,MojoLoader.root)}function toggleAppStylesheets(doc,enable){var links=doc.querySelectorAll('link[type="text/css"]');var href;var libPrefix="file://"+MojoLoader.root;for(var i=0;i<links.length;i++){href=links[i].href;if(!(href.indexOf(libPrefix)===0||
-href.match(/\/usr\/palm\/frameworks\/mojo/)))links[i].disabled=!enable}}function handleListTap(e){var template,account=_.clone(e.item);account.capabilityProviders=account.capabilityProviders.map(_.clone);template=Util.getTemplateById(this.templates,account.templateId);if(this.attrs.handleListTap)this.attrs.handleListTap(account,template);else if(account.templateId==="com.palm.sim")this.stage.pushScene({name:"sim",assistantConstructor:SimAssistant,templateRoot:MojoLoader.root,sceneTemplate:"templates/sim-scene",
+href.match(/\/usr\/palm\/frameworks\/mojo/)))links[i].disabled=!enable}}function handleListTap(e){var template,account=_.clone(e.item);account.capabilityProviders=account.capabilityProviders.map(_.clone);template=Util.getTemplateById(this.templates,account.templateId);if(this.attrs.handleListTap){if(e.originalEvent.target.className=="notifications icon selected")this.attrs.handleListTap(account, template, "notifications");else this.attrs.handleListTap(account,template);}else if(account.templateId==="com.palm.sim")this.stage.pushScene({name:"sim",assistantConstructor:SimAssistant,templateRoot:MojoLoader.root,sceneTemplate:"templates/sim-scene",
 templateModel:account},{account:account,onSetup:this.disableAppStyles,onCleanup:this.enableAppStyles});else this.stage.pushScene({name:"modify",assistantConstructor:ModifyAssistant,templateRoot:MojoLoader.root,sceneTemplate:"templates/modify-scene",templateModel:account},{template:template,account:account,onSetup:this.disableAppStyles,onCleanup:this.enableAppStyles})}function handleListAdd(options){var sceneTemplate;var selectedTemplates=Util.filterTemplates(this.templates,this.filterBy);var capability=
 this.filterBy&&this.filterBy.capability;if(selectedTemplates.length===0)Mojo.Controller.errorDialog("No services implement this functionality: "+this.filterBy.capability);else if(false&&selectedTemplates.length===1)LoginUtil.pushLoginScene(this.stage,selectedTemplates[0],this.templates,capability);else{sceneTemplate="templates/";if(this.filterBy)sceneTemplate+="template-list-firstlaunch-scene";else sceneTemplate+="template-list-scene";if(!options)options={};options.filterBy=this.filterBy;this.stage.pushScene({name:"template-list",
 assistantConstructor:TemplateListAssistant,templateRoot:MojoLoader.root,sceneTemplate:sceneTemplate},selectedTemplates,this.templates,options,this.disableAppStyles,this.enableAppStyles)}}function decorateItem(item){var selected,iconPath,displayText,match,annotated=Util.annotateAccount(item,this.templates);_.extend(item,annotated);if(annotated.icon)iconPath=annotated.icon.loc_32x32;displayText=annotated.loc_name;if(this.filterBy&&this.filterBy.capability){selected=this.filterBy.capability;match=_.detect(annotated.capabilityProviders,
--- .orig/usr/palm/frameworks/accounts.ui/submission/40.3/stylesheets/accounts-list.css
+++ /usr/palm/frameworks/accounts.ui/submission/40.3/stylesheets/accounts-list.css
@@ -27,6 +27,17 @@
 	background: url(../images/icon-accounts.png) center center no-repeat; 
 }
 
+.notifications.icon {
+	margin: 1px 3px -1px 0px;
+	background: url(../images/icon-notifications.png) top right no-repeat;
+	display: none;
+	width: 60px;
+	height: 50px;
+}
+
+.notifications.icon.selected { background-position: bottom right; }
+.show-notifications .notifications.icon { display: block; }
+
 /* List */
 
 .no-account {
--- .orig/usr/palm/frameworks/accounts.ui/submission/40.3/templates/accounts-list-item.html
+++ /usr/palm/frameworks/accounts.ui/submission/40.3/templates/accounts-list-item.html
@@ -5,5 +5,6 @@
 			<div class="account-label-title truncating-text">#{displayText}</div>
 			<div class="account-label-subtitle truncating-text">#{username}</div>
 		</div>
+		<div class="notifications icon" x-mojo-tap-highlight="momentary"></div>
 	</div>
 </div>
--- .orig/usr/palm/frameworks/accounts.ui/submission/40.3/javascript/accountslist-widget.js
+++ /usr/palm/frameworks/accounts.ui/submission/40.3/javascript/accountslist-widget.js
@@ -38,7 +38,10 @@
 		template = Util.getTemplateById(this.templates, account.templateId);
 		
 		if (this.attrs.handleListTap) {
-			this.attrs.handleListTap(account, template);
+			if(e.originalEvent.target.className == "notifications icon selected")
+				this.attrs.handleListTap(account, template, "notifications");
+			else
+				this.attrs.handleListTap(account, template);	
 		} else if (account.templateId === "com.palm.sim") {
 			// Push SIM scene
 			this.stage.pushScene({
--- .orig/usr/palm/frameworks/accounts.ui/submission/40.3/concatenated.js
+++ /usr/palm/frameworks/accounts.ui/submission/40.3/concatenated.js
@@ -743,7 +743,10 @@
 		template = Util.getTemplateById(this.templates, account.templateId);
 		
 		if (this.attrs.handleListTap) {
-			this.attrs.handleListTap(account, template);
+			if(e.originalEvent.target.className == "notifications icon selected")
+				this.attrs.handleListTap(account, template, "notifications");
+			else
+				this.attrs.handleListTap(account, template);	
 		} else if (account.templateId === "com.palm.sim") {
 			// Push SIM scene
 			this.stage.pushScene({
--- .orig/usr/palm/frameworks/contacts.ui/submission/39contacts_ui.js
+++ /usr/palm/frameworks/contacts.ui/submission/39contacts_ui.js
@@ -2,18 +2,17 @@
 var resourceBundleFactory=new Globalization.ResourceBundleFactory(MojoLoader.root);var RB=resourceBundleFactory.getResourceBundle();AccountsLib.enableExtensions();var PersonListWidget=exports.PersonListWidget=function(){Assert.requireDefined(Mojo,"PersonListWidget: Failed to detect the Mojo framework");var _sceneController,_div,_model,_uniqueId="PFLW_"+Date.now(),_stylesheets=[Utils.getStylesheetPath("common.css"),Utils.getStylesheetPath("list.css")],_eventListenerManager=new EventListenerManager,_personListScrollPosition,_favoriteListScrollPosition,_personListDataSource,_favoriteListDataSource,_personListElement,_favoriteListElement,_currentView,_filterString=
 "",getWidgetElementId=function(id){return _uniqueId+id},getWidgetElement=function(id){return _sceneController.get(getWidgetElementId(id))},transformListItem=function(person){if(!person)return person;person=Contacts.PersonFactory.createPersonDisplayLite(person,_model.sortOrder);if(_model.exclusions&&Array.isArray(_model.exclusions))if(_model.exclusions.indexOf(person._id)!==-1)person.exclude="exclude";return person},dividerLabelCallback=function(person){if(person&&!person.exclude)return person.dividerText;
 else return""},personDecorator=function(itemModel){var decorations={},displayName=Foundations.StringUtils.escapeHTML(itemModel.displayName);if(_filterString)decorations.displayName=Mojo.PatternMatching.addContactMatchFormatting(displayName,_filterString);else decorations.displayName=displayName;return decorations},createAsyncPersonDecorator=function(items,callback){return new PersonAsyncDecorator(items,callback)},setupPersonList=function(){var dataSourceAssistant=Contacts.ListWidget.getTypedownDBDataSourceAssistant({favoritesOnly:_model.favoritesOnly,
-excludeFavorites:_model.excludeFavorites}),wrappedDataSourceAssistant=Utils.formatDataSourceAssistant(dataSourceAssistant,transformListItem),dividerTemplate;_personListDataSource=new Mojo.DataSource(wrappedDataSourceAssistant);_personListElement=getWidgetElement("person-list");_model.personListTapCallback=_model.personListTapCallback||_model.listTapCallback;if(_model.sortOrder===Contacts.ListWidget.SortOrder.firstLast||_model.sortOrder===Contacts.ListWidget.SortOrder.lastFirst)dividerTemplate=Utils.getTemplatePath("person-filter-list-widget/group-separator");
-else dividerTemplate=Utils.getTemplatePath("person-filter-list-widget/multiline-separator");_sceneController.setupWidget(getWidgetElementId("person-list"),{templateRoot:LIB_ROOT,templates:{item:Utils.getTemplatePath("person-filter-list-widget/person-item"),empty:Utils.getTemplatePath("person-filter-list-widget/empty")},uniquenessProperty:"_id",dataSource:_personListDataSource,dividers:{labelCallback:dividerLabelCallback,template:dividerTemplate},decorator:personDecorator,asyncDecorator:createAsyncPersonDecorator},
-{});if(_model.personListTapCallback&&_.isFunction(_model.personListTapCallback))_eventListenerManager.addListener(_personListElement,Mojo.Event.listTap,_model.personListTapCallback);else console.warn("PersonListWidget (setupPersonList) was set up without a listTapCallback.  Do you really want to do this?")},handleAddFavorite=function(person){person.makeFavorite(true)},handleAddFavoriteTap=function(event){pushPeoplePickerScene(_sceneController.stageController,{excludeFavorites:true,iconClass:"icon-add-fav",
-message:RB.$L("Add to Favorites"),callback:handleAddFavorite})},handleFavoriteDelete=function(items,callback){items.forEach(function(item){var person=Contacts.PersonFactory.createPersonDisplay(item);person.unfavorite(true)});callback()},setupFavoriteList=function(){var dataSourceAssistant=Contacts.ListWidget.getTypedownDBDataSourceAssistant({favoritesOnly:true}),wrappedDataSourceAssistant=Utils.formatDataSourceAssistant(dataSourceAssistant,transformListItem);_favoriteListDataSource=new Mojo.DataSource(wrappedDataSourceAssistant);
-_favoriteListElement=getWidgetElement("favorite-list");_model.favoriteListTapCallback=_model.favoriteListTapCallback||_model.listTapCallback;_favoriteListDataSource.removeItems=handleFavoriteDelete;_sceneController.setupWidget(getWidgetElementId("favorite-list"),{templateRoot:LIB_ROOT,templates:{item:Utils.getTemplatePath("person-filter-list-widget/person-item")},uniquenessProperty:"_id",dataSource:_favoriteListDataSource,decorator:personDecorator,asyncDecorator:createAsyncPersonDecorator,addItem:{label:RB.$L("Add Favorite...")},
-swipeDelete:{deleteText:RB.$L("Remove")}},{});if(_model.favoriteListTapCallback&&_.isFunction(_model.favoriteListTapCallback))_eventListenerManager.addListener(_favoriteListElement,Mojo.Event.listTap,_model.favoriteListTapCallback);else console.warn("PersonListWidget (setupFavoriteList) was set up without a listTapCallback.  Do you really want to do this?");_eventListenerManager.addListener(_favoriteListElement,Mojo.Event.listAdd,handleAddFavoriteTap)},swapLists=function(elementIdToShow,elementIdToHide,
+excludeFavorites:_model.excludeFavorites}),wrappedDataSourceAssistant=Utils.formatDataSourceAssistant(dataSourceAssistant,transformListItem),dividerTemplate;_personListDataSource=new Mojo.DataSource(wrappedDataSourceAssistant);_personListElement=getWidgetElement("person-list");_model.personListTapCallback=_model.personListTapCallback||_model.listTapCallback;_model.personListDeleteCallback=_model.personListDeleteCallback;if(_model.sortOrder===Contacts.ListWidget.SortOrder.firstLast||_model.sortOrder===Contacts.ListWidget.SortOrder.lastFirst)dividerTemplate=Utils.getTemplatePath("person-filter-list-widget/group-separator");
+else dividerTemplate=Utils.getTemplatePath("person-filter-list-widget/multiline-separator");if(_model.personListDeleteCallback&&_.isFunction(_model.personListDeleteCallback))var allowDelete=true;else var allowDelete=false;_sceneController.setupWidget(getWidgetElementId("person-list"),{templateRoot:LIB_ROOT,templates:{item:Utils.getTemplatePath("person-filter-list-widget/person-item"),empty:Utils.getTemplatePath("person-filter-list-widget/empty")},uniquenessProperty:"_id",dataSource:_personListDataSource,dividers:{labelCallback:dividerLabelCallback,template:dividerTemplate},decorator:personDecorator,asyncDecorator:createAsyncPersonDecorator,swipeDelete:true},
+{});if(_model.personListTapCallback&&_.isFunction(_model.personListTapCallback))_eventListenerManager.addListener(_personListElement,Mojo.Event.listTap,_model.personListTapCallback);else console.warn("PersonListWidget (setupPersonList) was set up without a listTapCallback.  Do you really want to do this?");if(_model.personListDeleteCallback&&_.isFunction(_model.personListDeleteCallback))_eventListenerManager.addListener(_personListElement,Mojo.Event.listDelete,_model.personListDeleteCallback);},handleAddFavorite=function(person){person.makeFavorite(true)},handleFavoriteDelete=function(items,callback){items.forEach(function(item){var person=Contacts.PersonFactory.createPersonDisplay(item);person.unfavorite(true)});callback()},setupFavoriteList=function(){var dataSourceAssistant=Contacts.ListWidget.getTypedownDBDataSourceAssistant({favoritesOnly:true}),wrappedDataSourceAssistant=Utils.formatDataSourceAssistant(dataSourceAssistant,transformListItem);_favoriteListDataSource=new Mojo.DataSource(wrappedDataSourceAssistant);
+_favoriteListElement=getWidgetElement("favorite-list");_model.favoriteListTapCallback=_model.favoriteListTapCallback||_model.listTapCallback;_favoriteListDataSource.removeItems=handleFavoriteDelete;_sceneController.setupWidget(getWidgetElementId("favorite-list"),{templateRoot:LIB_ROOT,templates:{item:Utils.getTemplatePath("person-filter-list-widget/person-item")},uniquenessProperty:"_id",dataSource:_favoriteListDataSource,decorator:personDecorator,asyncDecorator:createAsyncPersonDecorator,
+swipeDelete:{deleteText:RB.$L("Remove")}},{});if(_model.favoriteListTapCallback&&_.isFunction(_model.favoriteListTapCallback))_eventListenerManager.addListener(_favoriteListElement,Mojo.Event.listTap,_model.favoriteListTapCallback);else console.warn("PersonListWidget (setupFavoriteList) was set up without a listTapCallback.  Do you really want to do this?");_eventListenerManager.addListener(_favoriteListElement,Mojo.Event.listDelete,handleFavoriteDelete)},swapLists=function(elementIdToShow,elementIdToHide,
 useTransition,state){var elementToShow=getWidgetElement(elementIdToShow),elementToHide=getWidgetElement(elementIdToHide),transition;if(useTransition)transition=_sceneController.prepareTransition(Mojo.Transition.crossFade,false);Mojo.Dom.show(elementToShow);Mojo.Dom.hide(elementToHide);_sceneController.showWidgetContainer(elementToShow);_sceneController.hideWidgetContainer(elementToHide);if(state)_sceneController.sceneScroller.mojo.setState(state);if(transition)transition.run()};return{setup:function(sceneController,
 div,model){Assert.requireFalse(_sceneController,"PersonListWidget setup() has already been called! Aborting.");Assert.require(sceneController,"PersonListWidget requires a sceneController");_sceneController=sceneController;_div=div&&_.isString(div)?sceneController.get(div):div;_model=model||{};_model.mode=_model.mode||PersonListWidget.MODE.PERSON_AND_FAVORITE_LIST;Assert.require(div,"PersonListWidget requires a div element");if(!_model.sortOrder){Mojo.Log.warning("PersonListWidget: no sort order provided!  Defaulting to Contacts.ListWidget.SortOrder.defaultSortOrder");
 _model.sortOrder=Contacts.ListWidget.SortOrder.defaultSortOrder}Utils.loadSceneStyles(_sceneController,_stylesheets,_uniqueId);var listWidgetModel={uniqueId:_uniqueId},hasPersonList=false,hasFavoriteList=false;div.innerHTML=Mojo.View.render({object:listWidgetModel,templateRoot:LIB_ROOT,template:Utils.getTemplatePath("person-filter-list-widget/widget-template")});if(_model.mode===PersonListWidget.MODE.PERSON_AND_FAVORITE_LIST||_model.mode===PersonListWidget.MODE.PERSON_LIST){setupPersonList();hasPersonList=
 true}if(_model.mode===PersonListWidget.MODE.PERSON_AND_FAVORITE_LIST||_model.mode===PersonListWidget.MODE.FAVORITE){setupFavoriteList();hasFavoriteList=true}if(_model.defaultView===PersonListWidget.VIEW.PERSON_LIST)this.showPersonList();else if(_model.defaultView===PersonListWidget.VIEW.FAVORITE_LIST)this.showFavoriteList();else if(hasPersonList)this.showPersonList();else if(hasFavoriteList)this.showFavoriteList()},getCurrentView:function(){return _currentView},teardown:function(){Utils.unloadSceneStyles(_sceneController,
 _stylesheets,_uniqueId);_eventListenerManager.destroyListeners()},showPersonList:function(useTransition){if(_currentView===PersonListWidget.VIEW.PERSON_LIST)return;_currentView=PersonListWidget.VIEW.PERSON_LIST;_favoriteListScrollPosition=_sceneController.sceneScroller.mojo.getState();swapLists("person-list-container","favorite-list-container",useTransition,_personListScrollPosition)},showFavoriteList:function(useTransition){if(_currentView===PersonListWidget.VIEW.FAVORITE_LIST)return;_currentView=
-PersonListWidget.VIEW.FAVORITE_LIST;_personListScrollPosition=_sceneController.sceneScroller.mojo.getState();swapLists("favorite-list-container","person-list-container",useTransition,_favoriteListScrollPosition)},filter:function(str,setCountFn){var dataSource,listElement;if(_currentView===PersonListWidget.VIEW.FAVORITE_LIST){dataSource=_favoriteListDataSource;listElement=_favoriteListElement}else{dataSource=_personListDataSource;listElement=_personListElement}_filterString=str;dataSource.setFilterString(str);
+PersonListWidget.VIEW.FAVORITE_LIST;_personListScrollPosition=_sceneController.sceneScroller.mojo.getState();swapLists("favorite-list-container","person-list-container",useTransition,_favoriteListScrollPosition)},showAddFavorite:function(){pushPeoplePickerScene(_sceneController.stageController,{excludeFavorites:true,iconClass:"icon-add-fav",message:RB.$L("Add to Favorites"),callback:handleAddFavorite});},filter:function(str,setCountFn){var dataSource,listElement;if(_currentView===PersonListWidget.VIEW.FAVORITE_LIST){dataSource=_favoriteListDataSource;listElement=_favoriteListElement}else{dataSource=_personListDataSource;listElement=_personListElement}_filterString=str;dataSource.setFilterString(str);
 dataSource.getCount(setCountFn);listElement.mojo.invalidate()},invalidate:function(){_favoriteListElement.mojo.invalidate();_personListElement.mojo.invalidate()}}};PersonListWidget.MODE={PERSON_LIST:"mode_person_list",FAVORITE_LIST:"mode_favorite_list",PERSON_AND_FAVORITE_LIST:"mode_person_and_favorite_list"};PersonListWidget.VIEW={PERSON_LIST:"view_person_list",FAVORITE_LIST:"view_favorite_list"};var DetailWidget=exports.DetailWidget=function(){Assert.requireDefined(Mojo,"DetailWidget: Failed to detect the Mojo framework");this.controller=undefined;this._widget={div:undefined,model:undefined,stylesheets:[Utils.getStylesheetPath("common.css"),Utils.getStylesheetPath("detail.css"),Utils.getStylesheetPath("sandbox-styles.css")],uniqueId:"PFLW_"+Date.now()};this.person=undefined;this.personId=undefined;this.personRev=undefined;this.clippedModel={};this.currentlyLinking=false;this.listConfigs=
 [{listName:"phone",listId:"phoneList",itemTemplate:"phone-item"},{listName:"email",listId:"emailList",itemTemplate:"email-item"},{listName:"messaging",listId:"messagingList",itemTemplate:"messaging-item"},{listName:"address",listId:"addressList",itemTemplate:"address-item"},{listName:"url",listId:"urlList",itemTemplate:"url-item"},{listName:"notes",listId:"notesList",itemTemplate:"notes-item"},{listName:"moredetails",listId:"moredetailsList",itemTemplate:"moredetails-item"}];this.eventListenerManager=
 new EventListenerManager;this.listManager=new MultipleListManager;this.imStatusWatchers={}};
--- .orig/usr/palm/frameworks/contacts/submission/99contacts.js
+++ /usr/palm/frameworks/contacts/submission/99contacts.js
@@ -154,7 +154,7 @@
 ContactPhoto.TYPE=Utils.defineConstants({BIG:PersonPhotos.TYPE.BIG,SQUARE:PersonPhotos.TYPE.SQUARE});var PhoneNumberExtended=PropertyBase.create({superClass:FavoritablePhoneNumber,data:[{dbFieldName:"value",defaultValue:"",setterName:"setValue",getterName:"getValue",beforeSet:function(value){this.doGenerateNormalizedValue=true;return value}},{dbFieldName:"normalizedValue",defaultValue:"",setterName:"setNormalizedValue",getterName:"getNormalizedValue",beforeGet:function(origNormalizedValue){var normalizedValue=origNormalizedValue,value=this.getValue();if(!value||this.doGenerateNormalizedValue){normalizedValue=
 PhoneNumber.normalizePhoneNumber(value);this.setNormalizedValue(normalizedValue);this.doGenerateNormalizedValue=false}return normalizedValue}},{dbFieldName:"speedDial",defaultValue:"",setterName:"setSpeedDial",getterName:"getSpeedDial"}]});PhoneNumberExtended.prototype._extendedGetDBObject=function(dbObject){dbObject.normalizedValue=this.getNormalizedValue();return dbObject};var ReadOnly=PropertyBase.create({data:[{dbFieldName:"",defaultValue:false,setterName:"setValue",getterName:"getValue"}]});var Relation=exports.Relation=PropertyBase.create({data:[{dbFieldName:"value",defaultValue:"",setterName:"setValue",getterName:"getValue"},{dbFieldName:"type",defaultValue:"",setterName:"setType",getterName:"getType"},{dbFieldName:"primary",defaultValue:false,setterName:"setPrimary",getterName:"getPrimary"}]});Relation.prototype.getNormalizedHashKey=function(){return this.getValue()+":(|)"+this.getType()};
 Relation.prototype.equals=function(obj){if(obj instanceof Relation)return this.getValue()===obj.getValue()&&this.getType()===obj.getType()&&this.getPrimary()===obj.getPrimary();return false};Relation.prototype.getDisplayValue=function(){return this.getValue()};Relation.prototype.__defineGetter__("x_displayValue",function(){return this.getDisplayValue()});
-Relation.TYPE=Utils.defineConstants({ASSISTANT:"type_assistant",BROTHER:"type_brother",CHILD:"type_child",DOMESTIC_PARTNER:"type_domestic_partner",FATHER:"type_father",FRIEND:"type_friend",MANAGER:"type_manager",MOTHER:"type_mother",PARENT:"type_parent",PARTNER:"type_partner",REFERRED_BY:"type_referred_by",RELATIVE:"type_relative",SISTER:"type_sister",SPOUSE:"type_spouse",OTHER:"type_other"});var Reminder=PropertyBase.create({data:[{dbFieldName:"",defaultValue:"",setterName:"setValue",getterName:"getValue"}]});var Ringtone=PropertyBase.create({data:[{dbFieldName:"name",defaultValue:"",setterName:"setName",getterName:"getName"},{dbFieldName:"location",defaultValue:"",setterName:"setLocation",getterName:"getLocation"}]});var SearchTerm=PropertyBase.create({data:[{dbFieldName:"",defaultValue:"",setterName:"setValue",getterName:"getValue"}]});var SimEntryType=PropertyBase.create({data:[{dbFieldName:"",defaultValue:"",setterName:"setValue",getterName:"getValue"}]});var SimIndex=PropertyBase.create({data:[{dbFieldName:"",defaultValue:-1,setterName:"setValue",getterName:"getValue"}]});var SortKey=exports.SortKey=PropertyBase.create({data:[{dbFieldName:"",defaultValue:"",setterName:"setValue",getterName:"getValue"}]});
+Relation.TYPE=Utils.defineConstants({ASSISTANT:"type_assistant",BROTHER:"type_brother",CHILD:"type_child",DOMESTIC_PARTNER:"type_domestic_partner",FATHER:"type_father",FRIEND:"type_friend",MANAGER:"type_manager",MOTHER:"type_mother",PARENT:"type_parent",PARTNER:"type_partner",REFERRED_BY:"type_referred_by",RELATIVE:"type_relative",SISTER:"type_sister",SPOUSE:"type_spouse",OTHER:"type_other"});var Reminder=PropertyBase.create({data:[{dbFieldName:"",defaultValue:"",setterName:"setValue",getterName:"getValue"}]});var Ringtone=PropertyBase.create({data:[{dbFieldName:"name",defaultValue:"",setterName:"setName",getterName:"getName"},{dbFieldName:"location",defaultValue:"",setterName:"setLocation",getterName:"getLocation"}]});var CallAlert=PropertyBase.create({data:[{dbFieldName:"alert",defaultValue:"",setterName:"setAlert",getterName:"getAlert"}]});var CallAction=PropertyBase.create({data:[{dbFieldName:"action",defaultValue:"",setterName:"setAction",getterName:"getAction"}]});var MsgRingtone=PropertyBase.create({data:[{dbFieldName:"name",defaultValue:"",setterName:"setName",getterName:"getName"},{dbFieldName:"location",defaultValue:"",setterName:"setLocation",getterName:"getLocation"}]});var MsgAlert=PropertyBase.create({data:[{dbFieldName:"alert",defaultValue:"",setterName:"setAlert",getterName:"getAlert"}]});var IMsgRingtone=PropertyBase.create({data:[{dbFieldName:"name",defaultValue:"",setterName:"setName",getterName:"getName"},{dbFieldName:"location",defaultValue:"",setterName:"setLocation",getterName:"getLocation"}]});var IMsgAlert=PropertyBase.create({data:[{dbFieldName:"alert",defaultValue:"",setterName:"setAlert",getterName:"getAlert"}]});var SearchTerm=PropertyBase.create({data:[{dbFieldName:"",defaultValue:"",setterName:"setValue",getterName:"getValue"}]});var SimEntryType=PropertyBase.create({data:[{dbFieldName:"",defaultValue:"",setterName:"setValue",getterName:"getValue"}]});var SimIndex=PropertyBase.create({data:[{dbFieldName:"",defaultValue:-1,setterName:"setValue",getterName:"getValue"}]});var SortKey=exports.SortKey=PropertyBase.create({data:[{dbFieldName:"",defaultValue:"",setterName:"setValue",getterName:"getValue"}]});
 SortKey.generateSortKey=function(person,optionalConfigParams){var future=new Future,configParams;future.now(function(){Assert.require(person,"SortKey.generateSortKey requires a person that is truthy");configParams=optionalConfigParams||{};if(configParams.listSortOrder)return true;else var appPrefs=new AppPrefs(future.callback(function(){var dummy=future.result;configParams.listSortOrder=appPrefs.get(AppPrefs.Pref.listSortOrder);future.result=true}))});future.then(function(){var dummy=future.result;
 return SortKey._generateSortKeyFromSortOrder(person,configParams)});return future};
 SortKey._generateSortKeyFromSortOrder=function(person,configParams){var future=new Future,givenName="",familyName="",companyName="",displayName="";future.now(function(){var name,company;Assert.require(person,"SortKey.generateSortKey requires a person that is truthy");Assert.requireObject(configParams,"SortKey.generateSortKey requires an object as the configParams");Assert.requireString(configParams.listSortOrder,"SortKey.generateSortKey requires a listSortOrder that is a string");if(person instanceof
@@ -166,8 +166,8 @@
 SpeedDialHash.prototype.setPlainValue=function(value){this.setHashedPhoneNumber(value?Crypto.MD5.b64_md5(value):null)};SpeedDialHash.prototype.isPlainValueEqual=function(value){return value?Crypto.MD5.b64_md5(value)===this.getHashedPhoneNumber():value===this.getHashedPhoneNumber()};var SyncSource=PropertyBase.create({data:[{dbFieldName:"name",defaultValue:null,setterName:"setName",getterName:"getName"},{dbFieldName:"extended",defaultValue:{},setterName:"setExtended",getterName:"getExtended"}]});SyncSource.prototype.equals=function(obj){if(obj instanceof SyncSource)return this.getName()===obj.getName();return false};var Tag=PropertyBase.create({data:[{dbFieldName:"",defaultValue:"",setterName:"setValue",getterName:"getValue"}]});var Url=exports.Url=PropertyBase.create({data:[{dbFieldName:"value",defaultValue:"",setterName:"setValue",getterName:"getValue"},{dbFieldName:"type",defaultValue:"",setterName:"setType",getterName:"getType"},{dbFieldName:"primary",defaultValue:false,setterName:"setPrimary",getterName:"getPrimary"}]});Url.prototype.getDisplayValue=function(){return this.getValue().toLocaleLowerCase()};Url.prototype.__defineGetter__("x_displayValue",function(){return this.getDisplayValue()});
 Url.TYPE=Utils.defineConstants({HOME:"type_home",HOMEPAGE:"type_homepage",BLOG:"type_blog",FTP:"type_ftp",PROFILE:"type_profile",WORK:"type_work",OTHER:"type_other"});Url.prototype.getNormalizedHashKey=function(){return this.getValue().toLowerCase()};
 Url.Labels=Utils.createLabelFunctions([{value:Url.TYPE.HOME,displayValue:RB.$L("Home"),isPopupLabel:false},{value:Url.TYPE.HOMEPAGE,displayValue:RB.$L("Homepage"),isPopupLabel:false},{value:Url.TYPE.BLOG,displayValue:RB.$L("Blog"),isPopupLabel:false},{value:Url.TYPE.FTP,displayValue:RB.$L("FTP"),isPopupLabel:false},{value:Url.TYPE.PROFILE,displayValue:RB.$L("Profile"),isPopupLabel:false},{value:Url.TYPE.WORK,displayValue:RB.$L("Work"),isPopupLabel:false},{value:Url.TYPE.OTHER,displayValue:RB.$L("Other"),
-isPopupLabel:false}]);var AppPrefs=exports.AppPrefs=function(onReady,kind,defaults){kind=kind||AppPrefs.dbKind;defaults=defaults||{listSortOrder:ListWidget.SortOrder.defaultSortOrder,defaultAccountId:"",contactsPhoneRegion:"us"};this.ready=false;this._kind=kind;this._defaults=defaults;this._onReady=onReady;Utils.mixInBroadcaster(this);this._doQuery()};Utils.defineConstant("dbKind","com.palm.app.contacts.prefs:1",AppPrefs);
-AppPrefs.Pref=Utils.defineConstants({listSortOrder:"listSortOrder",defaultAccountId:"defaultAccountId",contactsPhoneRegion:"contactsPhoneRegion"});AppPrefs.prototype._doQuery=function(){this._future=DB.find({from:this._kind,limit:2});this._future.then(this,this._handleResult)};
+isPopupLabel:false}]);var AppPrefs=exports.AppPrefs=function(onReady,kind,defaults){kind=kind||AppPrefs.dbKind;defaults=defaults||{listSortOrder:ListWidget.SortOrder.defaultSortOrder,defaultAccountId:"",contactsPhoneRegion:"us",blockedNumbers:true,unknownNumbers:true,unknownContacts:{}};this.ready=false;this._kind=kind;this._defaults=defaults;this._onReady=onReady;Utils.mixInBroadcaster(this);this._doQuery()};Utils.defineConstant("dbKind","com.palm.app.contacts.prefs:1",AppPrefs);
+AppPrefs.Pref=Utils.defineConstants({listSortOrder:"listSortOrder",defaultAccountId:"defaultAccountId",contactsPhoneRegion:"contactsPhoneRegion",blockedNumbers:"blockedNumbers",unknownNumbers:"unknownNumbers",unknownContacts:"unknownContacts"});AppPrefs.prototype._doQuery=function(){this._future=DB.find({from:this._kind,limit:2});this._future.then(this,this._handleResult)};
 AppPrefs.prototype._handleResult=function(future){var length=future.result.results.length,shallowCopy;if(length>1)console.error("AppPrefs: Expected singleton object for "+this._kind+", but received >1 result.");else if(length===0){console.log("AppPrefs: No prefs found, creating "+this._kind);shallowCopy=_.clone(this._defaults);shallowCopy._kind=this._kind;DB.put([shallowCopy]);this._doQuery();return}this._prefs=future.result.results[0];this.ready=true;if(this._onReady){this._onReady();this._onReady=
 undefined}};AppPrefs.prototype.get=function(propName){var result=this._prefs,props;if(!this.ready){console.error("AppPrefs: Access to pref "+propName+" before prefs object is ready. Using default.");result=this._defaults}props=propName.split(".");while(result&&props.length>0)result=result[props.shift()];if(props.length>0)console.warn("AppPrefs: Invalid attempt to access pref at "+propName);return result};
 AppPrefs.prototype.set=function(propName,value){var prefs=this._prefs,mergeObj,objToSet,props,curProp;if(!this.ready){console.error("AppPrefs: Attempt to set pref "+propName+" before prefs object is ready. Ignoring.");return}mergeObj=objToSet={_id:this._prefs._id};props=propName.split(".");while(objToSet&&props.length>1){curProp=props.shift();if(!prefs[curProp])prefs[curProp]={};prefs=prefs[curProp];objToSet[curProp]={};objToSet=objToSet[curProp]}curProp=props.shift();prefs[curProp]=value;objToSet[curProp]=
@@ -229,7 +229,7 @@
 params));callback(newItems)})};return dataSourceAssistant},isRcsAvailable:function(){var future=getRcsAccounts();future.then(function(){return future.result.length>0});return future},SortOrder:Utils.defineConstants({defaultSortOrder:"LAST_FIRST",lastFirst:"LAST_FIRST",firstLast:"FIRST_LAST",companyLastFirst:"COMPANY_LAST_FIRST",companyFirstLast:"COMPANY_FIRST_LAST"})}}();var Person=Class.create({initialize:function(rawPerson){if(!rawPerson)rawPerson={};var hasDatabaseId=!!rawPerson._id,constructedFromContact=rawPerson instanceof Contact,_data={_kind:Person.kind,_id:rawPerson._id||undefined,_rev:rawPerson._rev,_del:rawPerson._del,favorite:Utils.lazyWrapper(Favorite,[rawPerson.favorite,hasDatabaseId]),contactIds:Utils.lazyWrapper(PropertyArray,[ContactId,rawPerson.contactIds,hasDatabaseId]),sortKey:Utils.lazyWrapper(SortKey,[rawPerson.sortKey,hasDatabaseId]),name:Utils.lazyWrapper(Name,
 [rawPerson.name,hasDatabaseId]),names:Utils.lazyWrapper(PropertyArray,[Name,rawPerson.names,hasDatabaseId]),nickname:Utils.lazyWrapper(Nickname,[rawPerson.nickname,hasDatabaseId]),organization:Utils.lazyWrapper(Organization,[rawPerson.organization,hasDatabaseId]),searchTerms:Utils.lazyWrapper(PropertyArray,[SearchTerm,rawPerson.searchTerms,hasDatabaseId]),emails:Utils.lazyWrapper(PropertyArray,[EmailAddressExtended,rawPerson.emails,hasDatabaseId]),phoneNumbers:Utils.lazyWrapper(PropertyArray,[PhoneNumberExtended,
 rawPerson.phoneNumbers,hasDatabaseId]),ims:Utils.lazyWrapper(PropertyArray,[IMAddressExtended,rawPerson.ims,hasDatabaseId]),photos:Utils.lazyWrapper(PersonPhotos,[rawPerson.photos,hasDatabaseId]),addresses:Utils.lazyWrapper(PropertyArray,[Address,rawPerson.addresses,hasDatabaseId]),urls:Utils.lazyWrapper(PropertyArray,[Url,rawPerson.urls,hasDatabaseId]),notes:Utils.lazyWrapper(PropertyArray,[Note,rawPerson.notes,hasDatabaseId]),birthday:Utils.lazyWrapper(Birthday,[rawPerson.birthday,hasDatabaseId]),
-anniversary:Utils.lazyWrapper(Anniversary,[rawPerson.anniversary,hasDatabaseId]),gender:Utils.lazyWrapper(Gender,[rawPerson.gender,hasDatabaseId]),reminder:Utils.lazyWrapper(Reminder,[rawPerson.reminder,hasDatabaseId]),launcherId:Utils.lazyWrapper(LauncherId,[rawPerson.launcherId,hasDatabaseId]),relations:Utils.lazyWrapper(PropertyArray,[Relation,rawPerson.relations,hasDatabaseId]),ringtone:Utils.lazyWrapper(Ringtone,[rawPerson.ringtone,hasDatabaseId])},_contacts=new PropertyArray(Contact,null),_transientFavoriteState=
+anniversary:Utils.lazyWrapper(Anniversary,[rawPerson.anniversary,hasDatabaseId]),gender:Utils.lazyWrapper(Gender,[rawPerson.gender,hasDatabaseId]),reminder:Utils.lazyWrapper(Reminder,[rawPerson.reminder,hasDatabaseId]),launcherId:Utils.lazyWrapper(LauncherId,[rawPerson.launcherId,hasDatabaseId]),relations:Utils.lazyWrapper(PropertyArray,[Relation,rawPerson.relations,hasDatabaseId]),ringtone:Utils.lazyWrapper(Ringtone,[rawPerson.ringtone,hasDatabaseId]),callAlert:Utils.lazyWrapper(CallAlert,[rawPerson.callAlert,hasDatabaseId]),callAction:Utils.lazyWrapper(CallAction,[rawPerson.callAction,hasDatabaseId]),msgRingtone:Utils.lazyWrapper(MsgRingtone,[rawPerson.msgRingtone,hasDatabaseId]),msgAlert:Utils.lazyWrapper(MsgAlert,[rawPerson.msgAlert,hasDatabaseId]),iMsgRingtone:Utils.lazyWrapper(IMsgRingtone,[rawPerson.iMsgRingtone,hasDatabaseId]),iMsgAlert:Utils.lazyWrapper(IMsgAlert,[rawPerson.iMsgAlert,hasDatabaseId])},_contacts=new PropertyArray(Contact,null),_transientFavoriteState=
 {instantiationFavoriteValue:false,favoriteDefaultsChanged:false},_beingSaved=false;this.accessor=function(fieldName){var field=_data[fieldName];Assert.requireDefined(fieldName,"fieldName must be specified for the accessor");if(field&&typeof field==="object"&&field.isLazyWrapper)field=_data[fieldName]=field.createInstance();return field};_transientFavoriteState.instantiationFavoriteValue=this.accessor("favorite").getValue();this._getTransientFavoriteState=function(){return _transientFavoriteState};
 this._isBeingSaved=function(){return _beingSaved};this._setBeingSaved=function(value){_beingSaved=value};this.setId=function(id){_data._id=id};this.setRev=function(rev){_data._rev=rev};this.getContacts=function(){return _contacts.getArray()};this.setContacts=function(contacts){_contacts.set(contacts)};this.getDBObject=function(){return Utils.getDBObjectForAllProperties(this.accessor,_.keys(_data))};this.getDirtyDBObject=function(){return Utils.getDBObjectForAllDirtyProperties(this.accessor,_.keys(_data))};
 if(constructedFromContact)this.populateFromContact(rawPerson)},populateFromContact:function(contact){Assert.requireDefined(contact,"populateFromContact requires a person argument");Assert.require(contact instanceof Contact,"populateFromContact requires a person argument that is a child of Person");this.setContacts([contact]);this.fixupNoReloadContacts();return true},getKind:function(){return this.accessor("_kind")},getId:function(){return this.accessor("_id")},getLauncherId:function(){return this.accessor("launcherId")},
@@ -243,7 +243,7 @@
 false},getContactIds:function(){return this.accessor("contactIds")},setContactWithIdAsPrimary:function(contactIdToSetPrimary){var contactIds=this.getContactIds().getArray(),indexFoundContactId=-1,removedContactId;contactIds.some(function(contactId,index){if(contactId.getValue()===contactIdToSetPrimary){indexFoundContactId=index;return true}return false});if(indexFoundContactId>0){removedContactId=contactIds[indexFoundContactId];contactIds.splice(indexFoundContactId,1);contactIds.splice(0,0,removedContactId);
 this.getContactIds().set(contactIds);return true}else return false},getSortKey:function(){return this.accessor("sortKey")},getName:function(){return this.accessor("name")},getNames:function(){return this.accessor("names")},getNickname:function(){return this.accessor("nickname")},getOrganization:function(){return this.accessor("organization")},getEmails:function(){return this.accessor("emails")},getIms:function(){return this.accessor("ims")},getPhoneNumbers:function(){return this.accessor("phoneNumbers")},
 getPhotos:function(){return this.accessor("photos")},getAddresses:function(){return this.accessor("addresses")},getUrls:function(){return this.accessor("urls")},getNotes:function(){return this.accessor("notes")},getBirthday:function(){return this.accessor("birthday")},getAnniversary:function(){return this.accessor("anniversary")},getGender:function(){return this.accessor("gender")},getSearchTerms:function(){return this.accessor("searchTerms")},getReminder:function(){return this.accessor("reminder")},
-getRelations:function(){return this.accessor("relations")},getRingtone:function(){return this.accessor("ringtone")},generateDisplayName:function(includeBasedOnField){return Utils.generateDisplayName(this,includeBasedOnField)},generateWorkInfoLine:function(){var arr=[],title=this.getOrganization().getTitle(),orgName=this.getOrganization().getName();if(title)arr.push(title);if(orgName)arr.push(orgName);return arr.join(", ")},reloadContacts:function(contactType){var future=null;contactType=contactType||
+getRelations:function(){return this.accessor("relations")},getRingtone:function(){return this.accessor("ringtone")},getCallAlert:function(){return this.accessor("callAlert")},getCallAction:function(){return this.accessor("callAction")},getMsgAlert:function(){return this.accessor("msgAlert")},getMsgRingtone:function(){return this.accessor("msgRingtone")},getIMsgAlert:function(){return this.accessor("iMsgAlert")},getIMsgRingtone:function(){return this.accessor("iMsgRingtone")},generateDisplayName:function(includeBasedOnField){return Utils.generateDisplayName(this,includeBasedOnField)},generateWorkInfoLine:function(){var arr=[],title=this.getOrganization().getTitle(),orgName=this.getOrganization().getName();if(title)arr.push(title);if(orgName)arr.push(orgName);return arr.join(", ")},reloadContacts:function(contactType){var future=null;contactType=contactType||
 this.getDefaultContactType();future=Person.getLinkedContacts(this,contactType);future.then(this,function getContactsFromResultsAndSetOnPerson(){var contacts;contacts=future.result||[];this.setContacts(contacts);future.result=contacts});return future},clearFieldsForFixup:function(){this.getName().clear();this.getNames().clear();this.getNickname().clear();this.getOrganization().clear();this.getSearchTerms().clear();this.getEmails().clear();this.getPhoneNumbers().clear();this.getIms().clear();this.getAddresses().clear();
 this.getUrls().clear();this.getNotes().clear();this.getBirthday().setValue("");this.getAnniversary().setValue("");this.getGender().setValue("");this.getPhotos().clear();this.getSortKey().setValue("");this.getRelations().clear()},fixup:function(otherPeopleBeingLinked,configParams){return this.fixupFromObjects(undefined,ContactType.EDITABLE,otherPeopleBeingLinked,configParams)},fixupNoReloadContacts:function(otherPeopleBeingLinked,configParams){return this.fixupFromObjects(this.getContacts(),ContactType.EDITABLE,
 otherPeopleBeingLinked,configParams)},fixupFromObjects:function(contacts,contactType,otherPeopleBeingLinked,configParams){var future,allPeopleBeingLinked,dupeFavoriteBackupData,notDupeFavoriteBackupData,speedDialSaver,rawNewPersonPhotos,newListContactPhoto,wasAFavoriteFromBackups=false,timingRecorder=configParams&&configParams.timingRecorder||{startTimingForJob:function(){},stopTimingForJob:function(){}};if(!contacts){timingRecorder.startTimingForJob("Fixup_Reload_Contacts");future=this.reloadContacts()}else{future=
@@ -291,7 +291,7 @@
 for(i=0;i<properties.length;i+=1){property=properties[i];isEqual=isEqual&&this.accessor(property).equals(otherPerson.accessor(property))}for(j=0;j<propertyArrays.length;j+=1){property=propertyArrays[j];tempArray=this.accessor(property).getArray();otherTempArray=otherPerson.accessor(property).getArray();for(i=0;i<tempArray.length;i+=1)isEqual=isEqual&&tempArray[i].equals(otherTempArray[i])}return isEqual},setCroppedContactPhoto:function(path,cropInfo,photoType){var future,param={};param.personId=this.getId();
 param.path=path;param.cropInfo=cropInfo;param.photoType=photoType;future=PalmCall.call("palm://com.palm.service.contacts/","setCroppedContactPhoto",param);future.then(function(){var result=future.result;PalmCall.cancel(future);future.result=result});return future},stripTmpPhoneNumberField:function(obj){var i,phoneNumber,contacts,contact,future;if(obj.length>0){this.getPhoneNumbers().clear();for(i=0;i<obj.length;i+=1){this.getPhoneNumbers().add(new PhoneNumber);phoneNumber=this.getPhoneNumbers().getArray()[i];
 phoneNumber.setValue(obj[i].value?obj[i].value:phoneNumber.getValue());phoneNumber.setType(obj[i].type?obj[i].type:phoneNumber.getType());phoneNumber.setPrimary(obj[i].primary?obj[i].primary:phoneNumber.getPrimary());phoneNumber.setNormalizedValue(obj[i].normalizedValue?obj[i].normalizedValue:phoneNumber.getNormalizedValue());phoneNumber.setSpeedDial(obj[i].speedDial?obj[i].speedDial:phoneNumber.getSpeedDial())}future=Person.getLinkedContacts(this,ContactType.RAWOBJECT);future.then(this,function(){contacts=
-future.result||[];for(i=0;i<contacts.length;i+=1){contact=new Contact(contacts[0]);contact.stripTmpPhoneNumberField();contact.save()}future.result=contacts});return future}}});Utils.defineConstant("kind","com.palm.person:1",Person);Person.PROPERTIES={objects:["favorite","sortKey","name","nickname","organization","photos","reminder","ringtone"],arrays:["contactIds","names","searchTerms","emails","phoneNumbers","ims"]};
+future.result||[];for(i=0;i<contacts.length;i+=1){contact=new Contact(contacts[0]);contact.stripTmpPhoneNumberField();contact.save()}future.result=contacts});return future}}});Utils.defineConstant("kind","com.palm.person:1",Person);Person.PROPERTIES={objects:["favorite","sortKey","name","nickname","organization","photos","reminder","ringtone","callAlert","callAction","msgAlert","msgRingtone","iMsgAlert","iMsgRingtone"],arrays:["contactIds","names","searchTerms","emails","phoneNumbers","ims"]};
 Person.generateDisplayNameFromRawPerson=function(rawPerson,includeBasedOnField){var obj=rawPerson,displayName="",basedOnField=null,fullName=Name.getFullNameFromRawObject(obj.name),org;if(fullName){displayName=fullName;basedOnField=DisplayNameType.NAME}else if(obj.nickname){displayName=obj.nickname;basedOnField=DisplayNameType.NICKNAME}if(!displayName&&obj.organization)if(obj.organization.title&&obj.organization.name){displayName=obj.organization.title+", "+obj.organization.name;basedOnField=DisplayNameType.TITLE_AND_ORGANIZATION_NAME}else if(!obj.organization.title&&
 obj.organization.name){displayName=obj.organization.name;basedOnField=DisplayNameType.ORGANIZATION_NAME}else if(obj.organization.title&&!obj.organization.name){displayName=obj.organization.title;basedOnField=DisplayNameType.TITLE}if(!displayName)if(obj.emails&&obj.emails.length){displayName=obj.emails[0].value;basedOnField=DisplayNameType.EMAIL}else if(obj.ims&&obj.ims.length){displayName=obj.ims[0].value;basedOnField=DisplayNameType.IM}else if(obj.phoneNumbers&&obj.phoneNumbers.length){displayName=
 obj.phoneNumbers[0].value;basedOnField=DisplayNameType.PHONE}else{displayName=RB.$L("[No Name Available]");basedOnField=DisplayNameType.NONE}if(includeBasedOnField)return{displayName:displayName,basedOnField:basedOnField};else return displayName};Person.getDisplayablePersonAndContactsById=function(id){return Person.getPersonAndContactsById(id,PersonType.DISPLAYABLE,ContactType.DISPLAYABLE)};
--- .orig/usr/palm/frameworks/contacts/submission/99/javascript/AppPrefs.js
+++ /usr/palm/frameworks/contacts/submission/99/javascript/AppPrefs.js
@@ -22,7 +22,10 @@
 	defaults = defaults || {
 		listSortOrder: ListWidget.SortOrder.defaultSortOrder,
 		defaultAccountId: "",
-		contactsPhoneRegion: "us"
+		contactsPhoneRegion: "us",
+		blockedNumbers: true,
+		unknownNumbers: true,
+		unknownContacts: {}
 	};
 	
 	this.ready = false; // set to true after we've loaded our prefs object.
@@ -42,7 +45,11 @@
 AppPrefs.Pref = Utils.defineConstants({
 	listSortOrder: "listSortOrder",
 	defaultAccountId: "defaultAccountId",
-	contactsPhoneRegion: "contactsPhoneRegion"
+	contactsPhoneRegion: "contactsPhoneRegion",
+	defaultAccountId: "defaultAccountId",
+	blockedNumbers: "blockedNumbers",
+	unknownNumbers: "unknownNumbers",
+	unknownContacts: "unknownContacts"	
 });
 
 AppPrefs.prototype._doQuery = function () {
--- .orig/usr/palm/frameworks/contacts/submission/99/javascript/Person.js
+++ /usr/palm/frameworks/contacts/submission/99/javascript/Person.js
@@ -88,7 +88,13 @@
 				reminder: Utils.lazyWrapper(Reminder, [rawPerson.reminder, hasDatabaseId]),
 				launcherId: Utils.lazyWrapper(LauncherId, [rawPerson.launcherId, hasDatabaseId]),
 				relations: Utils.lazyWrapper(PropertyArray, [Relation, rawPerson.relations, hasDatabaseId]),
-				ringtone: Utils.lazyWrapper(Ringtone, [rawPerson.ringtone, hasDatabaseId])
+				ringtone: Utils.lazyWrapper(Ringtone, [rawPerson.ringtone, hasDatabaseId]),
+				callAlert: Utils.lazyWrapper(CallAlert, [rawPerson.callAlert, hasDatabaseId]),
+				callAction: Utils.lazyWrapper(CallAction, [rawPerson.callAction, hasDatabaseId]),				
+				msgRingtone: Utils.lazyWrapper(MsgRingtone, [rawPerson.msgRingtone, hasDatabaseId]),
+				msgAlert: Utils.lazyWrapper(MsgAlert, [rawPerson.msgAlert, hasDatabaseId]),
+				iMsgRingtone: Utils.lazyWrapper(IMsgRingtone, [rawPerson.iMsgRingtone, hasDatabaseId]),
+				iMsgAlert: Utils.lazyWrapper(IMsgAlert, [rawPerson.iMsgAlert, hasDatabaseId])
 			},
 			_contacts = new PropertyArray(Contact, null),
 			_transientFavoriteState = { 
@@ -669,6 +675,30 @@
 		return this.accessor("ringtone");
 	},
 	
+	getCallAlert: function () {
+		return this.accessor("callAlert");
+	},
+
+	getCallAction: function () {
+		return this.accessor("callAction");
+	},
+
+	getMsgRingtone: function () {
+		return this.accessor("msgRingtone");
+	},
+
+	getMsgAlert: function () {
+		return this.accessor("msgAlert");
+	},
+
+	getIMsgRingtone: function () {
+		return this.accessor("iMsgRingtone");
+	},
+
+	getIMsgAlert: function () {
+		return this.accessor("iMsgAlert");
+	},
+
 	/**
 	 * Generates a display name for the person based on the following criteria:<br>
 	 * 1) Name<br>
@@ -2010,7 +2040,7 @@
 Utils.defineConstant("kind", "com.palm.person:1", Person);
 
 Person.PROPERTIES = { 
-	objects: ["favorite", "sortKey", "name", "nickname", "organization", "photos", "reminder", "ringtone"],
+	objects: ["favorite", "sortKey", "name", "nickname", "organization", "photos", "reminder", "ringtone", "callAlert", "callAction", "msgRingtone", "msgAlert", "iMsgRingtone", "iMsgAlert"],
 	arrays: ["contactIds", "names", "searchTerms", "emails", "phoneNumbers", "ims"]
 };
 
--- .orig/usr/palm/frameworks/contacts.ui/submission/39/javascript/PersonListWidget.js
+++ /usr/palm/frameworks/contacts.ui/submission/39/javascript/PersonListWidget.js
@@ -100,6 +100,7 @@
 			_personListDataSource = new Mojo.DataSource(wrappedDataSourceAssistant);
 			_personListElement = getWidgetElement("person-list");
 			_model.personListTapCallback = _model.personListTapCallback || _model.listTapCallback;
+			_model.personListDeleteCallback = _model.personListDeleteCallback;
 			
 			if (_model.sortOrder === Contacts.ListWidget.SortOrder.firstLast || _model.sortOrder === Contacts.ListWidget.SortOrder.lastFirst) {
 				dividerTemplate = Utils.getTemplatePath("person-filter-list-widget/group-separator");
@@ -107,6 +108,11 @@
 				dividerTemplate = Utils.getTemplatePath("person-filter-list-widget/multiline-separator");
 			}
 			
+			if(_model.personListDeleteCallback && _.isFunction(_model.personListDeleteCallback))
+				var allowDelete=true;
+			else
+				var allowDelete=false;
+
 			_sceneController.setupWidget(getWidgetElementId("person-list"), {
 				templateRoot: LIB_ROOT,
 				templates: {
@@ -120,7 +126,8 @@
 					template: dividerTemplate
 				},
 				decorator: personDecorator,
-				asyncDecorator: createAsyncPersonDecorator
+				asyncDecorator: createAsyncPersonDecorator,
+				swipeDelete: allowDelete
 			}, {});
 			
 			if (_model.personListTapCallback && _.isFunction(_model.personListTapCallback)) {
@@ -128,6 +135,9 @@
 			} else {
 				console.warn("PersonListWidget (setupPersonList) was set up without a listTapCallback.  Do you really want to do this?");
 			}
+
+			if(_model.personListDeleteCallback && _.isFunction(_model.personListDeleteCallback))
+				_eventListenerManager.addListener(_personListElement,Mojo.Event.listDelete,_model.personListDeleteCallback);
 		},
 		
 		handleAddFavorite = function (person) {
@@ -135,7 +145,7 @@
 			// TODO: could add a UI hack to inject this favorite into the list for fast feedback while the DB updates & fires the watch
 		},
 		
-		handleAddFavoriteTap = function (event) {
+/*		handleAddFavoriteTap = function (event) {
 			pushPeoplePickerScene(_sceneController.stageController, {
 				excludeFavorites: true,
 				iconClass: "icon-add-fav",
@@ -143,7 +153,7 @@
 				callback: handleAddFavorite
 			});
 		},
-		
+*/		
 		handleFavoriteDelete = function (items, callback) {
 			items.forEach(function (item) {
 				var person = Contacts.PersonFactory.createPersonDisplay(item);
@@ -175,9 +185,10 @@
 				dataSource: _favoriteListDataSource,
 				decorator: personDecorator,
 				asyncDecorator: createAsyncPersonDecorator,
-				addItem: {
+/*				addItem: {
 					label: RB.$L("Add Favorite...")
 				},
+*/
 				swipeDelete: {
 					deleteText: RB.$L("Remove")
 				}
@@ -189,7 +200,8 @@
 				console.warn("PersonListWidget (setupFavoriteList) was set up without a listTapCallback.  Do you really want to do this?");
 			}
 			
-			_eventListenerManager.addListener(_favoriteListElement, Mojo.Event.listAdd, handleAddFavoriteTap);
+//			_eventListenerManager.addListener(_favoriteListElement, Mojo.Event.listAdd, handleAddFavoriteTap);
+ 			_eventListenerManager.addListener(_favoriteListElement, Mojo.Event.listDelete, handleFavoriteDelete);
 		},
 		
 		swapLists = function (elementIdToShow, elementIdToHide, useTransition, state) {
@@ -313,6 +325,15 @@
 			swapLists("favorite-list-container", "person-list-container", useTransition, _favoriteListScrollPosition);
 		},
 		
+		showAddFavorite: function () {
+			pushPeoplePickerScene(_sceneController.stageController, {
+				excludeFavorites: true,
+				iconClass: "icon-add-fav",
+				message: RB.$L("Add to Favorites"),
+				callback: handleAddFavorite
+			});
+		},
+		
 		// Filters the visible list
 		filter: function (str, setCountFn) {
 			var dataSource,
--- .orig/usr/palm/frameworks/contacts.ui/submission/39/stylesheets/common.css
+++ /usr/palm/frameworks/contacts.ui/submission/39/stylesheets/common.css
@@ -104,10 +104,10 @@
 
 .contacts-avatar-set {
 	float: right;
-	margin: 6px 10px;
-	width: 52px;
-	height: 52px;
-	-webkit-background-size: 50px;
+	margin: 5px 10px;
+	width: 50px;
+	height: 50px;
+	-webkit-background-size: 48px;
 	background: url() center center no-repeat;
     -webkit-border-radius: 9px;
 }
--- .orig/usr/palm/frameworks/contacts.ui/submission/39/concatenated.js
+++ /usr/palm/frameworks/contacts.ui/submission/39/concatenated.js
@@ -145,6 +145,7 @@
 			_personListDataSource = new Mojo.DataSource(wrappedDataSourceAssistant);
 			_personListElement = getWidgetElement("person-list");
 			_model.personListTapCallback = _model.personListTapCallback || _model.listTapCallback;
+			_model.personListDeleteCallback = _model.personListDeleteCallback;
 			
 			if (_model.sortOrder === Contacts.ListWidget.SortOrder.firstLast || _model.sortOrder === Contacts.ListWidget.SortOrder.lastFirst) {
 				dividerTemplate = Utils.getTemplatePath("person-filter-list-widget/group-separator");
@@ -152,6 +153,11 @@
 				dividerTemplate = Utils.getTemplatePath("person-filter-list-widget/multiline-separator");
 			}
 			
+			if(_model.personListDeleteCallback && _.isFunction(_model.personListDeleteCallback))
+				var allowDelete=true;
+			else
+				var allowDelete=false;
+
 			_sceneController.setupWidget(getWidgetElementId("person-list"), {
 				templateRoot: LIB_ROOT,
 				templates: {
@@ -165,7 +171,8 @@
 					template: dividerTemplate
 				},
 				decorator: personDecorator,
-				asyncDecorator: createAsyncPersonDecorator
+				asyncDecorator: createAsyncPersonDecorator,
+				swipeDelete: allowDelete
 			}, {});
 			
 			if (_model.personListTapCallback && _.isFunction(_model.personListTapCallback)) {
@@ -173,6 +180,9 @@
 			} else {
 				console.warn("PersonListWidget (setupPersonList) was set up without a listTapCallback.  Do you really want to do this?");
 			}
+
+			if(_model.personListDeleteCallback && _.isFunction(_model.personListDeleteCallback))
+				_eventListenerManager.addListener(_personListElement,Mojo.Event.listDelete,_model.personListDeleteCallback);
 		},
 		
 		handleAddFavorite = function (person) {
@@ -180,7 +190,7 @@
 			// TODO: could add a UI hack to inject this favorite into the list for fast feedback while the DB updates & fires the watch
 		},
 		
-		handleAddFavoriteTap = function (event) {
+/*		handleAddFavoriteTap = function (event) {
 			pushPeoplePickerScene(_sceneController.stageController, {
 				excludeFavorites: true,
 				iconClass: "icon-add-fav",
@@ -188,7 +198,7 @@
 				callback: handleAddFavorite
 			});
 		},
-		
+*/		
 		handleFavoriteDelete = function (items, callback) {
 			items.forEach(function (item) {
 				var person = Contacts.PersonFactory.createPersonDisplay(item);
@@ -220,9 +230,10 @@
 				dataSource: _favoriteListDataSource,
 				decorator: personDecorator,
 				asyncDecorator: createAsyncPersonDecorator,
-				addItem: {
+/*				addItem: {
 					label: RB.$L("Add Favorite...")
 				},
+*/
 				swipeDelete: {
 					deleteText: RB.$L("Remove")
 				}
@@ -234,7 +245,8 @@
 				console.warn("PersonListWidget (setupFavoriteList) was set up without a listTapCallback.  Do you really want to do this?");
 			}
 			
-			_eventListenerManager.addListener(_favoriteListElement, Mojo.Event.listAdd, handleAddFavoriteTap);
+//			_eventListenerManager.addListener(_favoriteListElement, Mojo.Event.listAdd, handleAddFavoriteTap);
+			_eventListenerManager.addListener(_favoriteListElement, Mojo.Event.listDelete, handleFavoriteDelete);
 		},
 		
 		swapLists = function (elementIdToShow, elementIdToHide, useTransition, state) {
@@ -358,6 +370,15 @@
 			swapLists("favorite-list-container", "person-list-container", useTransition, _favoriteListScrollPosition);
 		},
 		
+		showAddFavorite: function () {
+			pushPeoplePickerScene(_sceneController.stageController, {
+				excludeFavorites: true,
+				iconClass: "icon-add-fav",
+				message: RB.$L("Add to Favorites"),
+				callback: handleAddFavorite
+			});
+		},
+		
 		// Filters the visible list
 		filter: function (str, setCountFn) {
 			var dataSource,
--- .orig/usr/palm/frameworks/contacts/submission/99/manifest.json
+++ /usr/palm/frameworks/contacts/submission/99/manifest.json
@@ -19,6 +19,8 @@
 			"properties/Address.js",
 			"properties/Anniversary.js",
 			"properties/Birthday.js",
+			"properties/CallAction.js",
+			"properties/CallAlert.js",
 			"properties/ContactBackupHash.js",
 			"properties/ContactId.js",
 			"properties/DefaultPropertyHash.js",
@@ -33,7 +35,11 @@
 			"properties/IMAddress.js",
 			"properties/FavoritableIMAddress.js",
 			"properties/IMAddressExtended.js",
+			"properties/IMsgAlert.js",
+			"properties/IMsgRingtone.js",
 			"properties/LauncherId.js",
+			"properties/MsgAlert.js",
+			"properties/MsgRingtone.js",
 			"properties/Name.js",
 			"properties/Nickname.js",
 			"properties/Note.js",
--- .orig/usr/palm/frameworks/contacts.ui/submission/39/templates/person-filter-list-widget/person-item.html
+++ /usr/palm/frameworks/contacts.ui/submission/39/templates/person-filter-list-widget/person-item.html
@@ -2,7 +2,7 @@
 	<div class="palm-row-wrapper status">
 		<div class="icon left #{imStatusClassName}"></div>
 		<div id="#{imageId}" class="contacts-avatar-set" style="background-image:url(#{listPhotoPath})"><div class="contacts-avatar-frame"></div></div>
-		<div class="title #{favoriteClass}">
+		<div class="title #{favoriteClass}" style="padding-top:15px;">
 			<div class="truncating-text">#{-displayName}</div>
 		</div>
 	</div>
--- .orig/usr/palm/frameworks/mojo/submissions/367/stylesheets/global.css
+++ /usr/palm/frameworks/mojo/submissions/367/stylesheets/global.css
@@ -419,7 +419,7 @@
 
 .sliding-toggle {
   height: 48px;
-  margin: 1px 0 0 0;
+  margin: 4px 0 0 0;
   border-width: 9px 29px 9px 29px;
   -webkit-box-sizing: border-box;
   -webkit-border-image: url(../images/header-toggle-background.png) 9 29 9 29 repeat repeat;
--- .orig/usr/palm/frameworks/mojo/submissions/367/stylesheets/global-lists.css
+++ /usr/palm/frameworks/mojo/submissions/367/stylesheets/global-lists.css
@@ -397,6 +397,14 @@
   line-height: 24px;
 }
 
+.palm-list-selector.right .title {
+  text-transform: uppercase;
+  font-size: 14px;
+  color: #1f75bf;
+  text-shadow: #ffffff 0px 1px 0px;
+  line-height: 28px;
+}
+
 .palm-row.removable .title {
   padding-left: 0;
 }
@@ -460,7 +468,15 @@
 .palm-list-selector .label,
 .palm-row .truncating-text .label,
 .palm-row .truncating-text.label {
-  max-width: 40%;
+  max-width: 50%;
+}
+
+.palm-list-selector.right .label {
+  text-transform: none;
+  font-size: 20px;
+  color: black;
+  max-width: 60%;
+  line-height: 24px;
 }
 
 .palm-row .truncating-text .label,
--- .orig/usr/palm/frameworks/mojo/submissions/367/stylesheets/global-lists-dark.css
+++ /usr/palm/frameworks/mojo/submissions/367/stylesheets/global-lists-dark.css
@@ -51,6 +51,22 @@
   color: #999999;
 }
 
+.palm-dark .palm-list-selector.right .title {
+  text-transform: uppercase;
+  font-size: 14px;
+  color: #aaa;
+  text-shadow: #222 0px 1px 0px;
+  line-height: 28px;
+}
+
+.palm-dark .palm-list-selector.right .label {
+  text-transform: none;
+  font-size: 20px;
+  color: white;
+  max-width: 60%;
+  line-height: 24px;
+}
+
 .palm-dark .label.mv-picker-label,
 .palm-dark .palm-row .label {
   color: #aaa;
--- .orig/usr/palm/frameworks/mojo/submissions/367/stylesheets/global-widget-mvpicker.css
+++ /usr/palm/frameworks/mojo/submissions/367/stylesheets/global-widget-mvpicker.css
@@ -19,12 +19,18 @@
   padding-top: 19px;
 }
 
-.label.left.mv-picker-label {
-  float: left;
-  margin: 20px 4px 0px 13px;
-  padding-right: 5px;
+.title.left.mv-picker-label {
+/*  float: left;*/
+/*  margin: 15px 4px 0px 13px;*/
+/*  padding-right: 5px;*/
+  padding: 13px 14px 15px 14px;
 }
 
+.mv-picker-capsules-container {
+	float:right;
+	margin-right:5px;
+},
+
 .focused .mv-picker-label {
   z-index: 99000;
   position: relative;
@@ -45,7 +51,7 @@
   -webkit-box-sizing: border-box;
   display: inline-block;
   position: relative;
-  margin: 2px 5px -2px -1px;
+  margin: 0px 5px -2px -1px;
 }
 
 .palm-dialog-box .label.left.mv-picker-label {
--- .orig/usr/palm/frameworks/mojo/builtins/palmcontactsVersion1_0.js
+++ /usr/palm/frameworks/mojo/builtins/palmcontactsVersion1_0.js
@@ -257,7 +257,7 @@
 ContactPhoto.TYPE=Utils.defineConstants({BIG:PersonPhotos.TYPE.BIG,SQUARE:PersonPhotos.TYPE.SQUARE});var PhoneNumberExtended=PropertyBase.create({superClass:FavoritablePhoneNumber,data:[{dbFieldName:"value",defaultValue:"",setterName:"setValue",getterName:"getValue",beforeSet:function(value){this.doGenerateNormalizedValue=true;return value}},{dbFieldName:"normalizedValue",defaultValue:"",setterName:"setNormalizedValue",getterName:"getNormalizedValue",beforeGet:function(origNormalizedValue){var normalizedValue=origNormalizedValue,value=this.getValue();if(!value||this.doGenerateNormalizedValue){normalizedValue=
 PhoneNumber.normalizePhoneNumber(value);this.setNormalizedValue(normalizedValue);this.doGenerateNormalizedValue=false}return normalizedValue}},{dbFieldName:"speedDial",defaultValue:"",setterName:"setSpeedDial",getterName:"getSpeedDial"}]});PhoneNumberExtended.prototype._extendedGetDBObject=function(dbObject){dbObject.normalizedValue=this.getNormalizedValue();return dbObject};var ReadOnly=PropertyBase.create({data:[{dbFieldName:"",defaultValue:false,setterName:"setValue",getterName:"getValue"}]});var Relation=exports.Relation=PropertyBase.create({data:[{dbFieldName:"value",defaultValue:"",setterName:"setValue",getterName:"getValue"},{dbFieldName:"type",defaultValue:"",setterName:"setType",getterName:"getType"},{dbFieldName:"primary",defaultValue:false,setterName:"setPrimary",getterName:"getPrimary"}]});Relation.prototype.getNormalizedHashKey=function(){return this.getValue()+":(|)"+this.getType()};
 Relation.prototype.equals=function(obj){if(obj instanceof Relation)return this.getValue()===obj.getValue()&&this.getType()===obj.getType()&&this.getPrimary()===obj.getPrimary();return false};Relation.prototype.getDisplayValue=function(){return this.getValue()};Relation.prototype.__defineGetter__("x_displayValue",function(){return this.getDisplayValue()});
-Relation.TYPE=Utils.defineConstants({ASSISTANT:"type_assistant",BROTHER:"type_brother",CHILD:"type_child",DOMESTIC_PARTNER:"type_domestic_partner",FATHER:"type_father",FRIEND:"type_friend",MANAGER:"type_manager",MOTHER:"type_mother",PARENT:"type_parent",PARTNER:"type_partner",REFERRED_BY:"type_referred_by",RELATIVE:"type_relative",SISTER:"type_sister",SPOUSE:"type_spouse",OTHER:"type_other"});var Reminder=PropertyBase.create({data:[{dbFieldName:"",defaultValue:"",setterName:"setValue",getterName:"getValue"}]});var Ringtone=PropertyBase.create({data:[{dbFieldName:"name",defaultValue:"",setterName:"setName",getterName:"getName"},{dbFieldName:"location",defaultValue:"",setterName:"setLocation",getterName:"getLocation"}]});var SearchTerm=PropertyBase.create({data:[{dbFieldName:"",defaultValue:"",setterName:"setValue",getterName:"getValue"}]});var SimEntryType=PropertyBase.create({data:[{dbFieldName:"",defaultValue:"",setterName:"setValue",getterName:"getValue"}]});var SimIndex=PropertyBase.create({data:[{dbFieldName:"",defaultValue:-1,setterName:"setValue",getterName:"getValue"}]});var SortKey=exports.SortKey=PropertyBase.create({data:[{dbFieldName:"",defaultValue:"",setterName:"setValue",getterName:"getValue"}]});
+Relation.TYPE=Utils.defineConstants({ASSISTANT:"type_assistant",BROTHER:"type_brother",CHILD:"type_child",DOMESTIC_PARTNER:"type_domestic_partner",FATHER:"type_father",FRIEND:"type_friend",MANAGER:"type_manager",MOTHER:"type_mother",PARENT:"type_parent",PARTNER:"type_partner",REFERRED_BY:"type_referred_by",RELATIVE:"type_relative",SISTER:"type_sister",SPOUSE:"type_spouse",OTHER:"type_other"});var Reminder=PropertyBase.create({data:[{dbFieldName:"",defaultValue:"",setterName:"setValue",getterName:"getValue"}]});var Ringtone=PropertyBase.create({data:[{dbFieldName:"name",defaultValue:"",setterName:"setName",getterName:"getName"},{dbFieldName:"location",defaultValue:"",setterName:"setLocation",getterName:"getLocation"}]});var CallAlert=PropertyBase.create({data:[{dbFieldName:"alert",defaultValue:"",setterName:"setAlert",getterName:"getAlert"}]});var CallAction=PropertyBase.create({data:[{dbFieldName:"action",defaultValue:"",setterName:"setAction",getterName:"getAction"}]});var MsgRingtone=PropertyBase.create({data:[{dbFieldName:"name",defaultValue:"",setterName:"setName",getterName:"getName"},{dbFieldName:"location",defaultValue:"",setterName:"setLocation",getterName:"getLocation"}]});var MsgAlert=PropertyBase.create({data:[{dbFieldName:"alert",defaultValue:"",setterName:"setAlert",getterName:"getAlert"}]});var IMsgRingtone=PropertyBase.create({data:[{dbFieldName:"name",defaultValue:"",setterName:"setName",getterName:"getName"},{dbFieldName:"location",defaultValue:"",setterName:"setLocation",getterName:"getLocation"}]});var IMsgAlert=PropertyBase.create({data:[{dbFieldName:"alert",defaultValue:"",setterName:"setAlert",getterName:"getAlert"}]});var SearchTerm=PropertyBase.create({data:[{dbFieldName:"",defaultValue:"",setterName:"setValue",getterName:"getValue"}]});var SimEntryType=PropertyBase.create({data:[{dbFieldName:"",defaultValue:"",setterName:"setValue",getterName:"getValue"}]});var SimIndex=PropertyBase.create({data:[{dbFieldName:"",defaultValue:-1,setterName:"setValue",getterName:"getValue"}]});var SearchTerm=PropertyBase.create({data:[{dbFieldName:"",defaultValue:"",setterName:"setValue",getterName:"getValue"}]});var SimEntryType=PropertyBase.create({data:[{dbFieldName:"",defaultValue:"",setterName:"setValue",getterName:"getValue"}]});var SimIndex=PropertyBase.create({data:[{dbFieldName:"",defaultValue:-1,setterName:"setValue",getterName:"getValue"}]});var SortKey=exports.SortKey=PropertyBase.create({data:[{dbFieldName:"",defaultValue:"",setterName:"setValue",getterName:"getValue"}]});
 SortKey.generateSortKey=function(person,optionalConfigParams){var future=new Future,configParams;future.now(function(){Assert.require(person,"SortKey.generateSortKey requires a person that is truthy");configParams=optionalConfigParams||{};if(configParams.listSortOrder)return true;else var appPrefs=new AppPrefs(future.callback(function(){var dummy=future.result;configParams.listSortOrder=appPrefs.get(AppPrefs.Pref.listSortOrder);future.result=true}))});future.then(function(){var dummy=future.result;
 return SortKey._generateSortKeyFromSortOrder(person,configParams)});return future};
 SortKey._generateSortKeyFromSortOrder=function(person,configParams){var future=new Future,givenName="",familyName="",companyName="",displayName="";future.now(function(){var name,company;Assert.require(person,"SortKey.generateSortKey requires a person that is truthy");Assert.requireObject(configParams,"SortKey.generateSortKey requires an object as the configParams");Assert.requireString(configParams.listSortOrder,"SortKey.generateSortKey requires a listSortOrder that is a string");if(person instanceof
@@ -269,8 +269,8 @@
 SpeedDialHash.prototype.setPlainValue=function(value){this.setHashedPhoneNumber(value?Crypto.MD5.b64_md5(value):null)};SpeedDialHash.prototype.isPlainValueEqual=function(value){return value?Crypto.MD5.b64_md5(value)===this.getHashedPhoneNumber():value===this.getHashedPhoneNumber()};var SyncSource=PropertyBase.create({data:[{dbFieldName:"name",defaultValue:null,setterName:"setName",getterName:"getName"},{dbFieldName:"extended",defaultValue:{},setterName:"setExtended",getterName:"getExtended"}]});SyncSource.prototype.equals=function(obj){if(obj instanceof SyncSource)return this.getName()===obj.getName();return false};var Tag=PropertyBase.create({data:[{dbFieldName:"",defaultValue:"",setterName:"setValue",getterName:"getValue"}]});var Url=exports.Url=PropertyBase.create({data:[{dbFieldName:"value",defaultValue:"",setterName:"setValue",getterName:"getValue"},{dbFieldName:"type",defaultValue:"",setterName:"setType",getterName:"getType"},{dbFieldName:"primary",defaultValue:false,setterName:"setPrimary",getterName:"getPrimary"}]});Url.prototype.getDisplayValue=function(){return this.getValue().toLocaleLowerCase()};Url.prototype.__defineGetter__("x_displayValue",function(){return this.getDisplayValue()});
 Url.TYPE=Utils.defineConstants({HOME:"type_home",HOMEPAGE:"type_homepage",BLOG:"type_blog",FTP:"type_ftp",PROFILE:"type_profile",WORK:"type_work",OTHER:"type_other"});Url.prototype.getNormalizedHashKey=function(){return this.getValue().toLowerCase()};
 Url.Labels=Utils.createLabelFunctions([{value:Url.TYPE.HOME,displayValue:RB.$L("Home"),isPopupLabel:false},{value:Url.TYPE.HOMEPAGE,displayValue:RB.$L("Homepage"),isPopupLabel:false},{value:Url.TYPE.BLOG,displayValue:RB.$L("Blog"),isPopupLabel:false},{value:Url.TYPE.FTP,displayValue:RB.$L("FTP"),isPopupLabel:false},{value:Url.TYPE.PROFILE,displayValue:RB.$L("Profile"),isPopupLabel:false},{value:Url.TYPE.WORK,displayValue:RB.$L("Work"),isPopupLabel:false},{value:Url.TYPE.OTHER,displayValue:RB.$L("Other"),
-isPopupLabel:false}]);var AppPrefs=exports.AppPrefs=function(onReady,kind,defaults){kind=kind||AppPrefs.dbKind;defaults=defaults||{listSortOrder:ListWidget.SortOrder.defaultSortOrder,defaultAccountId:"",contactsPhoneRegion:"us"};this.ready=false;this._kind=kind;this._defaults=defaults;this._onReady=onReady;Utils.mixInBroadcaster(this);this._doQuery()};Utils.defineConstant("dbKind","com.palm.app.contacts.prefs:1",AppPrefs);
-AppPrefs.Pref=Utils.defineConstants({listSortOrder:"listSortOrder",defaultAccountId:"defaultAccountId",contactsPhoneRegion:"contactsPhoneRegion"});AppPrefs.prototype._doQuery=function(){this._future=DB.find({from:this._kind,limit:2});this._future.then(this,this._handleResult)};
+isPopupLabel:false}]);var AppPrefs=exports.AppPrefs=function(onReady,kind,defaults){kind=kind||AppPrefs.dbKind;defaults=defaults||{listSortOrder:ListWidget.SortOrder.defaultSortOrder,defaultAccountId:"",contactsPhoneRegion:"us",blockedNumbers:true,unknownNumbers:true,unknownContacts:{}};this.ready=false;this._kind=kind;this._defaults=defaults;this._onReady=onReady;Utils.mixInBroadcaster(this);this._doQuery()};Utils.defineConstant("dbKind","com.palm.app.contacts.prefs:1",AppPrefs);
+AppPrefs.Pref=Utils.defineConstants({listSortOrder:"listSortOrder",defaultAccountId:"defaultAccountId",contactsPhoneRegion:"contactsPhoneRegion",blockedNumbers:"blockedNumbers",unknownNumbers:"unknownNumbers",unknownContacts:"unknownContacts"});AppPrefs.prototype._doQuery=function(){this._future=DB.find({from:this._kind,limit:2});this._future.then(this,this._handleResult)};
 AppPrefs.prototype._handleResult=function(future){var length=future.result.results.length,shallowCopy;if(length>1)console.error("AppPrefs: Expected singleton object for "+this._kind+", but received >1 result.");else if(length===0){console.log("AppPrefs: No prefs found, creating "+this._kind);shallowCopy=_.clone(this._defaults);shallowCopy._kind=this._kind;DB.put([shallowCopy]);this._doQuery();return}this._prefs=future.result.results[0];this.ready=true;if(this._onReady){this._onReady();this._onReady=
 undefined}};AppPrefs.prototype.get=function(propName){var result=this._prefs,props;if(!this.ready){console.error("AppPrefs: Access to pref "+propName+" before prefs object is ready. Using default.");result=this._defaults}props=propName.split(".");while(result&&props.length>0)result=result[props.shift()];if(props.length>0)console.warn("AppPrefs: Invalid attempt to access pref at "+propName);return result};
 AppPrefs.prototype.set=function(propName,value){var prefs=this._prefs,mergeObj,objToSet,props,curProp;if(!this.ready){console.error("AppPrefs: Attempt to set pref "+propName+" before prefs object is ready. Ignoring.");return}mergeObj=objToSet={_id:this._prefs._id};props=propName.split(".");while(objToSet&&props.length>1){curProp=props.shift();if(!prefs[curProp])prefs[curProp]={};prefs=prefs[curProp];objToSet[curProp]={};objToSet=objToSet[curProp]}curProp=props.shift();prefs[curProp]=value;objToSet[curProp]=
@@ -332,7 +332,7 @@
 params));callback(newItems)})};return dataSourceAssistant},isRcsAvailable:function(){var future=getRcsAccounts();future.then(function(){return future.result.length>0});return future},SortOrder:Utils.defineConstants({defaultSortOrder:"LAST_FIRST",lastFirst:"LAST_FIRST",firstLast:"FIRST_LAST",companyLastFirst:"COMPANY_LAST_FIRST",companyFirstLast:"COMPANY_FIRST_LAST"})}}();var Person=Class.create({initialize:function(rawPerson){if(!rawPerson)rawPerson={};var hasDatabaseId=!!rawPerson._id,constructedFromContact=rawPerson instanceof Contact,_data={_kind:Person.kind,_id:rawPerson._id||undefined,_rev:rawPerson._rev,_del:rawPerson._del,favorite:Utils.lazyWrapper(Favorite,[rawPerson.favorite,hasDatabaseId]),contactIds:Utils.lazyWrapper(PropertyArray,[ContactId,rawPerson.contactIds,hasDatabaseId]),sortKey:Utils.lazyWrapper(SortKey,[rawPerson.sortKey,hasDatabaseId]),name:Utils.lazyWrapper(Name,
 [rawPerson.name,hasDatabaseId]),names:Utils.lazyWrapper(PropertyArray,[Name,rawPerson.names,hasDatabaseId]),nickname:Utils.lazyWrapper(Nickname,[rawPerson.nickname,hasDatabaseId]),organization:Utils.lazyWrapper(Organization,[rawPerson.organization,hasDatabaseId]),searchTerms:Utils.lazyWrapper(PropertyArray,[SearchTerm,rawPerson.searchTerms,hasDatabaseId]),emails:Utils.lazyWrapper(PropertyArray,[EmailAddressExtended,rawPerson.emails,hasDatabaseId]),phoneNumbers:Utils.lazyWrapper(PropertyArray,[PhoneNumberExtended,
 rawPerson.phoneNumbers,hasDatabaseId]),ims:Utils.lazyWrapper(PropertyArray,[IMAddressExtended,rawPerson.ims,hasDatabaseId]),photos:Utils.lazyWrapper(PersonPhotos,[rawPerson.photos,hasDatabaseId]),addresses:Utils.lazyWrapper(PropertyArray,[Address,rawPerson.addresses,hasDatabaseId]),urls:Utils.lazyWrapper(PropertyArray,[Url,rawPerson.urls,hasDatabaseId]),notes:Utils.lazyWrapper(PropertyArray,[Note,rawPerson.notes,hasDatabaseId]),birthday:Utils.lazyWrapper(Birthday,[rawPerson.birthday,hasDatabaseId]),
-anniversary:Utils.lazyWrapper(Anniversary,[rawPerson.anniversary,hasDatabaseId]),gender:Utils.lazyWrapper(Gender,[rawPerson.gender,hasDatabaseId]),reminder:Utils.lazyWrapper(Reminder,[rawPerson.reminder,hasDatabaseId]),launcherId:Utils.lazyWrapper(LauncherId,[rawPerson.launcherId,hasDatabaseId]),relations:Utils.lazyWrapper(PropertyArray,[Relation,rawPerson.relations,hasDatabaseId]),ringtone:Utils.lazyWrapper(Ringtone,[rawPerson.ringtone,hasDatabaseId])},_contacts=new PropertyArray(Contact,null),_transientFavoriteState=
+anniversary:Utils.lazyWrapper(Anniversary,[rawPerson.anniversary,hasDatabaseId]),gender:Utils.lazyWrapper(Gender,[rawPerson.gender,hasDatabaseId]),reminder:Utils.lazyWrapper(Reminder,[rawPerson.reminder,hasDatabaseId]),launcherId:Utils.lazyWrapper(LauncherId,[rawPerson.launcherId,hasDatabaseId]),relations:Utils.lazyWrapper(PropertyArray,[Relation,rawPerson.relations,hasDatabaseId]),ringtone:Utils.lazyWrapper(Ringtone,[rawPerson.ringtone,hasDatabaseId]),callAlert:Utils.lazyWrapper(CallAlert,[rawPerson.callAlert,hasDatabaseId]),callAction:Utils.lazyWrapper(CallAction,[rawPerson.callAction,hasDatabaseId]),msgRingtone:Utils.lazyWrapper(MsgRingtone,[rawPerson.msgRingtone,hasDatabaseId]),msgAlert:Utils.lazyWrapper(MsgAlert,[rawPerson.msgAlert,hasDatabaseId]),iMsgRingtone:Utils.lazyWrapper(IMsgRingtone,[rawPerson.iMsgRingtone,hasDatabaseId]),iMsgAlert:Utils.lazyWrapper(IMsgAlert,[rawPerson.iMsgAlert,hasDatabaseId])},_contacts=new PropertyArray(Contact,null),_transientFavoriteState=
 {instantiationFavoriteValue:false,favoriteDefaultsChanged:false},_beingSaved=false;this.accessor=function(fieldName){var field=_data[fieldName];Assert.requireDefined(fieldName,"fieldName must be specified for the accessor");if(field&&typeof field==="object"&&field.isLazyWrapper)field=_data[fieldName]=field.createInstance();return field};_transientFavoriteState.instantiationFavoriteValue=this.accessor("favorite").getValue();this._getTransientFavoriteState=function(){return _transientFavoriteState};
 this._isBeingSaved=function(){return _beingSaved};this._setBeingSaved=function(value){_beingSaved=value};this.setId=function(id){_data._id=id};this.setRev=function(rev){_data._rev=rev};this.getContacts=function(){return _contacts.getArray()};this.setContacts=function(contacts){_contacts.set(contacts)};this.getDBObject=function(){return Utils.getDBObjectForAllProperties(this.accessor,_.keys(_data))};this.getDirtyDBObject=function(){return Utils.getDBObjectForAllDirtyProperties(this.accessor,_.keys(_data))};
 if(constructedFromContact)this.populateFromContact(rawPerson)},populateFromContact:function(contact){Assert.requireDefined(contact,"populateFromContact requires a person argument");Assert.require(contact instanceof Contact,"populateFromContact requires a person argument that is a child of Person");this.setContacts([contact]);this.fixupNoReloadContacts();return true},getKind:function(){return this.accessor("_kind")},getId:function(){return this.accessor("_id")},getLauncherId:function(){return this.accessor("launcherId")},
@@ -346,7 +346,7 @@
 false},getContactIds:function(){return this.accessor("contactIds")},setContactWithIdAsPrimary:function(contactIdToSetPrimary){var contactIds=this.getContactIds().getArray(),indexFoundContactId=-1,removedContactId;contactIds.some(function(contactId,index){if(contactId.getValue()===contactIdToSetPrimary){indexFoundContactId=index;return true}return false});if(indexFoundContactId>0){removedContactId=contactIds[indexFoundContactId];contactIds.splice(indexFoundContactId,1);contactIds.splice(0,0,removedContactId);
 this.getContactIds().set(contactIds);return true}else return false},getSortKey:function(){return this.accessor("sortKey")},getName:function(){return this.accessor("name")},getNames:function(){return this.accessor("names")},getNickname:function(){return this.accessor("nickname")},getOrganization:function(){return this.accessor("organization")},getEmails:function(){return this.accessor("emails")},getIms:function(){return this.accessor("ims")},getPhoneNumbers:function(){return this.accessor("phoneNumbers")},
 getPhotos:function(){return this.accessor("photos")},getAddresses:function(){return this.accessor("addresses")},getUrls:function(){return this.accessor("urls")},getNotes:function(){return this.accessor("notes")},getBirthday:function(){return this.accessor("birthday")},getAnniversary:function(){return this.accessor("anniversary")},getGender:function(){return this.accessor("gender")},getSearchTerms:function(){return this.accessor("searchTerms")},getReminder:function(){return this.accessor("reminder")},
-getRelations:function(){return this.accessor("relations")},getRingtone:function(){return this.accessor("ringtone")},generateDisplayName:function(includeBasedOnField){return Utils.generateDisplayName(this,includeBasedOnField)},generateWorkInfoLine:function(){var arr=[],title=this.getOrganization().getTitle(),orgName=this.getOrganization().getName();if(title)arr.push(title);if(orgName)arr.push(orgName);return arr.join(", ")},reloadContacts:function(contactType){var future=null;contactType=contactType||
+getRelations:function(){return this.accessor("relations")},getRingtone:function(){return this.accessor("ringtone")},getCallAlert:function(){return this.accessor("callAlert")},getCallAction:function(){return this.accessor("callAction")},getMsgAlert:function(){return this.accessor("msgAlert")},getMsgRingtone:function(){return this.accessor("msgRingtone")},getIMsgAlert:function(){return this.accessor("iMsgAlert")},getIMsgRingtone:function(){return this.accessor("iMsgRingtone")},generateDisplayName:function(includeBasedOnField){return Utils.generateDisplayName(this,includeBasedOnField)},generateWorkInfoLine:function(){var arr=[],title=this.getOrganization().getTitle(),orgName=this.getOrganization().getName();if(title)arr.push(title);if(orgName)arr.push(orgName);return arr.join(", ")},reloadContacts:function(contactType){var future=null;contactType=contactType||
 this.getDefaultContactType();future=Person.getLinkedContacts(this,contactType);future.then(this,function getContactsFromResultsAndSetOnPerson(){var contacts;contacts=future.result||[];this.setContacts(contacts);future.result=contacts});return future},clearFieldsForFixup:function(){this.getName().clear();this.getNames().clear();this.getNickname().clear();this.getOrganization().clear();this.getSearchTerms().clear();this.getEmails().clear();this.getPhoneNumbers().clear();this.getIms().clear();this.getAddresses().clear();
 this.getUrls().clear();this.getNotes().clear();this.getBirthday().setValue("");this.getAnniversary().setValue("");this.getGender().setValue("");this.getPhotos().clear();this.getSortKey().setValue("");this.getRelations().clear()},fixup:function(otherPeopleBeingLinked,configParams){return this.fixupFromObjects(undefined,ContactType.EDITABLE,otherPeopleBeingLinked,configParams)},fixupNoReloadContacts:function(otherPeopleBeingLinked,configParams){return this.fixupFromObjects(this.getContacts(),ContactType.EDITABLE,
 otherPeopleBeingLinked,configParams)},fixupFromObjects:function(contacts,contactType,otherPeopleBeingLinked,configParams){var future,allPeopleBeingLinked,dupeFavoriteBackupData,notDupeFavoriteBackupData,speedDialSaver,rawNewPersonPhotos,newListContactPhoto,wasAFavoriteFromBackups=false,timingRecorder=configParams&&configParams.timingRecorder||{startTimingForJob:function(){},stopTimingForJob:function(){}};if(!contacts){timingRecorder.startTimingForJob("Fixup_Reload_Contacts");future=this.reloadContacts()}else{future=
@@ -394,7 +394,7 @@
 for(i=0;i<properties.length;i+=1){property=properties[i];isEqual=isEqual&&this.accessor(property).equals(otherPerson.accessor(property))}for(j=0;j<propertyArrays.length;j+=1){property=propertyArrays[j];tempArray=this.accessor(property).getArray();otherTempArray=otherPerson.accessor(property).getArray();for(i=0;i<tempArray.length;i+=1)isEqual=isEqual&&tempArray[i].equals(otherTempArray[i])}return isEqual},setCroppedContactPhoto:function(path,cropInfo,photoType){var future,param={};param.personId=this.getId();
 param.path=path;param.cropInfo=cropInfo;param.photoType=photoType;future=PalmCall.call("palm://com.palm.service.contacts/","setCroppedContactPhoto",param);future.then(function(){var result=future.result;PalmCall.cancel(future);future.result=result});return future},stripTmpPhoneNumberField:function(obj){var i,phoneNumber,contacts,contact,future;if(obj.length>0){this.getPhoneNumbers().clear();for(i=0;i<obj.length;i+=1){this.getPhoneNumbers().add(new PhoneNumber);phoneNumber=this.getPhoneNumbers().getArray()[i];
 phoneNumber.setValue(obj[i].value?obj[i].value:phoneNumber.getValue());phoneNumber.setType(obj[i].type?obj[i].type:phoneNumber.getType());phoneNumber.setPrimary(obj[i].primary?obj[i].primary:phoneNumber.getPrimary());phoneNumber.setNormalizedValue(obj[i].normalizedValue?obj[i].normalizedValue:phoneNumber.getNormalizedValue());phoneNumber.setSpeedDial(obj[i].speedDial?obj[i].speedDial:phoneNumber.getSpeedDial())}future=Person.getLinkedContacts(this,ContactType.RAWOBJECT);future.then(this,function(){contacts=
-future.result||[];for(i=0;i<contacts.length;i+=1){contact=new Contact(contacts[0]);contact.stripTmpPhoneNumberField();contact.save()}future.result=contacts});return future}}});Utils.defineConstant("kind","com.palm.person:1",Person);Person.PROPERTIES={objects:["favorite","sortKey","name","nickname","organization","photos","reminder","ringtone"],arrays:["contactIds","names","searchTerms","emails","phoneNumbers","ims"]};
+future.result||[];for(i=0;i<contacts.length;i+=1){contact=new Contact(contacts[0]);contact.stripTmpPhoneNumberField();contact.save()}future.result=contacts});return future}}});Utils.defineConstant("kind","com.palm.person:1",Person);Person.PROPERTIES={objects:["favorite","sortKey","name","nickname","organization","photos","reminder","ringtone","callAlert","callAction","msgAlert","msgRingtone","iMsgAlert","iMsgRingtone"],arrays:["contactIds","names","searchTerms","emails","phoneNumbers","ims"]};
 Person.generateDisplayNameFromRawPerson=function(rawPerson,includeBasedOnField){var obj=rawPerson,displayName="",basedOnField=null,fullName=Name.getFullNameFromRawObject(obj.name),org;if(fullName){displayName=fullName;basedOnField=DisplayNameType.NAME}else if(obj.nickname){displayName=obj.nickname;basedOnField=DisplayNameType.NICKNAME}if(!displayName&&obj.organization)if(obj.organization.title&&obj.organization.name){displayName=obj.organization.title+", "+obj.organization.name;basedOnField=DisplayNameType.TITLE_AND_ORGANIZATION_NAME}else if(!obj.organization.title&&
 obj.organization.name){displayName=obj.organization.name;basedOnField=DisplayNameType.ORGANIZATION_NAME}else if(obj.organization.title&&!obj.organization.name){displayName=obj.organization.title;basedOnField=DisplayNameType.TITLE}if(!displayName)if(obj.emails&&obj.emails.length){displayName=obj.emails[0].value;basedOnField=DisplayNameType.EMAIL}else if(obj.ims&&obj.ims.length){displayName=obj.ims[0].value;basedOnField=DisplayNameType.IM}else if(obj.phoneNumbers&&obj.phoneNumbers.length){displayName=
 obj.phoneNumbers[0].value;basedOnField=DisplayNameType.PHONE}else{displayName=RB.$L("[No Name Available]");basedOnField=DisplayNameType.NONE}if(includeBasedOnField)return{displayName:displayName,basedOnField:basedOnField};else return displayName};Person.getDisplayablePersonAndContactsById=function(id){return Person.getPersonAndContactsById(id,PersonType.DISPLAYABLE,ContactType.DISPLAYABLE)};
--- .orig/usr/palm/frameworks/mojo/builtins/palmInitFramework299.js
+++ /usr/palm/frameworks/mojo/builtins/palmInitFramework299.js
@@ -309,7 +309,7 @@
 1];var jsonString=decodeURIComponent(matchingCookieValue);if(jsonString.length>0&&jsonString!=="undefined")result=JSON.parse(decodeURIComponent(matchingCookieValue))}}return result};
 Mojo.Model.Cookie.prototype.put=function put(objectToStore,expirationDate){var objectData=encodeURIComponent(JSON.stringify(objectToStore));var terms=[];terms.push(objectData);if(expirationDate!==undefined)terms.push("expires="+expirationDate.toGMTString());var cookieText=terms.join("; ");var cookieTotal=this.prefixedName+"="+cookieText;this.document.cookie=cookieTotal};Mojo.Model.Cookie.prototype.remove=function remove(){this.put("",new Date)};Mojo.Controller.DashboardStageAssistant=function(){};
 Mojo.Controller.DashboardStageAssistant.prototype={setCallbacks:function(cbs){this.cleanup=cbs.cleanup},finalizeStageUpdate:function(callbackArgs,poppedSceneData){var dashboard=callbackArgs.dashboard;var content=_.clone(_.last(dashboard.contents));var callbacks=dashboard.callbacks;content._dashboardCount=typeof content.dashboardCount=="number"?content.dashboardCount:dashboard.contents.length;var template=dashboard._getSceneTemplate(content._dashboardCount);var sceneName=dashboard.sceneName;var stageController=
-this.controller;dashboard.currentTemplate=template;dashboard.stageController=stageController;stageController.indicateNewContent(true);this.dashboard=dashboard;if(content.rightIcon)content.rightHTML=Mojo.View.render({object:content,template:Mojo.Widget.getSystemTemplatePath("dashboard/right-icon-template")});else if(content.rightTemplate)content.rightHTML=Mojo.View.render({object:content,templateRoot:content.templateRoot,template:content.rightTemplate});this.setCallbacks(callbacks);stageController.pushScene({name:sceneName,
+this.controller;dashboard.currentTemplate=template;dashboard.stageController=stageController;this.dashboard=dashboard;if(content.rightIcon)content.rightHTML=Mojo.View.render({object:content,template:Mojo.Widget.getSystemTemplatePath("dashboard/right-icon-template")});else if(content.rightTemplate)content.rightHTML=Mojo.View.render({object:content,templateRoot:content.templateRoot,template:content.rightTemplate});this.setCallbacks(callbacks);stageController.pushScene({name:sceneName,
 templateRoot:dashboard.templateRoot,sceneTemplate:template,templateModel:content,assistantConstructor:Mojo.Controller.DashboardSceneAssistant},callbacks,template,content)}};Mojo.Controller.DashboardSceneAssistant=function(cbs,template,content){this.callbacks=cbs;this.currentTemplate=template;this.content=content};
 Mojo.Controller.DashboardSceneAssistant.prototype={setup:function(){this.tapSwitcher=this.tapSwitcher.bind(this);this.startListening();this.callbacks.onSuccess(this.controller)},setTemplate:function(template,templateData,templateRoot){if(template!==this.currentTemplate){this.stopListening();this.controller.sceneElement.innerHTML=Mojo.View.render({object:templateData,templateRoot:templateRoot,template:template});this.startListening()}},startListening:function(){var ctrl=this.controller;ctrl.listen(ctrl.sceneElement,
 Mojo.Event.tap,this.tapSwitcher)},tapSwitcher:function(tapEvent){var target=tapEvent.target;var tapElement=Mojo.View.getParentWithAttribute(target,"x-mojo-dashboard-target");var tapAttribute=tapElement.getAttribute("x-mojo-dashboard-target");var cb=this.callbacks[tapAttribute+"TapHandler"];if(cb)cb(this.content)},stopListening:function(){var ctrl=this.controller;ctrl.stopListening(ctrl.sceneElement,Mojo.Event.tap,this.tapSwitcher)},cleanup:function(){this.stopListening()}};Mojo.Animation={};Mojo.Animation.kAnimationDuration=0.1;Mojo.Animation.kAppMenuAnimationDuration=0.08;Mojo.Animation.kScrimAnimationDuration=Mojo.Animation.kAppMenuAnimationDuration*0.8;Mojo.Animation.kCSSAnimationDuration=0.1;Mojo.Animation.kCSSAnimationTimingFunction="ease-out";Mojo.Animation.kCSSAppMenuAnimationDuration=0.1;Mojo.Animation.kCSSAppMenuAnimationTimingFunction="ease-out";Mojo.Animation.kCSSScrimAnimationDuration=0.1;Mojo.Animation.kCSSScrimAnimationTimingFunction=undefined;
@@ -432,12 +432,12 @@
 }};requireFunc.__logLevel="error";Mojo[requireName]=requireFunc;assertFunc=function(){var result;result=Mojo[privateName].apply(null,arguments);return result};assertFunc.__logLevel="warn";Mojo[assertName]=assertFunc});Mojo.Gesture={};Mojo.Gesture._isFeedbackDisabled=function(target){return target.getAttribute(Mojo.Gesture.selectionHighlightFeedbackAttribute)===Mojo.Gesture.disableFeedback};Mojo.Gesture.index=0;Mojo.Gesture.PASS_EVENT_ATTRIBUTE="x-palm-pass-event";Mojo.Gesture.gestureAttribute="x-mojo-gesture";Mojo.Gesture.selectionHighlightAttribute="x-mojo-tap-highlight";Mojo.Gesture.selectionHighlightFeedbackAttribute="x-mojo-touch-feedback";Mojo.Gesture.consumesEnterAttribute="x-mojo-consumes-enter";
 Mojo.Gesture.momentarySelection="momentary";Mojo.Gesture.immediateSelection="immediate";Mojo.Gesture.persistentSelection="persistent";Mojo.Gesture.immediateFeedback="immediate";Mojo.Gesture.spontaneousFeedback="spontaneous";Mojo.Gesture.disableFeedback="none";Mojo.Gesture.delayedFeedback="delayed";Mojo.Gesture.immediatePersistentFeedback="immediatePersistent";Mojo.Gesture.delayedPersistentFeedback="delayedPersistent";Mojo.Gesture.delimiter=/ +/;Mojo.Gesture._newSelectionFeedback="new";
 Mojo.Gesture._oldSelectionFeedback="deprecated";Mojo.Gesture.CONSUMED_EVENT="consume";Mojo.Gesture.ALLOW_EVENT="allow";Mojo.Gesture.IGNORED_EVENT=false;
-Mojo.Gesture.setup=function(targetDocument){targetDocument.addEventListener("mousedown",Mojo.Gesture.mouseDownHandler,false);targetDocument.addEventListener("mousemove",Mojo.Gesture.mouseMoveHandler,false);targetDocument.addEventListener("mouseup",Mojo.Gesture.mouseUpHandler,false);targetDocument.addEventListener(Mojo.Event.dragStart,Mojo.Gesture.dragStartCaptureHandler,true);targetDocument.addEventListener(Mojo.Event.dragStart,Mojo.Gesture.dragStartHandler,false);if(Mojo.Gesture.translateReturnKey){targetDocument.addEventListener("keydown",
+Mojo.Gesture.setup=function(targetDocument){this.hapticFeedback=false;this.hapticFeedbackRequest=new Mojo.Service.Request("palm://com.palm.systemservice/",{method:'getPreferences',parameters:{"keys":["hapticFeedback"],"subscribe":true},onSuccess:function(response){if(response&&response.hapticFeedback!=undefined){this.hapticFeedback=response.hapticFeedback;}}.bind(this)});targetDocument.addEventListener("mousedown",Mojo.Gesture.mouseDownHandler.bind(this),false);targetDocument.addEventListener("mousemove",Mojo.Gesture.mouseMoveHandler,false);targetDocument.addEventListener("mouseup",Mojo.Gesture.mouseUpHandler,false);targetDocument.addEventListener(Mojo.Event.dragStart,Mojo.Gesture.dragStartCaptureHandler,true);targetDocument.addEventListener(Mojo.Event.dragStart,Mojo.Gesture.dragStartHandler,false);if(Mojo.Gesture.translateReturnKey){targetDocument.addEventListener("keydown",
 Mojo.Gesture.keydownHandler,true);targetDocument.addEventListener("keyup",Mojo.Gesture.keyupHandler,true)}};
 Mojo.Gesture.cleanup=function(targetDocument){var currentGesture;targetDocument.removeEventListener("mousedown",Mojo.Gesture.mouseDownHandler,false);targetDocument.removeEventListener("mousemove",Mojo.Gesture.mouseMoveHandler,false);targetDocument.removeEventListener("mouseup",Mojo.Gesture.mouseUpHandler,false);targetDocument.removeEventListener(Mojo.Event.dragStart,Mojo.Gesture.dragStartCaptureHandler,true);targetDocument.removeEventListener(Mojo.Event.dragStart,Mojo.Gesture.dragStartHandler,false);
-if(Mojo.Gesture.translateReturnKey){targetDocument.removeEventListener("keydown",Mojo.Gesture.keydownHandler,true);targetDocument.removeEventListener("keyup",Mojo.Gesture.keyupHandler,true)}currentGesture=Mojo.Gesture.gestureForWindow(targetDocument.defaultView);if(currentGesture){Mojo.Gesture.saveGesture(targetDocument.defaultView,undefined);currentGesture.finish()}};
+if(Mojo.Gesture.translateReturnKey){targetDocument.removeEventListener("keydown",Mojo.Gesture.keydownHandler,true);targetDocument.removeEventListener("keyup",Mojo.Gesture.keyupHandler,true)}currentGesture=Mojo.Gesture.gestureForWindow(targetDocument.defaultView);if(currentGesture){Mojo.Gesture.saveGesture(targetDocument.defaultView,undefined);currentGesture.finish()}if(this.hapticFeedbackRequest){this.hapticFeedbackRequest.cancel();}};
 Mojo.Gesture.windowForEvent=function windowForEvent(uiEvent){var targetWindow;if(!uiEvent)return;targetWindow=uiEvent.view;if(!targetWindow.Mojo)targetWindow=undefined;return targetWindow};Mojo.Gesture.gestureForWindow=function gestureForWindow(targetWindow){var gesture;if(targetWindow)gesture=targetWindow.Mojo._mojoCurrentGesture;return gesture};Mojo.Gesture.gestureForEvent=function gestureForEvent(uiEvent){return Mojo.Gesture.gestureForWindow(Mojo.Gesture.windowForEvent(uiEvent))};
-Mojo.Gesture.saveGesture=function saveGesture(targetWindow,gesture){if(targetWindow)targetWindow.Mojo._mojoCurrentGesture=gesture};Mojo.Gesture.mouseDownHandler=function(event){Mojo.Event._logEvent("got",event,event&&event.target);var currentGesture=Mojo.Gesture.gestureForEvent(event);if(event&&!Mojo.Gesture.disableEventHandling&&!currentGesture&&event.button===0){currentGesture=new Mojo.Gesture.Recognizer(event);Mojo.Gesture.saveGesture(Mojo.Gesture.windowForEvent(event),currentGesture)}};
+Mojo.Gesture.saveGesture=function saveGesture(targetWindow,gesture){if(targetWindow)targetWindow.Mojo._mojoCurrentGesture=gesture};Mojo.Gesture.mouseDownHandler=function(event){Mojo.Event._logEvent("got",event,event&&event.target);var currentGesture=Mojo.Gesture.gestureForEvent(event);if(event&&!Mojo.Gesture.disableEventHandling&&!currentGesture&&event.button===0){currentGesture=new Mojo.Gesture.Recognizer(event,this.hapticFeedback);Mojo.Gesture.saveGesture(Mojo.Gesture.windowForEvent(event),currentGesture)}};
 Mojo.Gesture.mouseMoveHandler=function(event){var currentGesture=Mojo.Gesture.gestureForEvent(event);if(event&&!Mojo.Gesture.disableEventHandling&&currentGesture&&event.button===0){Mojo.Event._logEvent("got",event,event.target);currentGesture.mouseMove(event)}};
 Mojo.Gesture.mouseUpHandler=function(event){Mojo.Event._logEvent("got",event,event&&event.target);var currentGesture=Mojo.Gesture.gestureForEvent(event);if(event&&!Mojo.Gesture.disableEventHandling&&currentGesture&&event.button===0){currentGesture.mouseUp(event);Mojo.Gesture.saveGesture(event.view,undefined)}};
 Mojo.Gesture.dragStartCaptureHandler=function(event){var ev=event.down;var currentGesture=Mojo.Gesture.gestureForEvent(ev);if(ev&&!Mojo.Gesture.disableEventHandling&&currentGesture&&ev.button===0){Mojo.Event._logEvent("got",ev,ev.target);currentGesture.dragStartCapture(ev)}};
@@ -447,7 +447,7 @@
 Mojo.Gesture.recordEvents=function(record){Mojo.Gesture.doRecordEvents=record;if(record)Mojo.Gesture.eventList=[];else delete Mojo.Gesture.eventList};Mojo.Gesture.calculateDistance=function(pt1,pt2){return{x:pt1.x-pt2.x,y:pt1.y-pt2.y}};Mojo.Gesture.calculateAbsDistance=function(pt1,pt2){return{x:Math.abs(pt1.x-pt2.x),y:Math.abs(pt1.y-pt2.y)}};Mojo.Gesture.shouldStopEventOnElement=function(element){var nativeEvent=element.getAttribute(Mojo.Gesture.PASS_EVENT_ATTRIBUTE);return nativeEvent===null};
 Mojo.Gesture.simulateClick=function simulateClick(element,screenX,screenY){if(!PalmSystem.simulated){var targetWindow=element.ownerDocument.defaultView;Mojo.Gesture.withMouseEventHandlingDisabled(function(){targetWindow.PalmSystem.simulateMouseClick(screenX,screenY,true);targetWindow.PalmSystem.simulateMouseClick(screenX,screenY,false)})}};
 Mojo.Gesture.handlesReturnKey=function handlesReturnKey(node){if(node===undefined||node===null)return false;if(node.hasAttribute(Mojo.Gesture.consumesEnterAttribute))return true;if(node.tagName!=="TEXTAREA")return Mojo.Dom.getStyle(node,"-webkit-user-modify")==="read-write";return true};
-Mojo.Gesture.Recognizer=function(event){var tagName,downHighlightTarget,downHighlightMode,applySelectHighlightTimerHandler;this.downTarget=event.target;this.document=event.target&&event.target.ownerDocument;this.downShift=event.shiftKey;if(Mojo.Gesture.doRecordEvents)Mojo.Gesture.eventList=[event];this.originalPointer=Mojo.Event.pointer(event);this.lastPointer=this.originalPointer;this.filter={x:true,y:true};this.index=Mojo.Gesture.index;Mojo.Gesture.index+=1;this.holdTimer=_.delay(this.mouseHeld.bind(this),
+Mojo.Gesture.Recognizer=function(event,hapticFeedback){this.hapticFeedback=hapticFeedback;var tagName,downHighlightTarget,downHighlightMode,applySelectHighlightTimerHandler;this.downTarget=event.target;this.document=event.target&&event.target.ownerDocument;this.downShift=event.shiftKey;if(Mojo.Gesture.doRecordEvents)Mojo.Gesture.eventList=[event];this.originalPointer=Mojo.Event.pointer(event);this.lastPointer=this.originalPointer;this.filter={x:true,y:true};this.index=Mojo.Gesture.index;Mojo.Gesture.index+=1;this.holdTimer=_.delay(this.mouseHeld.bind(this),
 this.kHoldTime*1E3);this.downEvent=_.extend({},event);this.velocityHistory=[];this.velocity={x:0,y:0};this.simulateFlick=PalmSystem.simulated;tagName=this.downTarget.tagName;this.preventTap=Mojo.Gesture.doPreventNextTap;Mojo.Gesture.doPreventNextTap=false;if(!PalmSystem.simulated)this.maybeStopEvent(event);else if(tagName!=="INPUT"&&tagName!=="TEXTAREA"&&tagName!=="OBJECT")this.maybeStopEvent(event);downHighlightTarget=Mojo.View.findParentByAttribute(this.downTarget,this.document,Mojo.Gesture.selectionHighlightFeedbackAttribute);
 if(downHighlightTarget){this.downHighlightVersion=Mojo.Gesture._newSelectionFeedback;downHighlightMode=downHighlightTarget.getAttribute(Mojo.Gesture.selectionHighlightFeedbackAttribute);this.downMode=downHighlightMode;if(downHighlightMode===Mojo.Gesture.immediateFeedback||downHighlightMode===Mojo.Gesture.spontaneousFeedback||downHighlightMode===Mojo.Gesture.immediatePersistentFeedback)this.applySelectHighlight(downHighlightTarget);applySelectHighlightTimerHandler=this.applySelectHighlightFromTimer.bind(this);
 this.selectTimer=_.delay(applySelectHighlightTimerHandler,this.kSelectTime*1E3);this.clearSelected=this.clearSelected.bind(this)}else{downHighlightTarget=Mojo.View.findParentByAttribute(this.downTarget,this.document,Mojo.Gesture.selectionHighlightAttribute);if(downHighlightTarget){this.downHighlightVersion=Mojo.Gesture._oldSelectionFeedback;downHighlightMode=downHighlightTarget.getAttribute(Mojo.Gesture.selectionHighlightAttribute);if(downHighlightMode===Mojo.Gesture.immediateSelection)this.applySelectHighlight(downHighlightTarget)}applySelectHighlightTimerHandler=
@@ -464,7 +464,7 @@
 highlightedElement.getAttribute(Mojo.Gesture.selectionHighlightFeedbackAttribute);if(downHighlightMode){this.downHighlightVersion=Mojo.Gesture._newSelectionFeedback;downHighlightMode=highlightedElement.getAttribute(Mojo.Gesture.selectionHighlightFeedbackAttribute);if(force||downHighlightMode!==Mojo.Gesture.immediatePersistentFeedback&&downHighlightMode!==Mojo.Gesture.delayedPersistentFeedback)Mojo.Dom.removeClassName(highlightedElement,Mojo.Gesture.kSelectedClassName);delete this.highlightedElement;
 delete this.highlightTargetTime;delete Mojo.Gesture.highlightTarget;delete Mojo.Gesture.highlightTargetTime}else{downHighlightMode=highlightedElement.getAttribute(Mojo.Gesture.selectionHighlightAttribute);this.downHighlightVersion=Mojo.Gesture._oldSelectionFeedback;if(force||downHighlightMode!==Mojo.Gesture.persistentSelection)Mojo.Dom.removeClassName(highlightedElement,Mojo.Gesture.kSelectedClassName);delete this.highlightedElement;delete this.highlightTargetTime;delete Mojo.Gesture.highlightTarget;
 delete Mojo.Gesture.highlightTargetTime}}},clearSelectedDelayed:function(){var win;if(this.downMode===Mojo.Gesture.spontaneousFeedback){win=Mojo.Gesture.windowForEvent(this.downEvent);if(win){win.setTimeout(this.clearSelected,100);return}}_.delay(this.clearSelected,200)},makeFocusedWidgetSendChanges:function(focusedElement,triggeringEvent){var widgetController,widgetAssistant;var enclosingWidget=Mojo.View.findParentByAttribute(focusedElement,focusedElement.ownerDocument,"x-mojo-element");if(enclosingWidget){widgetController=
-enclosingWidget._mojoController;if(widgetController){widgetAssistant=widgetController.assistant;if(widgetAssistant&&widgetAssistant.sendChanges)widgetAssistant.sendChanges(triggeringEvent)}}},sendTap:function(triggeringEvent){var tapEvent,focusedElement;focusedElement=Mojo.View.getFocusedElement(this.downTarget.ownerDocument.body);if(focusedElement)this.makeFocusedWidgetSendChanges(focusedElement,triggeringEvent);tapEvent=Mojo.Event.send(this.downTarget,Mojo.Event.tap,Mojo.Event.addModKeys(triggeringEvent,
+enclosingWidget._mojoController;if(widgetController){widgetAssistant=widgetController.assistant;if(widgetAssistant&&widgetAssistant.sendChanges)widgetAssistant.sendChanges(triggeringEvent)}}},sendTap:function(triggeringEvent){if(this.hapticFeedback){this.serviceRequest=new Mojo.Service.Request("palm://com.palm.vibrate/",{method:'vibrate',parameters:{'period':0,'duration':50}});}var tapEvent,focusedElement;focusedElement=Mojo.View.getFocusedElement(this.downTarget.ownerDocument.body);if(focusedElement)this.makeFocusedWidgetSendChanges(focusedElement,triggeringEvent);tapEvent=Mojo.Event.send(this.downTarget,Mojo.Event.tap,Mojo.Event.addModKeys(triggeringEvent,
 {down:this.downEvent,count:this.downEvent.detail,up:triggeringEvent}));if(!tapEvent.defaultPrevented&&Mojo.View.isTextField(this.downTarget))Mojo.Gesture.simulateClick(this.downTarget,this.downEvent.pageX,this.downEvent.pageY)},simulateMouseDown:function(screenX,screenY){if(!PalmSystem.simulated)Mojo.Gesture.withMouseEventHandlingDisabled(function(){PalmSystem.simulateMouseClick(screenX,screenY,true)})},notDraggingAndInSameTarget:function(uiEvent){var feedbackAttr=Mojo.Gesture.selectionHighlightFeedbackAttribute;
 var highlightAttr=Mojo.Gesture.selectionHighlightAttribute;var downHighlightTarget,upHighlightTarget;if(this.dragSentButNotHandled){downHighlightTarget=Mojo.View.findParentByAttribute(this.downTarget,this.document,feedbackAttr);if(downHighlightTarget||this.downHighlightVersion===Mojo.Gesture._newSelectionFeedback)upHighlightTarget=Mojo.View.findParentByAttribute(uiEvent.target,this.document,feedbackAttr)||uiEvent.target;else{downHighlightTarget=Mojo.View.findParentByAttribute(this.downTarget,this.document,
 highlightAttr)||this.downTarget;upHighlightTarget=Mojo.View.findParentByAttribute(uiEvent.target,this.document,highlightAttr)||uiEvent.target}if(downHighlightTarget===upHighlightTarget)return true}return false},finish:function(event){var mojoEvent,sendFlick,currentPointer;this.stopSelectTimer();this.clearSelectedDelayed();window.clearTimeout(this.holdTimer);if(!event)return;currentPointer=Mojo.Event.pointer(event);if(this.simulateFlick){sendFlick=Math.abs(this.velocity.x)>this.kFlickThreshold||Math.abs(this.velocity.y)>
@@ -505,7 +505,7 @@
 animate:function(){var pos,newPos,diff;if(!this.scroller)return;if(this.scrollDeltas.x||this.scrollDeltas.y){pos=this.scroller.mojo.getState();this.scroller.mojo.scrollTo(pos.left-this.scrollDeltas.x,pos.top-this.scrollDeltas.y);newPos=this.scroller.mojo.getState();if(!this.options.preventVertical){diff=pos.top-newPos.top;this.startTop-=diff;this.hitStartY-=diff;this.element.style.top=parseInt(this.element.style.top,10)-diff+"px"}if(!this.options.preventHorizontal){diff=pos.left-newPos.left;this.startLeft-=
 diff;this.hitStartX-=diff;this.element.style.left=parseInt(this.element.style.left,10)-diff+"px"}this.checkContainer()}},findNewContainer:function(leftDelta,topDelta){var i;for(i=0;i<this.containers.length;i++)if(this.containers[i].dragDatatype==this.options.dragDatatype&&this.hitTestContainer(leftDelta,topDelta,this.containers[i])){this.startHovering(this.containers[i]);break}},startHovering:function(container){var dt=container.element._mojoDropTarget;if(this.currentContainer!==undefined)this.stopHovering();
 this.currentContainer=container;Mojo.Dom.addClassName(container.element,Mojo.Drag.kContainerClass);if(dt.dragEnter)try{dt.dragEnter(this.element)}catch(e){Mojo.Log.logException(e,"WARNING: Caught exception in dragndrop container.dragEnter(): ")}},stopHovering:function(dontLeave){var dt=this.currentContainer.element._mojoDropTarget;Mojo.Dom.removeClassName(this.currentContainer.element,Mojo.Drag.kContainerClass);this.currentContainer=undefined;if(dt.dragLeave&&!dontLeave)try{dt.dragLeave(this.element)}catch(e){Mojo.Log.logException(e,
-"WARNING: Caught exception in dragndrop container.dragLeave(): ")}},tapEvent:function(event){this.dragEnd(event)},cleanup:function(){var element=this.element;var scene=this.scene;var self=this;Mojo.Event.stopListening(element,Mojo.Event.dragging,self.dragging);Mojo.Event.stopListening(element,Mojo.Event.dragEnd,self.dragEnd);Mojo.Event.stopListening(element,Mojo.Event.dragStart,self.dragStart);Mojo.Event.stopListening(element,Mojo.Event.tap,self.tapEvent);var f=function(){if(element&&element.parent)Mojo.Event.stopListening(element.parent,
+"WARNING: Caught exception in dragndrop container.dragLeave(): ")}},tapEvent:function(event){if(this.hapticFeedback){this.serviceRequest=new Mojo.Service.Request("palm://com.palm.vibrate/",{method:'vibrate',parameters:{'period':0,'duration':75}});}this.dragEnd(event)},cleanup:function(){var element=this.element;var scene=this.scene;var self=this;Mojo.Event.stopListening(element,Mojo.Event.dragging,self.dragging);Mojo.Event.stopListening(element,Mojo.Event.dragEnd,self.dragEnd);Mojo.Event.stopListening(element,Mojo.Event.dragStart,self.dragStart);Mojo.Event.stopListening(element,Mojo.Event.tap,self.tapEvent);var f=function(){if(element&&element.parent)Mojo.Event.stopListening(element.parent,
 "click",self.clickAfterDrag,true);else Mojo.Event.stopListening(scene.document,"click",self.clickAfterDrag,true)};_.defer(f);if(self.scrollAnimating){self.queue.remove(self);self.scrollAnimating=false}if(!self.options.preventDropReset)self.resetElement()},resetElement:function(){Mojo.Dom.removeClassName(this.element,this.draggingClass);this.element.style.position=this.origPosition;this.element.style.cssText=this.origStyleCSSText},collectContainerInfo:function(container){var position=Mojo.Dom.viewportOffset(container);
 var containerInfo=Mojo.Dom.getDimensions(container);containerInfo.element=container;containerInfo.top=position.top;containerInfo.left=position.left;containerInfo.dragDatatype=container._mojoDropTarget.dragDatatype;return containerInfo},hitTestContainer:function(leftDelta,topDelta,container){var left=this.hitStartX+leftDelta;var top=this.hitStartY+topDelta;if(left<container.left||left>container.left+container.width||top<container.top||top>container.top+container.height)return false;return true},scrollCurve:[40,
 20,10,5,0,0,0,0,0,0,0,0,0,0,0,0,-5,-10,-20,-40],calcScrollDeltas:function(event){var yDelta=0;var xDelta=0;if(this.scroller){if(!this.options.preventVertical){yDelta=(event.move.y-this.scrollerPos.top)/(this.scrollerSize.height-this.scrollerPos.top);yDelta=Math.round(this.interpolate(yDelta,this.scrollCurve))}if(!this.options.preventHorizontal){xDelta=(event.move.x-this.scrollerPos.left)/(this.scrollerSize.width-this.scrollerPos.left);xDelta=Math.round(this.interpolate(xDelta,this.scrollCurve))}}return{x:xDelta,
--- .orig/usr/palm/frameworks/mojo/builtins/palmInitFramework367.js
+++ /usr/palm/frameworks/mojo/builtins/palmInitFramework367.js
@@ -10732,7 +10732,14 @@
 
 
 Mojo.Gesture.setup=function(targetDocument){
-targetDocument.addEventListener("mousedown",Mojo.Gesture.mouseDownHandler,false);
+this.hapticFeedback=false;
+this.hapticFeedbackRequest=new Mojo.Service.Request("palm://com.palm.systemservice/",{method:'getPreferences',parameters:{"keys":["hapticFeedback"],"subscribe":true},
+onSuccess:function(response){
+if(response&&response.hapticFeedback!=undefined){
+this.hapticFeedback=response.hapticFeedback;
+}
+}.bind(this)});
+targetDocument.addEventListener("mousedown",Mojo.Gesture.mouseDownHandler.bind(this),false);
 targetDocument.addEventListener("mousemove",Mojo.Gesture.mouseMoveHandler,false);
 targetDocument.addEventListener("mouseup",Mojo.Gesture.mouseUpHandler,false);
 if(Mojo.Gesture.translateReturnKey){
@@ -10756,6 +10763,9 @@
 Mojo.Gesture.saveGesture(targetDocument.defaultView,undefined);
 currentGesture.finish();
 }
+if(this.hapticFeedbackRequest){
+this.hapticFeedbackRequest.cancel();
+}
 };
 
 
@@ -10797,7 +10807,7 @@
 Mojo.Event._logEvent("got",event,event&&event.target);
 var currentGesture=Mojo.Gesture.gestureForEvent(event);
 if(event&&!Mojo.Gesture.disableEventHandling&&!currentGesture&&event.button===0){
-currentGesture=new Mojo.Gesture.Recognizer(event);
+currentGesture=new Mojo.Gesture.Recognizer(event,this.hapticFeedback);
 Mojo.Gesture.saveGesture(Mojo.Gesture.windowForEvent(event),currentGesture);
 }
 };
@@ -10930,7 +10940,8 @@
 
 Mojo.Gesture.Recognizer=Class.create({
 
-initialize:function(event){
+initialize:function(event,hapticFeedback){
+this.hapticFeedback=hapticFeedback;
 var tagName,downHighlightTarget,downHighlightMode,applySelectHighlightTimerHandler;
 this.downTarget=event.target;
 this.document=event.target&&event.target.ownerDocument;
@@ -11251,6 +11262,9 @@
 
 
 sendTap:function(triggeringEvent){
+if(this.hapticFeedback){
+this.serviceRequest=new Mojo.Service.Request("palm://com.palm.vibrate/",{method:'vibrate',parameters:{'period':0,'duration':50}});
+}
 var tapEvent,focusedElement;
 focusedElement=Mojo.View.getFocusedElement(this.downTarget.ownerDocument.body);
 if(focusedElement){
--- .orig/usr/palm/frameworks/mojo/submissions/367/templates/picker/picker.html
+++ /usr/palm/frameworks/mojo/submissions/367/templates/picker/picker.html
@@ -1,4 +1,6 @@
 <div x-mojo-focus-highlight="true">
-  <div x-mojo-picker-label class="label left mv-picker-label">#{label}</div>
-	<div class="capsules-container">#{-capsules}</div>        
-</div>
\ No newline at end of file
+  <div class="mv-picker-capsules-container">
+	 <div class="capsules-container">#{-capsules}</div>        
+  </div>
+  <div x-mojo-picker-label class="title left mv-picker-label">#{label}</div> 
+</div>
--- .orig/usr/palm/frameworks/mojo2/submissions/99/stylesheets/global.css
+++ /usr/palm/frameworks/mojo2/submissions/99/stylesheets/global.css
@@ -386,7 +386,7 @@
 
 .sliding-toggle {
   height: 48px;
-  margin: 1px 0 0 0;
+  margin: 4px 0 0 0;
   border-width: 9px 29px 9px 29px;
   -webkit-box-sizing: border-box;
   -webkit-border-image: url(../images/header-toggle-background.png) 9 29 9 29 repeat repeat;
--- .orig/usr/palm/frameworks/mojo2/submissions/99/stylesheets/global-lists.css
+++ /usr/palm/frameworks/mojo2/submissions/99/stylesheets/global-lists.css
@@ -393,6 +393,15 @@
   line-height: 24px;
 }
 
+.palm-list-selector.right .title {
+  text-transform: uppercase;
+  font-size: 14px;
+  color: #1f75bf;
+  text-shadow: #ffffff 0px 1px 0px;
+  margin: 18px 12px 0 0;
+  line-height: 28px;
+}
+
 .palm-row.removable .title {
   padding-left: 0;
 }
@@ -455,7 +464,15 @@
 .palm-list-selector .label,
 .palm-row .truncating-text .label,
 .palm-row .truncating-text.label {
-  max-width: 40%;
+  max-width: 50%;
+}
+
+.palm-list-selector.right .label {
+  text-transform: none;
+  font-size: 20px;
+  color: black;
+  max-width: 60%;
+  line-height: 24px;
 }
 
 .palm-row .truncating-text .label,
--- .orig/usr/palm/frameworks/mojo2/submissions/99/stylesheets/global-lists-dark.css
+++ /usr/palm/frameworks/mojo2/submissions/99/stylesheets/global-lists-dark.css
@@ -50,6 +50,22 @@
   color: #999999;
 }
 
+.palm-dark .palm-list-selector.right .title {
+  text-transform: uppercase;
+  font-size: 14px;
+  color: #aaa;
+  text-shadow: #222 0px 1px 0px;
+  line-height: 28px;
+}
+
+.palm-dark .palm-list-selector.right .label {
+  text-transform: none;
+  font-size: 20px;
+  color: white;
+  max-width: 60%;
+  line-height: 24px;
+}
+
 .palm-dark .label.mv-picker-label,
 .palm-dark .palm-row .label {
   color: #aaa;
--- .orig/usr/palm/frameworks/mojo2/submissions/99/stylesheets/global-widget-mvpicker.css
+++ /usr/palm/frameworks/mojo2/submissions/99/stylesheets/global-widget-mvpicker.css
@@ -61,12 +61,18 @@
   padding-top: 19px;
 }
 
-.label.left.mv-picker-label {
-  float: left;
-  margin: 20px 4px 0px 13px;
-  padding-right: 5px;
+.title.left.mv-picker-label {
+/*  float: left;*/
+/*  margin: 15px 4px 0px 13px;*/
+/*  padding-right: 5px;*/
+  padding: 13px 14px 15px 14px;
 }
 
+.mv-picker-capsules-container {
+	float:right;
+	margin-right: 5px;
+},
+
 .focused .mv-picker-label {
   z-index: 99000;
   position: relative;
@@ -89,7 +95,7 @@
   -webkit-box-sizing: border-box;
   display: inline-block;
   position: relative;
-  margin: 2px 5px -2px -1px;
+  margin: 0px 5px -2px -1px;
 }
 
 .palm-dialog-box .label.left.mv-picker-label {
--- .orig/usr/palm/frameworks/mojo2/submissions/99/templates/picker/picker.html
+++ /usr/palm/frameworks/mojo2/submissions/99/templates/picker/picker.html
@@ -1,4 +1,6 @@
 <div x-mojo-focus-highlight="true">
-  <div x-mojo-picker-label class="label left mv-picker-label">#{label}</div>
-	<div class="capsules-container">#{-capsules}</div>        
-</div>
\ No newline at end of file
+  <div class="mv-picker-capsules-container">
+	 <div class="capsules-container">#{-capsules}</div>        
+  </div>
+  <div x-mojo-picker-label class="title left mv-picker-label">#{label}</div> 
+</div>
--- .orig/usr/lib/luna/system/luna-systemui/app/controllers/bar-assistant.js
+++ /usr/lib/luna/system/luna-systemui/app/controllers/bar-assistant.js
@@ -15,6 +15,10 @@
 		this.show3GForEvdo = false;
 		this.showBlankStatusOnLimited = false;
 		this.minBatThresholdForUpdate = 5;
+		this.batteryNotification = "notifications";
+		this.chargerNotification = "none";
+		this.batteryNotificationFile = undefined;
+		this.chargerNotificationFile = undefined;
 		
 		this.bluetoothState = 'Off';
 		this.wifiState = 'Off';	
@@ -131,6 +135,32 @@
 		_.delay(setStageControllerFn, 5000);	
 		
 		this.loadNetworkAlertLibrary();			
+
+		this.setSystemPreferences = new Mojo.Service.Request("palm://com.palm.systemservice/", {
+			method: 'setPreferences', parameters: {'phoneAppHideCallDuration': false}});
+
+		this.getSystemNotifications = new Mojo.Service.Request("palm://com.palm.systemservice/", {
+			method: 'getPreferences', parameters: {'subscribe': true, 'keys':["notifications"]}, 
+			onSuccess: function(response) {
+				if((response) && (response.notifications))Â {
+					if(response.notifications.lowBattery == "ringtone")
+						this.batteryNotification = "notifications";
+					else
+						this.batteryNotification = response.notifications.lowBattery;
+
+					if(response.notifications.chargerConnected == "ringtone")
+						this.chargerNotification = "notifications";
+					else
+						this.chargerNotification = response.notifications.chargerConnected;
+
+					this.batteryNotificationFile = response.notifications.lowBatteryRingtonePath;
+					this.chargerNotificationFile = response.notifications.chargerConnectedRingtonePath;
+				}
+				else {
+					this.batteryNotification = "notifications";
+					this.chargerNotification = "notifications";
+				}
+			}.bind(this)});
 },
 
 loadNetworkAlertLibrary: function() {
@@ -2084,7 +2114,8 @@
 					this.controller.showBanner({
 						messageText: batteryalert,
 						icon: "/usr/lib/luna/system/luna-systemui/images/battery-"+i+'.png',
-						soundClass: "notifications"
+						soundClass: this.batteryNotification,
+						soundFile: this.batteryNotificationFile
 					},{}, 'batteryAlert');
 				}				
 				else if(this.batteryLevel > 10 && this.batteryLevel <= 20 && !this.batteryLevel20Shown) {
@@ -2093,7 +2124,8 @@
 					this.controller.showBanner({
 						messageText: batteryalert,
 						icon: "/usr/lib/luna/system/luna-systemui/images/battery-"+i+'.png',
-						soundClass: "notifications"
+						soundClass: this.batteryNotification,
+						soundFile: this.batteryNotificationFile
 					},{}, 'batteryAlert');	
 				}
 				
@@ -2133,7 +2165,7 @@
                   if(sysUpdateAlertController)
                       sysUpdateAlertController.delegateToSceneAssistant("updateBatLevel");
             }			
-			return;
+			break;
 		}		 
 	}
 	
@@ -2164,11 +2196,12 @@
 			
 			if(!this.chargingBannerShown && payload.name && (payload.name == "wall" || payload.name == "puck")) {
 				var batteryalert = $L("Charging Battery");
-				var soundClassName = this.onActiveCall ? "none" : "notifications";			
+				var soundClassName = this.onActiveCall ? "none" : this.chargerNotification;
 				this.controller.showBanner({
 						messageText: batteryalert,
 						icon: "/usr/lib/luna/system/luna-systemui/images/notification-small-charging.png",
-						soundClass: soundClassName
+						soundClass: soundClassName,
+						soundFile: this.chargerNotificationFile
 					},{}, 'chargingAlert'); 
 			}
 			// This flag is set to true only when there is "name" property is set in the payload. 
@@ -2187,6 +2220,56 @@
 			}						
 		}
 	}
+	
+	// Battery level and charger state triggers for Mode Switcher
+	
+	var currentBatteryLevel = "unknown";
+	var currentChargerState = "unknown";
+
+	if(this.isCharging) {
+		currentBatteryLevel = Math.floor(this.batteryLevel / 5) * 5;
+		
+		if((this.powerSource["inductive"]) && (payload.name == "puck"))
+			currentChargerState = "ts";
+		else if((this.powerSource["usb"]) && (payload.name == "pc"))
+			currentChargerState = "pc";
+		else if((this.powerSource["usb"]) && (payload.name == "wall"))
+			currentChargerState = "wall";
+	}
+	else if(!this.isCharging) {
+		currentBatteryLevel = Math.ceil(this.batteryLevel / 5) * 5;
+
+		currentChargerState = "none";
+	}
+	
+	if((currentBatteryLevel != "unknown") && (currentBatteryLevel != this.storedBatteryLevel)) {
+		this.storedBatteryLevel = currentBatteryLevel;
+
+		this.saveBatteryLevel(this.storedBatteryLevel);
+	}
+	
+	if((currentChargerState != "unknown") && (currentChargerState != this.storedChargerState)) {
+		this.storedChargerState = currentChargerState;
+
+		var currentOrientation = Mojo.Controller.getAppController().getScreenOrientation();
+
+		if(this.chargerStatusTimeout)
+			this.controller.window.clearTimeout(this.chargerStatusTimeout);
+		
+		this.chargerStatusTimeout = this.controller.window.setTimeout(this.saveChargerStatus.bind(this, 
+			currentChargerState, currentOrientation), 3000);
+	}
+},
+
+saveBatteryLevel: function(level) {
+	this.setBatteryLevel = new Mojo.Service.Request("palm://com.palm.systemservice/", {
+		method: 'setPreferences', parameters: {'batteryLevel': level}});	
+},
+
+saveChargerStatus: function(state, orientation) {
+	this.setChargerStatus = new Mojo.Service.Request("palm://com.palm.systemservice/", {
+		method: 'setPreferences', parameters: {'chargerStatus': {'state': state, 
+			'orientation': orientation}}});		
 },
 
 handleCriticalPowerNotifications: function(payload) {
@@ -2240,6 +2323,8 @@
  * Initialize power
  */
 powerInit:function() {
+	this.storedBatteryLevel = "unknown";
+	this.storedChargerState = "unknown";
 	
 	this.lastBatteryLevel = 0;
 	this.chargingBannerShown = false;
--- .orig/usr/palm/applications/com.palm.app.contacts/resources/de/views/edit/edit-scene.html
+++ /usr/palm/applications/com.palm.app.contacts/resources/de/views/edit/edit-scene.html
@@ -63,3 +63,75 @@
 		</div>
 	</div>
 </div>
+
+<div id="contact_prefs" style="display:none;">
+	<div class="palm-page-header">
+		<div class="palm-page-header-wrapper">
+			<div class="icon notification-prefs"></div>
+  	      <div class="title" x-mojo-loc='' id="ContactName"></div>
+		</div>
+	</div>
+
+	<div class="palm-group" id="PhoneCallGroup">
+		<div class="palm-group-title">Telefonanruf</div>
+	
+		<div class="palm-list">
+			<div class="palm-row first" id="CallActionRow">
+				<div class="palm-row-wrapper">
+					<div id="CallAction" x-mojo-element="ListSelector"></div>
+				</div>
+			</div>
+		
+			<div class="palm-row" id="PhoneAlertRow">
+				<div class="palm-row-wrapper">
+					<div id="PhoneAlert" x-mojo-element="ListSelector"></div>
+				</div>
+			</div>
+
+			<div class="palm-row last" id="PhoneRingtoneRow">
+				<div class="palm-row-wrapper">
+					<div class="label right" id="PhoneRingtone">Klingelton</div>
+					<div class="title">Klingelton</div>
+				</div>
+			</div>
+		</div>
+	</div>
+
+	<div class="palm-group">
+		<div class="palm-group-title">SMS-Nachricht</div>
+	
+		<div class="palm-list">
+			<div class="palm-row single">
+				<div class="palm-row-wrapper">
+					<div id="MsgAlert" x-mojo-element="ListSelector"></div>
+				</div>
+			</div>
+
+			<div class="palm-row last" id="MsgRingtoneRow">
+				<div class="palm-row-wrapper">
+					<div class="label right" id="MsgRingtone">Klingelton</div>
+					<div class="title">Klingelton</div>
+				</div>
+			</div>
+		</div>
+	</div>
+
+	<div class="palm-group">
+		<div class="palm-group-title">IM-Nachricht</div>
+	
+		<div class="palm-list">
+			<div class="palm-row single">
+				<div class="palm-row-wrapper">
+					<div id="IMsgAlert" x-mojo-element="ListSelector"></div>
+				</div>
+			</div>
+
+			<div class="palm-row last" id="IMsgRingtoneRow">
+				<div class="palm-row-wrapper">
+					<div class="label right" id="IMsgRingtone">Klingelton</div>
+					<div class="title">Klingelton</div>
+				</div>
+			</div>
+		</div>
+	</div>
+</div>
--- .orig/usr/palm/applications/com.palm.app.contacts/resources/de/views/prefs/prefs-scene.html
+++ /usr/palm/applications/com.palm.app.contacts/resources/de/views/prefs/prefs-scene.html
@@ -1,3 +1,4 @@
+<div id="common_prefs">
 <div class="palm-page-header multi-line">
 	<div class="palm-page-header-wrapper">
 	  <div class="icon app"></div>
@@ -8,7 +9,20 @@
 </div>                                                                                         
 
 <div class="palm-group">
-	<div class="palm-group-title">Sortierreihenfolge der Liste</div>
+	<div class="palm-group-title">Standard Kontakten-Ansicht</div>
+
+	<div class="palm-list">
+		<div class="palm-row single" x-mojo-tap-highlight="momentary">
+			<div class="palm-row-wrapper">
+				<div id="DefaultContactsView" x-mojo-element="ListSelector"></div>
+			</div>
+		</div>
+	</div>
+</div>
+
+<div class="palm-group">
+	<div class="palm-group-title" x-mojo-loc="">Sortierreihenfolge der Liste</div>
+
 		<div class="palm-list">
 			<div class="palm-row single" x-mojo-tap-highlight="momentary">
 				<div class="palm-row-wrapper">
@@ -18,6 +32,30 @@
 		</div>
 </div>
 	
+<div class="palm-group">
+	<div class="palm-group-title">Unbekannte Kontakte</div>
+	
+	<div class="palm-list">
+		<div class="palm-row first">
+			<div class="palm-row-wrapper">
+				<div id="BlockedNumbers" x-mojo-element="ToggleButton"></div>
+				<div class="title left" x-mojo-loc="">Sperrnummerns</div>
+			</div>
+		</div>
+
+		<div class="palm-row last">
+			<div class="palm-row-wrapper">
+				<div id="UnknownNumbers" x-mojo-element="ToggleButton"></div>
+				<div class="title left" x-mojo-loc="">Unbekannte Num.</div>
+			</div>
+		</div>
+	</div>
+</div>
+
+<div id="UnknownContactsOptions" class="palm-button" x-mojo-tap-highlight="momentary" x-mojo-loc="">
+	Einstellungen fÃ¼r Unbekannte
+</div>
+	
 <div id="accountsList" x-mojo-element="AccountsList"></div>
 
 <div id="PrimaryAccountPickerContainer"></div>
@@ -29,8 +67,80 @@
 	        </div>
       	</div>
     </div>
+
+	<div x-mojo-loc="" class="palm-info-text">Neue und importierte Kontakte werden automatisch diesem Konto zugeordnet</div>
+
+<!--<div id="syncAccountsButton" x-mojo-element="Button"></div>-->
+	<div id="addAccountButton" x-mojo-element="Button"></div>
 </div>
-<div class="palm-info-text">Neue Kontakte werden automatisch diesem Konto zugeordnet</div>
+<div id="unknown_prefs" style="display:none;">
+	<div class="palm-page-header">
+		<div class="palm-page-header-wrapper">
+			<div class="icon notification-prefs"></div>
+      <div class="title">Unbekannte Kontakte</div>
+		</div>
+	</div>
 
-<div id="syncAccountsButton" x-mojo-element="Button"></div>
-<div id="addAccountButton" x-mojo-element="Button"></div>
+	<div class="palm-group" id="PhoneCallGroup">
+		<div class="palm-group-title">Telefonanruf</div>
+	
+		<div class="palm-list">
+			<div class="palm-row first" id="CallActionRow">
+				<div class="palm-row-wrapper">
+					<div id="CallAction" x-mojo-element="ListSelector"></div>
+				</div>
+			</div>
+		
+			<div class="palm-row" id="PhoneAlertRow">
+				<div class="palm-row-wrapper">
+					<div id="PhoneAlert" x-mojo-element="ListSelector"></div>
+				</div>
+			</div>
+
+			<div class="palm-row last" id="PhoneRingtoneRow">
+				<div class="palm-row-wrapper">
+					<div class="label right" id="PhoneRingtone">Klingelton</div>
+					<div class="title">Klingelton</div>
+				</div>
+			</div>
+		</div>
+	</div>
+
+	<div class="palm-group">
+		<div class="palm-group-title">SMS-Nachricht</div>
+	
+		<div class="palm-list">
+			<div class="palm-row single">
+				<div class="palm-row-wrapper">
+					<div id="MsgAlert" x-mojo-element="ListSelector"></div>
+				</div>
+			</div>
+
+			<div class="palm-row last" id="MsgRingtoneRow">
+				<div class="palm-row-wrapper">
+					<div class="label right" id="MsgRingtone">Klingelton</div>
+					<div class="title">Klingelton</div>
+				</div>
+			</div>
+		</div>
+	</div>
+
+	<div class="palm-group">
+		<div class="palm-group-title">E-Mail Nachricht</div>
+	
+		<div class="palm-list">
+			<div class="palm-row single">
+				<div class="palm-row-wrapper">
+					<div id="EmailAlert" x-mojo-element="ListSelector"></div>
+				</div>
+			</div>
+
+			<div class="palm-row last" id="EmailRingtoneRow">
+				<div class="palm-row-wrapper">
+					<div class="label right" id="EmailRingtone">Klingelton</div>
+					<div class="title">Klingelton</div>
+				</div>
+			</div>
+		</div>
+	</div>
+</div>
--- .orig/usr/palm/applications/com.palm.app.contacts/resources/de/strings.json
+++ /usr/palm/applications/com.palm.app.contacts/resources/de/strings.json
@@ -107,5 +107,29 @@
 	"Would you like to import #{count} contacts?  This could take a few minutes.": "MÃ¶chten Sie #{count} Kontakte importieren? Dieser Vorgang kann einige Minuten dauern.",
 	"Your Contacts Accounts": "Ihre Kontaktkonten",
 	"default_value_for_deletion_when_no_name": "Person",
-	"phone number": "Telefonnummer"
+	"phone number": "Telefonnummer",
+	"Add to Favorites": "zu Favoriten hinzufÃ¼gen",
+	"No Default View": "Keine",
+	"All Contacts": "Alle Kontakte",
+	"Favorites": "Favoriten",
+	"Last Name": "Nachname",
+	"First Name": "Vorname",
+	"Company & First Name": "Firma und Vorname",
+	"Company & Last Name": "Firma und Nachname",
+	"Notifications": "Benachrichtigungen",
+	"Alert Normally": "Normal benachrichtigen",
+	"Direct to Voicemail": "Direkt zu Mailbox",
+	"Hang Up Automatically": "Automatisch aufhÃ¤ngen",
+	"Action": "Aktion",
+	"Use Default": "Standardaktion",
+	"System Sound": "Systemton",
+	"Ringtone": "Klingelton",
+	"Vibrate": "Vibrieren",
+	"Mute": "Stumm",
+	"Alert": "Alarm",
+	"New Contact": "Neuer Kontact",
+	"New Favorite": "Neuer Favorit",
+	"No": "Ja",
+	"Yes": "Nein",
+	"Remove": "Entfernen"
 }
--- .orig/usr/palm/applications/com.palm.app.contacts/resources/es/views/edit/edit-scene.html
+++ /usr/palm/applications/com.palm.app.contacts/resources/es/views/edit/edit-scene.html
@@ -63,3 +63,75 @@
 		</div>
 	</div>
 </div>
+
+<div id="contact_prefs" style="display:none;">
+	<div class="palm-page-header">
+		<div class="palm-page-header-wrapper">
+			<div class="icon notification-prefs"></div>
+  	      <div class="title" x-mojo-loc='' id="ContactName"></div>
+		</div>
+	</div>
+
+	<div class="palm-group" id="PhoneCallGroup">
+		<div class="palm-group-title">Llamada</div>
+	
+		<div class="palm-list">
+			<div class="palm-row first" id="CallActionRow">
+				<div class="palm-row-wrapper">
+					<div id="CallAction" x-mojo-element="ListSelector"></div>
+				</div>
+			</div>
+		
+			<div class="palm-row" id="PhoneAlertRow">
+				<div class="palm-row-wrapper">
+					<div id="PhoneAlert" x-mojo-element="ListSelector"></div>
+				</div>
+			</div>
+
+			<div class="palm-row last" id="PhoneRingtoneRow">
+				<div class="palm-row-wrapper">
+					<div class="label right" id="PhoneRingtone">Tono</div>
+					<div class="title">Tono</div>
+				</div>
+			</div>
+		</div>
+	</div>
+
+	<div class="palm-group">
+		<div class="palm-group-title">Mensaje SMS</div>
+	
+		<div class="palm-list">
+			<div class="palm-row single">
+				<div class="palm-row-wrapper">
+					<div id="MsgAlert" x-mojo-element="ListSelector"></div>
+				</div>
+			</div>
+
+			<div class="palm-row last" id="MsgRingtoneRow">
+				<div class="palm-row-wrapper">
+					<div class="label right" id="MsgRingtone">Tono</div>
+					<div class="title">Tono</div>
+				</div>
+			</div>
+		</div>
+	</div>
+
+	<div class="palm-group">
+		<div class="palm-group-title">Mensaje IM</div>
+	
+		<div class="palm-list">
+			<div class="palm-row single">
+				<div class="palm-row-wrapper">
+					<div id="IMsgAlert" x-mojo-element="ListSelector"></div>
+				</div>
+			</div>
+
+			<div class="palm-row last" id="IMsgRingtoneRow">
+				<div class="palm-row-wrapper">
+					<div class="label right" id="IMsgRingtone">Tono</div>
+					<div class="title">Tono</div>
+				</div>
+			</div>
+		</div>
+	</div>
+</div>
--- .orig/usr/palm/applications/com.palm.app.contacts/resources/es/views/prefs/prefs-scene.html
+++ /usr/palm/applications/com.palm.app.contacts/resources/es/views/prefs/prefs-scene.html
@@ -1,3 +1,4 @@
+<div id="common_prefs">
 <div class="palm-page-header multi-line">
 	<div class="palm-page-header-wrapper">
 	  <div class="icon app"></div>
@@ -8,7 +9,20 @@
 </div>                                                                                         
 
 <div class="palm-group">
-	<div class="palm-group-title">Orden de lista</div>
+	<div class="palm-group-title">Vista defecto contactos</div>
+
+	<div class="palm-list">
+		<div class="palm-row single" x-mojo-tap-highlight="momentary">
+			<div class="palm-row-wrapper">
+				<div id="DefaultContactsView" x-mojo-element="ListSelector"></div>
+			</div>
+		</div>
+	</div>
+</div>
+
+<div class="palm-group">
+	<div class="palm-group-title" x-mojo-loc="">Orden lista contactos</div>
+
 		<div class="palm-list">
 			<div class="palm-row single" x-mojo-tap-highlight="momentary">
 				<div class="palm-row-wrapper">
@@ -18,6 +32,30 @@
 		</div>
 </div>
 	
+<div class="palm-group">
+	<div class="palm-group-title">Contactos desconocidos</div>
+	
+	<div class="palm-list">
+		<div class="palm-row first">
+			<div class="palm-row-wrapper">
+				<div id="BlockedNumbers" x-mojo-element="ToggleButton"></div>
+				<div class="title left" x-mojo-loc="">NÃºmeros bloqueados</div>
+			</div>
+		</div>
+
+		<div class="palm-row last">
+			<div class="palm-row-wrapper">
+				<div id="UnknownNumbers" x-mojo-element="ToggleButton"></div>
+				<div class="title left" x-mojo-loc="">NÃºm. desconocidos</div>
+			</div>
+		</div>
+	</div>
+</div>
+
+<div id="UnknownContactsOptions" class="palm-button" x-mojo-tap-highlight="momentary" x-mojo-loc="">
+	Ajustes contactos desconocidos
+</div>
+	
 <div id="accountsList" x-mojo-element="AccountsList"></div>
 
 <div id="PrimaryAccountPickerContainer"></div>
@@ -29,8 +67,80 @@
 	        </div>
       	</div>
     </div>
+
+	<div x-mojo-loc="" class="palm-info-text">Todos los contactos aÃ±adidos e importados pasarÃ¡n de manera predeterminada a esta cuenta.</div>
+
+<!--<div id="syncAccountsButton" x-mojo-element="Button"></div>-->
+	<div id="addAccountButton" x-mojo-element="Button"></div>
 </div>
-<div class="palm-info-text">Los nuevos contactos pasarÃ¡n de manera predeterminada a esta cuenta</div>
+<div id="unknown_prefs" style="display:none;">
+	<div class="palm-page-header">
+		<div class="palm-page-header-wrapper">
+			<div class="icon notification-prefs"></div>
+      <div class="title">Contacto desconocido</div>
+		</div>
+	</div>
 
-<div id="syncAccountsButton" x-mojo-element="Button"></div>
-<div id="addAccountButton" x-mojo-element="Button"></div>
+	<div class="palm-group" id="PhoneCallGroup">
+		<div class="palm-group-title">Llamada</div>
+	
+		<div class="palm-list">
+			<div class="palm-row first" id="CallActionRow">
+				<div class="palm-row-wrapper">
+					<div id="CallAction" x-mojo-element="ListSelector"></div>
+				</div>
+			</div>
+		
+			<div class="palm-row" id="PhoneAlertRow">
+				<div class="palm-row-wrapper">
+					<div id="PhoneAlert" x-mojo-element="ListSelector"></div>
+				</div>
+			</div>
+
+			<div class="palm-row last" id="PhoneRingtoneRow">
+				<div class="palm-row-wrapper">
+					<div class="label right" id="PhoneRingtone">Tono</div>
+					<div class="title">Tono</div>
+				</div>
+			</div>
+		</div>
+	</div>
+
+	<div class="palm-group">
+		<div class="palm-group-title">Mensaje SMS</div>
+	
+		<div class="palm-list">
+			<div class="palm-row single">
+				<div class="palm-row-wrapper">
+					<div id="MsgAlert" x-mojo-element="ListSelector"></div>
+				</div>
+			</div>
+
+			<div class="palm-row last" id="MsgRingtoneRow">
+				<div class="palm-row-wrapper">
+					<div class="label right" id="MsgRingtone">Tono</div>
+					<div class="title">Tono</div>
+				</div>
+			</div>
+		</div>
+	</div>
+
+	<div class="palm-group">
+		<div class="palm-group-title">Mensaje correo</div>
+	
+		<div class="palm-list">
+			<div class="palm-row single">
+				<div class="palm-row-wrapper">
+					<div id="EmailAlert" x-mojo-element="ListSelector"></div>
+				</div>
+			</div>
+
+			<div class="palm-row last" id="EmailRingtoneRow">
+				<div class="palm-row-wrapper">
+					<div class="label right" id="EmailRingtone">Tono</div>
+					<div class="title">Tono</div>
+				</div>
+			</div>
+		</div>
+	</div>
+</div>
--- .orig/usr/palm/applications/com.palm.app.contacts/resources/es/strings.json
+++ /usr/palm/applications/com.palm.app.contacts/resources/es/strings.json
@@ -106,5 +106,29 @@
 	"Would you like to import #{count} contacts?  This could take a few minutes.": "Â¿Quieres importar #{count} contactos? Esto podrÃ­a tomar unos minutos.",
 	"Your Contacts Accounts": "Tus cuentas de contactos",
 	"default_value_for_deletion_when_no_name": "Persona",
-	"phone number": "nÃºmero de telÃ©fono"
+	"phone number": "nÃºmero de telÃ©fono",
+	"Add to Favorites": "AÃ±adir a Favoritos",
+	"No Default View": "Sin vista",
+	"All Contacts": "Todos",
+	"Favorites": "Favoritos",
+	"Last Name": "Apellido(s)",
+	"First Name": "Nombre",
+	"Company & First Name": "Empresa y nombre",
+	"Company & Last Name": "Empresa y apellido(s)",
+	"Notifications": "Avisos",
+	"Alert Normally": "Alerta normal",
+	"Direct to Voicemail": "Al correo de voz",
+	"Hang Up Automatically": "Colgar automÃ¡ticamente",
+	"Action": "AcciÃ³n",
+	"Use Default": "Usar defecto",
+	"System Sound": "Sonido sistema",
+	"Ringtone": "Tono",
+	"Vibrate": "Vibrar",
+	"Mute": "Silenciar",
+	"Alert": "Alerta",
+	"New Contact": "Nuevo contacto",
+	"New Favorite": "Nuevo favorito",
+	"No": "No",
+	"Yes": "SÃ­",
+	"Remove": "Eliminar"
 }
--- .orig/usr/palm/applications/com.palm.app.contacts/resources/es/es/views/prefs/prefs-scene.html
+++ /usr/palm/applications/com.palm.app.contacts/resources/es/es/views/prefs/prefs-scene.html
@@ -1,3 +1,4 @@
+<div id="common_prefs">
 <div class="palm-page-header multi-line">
 	<div class="palm-page-header-wrapper">
 	  <div class="icon app"></div>
@@ -8,7 +9,20 @@
 </div>                                                                                         
 
 <div class="palm-group">
-	<div class="palm-group-title">Orden de lista</div>
+	<div class="palm-group-title">Vista defecto contactos</div>
+
+	<div class="palm-list">
+		<div class="palm-row single" x-mojo-tap-highlight="momentary">
+			<div class="palm-row-wrapper">
+				<div id="DefaultContactsView" x-mojo-element="ListSelector"></div>
+			</div>
+		</div>
+	</div>
+</div>
+
+<div class="palm-group">
+	<div class="palm-group-title" x-mojo-loc="">Orden lista contactos</div>
+
 		<div class="palm-list">
 			<div class="palm-row single" x-mojo-tap-highlight="momentary">
 				<div class="palm-row-wrapper">
@@ -18,6 +32,30 @@
 		</div>
 </div>
 	
+<div class="palm-group">
+	<div class="palm-group-title">Contactos desconocidos</div>
+	
+	<div class="palm-list">
+		<div class="palm-row first">
+			<div class="palm-row-wrapper">
+				<div id="BlockedNumbers" x-mojo-element="ToggleButton"></div>
+				<div class="title left" x-mojo-loc="">NÃºmeros bloqueados</div>
+			</div>
+		</div>
+
+		<div class="palm-row last">
+			<div class="palm-row-wrapper">
+				<div id="UnknownNumbers" x-mojo-element="ToggleButton"></div>
+				<div class="title left" x-mojo-loc="">NÃºm. desconocidos</div>
+			</div>
+		</div>
+	</div>
+</div>
+
+<div id="UnknownContactsOptions" class="palm-button" x-mojo-tap-highlight="momentary" x-mojo-loc="">
+	Ajustes contactos desconocidos
+</div>
+	
 <div id="accountsList" x-mojo-element="AccountsList"></div>
 
 <div id="PrimaryAccountPickerContainer"></div>
@@ -29,8 +67,82 @@
 	        </div>
       	</div>
     </div>
+
+	<div x-mojo-loc="" class="palm-info-text">Todos los contactos aÃ±adidos e importados pasarÃ¡n de manera predeterminada a esta cuenta.</div>
+
+<!--<div id="syncAccountsButton" x-mojo-element="Button"></div>-->
+	<div id="addAccountButton" x-mojo-element="Button"></div>
+</div>
+
+<div id="unknown_prefs" style="display:none;">
+	<div class="palm-page-header">
+		<div class="palm-page-header-wrapper">
+			<div class="icon notification-prefs"></div>
+      <div class="title">Contacto desconocido</div>
+		</div>
+	</div>
+
+	<div class="palm-group" id="PhoneCallGroup">
+		<div class="palm-group-title">Llamada</div>
+	
+		<div class="palm-list">
+			<div class="palm-row first" id="CallActionRow">
+				<div class="palm-row-wrapper">
+					<div id="CallAction" x-mojo-element="ListSelector"></div>
+				</div>
+			</div>
+		
+			<div class="palm-row" id="PhoneAlertRow">
+				<div class="palm-row-wrapper">
+					<div id="PhoneAlert" x-mojo-element="ListSelector"></div>
+				</div>
+			</div>
+
+			<div class="palm-row last" id="PhoneRingtoneRow">
+				<div class="palm-row-wrapper">
+					<div class="label right" id="PhoneRingtone">Tono</div>
+					<div class="title">Tono</div>
+				</div>
+			</div>
+		</div>
+	</div>
+
+	<div class="palm-group">
+		<div class="palm-group-title">Mensaje SMS</div>
+	
+		<div class="palm-list">
+			<div class="palm-row single">
+				<div class="palm-row-wrapper">
+					<div id="MsgAlert" x-mojo-element="ListSelector"></div>
+				</div>
+			</div>
+
+			<div class="palm-row last" id="MsgRingtoneRow">
+				<div class="palm-row-wrapper">
+					<div class="label right" id="MsgRingtone">Tono</div>
+					<div class="title">Tono</div>
+				</div>
+			</div>
+		</div>
+	</div>
+
+	<div class="palm-group">
+		<div class="palm-group-title">Mensaje correo</div>
+	
+		<div class="palm-list">
+			<div class="palm-row single">
+				<div class="palm-row-wrapper">
+					<div id="EmailAlert" x-mojo-element="ListSelector"></div>
+				</div>
+			</div>
+
+			<div class="palm-row last" id="EmailRingtoneRow">
+				<div class="palm-row-wrapper">
+					<div class="label right" id="EmailRingtone">Tono</div>
+					<div class="title">Tono</div>
+				</div>
+			</div>
+		</div>
+	</div>
 </div>
-<div class="palm-info-text">Los nuevos contactos pasarÃ¡n de manera predeterminada a esta cuenta.</div>
 
-<div id="syncAccountsButton" x-mojo-element="Button"></div>
-<div id="addAccountButton" x-mojo-element="Button"></div>
--- .orig/usr/palm/applications/com.palm.app.contacts/resources/fr/views/edit/edit-scene.html
+++ /usr/palm/applications/com.palm.app.contacts/resources/fr/views/edit/edit-scene.html
@@ -63,3 +63,75 @@
 		</div>
 	</div>
 </div>
+
+<div id="contact_prefs" style="display:none;">
+	<div class="palm-page-header">
+		<div class="palm-page-header-wrapper">
+			<div class="icon notification-prefs"></div>
+  	      <div class="title" x-mojo-loc='' id="ContactName"></div>
+		</div>
+	</div>
+
+	<div class="palm-group" id="PhoneCallGroup">
+		<div class="palm-group-title">Appel tÃ©lÃ©phonique</div>
+	
+		<div class="palm-list">
+			<div class="palm-row first" id="CallActionRow">
+				<div class="palm-row-wrapper">
+					<div id="CallAction" x-mojo-element="ListSelector"></div>
+				</div>
+			</div>
+		
+			<div class="palm-row" id="PhoneAlertRow">
+				<div class="palm-row-wrapper">
+					<div id="PhoneAlert" x-mojo-element="ListSelector"></div>
+				</div>
+			</div>
+
+			<div class="palm-row last" id="PhoneRingtoneRow">
+				<div class="palm-row-wrapper">
+					<div class="label right" id="PhoneRingtone">Sonnerie</div>
+					<div class="title">Sonnerie</div>
+				</div>
+			</div>
+		</div>
+	</div>
+
+	<div class="palm-group">
+		<div class="palm-group-title">Message SMS</div>
+	
+		<div class="palm-list">
+			<div class="palm-row single">
+				<div class="palm-row-wrapper">
+					<div id="MsgAlert" x-mojo-element="ListSelector"></div>
+				</div>
+			</div>
+
+			<div class="palm-row last" id="MsgRingtoneRow">
+				<div class="palm-row-wrapper">
+					<div class="label right" id="MsgRingtone">Sonnerie</div>
+					<div class="title">Sonnerie</div>
+				</div>
+			</div>
+		</div>
+	</div>
+
+	<div class="palm-group">
+		<div class="palm-group-title">Messagerie instantanÃ©e</div>
+	
+		<div class="palm-list">
+			<div class="palm-row single">
+				<div class="palm-row-wrapper">
+					<div id="IMsgAlert" x-mojo-element="ListSelector"></div>
+				</div>
+			</div>
+
+			<div class="palm-row last" id="IMsgRingtoneRow">
+				<div class="palm-row-wrapper">
+					<div class="label right" id="IMsgRingtone">Sonnerie</div>
+					<div class="title">Sonnerie</div>
+				</div>
+			</div>
+		</div>
+	</div>
+</div>
--- .orig/usr/palm/applications/com.palm.app.contacts/resources/fr/views/prefs/prefs-scene.html
+++ /usr/palm/applications/com.palm.app.contacts/resources/fr/views/prefs/prefs-scene.html
@@ -1,3 +1,4 @@
+<div id="common_prefs">
 <div class="palm-page-header multi-line">
 	<div class="palm-page-header-wrapper">
 	  <div class="icon app"></div>
@@ -8,7 +9,20 @@
 </div>                                                                                         
 
 <div class="palm-group">
-	<div class="palm-group-title">Ordre de la liste</div>
+	<div class="palm-group-title">Vue par dÃ©faut pour contacts</div>
+
+	<div class="palm-list">
+		<div class="palm-row single" x-mojo-tap-highlight="momentary">
+			<div class="palm-row-wrapper">
+				<div id="DefaultContactsView" x-mojo-element="ListSelector"></div>
+			</div>
+		</div>
+	</div>
+</div>
+
+<div class="palm-group">
+	<div class="palm-group-title" x-mojo-loc="">Ordre de prÃ©sentation de la liste</div>
+
 		<div class="palm-list">
 			<div class="palm-row single" x-mojo-tap-highlight="momentary">
 				<div class="palm-row-wrapper">
@@ -18,6 +32,30 @@
 		</div>
 </div>
 	
+<div class="palm-group">
+	<div class="palm-group-title">Contacts inconnus</div>
+	
+	<div class="palm-list">
+		<div class="palm-row first">
+			<div class="palm-row-wrapper">
+				<div id="BlockedNumbers" x-mojo-element="ToggleButton"></div>
+				<div class="title left" x-mojo-loc="">NumÃ©ros bloquÃ©s</div>
+			</div>
+		</div>
+
+		<div class="palm-row last">
+			<div class="palm-row-wrapper">
+				<div id="UnknownNumbers" x-mojo-element="ToggleButton"></div>
+				<div class="title left" x-mojo-loc="">NumÃ©ros inconnus</div>
+			</div>
+		</div>
+	</div>
+</div>
+
+<div id="UnknownContactsOptions" class="palm-button" x-mojo-tap-highlight="momentary" x-mojo-loc="">
+	Options des contacts inconnus
+</div>
+	
 <div id="accountsList" x-mojo-element="AccountsList"></div>
 
 <div id="PrimaryAccountPickerContainer"></div>
@@ -29,8 +67,80 @@
 	        </div>
       	</div>
     </div>
+
+	<div x-mojo-loc="" class="palm-info-text">Les nouveaux contacts seront automatiquement liÃ©s Ã  ce compte</div>
+
+<!--<div id="syncAccountsButton" x-mojo-element="Button"></div>-->
+	<div id="addAccountButton" x-mojo-element="Button"></div>
 </div>
-<div class="palm-info-text">Les nouveaux contacts seront automatiquement liÃ©s Ã  ce compte.</div>
+<div id="unknown_prefs" style="display:none;">
+	<div class="palm-page-header">
+		<div class="palm-page-header-wrapper">
+			<div class="icon notification-prefs"></div>
+      <div class="title">Contacts inconnus</div>
+		</div>
+	</div>
 
-<div id="syncAccountsButton" x-mojo-element="Button"></div>
-<div id="addAccountButton" x-mojo-element="Button"></div>
+	<div class="palm-group" id="PhoneCallGroup">
+		<div class="palm-group-title">Appel tÃ©lÃ©phonique</div>
+	
+		<div class="palm-list">
+			<div class="palm-row first" id="CallActionRow">
+				<div class="palm-row-wrapper">
+					<div id="CallAction" x-mojo-element="ListSelector"></div>
+				</div>
+			</div>
+		
+			<div class="palm-row" id="PhoneAlertRow">
+				<div class="palm-row-wrapper">
+					<div id="PhoneAlert" x-mojo-element="ListSelector"></div>
+				</div>
+			</div>
+
+			<div class="palm-row last" id="PhoneRingtoneRow">
+				<div class="palm-row-wrapper">
+					<div class="label right" id="PhoneRingtone">Sonnerie</div>
+					<div class="title">Sonnerie</div>
+				</div>
+			</div>
+		</div>
+	</div>
+
+	<div class="palm-group">
+		<div class="palm-group-title">Message SMS</div>
+	
+		<div class="palm-list">
+			<div class="palm-row single">
+				<div class="palm-row-wrapper">
+					<div id="MsgAlert" x-mojo-element="ListSelector"></div>
+				</div>
+			</div>
+
+			<div class="palm-row last" id="MsgRingtoneRow">
+				<div class="palm-row-wrapper">
+					<div class="label right" id="MsgRingtone">Sonnerie</div>
+					<div class="title">Sonnerie</div>
+				</div>
+			</div>
+		</div>
+	</div>
+
+	<div class="palm-group">
+		<div class="palm-group-title">Courrier Ã©lectronique</div>
+	
+		<div class="palm-list">
+			<div class="palm-row single">
+				<div class="palm-row-wrapper">
+					<div id="EmailAlert" x-mojo-element="ListSelector"></div>
+				</div>
+			</div>
+
+			<div class="palm-row last" id="EmailRingtoneRow">
+				<div class="palm-row-wrapper">
+					<div class="label right" id="EmailRingtone">Sonnerie</div>
+					<div class="title">Sonnerie</div>
+				</div>
+			</div>
+		</div>
+	</div>
+</div>
--- .orig/usr/palm/applications/com.palm.app.contacts/resources/fr/strings.json
+++ /usr/palm/applications/com.palm.app.contacts/resources/fr/strings.json
@@ -107,5 +107,29 @@
 	"Would you like to import #{count} contacts?  This could take a few minutes.": "Voulez-vous importer #{count} contactsÂ ? Cela peut prendre quelques minutes.",
 	"Your Contacts Accounts": "Vos comptes contacts",
 	"default_value_for_deletion_when_no_name": "Personne",
-	"phone number": "NÂ° tÃ©lÃ©phone"
+	"phone number": "NÂ° tÃ©lÃ©phone",
+	"Add to Favorites": "Ajouter aux favoris",
+	"No Default View": "Aucune",
+	"All Contacts": "Tous les contacts",
+	"Favorites": "Favoris",
+	"Last Name": "par Nom",
+	"First Name": "par PrÃ©nom",
+	"Company & First Name": "par SociÃ©tÃ© et PrÃ©nom",
+	"Company & Last Name": "par SociÃ©tÃ© et Nom",
+	"Notifications": "Notifications",
+	"Alert Normally": "Alerter normalement",
+	"Direct to Voicemail": "Diriger sur messagerie",
+	"Hang Up Automatically": "DÃ©crocher automatiquement",
+	"Action": "Action",
+	"Use Default": "Par dÃ©faut",
+	"System Sound": "Son systÃ¨me",
+	"Ringtone": "Sonnerie",
+	"Vibrate": "Vibration",
+	"Mute": "Muet",
+	"Alert": "Type dâalerte",
+	"New Contact": "Nouveau contact",
+	"New Favorite": "Nouveau favori",
+	"No": "non",
+	"Yes": "Oui",
+	"Remove": "Enlever"
 }
--- .orig/usr/palm/applications/com.palm.app.contacts/resources/it/views/edit/edit-scene.html
+++ /usr/palm/applications/com.palm.app.contacts/resources/it/views/edit/edit-scene.html
@@ -63,3 +63,75 @@
 		</div>
 	</div>
 </div>
+
+<div id="contact_prefs" style="display:none;">
+	<div class="palm-page-header">
+		<div class="palm-page-header-wrapper">
+			<div class="icon notification-prefs"></div>
+  	      <div class="title" x-mojo-loc='' id="ContactName"></div>
+		</div>
+	</div>
+
+	<div class="palm-group" id="PhoneCallGroup">
+		<div class="palm-group-title">Phone Call</div>
+	
+		<div class="palm-list">
+			<div class="palm-row first" id="CallActionRow">
+				<div class="palm-row-wrapper">
+					<div id="CallAction" x-mojo-element="ListSelector"></div>
+				</div>
+			</div>
+		
+			<div class="palm-row" id="PhoneAlertRow">
+				<div class="palm-row-wrapper">
+					<div id="PhoneAlert" x-mojo-element="ListSelector"></div>
+				</div>
+			</div>
+
+			<div class="palm-row last" id="PhoneRingtoneRow">
+				<div class="palm-row-wrapper">
+					<div class="label right" id="PhoneRingtone">Ringtone</div>
+					<div class="title">Ringtone</div>
+				</div>
+			</div>
+		</div>
+	</div>
+
+	<div class="palm-group">
+		<div class="palm-group-title">SMS Message</div>
+	
+		<div class="palm-list">
+			<div class="palm-row single">
+				<div class="palm-row-wrapper">
+					<div id="MsgAlert" x-mojo-element="ListSelector"></div>
+				</div>
+			</div>
+
+			<div class="palm-row last" id="MsgRingtoneRow">
+				<div class="palm-row-wrapper">
+					<div class="label right" id="MsgRingtone">Ringtone</div>
+					<div class="title">Ringtone</div>
+				</div>
+			</div>
+		</div>
+	</div>
+
+	<div class="palm-group">
+		<div class="palm-group-title">IM Message</div>
+	
+		<div class="palm-list">
+			<div class="palm-row single">
+				<div class="palm-row-wrapper">
+					<div id="IMsgAlert" x-mojo-element="ListSelector"></div>
+				</div>
+			</div>
+
+			<div class="palm-row last" id="IMsgRingtoneRow">
+				<div class="palm-row-wrapper">
+					<div class="label right" id="IMsgRingtone">Ringtone</div>
+					<div class="title">Ringtone</div>
+				</div>
+			</div>
+		</div>
+	</div>
+</div>
--- .orig/usr/palm/applications/com.palm.app.contacts/resources/it/views/prefs/prefs-scene.html
+++ /usr/palm/applications/com.palm.app.contacts/resources/it/views/prefs/prefs-scene.html
@@ -1,3 +1,4 @@
+<div id="common_prefs">
 <div class="palm-page-header multi-line">
 	<div class="palm-page-header-wrapper">
 	  <div class="icon app"></div>
@@ -8,7 +9,20 @@
 </div>                                                                                         
 
 <div class="palm-group">
-	<div class="palm-group-title">Ordinamento elenco</div>
+	<div class="palm-group-title">Default Contacts View</div>
+
+	<div class="palm-list">
+		<div class="palm-row single" x-mojo-tap-highlight="momentary">
+			<div class="palm-row-wrapper">
+				<div id="DefaultContactsView" x-mojo-element="ListSelector"></div>
+			</div>
+		</div>
+	</div>
+</div>
+
+<div class="palm-group">
+	<div class="palm-group-title" x-mojo-loc="">Contacts List Order</div>
+
 		<div class="palm-list">
 			<div class="palm-row single" x-mojo-tap-highlight="momentary">
 				<div class="palm-row-wrapper">
@@ -18,6 +32,30 @@
 		</div>
 </div>
 	
+<div class="palm-group">
+	<div class="palm-group-title">Unknown Contacts</div>
+	
+	<div class="palm-list">
+		<div class="palm-row first">
+			<div class="palm-row-wrapper">
+				<div id="BlockedNumbers" x-mojo-element="ToggleButton"></div>
+				<div class="title left" x-mojo-loc="">Blocked Numbers</div>
+			</div>
+		</div>
+
+		<div class="palm-row last">
+			<div class="palm-row-wrapper">
+				<div id="UnknownNumbers" x-mojo-element="ToggleButton"></div>
+				<div class="title left" x-mojo-loc="">Unknown Numbers</div>
+			</div>
+		</div>
+	</div>
+</div>
+
+<div id="UnknownContactsOptions" class="palm-button" x-mojo-tap-highlight="momentary" x-mojo-loc="">
+	Unknown Contacts Options
+</div>
+	
 <div id="accountsList" x-mojo-element="AccountsList"></div>
 
 <div id="PrimaryAccountPickerContainer"></div>
@@ -29,8 +67,80 @@
 	        </div>
       	</div>
     </div>
+
+	<div x-mojo-loc="" class="palm-info-text">All added and imported contacts will default to this account.</div>
+
+<!--<div id="syncAccountsButton" x-mojo-element="Button"></div>-->
+	<div id="addAccountButton" x-mojo-element="Button"></div>
 </div>
-<div class="palm-info-text">I nuovi contatti saranno preimpostati su questo account</div>
+<div id="unknown_prefs" style="display:none;">
+	<div class="palm-page-header">
+		<div class="palm-page-header-wrapper">
+			<div class="icon notification-prefs"></div>
+      <div class="title">Unknown Contacts</div>
+		</div>
+	</div>
 
-<div id="syncAccountsButton" x-mojo-element="Button"></div>
-<div id="addAccountButton" x-mojo-element="Button"></div>
+	<div class="palm-group" id="PhoneCallGroup">
+		<div class="palm-group-title">Phone Call</div>
+	
+		<div class="palm-list">
+			<div class="palm-row first" id="CallActionRow">
+				<div class="palm-row-wrapper">
+					<div id="CallAction" x-mojo-element="ListSelector"></div>
+				</div>
+			</div>
+		
+			<div class="palm-row" id="PhoneAlertRow">
+				<div class="palm-row-wrapper">
+					<div id="PhoneAlert" x-mojo-element="ListSelector"></div>
+				</div>
+			</div>
+
+			<div class="palm-row last" id="PhoneRingtoneRow">
+				<div class="palm-row-wrapper">
+					<div class="label right" id="PhoneRingtone">Ringtone</div>
+					<div class="title">Ringtone</div>
+				</div>
+			</div>
+		</div>
+	</div>
+
+	<div class="palm-group">
+		<div class="palm-group-title">SMS Message</div>
+	
+		<div class="palm-list">
+			<div class="palm-row single">
+				<div class="palm-row-wrapper">
+					<div id="MsgAlert" x-mojo-element="ListSelector"></div>
+				</div>
+			</div>
+
+			<div class="palm-row last" id="MsgRingtoneRow">
+				<div class="palm-row-wrapper">
+					<div class="label right" id="MsgRingtone">Ringtone</div>
+					<div class="title">Ringtone</div>
+				</div>
+			</div>
+		</div>
+	</div>
+
+	<div class="palm-group">
+		<div class="palm-group-title">Email Message</div>
+	
+		<div class="palm-list">
+			<div class="palm-row single">
+				<div class="palm-row-wrapper">
+					<div id="EmailAlert" x-mojo-element="ListSelector"></div>
+				</div>
+			</div>
+
+			<div class="palm-row last" id="EmailRingtoneRow">
+				<div class="palm-row-wrapper">
+					<div class="label right" id="EmailRingtone">Ringtone</div>
+					<div class="title">Ringtone</div>
+				</div>
+			</div>
+		</div>
+	</div>
+</div>
--- .orig/usr/palm/applications/com.palm.app.contacts/resources/it/strings.json
+++ /usr/palm/applications/com.palm.app.contacts/resources/it/strings.json
@@ -107,5 +107,29 @@
 	"Would you like to import #{count} contacts?  This could take a few minutes.": "Importare #{count} contatti? Questa operazione potrebbe richiedere alcuni minuti.",
 	"Your Contacts Accounts": "Account contatti",
 	"default_value_for_deletion_when_no_name": "Persona",
-	"phone number": "numero"
+	"phone number": "numero",
+	"Add to Favorites": "",
+	"No Default View": "",
+	"All Contacts": "",
+	"Favorites": "",
+	"Last Name": "",
+	"First Name": "",
+	"Company & First Name": "",
+	"Company & Last Name": "",
+	"Notifications": "",
+	"Alert Normally": "",
+	"Direct to Voicemail": "",
+	"Hang Up Automatically": "",
+	"Action": "",
+	"Use Default": "",
+	"System Sound": "",
+	"Ringtone": "",
+	"Vibrate": "",
+	"Mute": "",
+	"Alert": "",
+	"New Contact": "",
+	"New Favorite": "",
+	"No": "",
+	"Yes": "",
+	"Remove": ""
 }
