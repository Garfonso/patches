--- .orig/usr/palm/applications/com.palm.app.phone/source/uistates/Abstract.js
+++ /usr/palm/applications/com.palm.app.phone/source/uistates/Abstract.js
@@ -22,16 +22,32 @@
 	event_missedcall: function(enabled) {
 		enyo.application.UI.enter('calllogmissed');
 	},
-	event_launch: function() {
+	event_launch: function(view) {
 		if ( ! enyo.application.activateMainCard() ) {
 			// if stage doesn't exist, call setup to reopen stage with arguments
 			this.setup();
 		}
+
+		if(view == "calllog")
+			enyo.application.UI.enter('calllog');
+		else if(view == "favorites")
+			enyo.application.UI.enter('favorites');
+		else if(view == "dialpad")
+			enyo.application.UI.enter('dialpad_card');		
 	},
 	// default preferences goes to main preferences scene
 	event_preferences: function(params) {
 		enyo.application.UI.enter('preferences_card',params);
 	},
+	// default prefsandaccounts goes to main prefsandaccounts scene
+	event_prefsandaccounts: function(params) {
+		if(!params)
+			params = {prefsandaccounts: true};
+		else
+			params.prefsandaccounts = true;
+		
+		enyo.application.UI.enter('preferences_card',params);
+	},
 	event_closed: function() {
 		if(enyo.application.Cache.pinViewEnabled && enyo.application.Cache.platformType == "gsm") {
 			enyo.error("Abstract: Forcing Pinview while closing phone app.");
--- .orig/usr/palm/applications/com.palm.app.phone/shared/activecall/ActiveCall.js
+++ /usr/palm/applications/com.palm.app.phone/shared/activecall/ActiveCall.js
@@ -32,7 +32,12 @@
 			]}
 		]},
 		{name:"changeMedia", kind:"PalmService", service: "palm://com.palm.skype/", method: "changeMedia", params: {outgoingVideo:true}},
-		{name: "setMute", kind: enyo.PalmService, service: "palm://com.palm.audio/phone/", method: "setMuted", onSuccess: "", onFailure: ""}
+		{name: "setMute", kind: enyo.PalmService, service: "palm://com.palm.audio/phone/", method: "setMuted", onSuccess: "", onFailure: ""},
+
+		{name: "sliderSubscription", kind:"PalmService", service:"palm://com.palm.keys/switches/", method: "status", subscribe: true, onSuccess: "onSliderEvent", onFailure: "onSliderEvent"},
+		{name: "displaySubscription", kind:"PalmService", service:"palm://com.palm.display/control/", method: "status", subscribe: true, onSuccess: "onDisplayEvent", onFailure: "onDisplayEvent"},
+
+		{name: "powerButtonSubscribe", kind:"PalmService", service:"palm://com.palm.display/control/", subscribe: true},
 	],
 	// the dtmf pad requires a different MinHeightScroller min-height. This should be fixed later in CSS.
 	regularCallPaneSelectView: function(inSender, inView, inPreviousView) {
@@ -139,6 +144,30 @@
                                 this.$.digits.setContent("");
 				this.setDTMFName();
                         }
+
+			this.powerButtonAction = "none";
+			this.audioPreviousProfile = null;
+
+			enyo.application.proximityEventAction = "none";
+			enyo.application.audioSourceChangedManually = false;
+
+			this.$.sliderSubscription.call({});
+
+			if((localStorage) && (localStorage["phonePrefs"])) {
+				var phonePrefs = enyo.json.parse(localStorage["phonePrefs"]);
+			
+				this.powerButtonAction = phonePrefs.powerButton;
+				
+				enyo.application.proximityEventAction = phonePrefs.proximityAction;
+			}
+			
+			if(this.powerButtonAction == "hangup") {
+				this.powerButtonListen();
+			}
+			
+			if(enyo.application.proximityEventAction == "change") {
+				this.$.displaySubscription.call({});
+			}			
 		}
 	},
 	//called when hanging up last call
@@ -159,6 +188,16 @@
 			this.popup.destroy();
 			this.popup = undefined;
 		}
+
+		this.$.sliderSubscription.cancel();
+
+		if(this.powerButtonAction == "hangup") {
+			this.powerButtonStopListening();
+		}
+		
+		if(enyo.application.proximityEventAction == "change") {
+			this.$.displaySubscription.cancel();
+		}
 	},
 	destroy: function() {
 		enyo.application.puckInterface.removePuckStateListener(this._onPuckEventFunc);
@@ -391,6 +430,13 @@
 	},
 	
 	AutoShowHideDTMFPad: function(activeLines) {
+		if((localStorage) && (localStorage["phonePrefs"])) {
+			var phonePrefs = enyo.json.parse(localStorage["phonePrefs"]);
+			
+			if((phonePrefs) && (phonePrefs.onCallView == "dialpad"))
+				this.showDTMFPad();
+		}
+		
                 if ( activeLines.length == 1 && activeLines[0].calls.length == 1 ) {//single line single call                                
                         if ( activeLines[0].state == enyo.application.CallSynergizer.STATES.ACTIVE) { //active
                                  if( enyo.application.Utils.isOtaspNumber(activeLines[0].calls[0].address) != 0 ||
@@ -409,6 +455,13 @@
                         return;
                 }
 
+				if(enyo.application.proximityEventAction == "change") {
+					enyo.application.audioSourceChangedManually = true;
+					
+					if(enyo.application.Cache.audioActiveProfile != "phone_front_speaker")
+						enyo.application.proxInterface.proxOff();
+				}
+
 				var activeLine = enyo.application.CallSynergizer.activeLine();
 				var activeTransport = activeLine.calls[0].transport;
 				
@@ -487,6 +540,82 @@
 	onPuckEvent: function(response) {
 		enyo.application.puckInterface.changeAudio(response);
 	},
+	onSliderEvent: function(inSender, response) {
+		if((!response) || (!response.key) || (!response.state))
+			return;
+
+		var sliderClosedAction = "hangup";
+		
+		if((localStorage) && (localStorage["phonePrefs"]))
+			sliderClosedAction = enyo.json.parse(localStorage["phonePrefs"]).sliderClosed;
+		
+		if((sliderClosedAction != "none") && (response.key == "slider") && 
+			(enyo.application.Cache.audioActiveProfile == "phone_front_speaker"))
+		{
+			var newSliderOpenState = (response.state === "up");
+			enyo.error("RRR " + enyo.application.sliderOpen + " " + newSliderOpenState);
+			if((enyo.application.sliderOpen === true) && (newSliderOpenState === false))
+				this.disconnectActiveCall();
+			
+			enyo.application.sliderOpen = newSliderOpenState;
+		} 
+	},
+	onDisplayEvent: function(inSender, response) {
+		if(enyo.application.Cache.screenLocked)
+			return;
+
+		if(enyo.application.audioSourceChangedManually)
+			return;
+
+		if(enyo.application.proxInterface.proxSubscription) {
+			if(response && (response.event || response.state)) {
+				if(response.event == "displayOn" || response.state == "on") {
+					if(enyo.application.Cache.audioActiveProfile !== this.audioPreviousProfile) {
+						if(this.audioPreviousProfile !== null) {
+							enyo.application.audioInterface.onAudioRouteChangeClick(this.audioPreviousProfile);
+						}
+					}
+				} else if(response.event == "displayOff" || response.state == "off") {
+					if(enyo.application.Cache.audioActiveProfile !== "phone_front_speaker") {
+						this.audioPreviousProfile = enyo.application.Cache.audioActiveProfile;
+						
+						enyo.application.audioInterface.onAudioRouteChangeClick("phone_front_speaker");
+
+					}
+					else if(this.audioPreviousProfile === null)
+						this.audioPreviousProfile = "phone_back_speaker";
+				}
+			}
+		}
+	},
+	powerButtonListen: function() {
+		this.$.powerButtonSubscribe.call({
+        "powerKeyBlock": true,
+        "client": "activeCall"
+    	},
+    	{
+        method: "setProperty",
+        onSuccess: "onPowerButtonEvent",
+        onFailure: "onPowerButtonEvent"
+    	});
+		
+		enyo.job("powerButtonListen", enyo.hitch(this, "powerButtonStopListening"), 60 * 1000);
+	},	
+	powerButtonStopListening: function() {
+	    this.$.powerButtonSubscribe.cancel();
+	},
+	onPowerButtonEvent: function(inSender, response) {
+		if((!response) || (!response.powerKey))
+			return;
+		
+		if((this.powerButtonAction == "hangup") && (response.powerKey == 'released') && 
+			((enyo.application.Cache.audioActiveProfile == "phone_front_speaker") ||
+			((enyo.application.audioSourceChangedManually == false) && 
+			(enyo.application.proximityEventAction == "change"))))
+		{
+			this.disconnectActiveCall();
+		}
+	},
 	updateActiveAudioRouteButtonImage: function(profile) {
 		enyo.log( "updateActiveAudioRouteButtonImage = "  + profile);
 
--- .orig/usr/palm/applications/com.palm.app.phone/source/uistates/ActiveCallCard.js
+++ /usr/palm/applications/com.palm.app.phone/source/uistates/ActiveCallCard.js
@@ -28,9 +28,14 @@
 		}
 		this.isHangingUp = true;
 		var wasHidden = false; 
+		var closeApp = false;
+		
+		if((localStorage) && (localStorage["phonePrefs"]))
+			closeApp = enyo.json.parse(localStorage["phonePrefs"]).closeApp;
+		
 		// if stage was hidden when active call started (and not firstuse), hide it
 		var mainCard = enyo.application.getMainCard();
-		if ( this.dismissCardOnHangup && mainCard && ! mainCard.hidden && mainCard.PalmSystem && ! mainCard.PalmSystem.isMinimal ) {
+		if (( closeApp ) || ( this.dismissCardOnHangup && mainCard && ! mainCard.hidden && mainCard.PalmSystem && ! mainCard.PalmSystem.isMinimal )) {
 			mainCard.PalmSystem.hide();
 		}
 		
--- .orig/usr/palm/applications/com.palm.app.phone/shared/phoneprefs/all-depends.js
+++ /usr/palm/applications/com.palm.app.phone/shared/phoneprefs/all-depends.js
@@ -12,6 +12,7 @@
 		"controls/ProvisioningPref.js",
 		"controls/PRLPref.js",
 		"controls/WorldPhonePref.js",
+		"controls/PhoneAppPrefs.js",
 		"source/styles.css",
 		"source/PhonePrefs.js",
 		"source/Dialingshortcut.js",
--- .orig/usr/palm/applications/com.palm.app.phone/phoneApp/source/AppMenu.js
+++ /usr/palm/applications/com.palm.app.phone/phoneApp/source/AppMenu.js
@@ -19,8 +19,9 @@
 	        {kind: enyo.Label, name: "lastSync", content: "Synched: 12/8/10, 12:00PM", style: "font-size: 14px;color: darkgray;"},
         ]},
 		{name: "testClearCookie", className: 'item-label', caption: "TEST: clear cookie", onclick: "onTestClearCookie", showing: false},
-		{caption: $L("Sounds & Ringtones"), className: 'item-label', onclick: "sounds"},
-		{caption: $L("Preferences & Accounts"), className: 'item-label', onclick: "preferences"},
+		{caption: $L("Sound Settings"), className: 'item-label', onclick: "sounds"},
+		{caption: $L("Network Services"), className: 'item-label', onclick: "preferences"},
+		{caption: $L("Preferences & Accounts"), className: 'item-label', onclick: "prefsandaccounts"},
 		{kind: enyo.HelpMenu, className: "help-menu", target: 'http://help.palm.com/phone/index.html', },
 		{name:"launchSoundsAndAlerts", kind:"PalmService",  service: enyo.palmServices.application, method: "open", params: {id: "com.palm.app.soundsandalerts"}},
 		{name: "clearCallHistoryPrompt", kind: "DialogPrompt", 
@@ -91,6 +92,10 @@
 		this.doLaunchingPreferences();
 		enyo.application.UI.event('preferences');
 	},
+	prefsandaccounts: function() {
+		this.doLaunchingPreferences();
+		enyo.application.UI.event('prefsandaccounts');
+	},
 	clearCallHistoryConfirm: function() {
 		//luna-send -a com.palm.app.phone -n 1 luna://com.palm.db/del '{"query":{"from":"com.palm.phonecallgroup:1"},"purge":false}'
 		this.$.purgeCallHistory.call({
--- .orig/usr/palm/applications/com.palm.app.phone/phoneApp/source/CallLogView.js
+++ /usr/palm/applications/com.palm.app.phone/phoneApp/source/CallLogView.js
@@ -327,10 +327,20 @@
 			if(itemData.recentcall_address.isVideo === true) {
 				enyo.application.Cache.authorizedForVideo[itemData.recentcall_address.addr] = true;				
 			}
-			enyo.application.CallSynergizer.dial(itemData.recentcall_address.addr,
-				(itemData.recentcall_address.isVideo === true) ? true: undefined, undefined, 
-				service, itemData.recentcall_address.personId,
-				true /*debounce*/);
+			
+			var autoDialing = "call";
+		
+			if((localStorage) && (localStorage["phonePrefs"]))
+				autoDialing = enyo.json.parse(localStorage["phonePrefs"]).autoDialing;
+		
+			if(autoDialing != "call")
+				enyo.application.UI.event('dial', {"fill": itemData.recentcall_address.addr});
+			else {
+				enyo.application.CallSynergizer.dial(itemData.recentcall_address.addr,
+					(itemData.recentcall_address.isVideo === true) ? true: undefined, undefined, 
+					service, itemData.recentcall_address.personId,
+					true /*debounce*/);
+			}
 		}
 	},
 	
--- .orig/usr/palm/applications/com.palm.app.phone/source/CallSynergizer.js
+++ /usr/palm/applications/com.palm.app.phone/source/CallSynergizer.js
@@ -37,7 +37,8 @@
 	},
 	// internally used static attributes
 	statics: {
-		PHONE_CAPABILITY: "PHONE"
+		PHONE_CAPABILITY: "PHONE",
+		kTimeoutMs: 60000
 	},
 	components: [
 		{name:"capabilitiesWatch", kind:"DbService", method: "find", dbKind: "com.palm.callcapabilities:1", onSuccess: "_capabilitiesWatch", onFailure: "genericFailure", subscribe: true, reCallWatches: true},
@@ -65,6 +66,15 @@
 		{name:"muteRingtone", kind:"PalmService", service:"palm://com.palm.audio/ringtone/", method: "setMuted"},
 		
 		{name: "informBTPrefServiceError", kind: enyo.PalmService, service: "palm://com.palm.bluetooth/hfg/", method: "forceCallEvent", onSuccess: ""},
+
+		{name: "setWakeupTimeout", kind: enyo.PalmService, service: 'palm://com.palm.power/timeout/', method: "set"},
+		{name: "clearWakeupTimeout", kind: enyo.PalmService, service: 'palm://com.palm.power/timeout/', method: "clear"},
+		
+		{name: "getAppPreferences", kind: enyo.PalmService, service: enyo.palmServices.system, method: "getPreferences", 
+			subscribe: true, onSuccess: "_handleAppPreferences", onFailure: "_handleAppPreferences"},
+		
+		{name: "getContactPreferences", kind: enyo.DbService, method: "find", dbKind: "com.palm.app.contacts.prefs:1", 
+			subscribe: true, reCallWatches: true, onSuccess: "_handleContactPreferences", onFailure: "handleContactPreferences"}
 	],
 	create: function() {
 		this.inherited(arguments);
@@ -81,6 +91,46 @@
 		
 		// start watching for accounts
 		this.$.accountsWatch.call();
+
+		// get notification prefs
+		this.notificationPrefs = {
+			notificationBlink: true,
+			repeatInterval: 0
+		};
+		
+		this.$.getAppPreferences.call({
+			keys: ["callNotification"]
+		});
+
+		// get unknown Contacts prefs
+		this.unknownContactsPrefs = {
+			blockedNumbers: false,
+			unknownNumbers: false,
+			unknownContacts: {
+				callAction: "none",
+				callAlert: "default",
+				callRingtoneName: "",
+				callRingtonePath: ""
+			}
+		};
+
+		this.$.getContactPreferences.call();
+	},
+	_handleAppPreferences: function(inSender, payload) {
+		if((payload) && (payload.callNotification))
+			this.notificationPrefs = payload.callNotification;
+	},
+	_handleContactPreferences: function(inSender, payload) {
+		if((payload) && (payload.results) && (payload.results.length > 0)) {
+			if(payload.results[0].blockedNumbers != undefined)
+				this.unknownContactsPrefs.blockedNumbers = payload.results[0].blockedNumbers;
+
+			if(payload.results[0].unknownNumbers != undefined)
+				this.unknownContactsPrefs.unknownNumbers = payload.results[0].unknownNumbers;
+
+			if(payload.results[0].unknownContacts != undefined)
+				this.unknownContactsPrefs.unknownContacts = payload.results[0].unknownContacts;
+		}
 	},
 	_accountsWatch: function(inSender, payload) {
 		this.$.accountsListQuery.call();
@@ -460,6 +510,38 @@
 			// why the first call? that's all we're displaying for now
 			line.calls[0].contact.decorated(enyo.bind(this, function(line) {
 				var height = line.calls[0].contact.picture.src ? 195 : 110;							
+
+				var unknownPrefs = line.calls[0].contact;
+
+				if(((this.unknownContactsPrefs.blockedNumbers) && (!unknownPrefs.canBeCalled())) || 
+					((this.unknownContactsPrefs.unknownNumbers) && (!unknownPrefs.personId)))
+				{
+					unknownPrefs = this.unknownContactsPrefs.unknownContacts;
+				}
+			
+				if((unknownPrefs) && (unknownPrefs.callAction) && (unknownPrefs.callAction == "direct2vm")) {
+					line.calls[0].ignored = true;
+				
+					return;
+				}
+				else if((unknownPrefs) && (unknownPrefs.callAction) && (unknownPrefs.callAction == "autohangup")) {
+					this.callIgnore(line.calls[0]);
+				
+					return;
+				}
+				else {
+					if((unknownPrefs) && (unknownPrefs.callAlert) && (unknownPrefs.callAlert != "default")) {
+						line.calls[0].contact.callAlert = unknownPrefs.callAlert;
+				
+						if((unknownPrefs.callAlert == "ringtone") && (unknownPrefs.callRingtonePath))
+							line.calls[0].contact.ringtoneLoc = unknownPrefs.callRingtonePath;
+					}
+					else {
+						line.calls[0].contact.callAlert = "ringtone";
+						line.calls[0].contact.ringtoneLoc = undefined;
+					}
+				}
+
 				enyo.application.openPhoneAppPopup("IncomingCall", incomingWindowName, {"line": line}, height);				
 			}, line));
 		}
@@ -506,7 +588,7 @@
 			//when on a call, refrain from opening the missed call popup & just show the banner & dashboard
 			if(!enyo.application.CallSynergizer.activeLine()) {
 				var height = line.calls[0].contact.canBeCalled() ? 188 : 125;
-				enyo.application.openPhoneAppPopup("MissedCall", "missedCallPopup", {"line": line}, height);
+				enyo.application.openPhoneAppPopup("MissedCall", "missedCallPopup", {"line": line, "blink": this.notificationPrefs.notificationBlink}, height);
 			} else {		
 				this.showMissedDash(line);				
 			}
@@ -1250,7 +1332,9 @@
 			}, {"owner": this});
 		}
 		//show dashboard
-		this.misseddash.push({"icon": "phonePopups/images/notification-large-missed.png","title":dashTitle, "text": dashText, line: dashInfo});
+		this.misseddash.push({"disableBlink": !this.notificationPrefs.notificationBlink, "icon": "phonePopups/images/notification-large-missed.png","title":dashTitle, "text": dashText, line: dashInfo});
+
+		this.scheduleSoundNotification(0);
 	},
 	missedLayerUpdate: function(inSender, layer, event) {
 		layer.text = this.getMissedDashContent(layer.line);
@@ -1262,14 +1346,61 @@
 	missedMessageTap: function (inSender, layer, event) {
 		var call = layer.line.calls[0];
 		if(call && call.transport && call.address && enyo.application.Utils.canBeCalled(call.transport, call.address)) {
-			enyo.application.CallSynergizer.dial(call.address, call.isVideo ? true : undefined, undefined, call.transport);
+			var autoDialing = "call";
+	
+			if((localStorage) && (localStorage["phonePrefs"]))
+				autoDialing = enyo.json.parse(localStorage["phonePrefs"]).autoDialing;
+	
+			if(autoDialing != "call")
+				enyo.application.UI.event('dial', {"fill": call.address});
+			else
+				enyo.application.CallSynergizer.dial(call.address, call.isVideo ? true : undefined, undefined, call.transport);
 		}
 		this.misseddash.pop();
 	},
 	missedUserClose: function() {
 		enyo.log("missedUserClose");
+		this.removeSoundNotification();
 	},
 	missedLayerSwipe: function() {
 		this.misseddash.pop();
+	},
+	scheduleSoundNotification: function(count) {
+		if((this.notificationPrefs.repeatInterval > 0) && (count < this.notificationPrefs.repeatLimit)) {
+			var currentTime = new Date();
+			
+			var repeatInterval = this.notificationPrefs.repeatInterval * 1000;				
+			
+			if(count == 0)
+				var playSoundTime = new Date(currentTime.getTime() + (parseInt(repeatInterval)) - CallSynergizer.kTimeoutMs);
+			else
+				var playSoundTime = new Date(currentTime.getTime() + (parseInt(repeatInterval)));
+			
+			var month = playSoundTime.getUTCMonth()+1;
+			if(month < 10) month = "0" + month;
+			var day = playSoundTime.getUTCDate();
+			if(day < 10) day = "0" + day;
+			var year = playSoundTime.getUTCFullYear();
+			
+			var hours = playSoundTime.getUTCHours();
+			if(hours < 10) hours = "0" + hours;
+			var minutes = playSoundTime.getUTCMinutes();
+			if(minutes < 10) minutes = "0" + minutes;
+			var seconds = playSoundTime.getUTCSeconds();
+			if(seconds < 10) seconds = "0" + seconds;
+			
+			var scheduledTimeStr = month + "/" + day + "/" + year + " " + hours + ":" + minutes + ":" + seconds;
+			
+			this.$.setWakeupTimeout.call({
+				'key': 'phonePlayNotificationSound',
+				'wakeup': true, 'at': scheduledTimeStr, 'uri': "palm://com.palm.applicationManager/open",
+				'params': {'id': 'com.palm.app.phone', 'params': {'playNotificationSound': count + 1}}
+			});
+		}
+	},
+	removeSoundNotification: function(count) {
+		this.$.clearWakeupTimeout.call({
+			'key': 'phonePlayNotificationSound'
+		});
 	}	
 });
--- .orig/usr/palm/applications/com.palm.app.phone/source/CallSynergyContact.js
+++ /usr/palm/applications/com.palm.app.phone/source/CallSynergyContact.js
@@ -52,6 +52,8 @@
 		this.personGivenName = undefined; // known person only, for call log
 		this.personFamilyName = undefined; // known person only, for call log
 		this.ringtoneLoc = undefined; // known person only
+		this.callAction = undefined; // known person only
+		this.callAlert = undefined; // known person only
 		this.picture = {}; // known person only
 		
 		this.isIntlNumber = (enyo.application.Utils.isValidNumber(this.address) && enyo.application.Utils.isInternationalNumber(this.address));
@@ -207,6 +209,8 @@
 		this.personGivenName = person.name.givenName;
 		this.personFamilyName = person.name.familyName;
 		this.ringtoneLoc = person.ringtone && person.ringtone.location;
+		this.callAction = person.callAction && person.callAction.action;
+		this.callAlert = person.callAlert && person.callAlert.alert;
 		
 		this._populatePersonPic(person.photos); 
 	},
--- .orig/usr/palm/applications/com.palm.app.phone/phoneApp/source/ContactLookup.js
+++ /usr/palm/applications/com.palm.app.phone/phoneApp/source/ContactLookup.js
@@ -96,7 +96,15 @@
 	handleEnterKey: function() {
 		var selected;
 		if ( this.$.divider.canGenerate ) {
-			enyo.application.CallSynergizer.dial(this.dialButtonValue, undefined, undefined, enyo.application.CallSynergizer.TRANSPORTS.TIL, undefined, true);
+			var autoDialing = "call";
+		
+			if((localStorage) && (localStorage["phonePrefs"]))
+				autoDialing = enyo.json.parse(localStorage["phonePrefs"]).autoDialing;
+		
+			if(autoDialing != "call")
+				enyo.application.UI.event('dial', {"fill": this.dialButtonValue});
+			else
+				enyo.application.CallSynergizer.dial(this.dialButtonValue, undefined, undefined, enyo.application.CallSynergizer.TRANSPORTS.TIL, undefined, true);
 		} else {
 			selected = this.$.addressingList.getSelected();
 			if (selected) {
@@ -111,7 +119,16 @@
 		} else {
 			transport = undefined;
 		}
-		enyo.application.CallSynergizer.dial(inSelected.address.value, undefined, undefined, transport, inSelected.person._id, true);
+
+		var autoDialing = "call";
+	
+		if((localStorage) && (localStorage["phonePrefs"]))
+			autoDialing = enyo.json.parse(localStorage["phonePrefs"]).autoDialing;
+	
+		if(autoDialing != "call")
+			enyo.application.UI.event('dial', {"fill": inSelected.address.value});
+		else
+			enyo.application.CallSynergizer.dial(inSelected.address.value, undefined, undefined, transport, inSelected.person._id, true);
 	},
 	back: function() {
 		var curVal = this.$.textInput.getValue();
@@ -122,4 +139,4 @@
 			return true; // handled event
 		}
 	}
-});
\ No newline at end of file
+});
--- .orig/usr/palm/applications/com.palm.app.phone/dashWorkaround/DashboardContent.js
+++ /usr/palm/applications/com.palm.app.phone/dashWorkaround/DashboardContent.js
@@ -86,7 +86,7 @@
 		this.docPath = this.docPath.slice(0,this.docPath.lastIndexOf('/')+1);
 		this.layers = params.layers;
 		this.layerCount = this.layers.length;
-		this.indicateNewContent(true);	
+//		this.indicateNewContent(true);	
 		// Configure layer clipping properly.
 		// This lets upper layers clip out lower ones, which is needed since they're transparent.
 		this.$.layer1.setClipControl(this.$.layer0);
@@ -122,6 +122,15 @@
 			window.close();
 			return;
 		}
+		
+		this.indicateNewContent(false);
+		
+		for(var i = 0; i < len; i++) {
+			if(!this.layers[i].disableBlink) {
+				this.indicateNewContent(true);
+				break;
+			}	
+		}
 		// Configure last 3 layers in our list:
 		var layers = this.layers.slice(-3);
 		this.$.layer2.setLayer(layers[2]);
--- .orig/usr/palm/applications/com.palm.app.phone/phonePopups/sources/IncomingCall.js
+++ /usr/palm/applications/com.palm.app.phone/phonePopups/sources/IncomingCall.js
@@ -19,7 +19,7 @@
 				]},
 			]},
 		
-			{kind: "CustomButton", name: "reject_button", className: "incoming-reject-button", onclick: "cancelCall"}
+			{kind: "CustomButton", name: "reject_button", className: "incoming-reject-button", onmousehold: "cancelCall", onclick: "cancelCallAlt"}
 		]}
 	]
 });
--- .orig/usr/palm/applications/com.palm.app.phone/phonePopups/sources/IncomingCallImpl.js
+++ /usr/palm/applications/com.palm.app.phone/phonePopups/sources/IncomingCallImpl.js
@@ -28,7 +28,10 @@
 		{name: "dnastSub", kind:"PalmService", service:"palm://com.palm.display/control/", subscribe: true, },
 		{name: "displayOn", kind:"PalmService", service:"palm://com.palm.display/control/"},
 
-		{name: "muteRingtone", kind:"PalmService", service:"palm://com.palm.audio/ringtone/", method: "setMuted"}
+		{name: "muteRingtone", kind:"PalmService", service:"palm://com.palm.audio/ringtone/", method: "setMuted"},
+		
+		{name: "openMessagingApp", kind:"PalmService", service:"palm://com.palm.applicationManager/", method: "launch"},
+		{name: "getAppPreferences", kind: enyo.PalmService, service: enyo.palmServices.system, method: "getPreferences"} 
 	],
 	resizeHandler: function() {
 		this.inherited(arguments);
@@ -92,10 +95,11 @@
 	    this.blockIgnore = true;
 	    this.exitStatus = "";
 	    this.muted = false;
+	    this.mutedTimeStamp = 0;
 
 	    // NOTE: this is a potentially dangerous assumption
 	    // as long as the subscription doesn't provide initial status, this will be fine.
-	    this.sliderOpen = false;
+	    enyo.application.sliderOpen = false;
 
 	    this.defaultCallOnCallSound = enyo.application.SystemStatus.getDefaultCallOnCallSound();
 
@@ -109,6 +113,9 @@
 	        soundClass = "ringtones";
 	    }
 
+	    if(call.contact.callAlert)
+	        soundClass = call.contact.callAlert;
+		
 	    if (!enyo.application.CallSynergizer.activeLine() && call.contact.ringtoneLoc) {
 	        soundFile = call.contact.ringtoneLoc;
 
@@ -243,6 +250,22 @@
 		close();
 	},
 
+	cancelCallAlt: function(inSender, inEvent) {
+		enyo.stopEvent(inEvent);
+		
+		enyo.application.CallSynergizer.callIgnore(this.incomingLine.calls[0]);
+		this.exitStatus = "ignore";
+		this.announceIgnored();
+//		close();
+
+		this.$.getAppPreferences.call({
+			keys: ["callRejection"]
+		}, {
+			onSuccess: "doAutoReply",
+			onFailure: "doAutoReply"
+		});
+	},
+
 	// hide alert and instruct blur handler to disconnect call & show ignored UI
 	rejectCall: function() {
 	    /*if (this.blockIgnore) {
@@ -255,10 +278,36 @@
 	    enyo.application.CallSynergizer.callIgnore(this.incomingLine.calls[0]);
 	    this.exitStatus = "rejected";
 	    this.announceIgnored();
-	    close();
-	},
+//	    close();
 
+		this.$.getAppPreferences.call({
+			keys: ["callRejection"]
+		}, {
+			onSuccess: "doAutoReply",
+			onFailure: "doAutoReply"
+		});
+	},
+
+	doAutoReply: function(inSender, response) {
+		if((response) && (response.callRejection) &&
+			(response.callRejection.rejectAction != "none")) 
+		{
+			if(this.incomingLine.calls[0].contact.canBeCalled()) {
+				this.$.openMessagingApp.call({
+					id: "com.palm.app.messaging", params: {
+						composeRecipients: [{address: 
+						this.incomingLine.calls[0].contact.addressFormatted}],
+						messageText: response.callRejection.rejectTemplate }
+				});
+			}
+		}
+	
+		close();
+	},
+	
 	mute: function() {
+		this.mutedTimeStamp = 0;
+	
 	    if (!this.muted) {
 	        this.muted = true;
 	    }
@@ -290,13 +339,25 @@
 	    }
 
 	    if (response.key === "slider") {
-	        var newSliderOpenState = (response.state === "up");
-	        if (this.exposed &&
-	        this.sliderOpen === false &&
-	        newSliderOpenState === true) {
-	            this.answerCall();
+	    		var newSliderOpenState = (response.state === "up");
+				
+				if((enyo.application.sliderOpen === false) && (newSliderOpenState === true)) {
+					var sliderOpenedAction = "answer";
+					
+					if((localStorage) && (localStorage["phonePrefs"]))
+						sliderOpenedAction = enyo.json.parse(localStorage["phonePrefs"]).sliderOpened;
+					
+					if(sliderOpenedAction != "none") {
+						if(this.exposed) {
+	                  this.answerCall(); 
+						
+							if(sliderOpenedAction == "speaker")
+								enyo.application.audioInterface.onAudioRouteChangeClick("phone_back_speaker");
+						}
+					}
 	        }
-	        this.sliderOpen = newSliderOpenState;
+	        
+	        enyo.application.sliderOpen = newSliderOpenState;
 	    }
 	},
 
@@ -328,10 +389,15 @@
 	        enyo.log("IncomingcallAssistant#onPuckEvent " + response.type + response.connected);
 	    }
 
+		var autoAnswer = "answer";
+		
+		if((localStorage) && (localStorage["phonePrefs"]))
+			autoAnswer = enyo.json.parse(localStorage["phonePrefs"]).removedFromTS;
+
 	    // answer the call after a delay if we're exposed, set to do so,
 	    // and we were previously on the puck
 	    if (response && response.type == "inductive") {
-	        if (this.exposed && this.puckConnected === true && response.connected === false) {	        
+	        if (this.exposed && this.puckConnected === true && response.connected === false && autoAnswer == "answer") {	        
 			enyo.job("answerCallIfStillOffPuck", enyo.bind(this, function() {
 			            this.answerIfStillOffPuck();
 			}),0.750);
@@ -428,12 +494,21 @@
 	// second closes window and rejects call
 	handleHardKeyPress: function() {
 	    enyo.log("IncomingcallAssistant#handleHardKeyPress");
+
+	    var date = new Date();
+
 	    if (this.muted) {
 	        enyo.log("IncomingcallAssistant#handleHardKeyPress reject");
-	        this.rejectCall();
+	        
+	        if((this.mutedTimeStamp > 0) && ((date.getTime() - this.mutedTimeStamp) >= 1000))
+		        this.cancelCall();
+				else	        	        
+		        this.rejectCall();
 	    } else {
 	        enyo.log("IncomingcallAssistant#handleHardKeyPress mute");
 	        this.mute();
+
+	        this.mutedTimeStamp = date.getTime();
 	    }
 	},
 
--- .orig/usr/palm/applications/com.palm.app.phone/index.html
+++ /usr/palm/applications/com.palm.app.phone/index.html
@@ -16,6 +16,9 @@
 			enyo.PopupLayer.prototype.wantsEvents = false; 
 			// main app object that's responsible for window management and keeping references to app globals
 			enyo.application = {
+				sliderOpen: false,
+				proximityEventAction: "none",
+				audioSourceChangedManually: false,
 				
 				// true for tablet with 1024. This works regardless of device orientation
 				isTablet: ((deviceDetails && deviceDetails.screenWidth == 1024) || (!window.PalmSystem && (window.innerWidth == 1024 || window.innerWidth == 768)) ),
@@ -89,6 +92,8 @@
 						$L._resources = new enyo.g11n.Resources({locale: params.locale});
 					}
 											
+					enyo.application.CallSynergizer.removeSoundNotification();
+
 					// CASE: first use programming
  					if ( params.otasp && params.firstuse ) {
 						//todo: what about the locale of firstuse?
@@ -150,6 +155,17 @@
 						params.service = params.service || params.transport;
 						params.address = params.address || params.number;
 						
+						var autoDialing = "call";
+						
+						if((localStorage) && (localStorage["phonePrefs"]))
+							autoDialing = enyo.json.parse(localStorage["phonePrefs"]).autoDialing;
+						
+						if(autoDialing != "call") {
+							enyo.application.hidden = false;							
+							enyo.application.UI.event('dial', {"fill": params.address});
+							return;
+						}
+						
 						if (enyo.application.CallSynergizer.isBTSkypeCallHack(params)) {
 							enyo.error("Bluetooth dial request cannot be made as preferred call service is invalid");
 							return;
@@ -178,10 +194,25 @@
 					
 					} else if (params.preferences) {
 						enyo.application.UI.event('preferences', params);
+					} else if (params.closeMissedCallPopup) {
+						this.closeMainCard();
+
+						this.closePhoneAppPopup("missedCallPopup");
+					} else if (params.playNotificationSound) {
+						this.closeMainCard();
+
+						window.PalmSystem.playSoundNotification("alerts");
 						
-					// default: maybe current state can handle this launch
+						enyo.application.CallSynergizer.scheduleSoundNotification(params.playNotificationSound);
 					} else {
-						enyo.application.UI.event('launch', params);
+						// default: maybe current state can handle this launch
+						if((localStorage) && (localStorage["phonePrefs"])) {
+							var phonePrefs = enyo.json.parse(localStorage["phonePrefs"]);
+
+							enyo.application.UI.event('launch', phonePrefs.startView, params);
+						}
+						else
+							enyo.application.UI.event('launch', "dialpad", params);
 					}
 					
 					// tell sysmgr we're handling the launch
@@ -236,7 +267,6 @@
 						// framework bug workaround
 						closeCard(activePhoneAppPopupName);
 						activePhoneAppPopupName = name;
-						throb = throb || true;
 						enyo.windows.openPopup("phonePopups/index.html", name, params, {}, height, throb);
 					};
 				})()
@@ -317,7 +347,13 @@
 				enyo.application.openMainCard();
 				
 				// need to synthesize this event in browser
-				enyo.application.UI.event('launch');
+				if((localStorage) && (localStorage["phonePrefs"])) {
+					var phonePrefs = enyo.json.parse(localStorage["phonePrefs"]);
+
+					enyo.application.UI.event('launch', phonePrefs.startView);
+				}
+				else
+					enyo.application.UI.event('launch', "dialpad");
 			}
 			
 			
--- .orig/usr/palm/applications/com.palm.app.phone/shared/phoneprefs/controls/InternationalCallsPref.js
+++ /usr/palm/applications/com.palm.app.phone/shared/phoneprefs/controls/InternationalCallsPref.js
@@ -8,11 +8,13 @@
 	components: [
 		// Not really a int'l pref but logically in the UI it belongs here
 		//<!-- only enabled if PHONE template(s) exists -->
+		{name: "domesticPrefs", components: [
 		{kind: "RowGroup", caption: $L("DOMESTIC CALLS"), name: "domesticPrefCallServiceRow", components: [
 			{kind: "ListSelector", value: "none", label: $L("Use"), name: "domesticPrefCallService", onChange: "onDomesticSelectorChanged"}
 		]},
+		]},
 
-		{kind: "RowGroup", caption: $L("INTERNATIONAL CALLS"), components: [
+		{kind: "RowGroup", caption: $L("INTERNATIONAL CALLS"), name: "internationalPrefs", components: [
 			{layoutKind: "HFlexLayout", align: "center", name: "internationalDialingRow", tapHighlight: false, components: [
 				{content: $L("International Dialing"), flex: 1},
 				{name: "internationalDialingToggle", kind: "ToggleButton", onChange: "internationalDialingTap", state: false}
@@ -25,6 +27,7 @@
 		]},
 
 		//<!-- only enabled if PHONE template(s) exists -->
+		{name: "SkypeInfoGroup", components: [
 		{kind: "RowGroup", caption: $L("ACCOUNTS"),  name: "SkypeInfo", components: [
 			{kind: "VirtualRepeater", name: "accountsList", onSetupRow: "getListItem", components: [
 				{kind: "Item", layoutKind: "HFlexLayout", onclick: "handleAccountsListTap", components: [
@@ -35,8 +38,9 @@
 					]},
 				]}
 			]},
-			{kind: "Button", content: $L("Add account"),  name: "addAccountButton", onclick: "addAccountHandler"},
-			{kind: "Button", content: $L("Add Visual Voicemail"), name: "addVvmAccountButton", onclick: "addVvmAccountHandler", showing: false},
+		]},
+		{kind: "Button", content: $L("Add Phone Account"),  name: "addAccountButton", onclick: "addAccountHandler"},
+		{kind: "Button", content: $L("Add Visual Voicemail"), name: "addVvmAccountButton", onclick: "addVvmAccountHandler", showing: false},
 		]},
 
 		//Service calls
@@ -105,6 +109,16 @@
 		this.$.preferredIntlCallServiceRow.setItems(this.preferredIntlCallServiceItems);
 	},
 	
+	updateView: function(view) {
+		if(view == "accounts") {
+			this.$.domesticPrefs.hide();
+			this.$.internationalPrefs.hide();
+		}
+		else {
+			this.$.SkypeInfoGroup.hide();
+		}
+	},
+	
 	mailboxQueryCallback: function(inSender, payload) {
 		this.$.vvmFirstLaunchPref.call();
 	},
--- .orig/usr/palm/applications/com.palm.app.phone/phonePopups/sources/MissedCall.js
+++ /usr/palm/applications/com.palm.app.phone/phonePopups/sources/MissedCall.js
@@ -31,6 +31,8 @@
 
 		//Service calls
 		{name: "displayStatusSubscribe", kind: enyo.PalmService, service:"palm://com.palm.display/control/", method: "status", subscribe: true, onSuccess: "onDisplayEvent", onFailure: "onDisplayEvent"},
+		{name: "setWakeupTimeout", kind: enyo.PalmService, service: 'palm://com.palm.power/timeout/', method: "set"},
+		{name: "clearWakeupTimeout", kind: enyo.PalmService, service: 'palm://com.palm.power/timeout/', method: "clear"}
 	],
 
 	create: function() {
@@ -86,12 +88,36 @@
 		this.timeStamp = Date.now();
 
 		// stay up for 1 minute
-		this.missedTimeout = window.setTimeout(enyo.hitch(this, "closeWindow"), MissedCall.kTimeoutMs);
+//		this.missedTimeout = window.setTimeout(enyo.hitch(this, "closeWindow"), MissedCall.kTimeoutMs);
+		var currentTime = new Date();
+		
+		var closePopupTime = new Date(currentTime.getTime() + MissedCall.kTimeoutMs);
+
+		var month = closePopupTime.getUTCMonth()+1;
+		if(month < 10) month = "0" + month;
+		var day = closePopupTime.getUTCDate();
+		if(day < 10) day = "0" + day;
+		var year = closePopupTime.getUTCFullYear();
+		
+		var hours = closePopupTime.getUTCHours();
+		if(hours < 10) hours = "0" + hours;
+		var minutes = closePopupTime.getUTCMinutes();
+		if(minutes < 10) minutes = "0" + minutes;
+		var seconds = closePopupTime.getUTCSeconds();
+		if(seconds < 10) seconds = "0" + seconds;
+		
+		var scheduledTimeStr = month + "/" + day + "/" + year + " " + hours + ":" + minutes + ":" + seconds;
+
+		this.$.setWakeupTimeout.call({
+			'key': 'phoneCloseMissedCallPopup',
+			'wakeup': true, 'at': scheduledTimeStr, 'uri': "palm://com.palm.applicationManager/open",
+			'params': {'id': 'com.palm.app.phone', 'params': {'closeMissedCallPopup': true}}
+		});
 
 		//register for display on/off events		
 		this.$.displayStatusSubscribe.call({});			
-		
-		if (window.PalmSystem && this.throbber == undefined) {
+
+		if (window.PalmSystem && this.throbber == undefined && enyo.windowParams.blink) {
 			this.throbber = window.PalmSystem.addNewContentIndicator();
 		}
 	},
@@ -116,8 +142,12 @@
 			enyo.application.CallSynergizer.showMissedDash(this.MissedLine);
 		}
 
-		window.clearTimeout(this.missedTimeout);
-		this.missedTimeout = undefined;
+//		window.clearTimeout(this.missedTimeout);
+//		this.missedTimeout = undefined;
+
+		this.$.clearWakeupTimeout.call({
+			'key': 'phoneCloseMissedCallPopup'
+		});
 
 		this.$.displayStatusSubscribe.cancel();
 
@@ -131,7 +161,17 @@
 	redial: function(){
 		enyo.log( "onRedial");
 		var call = this.MissedLine.calls[0];
-		enyo.application.CallSynergizer.dial(call.contact.address, call.isVideo ? true : undefined, undefined, call.transport);
+		
+		var autoDialing = "call";
+		
+		if((localStorage) && (localStorage["phonePrefs"]))
+			autoDialing = enyo.json.parse(localStorage["phonePrefs"]).autoDialing;
+		
+		if(autoDialing != "call")
+			enyo.application.UI.event('dial', {"fill": call.contact.address});
+		else
+			enyo.application.CallSynergizer.dial(call.contact.address, call.isVideo ? true : undefined, undefined, call.transport);
+
 		this.acked = true;
 		close();
    	},
--- .orig/usr/palm/applications/com.palm.app.phone/shared/phoneprefs/source/PhonePrefs.js
+++ /usr/palm/applications/com.palm.app.phone/shared/phoneprefs/source/PhonePrefs.js
@@ -12,18 +12,20 @@
 				{ kind: "PageHeader", className: "header", components: [
 				
 					{name: "photoImage", kind: "Image", className: "phone-icon", src: "../shared/phoneprefs/images/header-icon-phone.png"},
-					{content: $L("Phone Preferences"), className: "phone-header-caption"}
+					{name: "prefsPageHeader", content: $L("Preferences & Accounts"), className: "phone-header-caption"},
+					{name: "networkPageHeader", content: $L("Network Services"), className: "phone-header-caption"}
 				]},
 				{style: "padding: 5px;", components:[
 					{name: "phoneNumberScene", kind: "PhoneNumberPref"},
-					{kind: "WhenTypingPref"},
+					{name: "whenTypingPref", kind: "WhenTypingPref"},
+					{name: "phoneAppPrefs", kind: "PhoneAppPrefs"},
 					{name: "callprefs", kind: "CallsPref"},
 					{name: "intlCallsPrefs", kind: "InternationalCallsPref"},
 					{name: "voicemailNumberScene", kind: "VoicemailNumber"},
 					{name: "dialingScene", kind: "Dialing", onAddDialingShortcut: "dialingShortcutClick"},
 					{name: "securityView", kind: "Security", onRefreshCard: "updateCardUI"},
 					{name: "network", kind: "Network", onEditNetworkClick: "editNetwork", onCarrierNameChange: "updateCarrierName"},
-					{kind: "Accessibility"},
+					{name: "accessibility", kind: "Accessibility"},
 					{kind: "PRL"},
 					{name: "worldphone", kind: "WorldPhone"},
 					{name: "voicemailclear", kind: "Button", content: $L("Reset Voicemail Count"), showing: false, onclick: "handleTapOnVoicemailReset"},
@@ -75,6 +77,30 @@
 
 	
 	handleLaunch: function(params) {
+		if((params) && (params.prefsandaccounts)) {
+			this.$.networkPageHeader.hide();
+		
+			this.$.phoneNumberScene.hide();
+			this.$.callprefs.hide();
+			this.$.voicemailNumberScene.hide();
+			this.$.dialingScene.hide();
+			this.$.securityView.hide();
+			this.$.network.hide();
+			this.$.worldphone.hide();
+			this.$.voicemailclear.hide();
+			this.$.accessibility.hide();
+			
+			this.$.intlCallsPrefs.updateView("accounts");
+		}
+		else {
+			this.$.prefsPageHeader.hide();
+
+			this.$.whenTypingPref.hide();
+			this.$.phoneAppPrefs.hide();
+			
+			this.$.intlCallsPrefs.updateView("preferences");
+		}
+
 		this.log(enyo.json.stringify(params));
 		if (!params || params.launchType == undefined) {	
 			this.handleFlightMode(); 
--- .orig/usr/palm/applications/com.palm.app.phone/source/uistates/PreferencesCard.js
+++ /usr/palm/applications/com.palm.app.phone/source/uistates/PreferencesCard.js
@@ -50,5 +50,21 @@
 		} else {
 			enyo.application.UI.enter(params.nextState);
 		}
-	}	
+	},
+	event_preferences: function(params) {
+		this.event_back();
+		
+		enyo.application.UI.enter('preferences_card',params);
+	},
+	// default prefsandaccounts goes to main prefsandaccounts scene
+	event_prefsandaccounts: function(params) {
+		if(!params)
+			params = {prefsandaccounts: true};
+		else
+			params.prefsandaccounts = true;
+		
+		this.event_back();
+		
+		enyo.application.UI.enter('preferences_card',params);
+	}		
 });
--- .orig/usr/palm/applications/com.palm.app.phone/source/proxInterface.js
+++ /usr/palm/applications/com.palm.app.phone/source/proxInterface.js
@@ -8,6 +8,7 @@
 	kind: enyo.Component,
 	components: [
 		{name: "proxSet", kind: enyo.PalmService, service: "palm://com.palm.display/control/", method: "setProperty", subscribe: true},
+		{name: "dnastSub", kind:"PalmService", service:"palm://com.palm.display/control/", method: "setProperty", subscribe: true},
 
 		{name:"proxStateListeners", kind:"Utils.Dispatcher"},
 	],
@@ -46,6 +47,10 @@
 					&& Object.keys(profiles).length == 2 				
 					&& profiles["phone_front_speaker"] == true) {
 					scenario = "phone_front_speaker";
+				} else if (!enyo.application.puckInterface.isPuckConnected() && 
+					Object.keys(profiles).length == 2
+					&& profiles["phone_back_speaker"] == true) {
+					scenario = "phone_back_speaker";
 				} else {
 					return;
 				}
@@ -53,7 +58,10 @@
 		}
 		
 		if (enyo.application.CallSynergizer.isPendingOrActive()) {
-			if (scenario == "phone_front_speaker") {
+			if ((scenario == "phone_front_speaker") || 
+				((!enyo.application.audioSourceChangedManually) && 
+				(enyo.application.proximityEventAction == "change")))
+			{
 				this.proxOn();
 			} else {
 				enyo.log( "TEL#enableProxOnCallAndAudio not enabled: " + scenario);
@@ -65,9 +73,13 @@
 	},
 
 	proxOn: function() {
+		if(enyo.application.Cache.screenLocked)
+			return;
+	
 		if (!this.proxSubscription) {
 			enyo.log( "TEL#proxOn");
 			this.$.proxSet.call({'proximityEnabled': true, 'client': "phoneapp"});
+			this.$.dnastSub.call({"requestBlock": true, "client": "phoneapp"});
 			this.proxSubscription = true;
 		} else {
 			enyo.log( "TEL#proxOn - already on");
@@ -78,6 +90,7 @@
 		if (this.proxSubscription) {
 			enyo.log( "TEL#proxOff");
 			this.$.proxSet.cancel();
+			this.$.dnastSub.cancel();
 			this.proxSubscription = false;
 		}
 	}
--- .orig/usr/palm/applications/com.palm.app.phone/source/uistates/Start.js
+++ /usr/palm/applications/com.palm.app.phone/source/uistates/Start.js
@@ -5,8 +5,14 @@
 		
 	},
 	// always launch to dialpad first
-	event_launch: function(params) {
-		enyo.application.UI.enter('dialpad_card', params);
+	event_launch: function(view, params) {
+//		enyo.application.UI.enter('dialpad_card', params);
+		if(view == "calllog")
+			enyo.application.UI.enter('calllog', params);
+		else if(view == "favorites")
+			enyo.application.UI.enter('favorites', params);
+		else
+			enyo.application.UI.enter('dialpad_card', params);
 	},
 	event_emergency: function(isEnabled) {
 		if ( isEnabled ) {
--- .orig/usr/palm/applications/com.palm.app.phone/shared/phoneprefs/controls/WhenTypingPref.js
+++ /usr/palm/applications/com.palm.app.phone/shared/phoneprefs/controls/WhenTypingPref.js
@@ -6,9 +6,9 @@
 	kind: "VFlexBox",
 	className: "enyo-bg",
 	components: [
-		{kind: "RowGroup", caption: $L("WHEN TYPING IN DIALPAD"), components: [
+		{kind: "RowGroup", caption: $L("DIALING"), components: [
 			{layoutKind: "HFlexLayout", align: "center", tapHighlight: false, components: [
-				{flex: 1, content: $L("Show Contact Matches")},
+				{flex: 1, content: $L("Contact Matching")},
 
 				// Make sure that the component you want to be live has onclick set to 'propertyChanged'
 				{name: "showContactMatchField", kind: "ToggleButton", onChange: "matchValueChanged"}
