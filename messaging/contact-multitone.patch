Index: /usr/palm/applications/com.palm.app.messaging/app/controllers/listview-assistant.js
===================================================================
--- .orig/usr/palm/applications/com.palm.app.messaging/app/controllers/listview-assistant.js
+++ /usr/palm/applications/com.palm.app.messaging/app/controllers/listview-assistant.js
@@ -434,7 +434,8 @@ var ListviewAssistant = Class.create(App
 		// if we are in the history view and the screen is on, do not display a banner + dashboard, just play a notification sound
 		if (this.isScreenOn) { 
 			if (data.notificationType == this.Messaging.notificationTypes.newMessage && this.currentListView == this.Messaging.Views.HISTORY) {
-				data = {playSoundOnly:true};
+				data = $H(data);
+				data = data.merge({playSoundOnly:true});
 			}
 		}
 		return data;
Index: /usr/palm/applications/com.palm.app.messaging/app/controllers/chatview-assistant.js
===================================================================
--- .orig/usr/palm/applications/com.palm.app.messaging/app/controllers/chatview-assistant.js
+++ /usr/palm/applications/com.palm.app.messaging/app/controllers/chatview-assistant.js
@@ -346,7 +346,8 @@ var ChatviewAssistant = Class.create({
 		if(this.isScreenOn && data.chatThreadId == this.chatThreadId) {
 			Mojo.Log.info("[CV] ****** chatview considerForNotification --- screen is on!");
 			if(data.notificationType == this.Messaging.notificationTypes.newMessage) {
-				data = {playSoundOnly:true};
+				data = $H(data);
+				data = data.merge({playSoundOnly:true});
 			} else if( data.notificationType == this.Messaging.notificationTypes.sendFailure) {
 				data = {}; // wipe out the notification because we are in the chat
 			}
Index: /usr/palm/applications/com.palm.app.messaging/app/models/messaging-luna-service.js
===================================================================
--- .orig/usr/palm/applications/com.palm.app.messaging/app/models/messaging-luna-service.js
+++ /usr/palm/applications/com.palm.app.messaging/app/models/messaging-luna-service.js
@@ -993,5 +993,168 @@ var MessagingMojoService = {
 		  method: 'setSMSCAddressAndEmailGateway',
 		  parameters: {smscAddr:address, emailGateway: gateway}
 	  });
+	},
+	
+		isNumberValid: function(number) {
+		return !(number === undefined
+			|| number == null
+			|| number == "" 
+			|| number == "unknown" 
+			|| number == "unknown caller"
+			|| number == "blocked caller") 
+	},
+	
+	// use contacts service and carrier book to perform reverse lookup on number.  stores results in passed contact object.
+	// runs callback when done.
+	// if the number isn't valid, marks contact lookup complete 
+	// if there's already one happening, or one already completed, just fires callback
+	// if there's a lateCallback provided, calls that if the result comes much later
+	rLookup: function(number, contact, callback, lateCallback){
+		
+		//Reset contact to always get the tone
+		contact = {};	
+		Mojo.Log.error("Current contact value: %j",contact);
+		Mojo.Log.error("SMS ID: %j",number);
+		
+		// bail if the number is invalid
+		if (!(this.isNumberValid(number))) {
+				this.finishLookup(contact, callback);
+				return;
+		}
+		
+		if (contact.lookupComplete) {
+			callback(contact);	
+			return;
+		}
+		
+		if (contact.lookupPending) {
+			callback(contact);	
+			return;
+		}
+		
+		
+		// use contacts service to perform lookup.
+		// if contact already has an id in it, use person lookup
+		// instead of doing reverse lookup on number
+		contact.lookupPending = true;
+		var method, params;
+		if (contact.initialId) {
+			method = 'basicDetails'
+			params =  {'id' : contact.initialId}
+			delete contact.initialId;
+		} else {
+			method = 'reverseLookup'
+			params = {
+                'value': number,
+                'type': "phone"
+            }
+		}
+		this.lastRequest = new Mojo.Service.Request('palm://com.palm.contacts', {
+			'method': method,
+            parameters: params,
+            onSuccess: this.onLookup.bind(this, number, contact, callback, lateCallback),
+			onFailure: function() {
+				// cancel previous lookup, so this doesn't fire on a service crash
+				if (this.lastRequest) {
+					this.lastRequest.cancel();
+					this.lastRequest = undefined;
+				}
+				
+				this.carrierBookLookup(number,contact);
+				this.finishLookup(contact, callback);
+			}.bind(this)
+        });
+		
+		// timeout if lookup hasn't completed in 4 seconds
+		this.lookupTimeout = setTimeout(this.onLookupTimeout.bind(this, contact, callback, lateCallback), 4000);
+    },
+	
+	// when contact lookup returns, check for valid result
+	// if valid result, grab name, ringtone; if there's a picture, start loading and set callback to measure it
+	// if no valid result, look in carrier book
+	// fire callback when done
+    onLookup: function(number, contact, callback, lateCallback, result){
+        Mojo.Log.info( "PhoneApp: Contact::onLookup CALLER ID LOOKUP %s RETURNED %j" , number , result);
+		var statusChange = "";
+		
+		// cancel previous lookup, so this doesn't fire on a service crash
+		if (this.lastRequest) {
+			this.lastRequest.cancel();
+			this.lastRequest = undefined;
+		}
+		
+		if (result.record) {
+			/*		
+			// don't match if the number we get back is different than the number
+			// we passed in (provided the lengths are the same)
+			if (!(result.record.number)
+				|| ( (result.record.number) && ( (result.record.number.length !== number.length) 
+					|| (result.record.number.length === number.length 
+						 && result.record.number === number)))) {
+			*/
+			contact.id = result.record.id;
+			
+	
+			contact.ringtoneLoc = result.record.messagingRingtoneLoc;
+			Mojo.Log.error("MSGTone: %j",contact.ringtoneLoc);			
+
+		}
+		
+		this.finishLookup(contact, callback, lateCallback);
+    },
+	
+	
+
+	// mark complete; cancel timeout; fire callback if it hasn't fired yet
+	finishLookup: function(contact, callback, lateCallback) {
+		contact.lookupPending = false;
+		
+		// cancel lookup timeout
+		clearTimeout(this.lookupTimeout); 
+		this.lookupTimeout = undefined;
+		
+		if (!(contact.lookupComplete)) {
+			contact.lookupComplete = true;
+			callback(contact);
+		// if we have a late return, and we got a contact result, call
+		// the late return update 
+		} else if (lateCallback && contact.doLateCallback && contact.id) {
+			contact.doLateCallback = false;
+			lateCallback.delay(5, contact);
+		} else {
+		}
+		
+	},
+	
+	// flag lookup as done; proceed with callback
+	onLookupTimeout: function(contact, callback, lateCallback) {
+		
+		if (lateCallback) {
+			contact.doLateCallback = true;
+		} else if (this.lastRequest && !lateCallback) {
+			// cancel previous lookup, so this doesn't fire on a service crash
+			this.lastRequest.cancel();
+			this.lastRequest = undefined;
+		}
+		
+		// clear timeout
+		this.lookupTimeout = undefined;
+		
+		// flag done; fire callback if it hasn't yet
+		contact.lookupComplete = true;
+		var lookupWasPending = contact.lookupPending;
+		contact.lookupPending = false;
+		if (lookupWasPending) 
+			callback(contact);
+	},
+	
+	getMessagetone:  function(callback) {
+  		var request = new Mojo.Service.Request('palm://com.palm.systemservice', {
+  			method: 'getPreferences',
+  			parameters: {"keys":["messagetone"]},
+  			onSuccess: callback,
+  			onFailure: callback
+  		});
+  		return request;
 	}
 };
\ No newline at end of file
Index: /usr/palm/applications/com.palm.app.messaging/app/controllers/notification-assistant.js
===================================================================
--- .orig/usr/palm/applications/com.palm.app.messaging/app/controllers/notification-assistant.js
+++ /usr/palm/applications/com.palm.app.messaging/app/controllers/notification-assistant.js
@@ -27,6 +27,8 @@ function NotificationAssistant(controlle
 	};
 }
 
+var contact = {};
+
 NotificationAssistant.prototype.subscribeToNotifications = function(){
 	this.messageNotificationRequest = MessagingMojoService.registerForIncomingMessages({onSuccess: this.sendNotification.bind(this, this.Messaging.notificationTypes.newMessage)});
 	this.sendErrorNotificationRequest = MessagingMojoService.registerForSendFailures(this.sendNotification.bind(this, this.Messaging.notificationTypes.sendFailure));
@@ -35,6 +37,37 @@ NotificationAssistant.prototype.subscrib
 	this.airplaneModeNotificationRequest = MessagingMojoService.registerForAirplaneModeNotifications(this.sendAirplaneModeNotification.bind(this));
 };
 
+NotificationAssistant.prototype.doBanner = function(bannerParams,bannerLaunchParams,bannerType,payload) {
+	if (payload.messagetone.fullPath)
+		bannerParams.soundFile = payload.messagetone.fullPath;
+	this.controller.showBanner(bannerParams,bannerLaunchParams,bannerType);
+};
+
+NotificationAssistant.prototype.playMessagetone = function(payload){
+	if (payload.messagetone.fullPath)
+		this.controller.playSoundNotification('alerts',payload.messagetone.fullPath);
+	else
+		this.controller.playSoundNotification('alerts','');
+};
+
+NotificationAssistant.prototype.doB = function(bannerParams,bannerLaunchParams,bannerType,contact) {
+        Mojo.Log.error("Banner Ringtone: %j",contact.ringtoneLoc);                                                                                                                          
+	if (contact.ringtoneLoc) {
+		bannerParams.soundFile = contact.ringtoneLoc;
+		this.controller.showBanner(bannerParams,bannerLaunchParams,bannerType);
+	} else {
+		MessagingMojoService.getMessagetone(this.doBanner.bind(this,bannerParams,bannerLaunchParams,'chat'));
+	}
+};
+
+NotificationAssistant.prototype.playmsgtone = function(contact){
+	Mojo.Log.error("Playmsgtone Ringtone: %j",contact.ringtoneLoc);
+	if (contact.ringtoneLoc)
+		this.controller.playSoundNotification('alerts',contact.ringtoneLoc);
+	else
+		MessagingMojoService.getMessagetone(this.playMessagetone.bind(this));
+};
+
 NotificationAssistant.prototype.sendNotification = function(notificationType, resp){
 	if (window.PalmSystem && !resp.returnValue) {
 		try {
@@ -140,7 +173,8 @@ NotificationAssistant.prototype.consider
 	
 	// check if we should only play a sound (when you are already in a chat & a new message comes in)
 	if(notificationData.get('playSoundOnly') && this.Messaging.messagingPrefs.enableNotificationSound) {
-		this.controller.playSoundNotification('alerts','');
+		var smsid = notificationData.get('address');
+		MessagingMojoService.rLookup(smsid,contact,this.playmsgtone.bind(this),this.playmsgtone.bind(this));		
 		return; // don't display any visual notification
 	}	
 	
@@ -176,10 +210,11 @@ NotificationAssistant.prototype.sendClas
 
 	notificationData.set('alertTitle',alertTitle);
 	this.class0AlertData.list.push(notificationData);
-	this.renderClass0PopupAlert(true);
+	var smsid = notificationData.get('address');
+	MessagingMojoService.getMessagetone(this.renderClass0PopupAlert.bind(this,true));
 };
 
-NotificationAssistant.prototype.renderClass0PopupAlert = function(playSound) {
+NotificationAssistant.prototype.renderClass0PopupAlert = function(playSound,messageTone) {
 	var class0Stage = this.controller.getStageController(Class0AlertStageName);
 
 	if(class0Stage) {
@@ -188,6 +223,8 @@ NotificationAssistant.prototype.renderCl
 		var soundClass = 'none';
 		if(playSound) {
 			soundClass = 'alerts';
+			if(messageTone)
+				soundFile = messageTone;
 		}		
 		
 		var pushClass0AlertScene = function(stageController) {
@@ -198,7 +235,8 @@ NotificationAssistant.prototype.renderCl
 			name: Class0AlertStageName,
 			lightweight: true,
 			height: 300,
-			soundclass: soundClass
+			soundclass: soundClass,
+			soundfile: soundFile
 		}, pushClass0AlertScene, 'popupalert');		
 	}
 	
@@ -253,8 +291,6 @@ NotificationAssistant.prototype.sendNewM
 	var bannerParams = {
 		messageText: notificationText
 	};
-	if (this.Messaging.messagingPrefs.enableNotificationSound)
-		bannerParams.soundClass = "alerts";
 	var bannerLaunchParams =  {
 		chatThreadId: chatThreadId,
 		clearBanner: true		
@@ -262,10 +298,17 @@ NotificationAssistant.prototype.sendNewM
 	
 	if (this.Messaging.DisplayState.isDisplayOn()) {
 		Mojo.Log.info("notificationAssistant - executing full banner notification");	
-		this.controller.showBanner(bannerParams, bannerLaunchParams, 'chat');		
+		if (this.Messaging.messagingPrefs.enableNotificationSound) {
+        		var smsid = notificationData.get('address');                                                  
+			bannerParams.soundClass = "alerts";
+			MessagingMojoService.rLookup(smsid,contact,this.doB.bind(this,bannerParams,bannerLaunchParams,'chat'),this.doB.bind(this,bannerParams,bannerLaunchParams,'chat'));
+		} else {
+			Mojoa.Log.error("Setting banner params");	
+			this.controller.showBanner(bannerParams, bannerLaunchParams, 'chat');
+		}	
 	} else if (this.Messaging.messagingPrefs.enableNotificationSound) {
-		Mojo.Log.info("notificationAssistant - playing sound notification only");
-		this.controller.playSoundNotification('alerts','');
+        	var smsid = notificationData.get('address');                                                  
+		MessagingMojoService.rLookup(smsid,contact,this.playmsgtone.bind(this),this.playmsgtone.bind(this));
 	}
 	
 	// Store the data so it can be used in the dashboard
@@ -324,13 +367,9 @@ NotificationAssistant.prototype.sendNewM
 		// delay creating the dashboard window for the case where the banner is clicked on
 		// to take you to the chat view.  This will likely result in the dashboard data
 		// being cleared.  If the dashboard data is empty, we do not need to create the dashboard.		
-		if (this.Messaging.DisplayState.isDisplayOn()) {
-			if (!this.isNewMessageDashboardPending) {
-				this.isNewMessageDashboardPending = true; 
-				createDashboard.delay(5);
-			}
-		} else {
-			createDashboard(); // if the screen is off, create the dashboard right away
+		if (!this.isNewMessageDashboardPending) {
+			this.isNewMessageDashboardPending = true; 
+			createDashboard.delay(5);		
 		}
 	}
 };
