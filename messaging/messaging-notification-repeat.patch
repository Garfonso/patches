diff --git a/usr/palm/applications/com.palm.app.messaging/app/controllers/app-assistant.js b/usr/palm/applications/com.palm.app.messaging/app/controllers/app-assistant.js
index 5867d78..a39955f 100644
--- a/usr/palm/applications/com.palm.app.messaging/app/controllers/app-assistant.js
+++ b/usr/palm/applications/com.palm.app.messaging/app/controllers/app-assistant.js
@@ -69,8 +69,10 @@ var AppAssistant = Class.create({
 			this.launchChatWithPerson(stageController,launchParams.personId, launchParams.contactPointId, launchParams.address, launchParams.type, launchParams.serviceName);
  		// Launching composeview with message/attachment/composeAddress
 		} else if (launchParams.messageText || launchParams.attachment || launchParams.composeAddress || (launchParams.composeRecipients && launchParams.composeRecipients.length)) {
-			
 			this.launchCompose(stageController,launchParams);
+		// play alarm nag			
+		} else if(launchParams.playalarmsound){
+			this.playAlarmSound();
 		// Launch listview - make sure the listview is the current scene, don't just focus the window
 		} else if (launchParams.launchListView) {
 			this.launchListView(stageController,launchParams.forceListView);
@@ -88,7 +90,14 @@ var AppAssistant = Class.create({
 			this.launchMessaging(stageController);
 		}		
 	},
-	
+
+	playAlarmSound: function() {
+		var dashboard = this.appController.notificationAssistant.controller.getStageProxy(DashboardMessageStageName);
+		if (dashboard) {
+			dashboard.delegateToSceneAssistant("playAlarmSound");
+		}
+	},
+			
 	launchChatWithId: function(stageController, chatThreadId) {
 		if (stageController) {			
 			// Don't pop/push if the chat we want is already open
diff --git a/usr/palm/applications/com.palm.app.messaging/app/controllers/dashboardMessage-assistant.js b/usr/palm/applications/com.palm.app.messaging/app/controllers/dashboardMessage-assistant.js
index fe431e5..a2f0b6e 100644
--- a/usr/palm/applications/com.palm.app.messaging/app/controllers/dashboardMessage-assistant.js
+++ b/usr/palm/applications/com.palm.app.messaging/app/controllers/dashboardMessage-assistant.js
@@ -1,5 +1,7 @@
 /* Copyright 2009 Palm, Inc.  All rights reserved. */
 
+g_notificationRepeatCount = 0;
+
 function DashboardMessageAssistant(dashboardData) {
 	this.dashboardData = dashboardData; // hold onto a reference to the dashboardData
 	this.appController = Mojo.Controller.getAppController();
@@ -9,6 +11,39 @@ function DashboardMessageAssistant(dashboardData) {
 }
 
 DashboardMessageAssistant.prototype.setup = function() {
+
+	//load the notification repeat preferences.
+	//get notification repeat interval and max repeat values from cookie
+	this.notificationCookie = new Mojo.Model.Cookie("com.palm.app.messaging.notificationrepeat");
+	
+	if (this.notificationCookie) 
+	{
+		var notificationCookie = this.notificationCookie.get();
+
+		if (notificationCookie) 
+		{			
+			if(notificationCookie.notificationRepeatInterval)
+			{
+				this.notificationRepeatInterval = notificationCookie.notificationRepeatInterval;
+			}
+			else
+			{
+				//set default value to 2 minutes
+				this.notificationRepeatInterval = '2';
+			}
+			
+			if(notificationCookie.notificationMaxRepeat)
+			{
+				this.notificationMaxRepeat = notificationCookie.notificationMaxRepeat;
+			}
+			else
+			{
+				//set default value to unlimited
+				this.notificationMaxRepeat = '99999';
+			}
+		}
+	}
+	
 	this.update(true);
 	this.messageInfoElement = this.controller.get('message_info');
 	this.messageInfoElement.addEventListener(Mojo.Event.tap, this.tapHandler);
@@ -18,9 +53,16 @@ DashboardMessageAssistant.prototype.cleanup = function() {
 	// If the dashboard is unloaded then wipe out our data
 	this.appController.notificationAssistant.resetNewMessages();
 	this.messageInfoElement.removeEventListener(Mojo.Event.tap, this.tapHandler);
+	
+	//remove the Notification repeat task
+	this.removePlayAlarmSoundTask();
 };
 
 DashboardMessageAssistant.prototype.update = function(isNewContent) {
+
+	//remove the nag reminder
+	this.removePlayAlarmSoundTask();
+
 	// TODO close the dashboard if dashboardData is empty?
 	if (!this.dashboardData || this.dashboardData.newest == undefined) {
 		Mojo.Log.error("DashboardMessageAssistant.update called with empty data.");
@@ -28,6 +70,9 @@ DashboardMessageAssistant.prototype.update = function(isNewContent) {
 		this.closeDashboard();
 		return;
 	}
+
+	//reschedule the nag reminder
+	this.schedulePlayAlarmSoundTask();
 	
 	var data = this.dashboardData[this.dashboardData.newest].list;
 	var numConversations = Object.keys(this.dashboardData).length - 1; // subtract one because of the 'newest' property
@@ -142,6 +187,69 @@ DashboardMessageAssistant.prototype.tapHandler = function(event) {
 	}
 };
 
+DashboardMessageAssistant.prototype.playAlarmSound =  function() {
+	//play nag sound and reschedule
+	if (this.appController.notificationAssistant.Messaging.messagingPrefs.enableNotificationSound) {
+		//first try to use the SMS Tone Per Contact method if that fails use the default method
+		try
+		{
+			var data = this.dashboardData[this.dashboardData.newest].list;
+			this.appController.notificationAssistant.playMsgToneForSMSId(data[0].address);
+		}
+		catch(e)
+		{
+			var notifParams = {};
+			this.appController.notificationAssistant.setNotificationSound(notifParams);
+			this.appController.notificationAssistant.controller.playSoundNotification(notifParams.soundClass, notifParams.soundFile);
+		}
+		
+		this.schedulePlayAlarmSoundTask();
+	}
+};
+
+DashboardMessageAssistant.prototype.schedulePlayAlarmSoundTask = function() {
+	try {
+		//retrigger reminder every X minutes until we acknowledge it.
+		//notificationRepeatInterval disables the notification repeat
+		//also check to make sure we have not exceeded the max repeat value
+		if( parseFloat(this.notificationRepeatInterval) != 0 && g_notificationRepeatCount < parseInt(this.notificationMaxRepeat))
+		{
+			g_notificationRepeatCount++;
+
+			var playSoundTime = new Date();
+			playSoundTime = new Date(playSoundTime.getTime() + parseFloat(this.notificationRepeatInterval)*60*1000);
+
+			this.controller.serviceRequest('palm://com.palm.taskScheduler', {
+				method: 'updateTask',
+				parameters: {uri: 'palm://com.palm.applicationManager/open',
+					arguments: {'id': 'com.palm.app.messaging',
+						'params': {'playalarmsound': true}},
+				key: 'msg-playalarmsound',
+				start: {date: playSoundTime.toUTCString()}}
+				});
+		}
+	}
+	catch (e) {
+		Mojo.Log.logException(e, "dashboardMessage-assistant.schedulePlayAlarmSoundTask");
+	}
+};
+
+DashboardMessageAssistant.prototype.removePlayAlarmSoundTask =  function() {
+	try 
+	{
+		//reset the notification repeat counter
+		g_notificationRepeatCount = 0;
+			
+		this.controller.serviceRequest('palm://com.palm.taskScheduler', {
+			method: 'removeTask',
+			parameters: {key: 'msg-playalarmsound'}
+			});
+	}
+	catch (e) {
+		Mojo.Log.logException(e, "dashboardMessage-assistant.removePlayAlarmSoundTask");
+	}
+};
+
 DashboardMessageAssistant.prototype.closeDashboard = function(){
 	this.controller.window.close(); 
 };
\ No newline at end of file
diff --git a/usr/palm/applications/com.palm.app.messaging/app/controllers/notification-assistant.js b/usr/palm/applications/com.palm.app.messaging/app/controllers/notification-assistant.js
index 8238c68..b732bce 100644
--- a/usr/palm/applications/com.palm.app.messaging/app/controllers/notification-assistant.js
+++ b/usr/palm/applications/com.palm.app.messaging/app/controllers/notification-assistant.js
@@ -52,6 +52,12 @@ NotificationAssistant.prototype.sendNotification = function(notificationType, re
 	}
 };
 
+//Support for using SMS Tone Per Contact from the Notification Repeat Patch
+//placing it here to avoid patch conflicts.
+NotificationAssistant.prototype.playMsgToneForSMSId = function(SMSId){
+	MessagingMojoService.rLookup(SMSId,contact,this.playmsgtone.bind(this),this.playmsgtone.bind(this));
+};
+
 /*
  * <ReminderCode>
  */
diff --git a/usr/palm/applications/com.palm.app.messaging/app/controllers/prefsAccountSummary-assistant.js b/usr/palm/applications/com.palm.app.messaging/app/controllers/prefsAccountSummary-assistant.js
index 50c8e26..039d784 100644
--- a/usr/palm/applications/com.palm.app.messaging/app/controllers/prefsAccountSummary-assistant.js
+++ b/usr/palm/applications/com.palm.app.messaging/app/controllers/prefsAccountSummary-assistant.js
@@ -16,6 +16,39 @@ var PrefsAccountSummaryAssistant = Class.create({
     },
  
     setup: function(){
+		//get notification repeat interval and max repeat values from cookie
+		this.notificationCookie = new Mojo.Model.Cookie("com.palm.app.messaging.notificationrepeat");
+
+		if (this.notificationCookie) 
+		{
+			var notificationCookie = this.notificationCookie.get();
+
+			if (notificationCookie) 
+			{			
+				if(notificationCookie.notificationRepeatInterval)
+				{
+					this.notificationRepeatInterval = notificationCookie.notificationRepeatInterval;
+				}
+				else
+				{
+					//set default value to 2 minutes
+					this.notificationRepeatInterval = '2';
+				}
+				
+				if(notificationCookie.notificationMaxRepeat)
+				{
+					this.notificationMaxRepeat = notificationCookie.notificationMaxRepeat;
+				}
+				else
+				{
+					//set default value to unlimited
+					this.notificationMaxRepeat = '99999';
+				}
+			}
+		}
+		
+		this.renderNotificationRepeatValues(this.getCurrentNotificationRepeatIntervalString(), this.getCurrentNotificationMaxRepeatString());
+		
       this.preferencesAccountsModel = {items: []};
 	  this.controller.setupWidget('preferences-accounts', {itemTemplate:'prefsAccountSummary/accountsRow'}, this.preferencesAccountsModel);
 
@@ -35,9 +68,25 @@ var PrefsAccountSummaryAssistant = Class.create({
       this.controller.listen('addAccountButton',Mojo.Event.tap, this.handleAddAccountTap);   
    
       this.controller.listen('currentringtonerow',Mojo.Event.tap, this.chooseNotificationRingtone);
+	  
+		//repeat notification handlers
+		this.notificationRepeatIntervalClickHandler = this.handleNotificationRepeatIntervalClick.bindAsEventListener(this);
+		this.controller.get('pv_notification_repeat_interval').observe('mojo-tap', this.notificationRepeatIntervalClickHandler);
+		this.notificationMaxRepeatClickHandler = this.handleNotificationMaxRepeatClick.bindAsEventListener(this);
+		this.controller.get('pv_notification_max_repeat').observe('mojo-tap', this.notificationMaxRepeatClickHandler);
     },
 	
 	cleanup: function() {
+		
+		//save notification repeat preferences
+		if (this.notificationCookie)
+		{
+			this.notificationCookie.put({
+										notificationRepeatInterval: this.notificationRepeatInterval,
+										notificationMaxRepeat: this.notificationMaxRepeat
+										});
+		}
+		
 		this.controller.stopListening('preferences-accounts',Mojo.Event.listTap, this.handleAccountListTap);
 		this.controller.stopListening('addAccountButton',Mojo.Event.tap, this.handleAddAccountTap);
 		if (this.saveSMSPrefs) {
@@ -46,6 +95,12 @@ var PrefsAccountSummaryAssistant = Class.create({
       this.controller.stopListening('notificationToggle',Mojo.Event.propertyChange,this.notificationToggleChanged);
       this.controller.stopListening('notificationSoundSelector',Mojo.Event.propertyChange,this.notificationSoundToggleChanged);		
       this.controller.stopListening('autoDownloadToggle',Mojo.Event.propertyChange,this.autoDownloadToggleChanged);
+	  
+		//stop observing notification repeat controls
+		this.controller.get('pv_notification_repeat_interval').stopObserving('mojo-tap', this.notificationRepeatIntervalClickHandler);
+		this.notificationRepeatIntervalClickHandler = undefined;
+		this.controller.get('pv_notification_max_repeat').stopObserving('mojo-tap', this.notificationMaxRepeatClickHandler);
+		this.notificationMaxRepeatClickHandler = undefined;
 	},
 
 	handleAccountListTap: function(e) {
@@ -342,5 +397,120 @@ var PrefsAccountSummaryAssistant = Class.create({
 	  Object.extend(newParams,this.params);
       Object.extend(newParams,inputHash);
       this.controller.stageController.pushScene('prefsSetupAccount',newParams);
-    }
+    },
+	
+	//notification repat settings section
+	renderNotificationRepeatValues: function(notificationRepeatIntervalStr, notificationMaxRepeatStr) {
+		//Mojo.Log.info('prefs-assistant: renderNotificationRepeatValues');
+		var obj = {};
+		
+		// Notification Repeat Interval
+		this.controller.get('pv_notification_repeat_interval_value').update(notificationRepeatIntervalStr);
+		
+		// Notification Max Repeat
+		this.controller.get('pv_notification_max_repeat_value').update(notificationMaxRepeatStr);
+	},
+	
+	getCurrentNotificationRepeatIntervalString: function() {
+		var index = 0;
+		for (index = 0; index < this.notificationRepeatIntervals.size(); index++) {
+			if (this.notificationRepeatIntervals[index].command == this.notificationRepeatInterval)
+				return this.notificationRepeatIntervals[index].label;
+		}
+	},
+	
+	getCurrentNotificationMaxRepeatString: function() {
+		var index = 0;
+		for (index = 0; index < this.notificationMaxRepeats.size(); index++) {
+			if (this.notificationMaxRepeats[index].command == this.notificationMaxRepeat)
+				return this.notificationMaxRepeats[index].label;
+		}
+	},
+	
+	notificationRepeatIntervalChoose: function(value) {
+		//Mojo.Log.info('prefs-assistant: defaultNotificationRepeatIntervalChoose');
+		
+		if (value != undefined && value != this.notificationRepeatInterval) {
+			this.notificationRepeatInterval = value;
+			this.renderNotificationRepeatValues(this.getCurrentNotificationRepeatIntervalString(), this.getCurrentNotificationMaxRepeatString());
+			this.dirty = true;
+		}
+	},
+	
+	handleNotificationRepeatIntervalClick: function(event) {
+		//Mojo.Log.info('prefs-assistant: handleNotificationRepeatIntervalClick');
+
+		Event.stop(event);
+		this.controller.popupSubmenu({
+				onChoose: this.notificationRepeatIntervalChoose.bind(this),
+				toggleCmd: this.notificationRepeatInterval,
+				items: this.notificationRepeatIntervals
+			});
+	},
+	
+	notificationMaxRepeatChoose: function(value) {
+		//Mojo.Log.info('prefs-assistant: notificationMaxRepeatChoose');
+		
+		if (value != undefined && value != this.notificationMaxRepeat) {
+			this.notificationMaxRepeat = value;
+			this.renderNotificationRepeatValues(this.getCurrentNotificationRepeatIntervalString(), this.getCurrentNotificationMaxRepeatString());
+			this.dirty = true;
+		}
+	},
+	
+	handleNotificationMaxRepeatClick: function(event) {
+		//Mojo.Log.info('prefs-assistant: handleNotificationMaxRepeatClick');
+
+		Event.stop(event);
+		this.controller.popupSubmenu({
+				onChoose: this.notificationMaxRepeatChoose.bind(this),
+				toggleCmd: this.notificationMaxRepeat,
+				items: this.notificationMaxRepeats
+			});
+	},
+	
+	notificationRepeatIntervals: [
+		{label:$L('Disabled'), command:'0'},
+		{label:$L('5 Seconds'), command:'.083'},
+		{label:$L('10 Seconds'), command:'.167'},
+		{label:$L('15 Seconds'), command:'.25'},
+		{label:$L('20 Seconds'), command:'.333'},
+		{label:$L('25 Seconds'), command:'.417'},
+		{label:$L('30 Seconds'), command:'.5'},
+		{label:$L('1 Minutes'), command:'1'},
+		{label:$L('2 Minutes'), command:'2'},
+		{label:$L('3 Minutes'), command:'3'},
+		{label:$L('4 Minutes'), command:'4'},
+		{label:$L('5 Minutes'), command:'5'},
+		{label:$L('10 Minutes'), command:'10'},
+		{label:$L('15 Minutes'), command:'15'}
+	],
+	
+	notificationMaxRepeats: [
+		{label:$L('Unlimited'), command:'99999'}, //this should be a large enough value to be conisdered unlimited for our purpose.
+		{label:$L('1'), command:'1'},
+		{label:$L('2'), command:'2'},
+		{label:$L('3'), command:'3'},
+		{label:$L('4'), command:'4'},
+		{label:$L('5'), command:'5'},
+		{label:$L('10'), command:'10'},
+		{label:$L('15'), command:'15'},
+		{label:$L('20'), command:'20'},
+		{label:$L('25'), command:'25'},
+		{label:$L('30'), command:'30'},
+		{label:$L('35'), command:'35'},
+		{label:$L('40'), command:'40'},
+		{label:$L('45'), command:'45'},
+		{label:$L('50'), command:'50'},
+		{label:$L('55'), command:'55'},
+		{label:$L('60'), command:'60'},
+		{label:$L('65'), command:'65'},
+		{label:$L('70'), command:'70'},
+		{label:$L('75'), command:'75'},
+		{label:$L('80'), command:'80'},
+		{label:$L('85'), command:'85'},
+		{label:$L('90'), command:'90'},
+		{label:$L('95'), command:'95'},
+		{label:$L('100'), command:'100'}
+	]
 });
\ No newline at end of file
diff --git a/usr/palm/applications/com.palm.app.messaging/app/views/prefsAccountSummary/prefsAccountSummary-scene.html b/usr/palm/applications/com.palm.app.messaging/app/views/prefsAccountSummary/prefsAccountSummary-scene.html
index 03d2b66..6b5a28a 100644
--- a/usr/palm/applications/com.palm.app.messaging/app/views/prefsAccountSummary/prefsAccountSummary-scene.html
+++ b/usr/palm/applications/com.palm.app.messaging/app/views/prefsAccountSummary/prefsAccountSummary-scene.html
@@ -44,6 +44,26 @@
 	
 		</div>
 	</div>
+	
+	<div id='pv_notificationrepeat_div' class="palm-group">
+		<div class="palm-group-title" x-mojo-loc="">Notification Repeat</div>
+	 	<div class="palm-list">
+			<div id="pv_notification_repeat_interval" class="palm-row">
+				<div class="palm-row-wrapper">
+		 			<div class="label" x-mojo-loc="">Repeat Interval</div>
+		 			<div id="pv_notification_repeat_interval_value" class="title"></div>
+				</div>
+			</div>
+			
+			<div id="pv_notification_max_repeat" class="palm-row">
+				<div class="palm-row-wrapper">
+		 			<div class="label" x-mojo-loc="">Max Repeats</div>
+		 			<div id="pv_notification_max_repeat_value" class="title"></div>
+				</div>
+			</div>
+		</div>
+	</div>
+	
 	<div class="palm-group">
 		<div class="palm-group-title" x-mojo-loc=''>Accounts</div>      
 	    <div class="palm-list">                              
