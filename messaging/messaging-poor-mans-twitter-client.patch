Index: /usr/palm/applications/com.palm.app.messaging/app/controllers/chatview-assistant.js
===================================================================
--- .orig/usr/palm/applications/com.palm.app.messaging/app/controllers/chatview-assistant.js
+++ /usr/palm/applications/com.palm.app.messaging/app/controllers/chatview-assistant.js
@@ -1669,9 +1669,210 @@
 			this.addTextToClipboard(text);
 		} else if (value == 'delete-cmd') {
 			this.handleMessageDeleteFromContextMenu(messageId, index);
+		} else if (value === "twitter-retweet-cmd") {
+			Mojo.Log.info("twitter-retweet-cmd");
+			this.twitterRetweet(text);
+		} else if (value === "twitter-reply-cmd") {
+			Mojo.Log.info("twitter-reply-cmd");
+			this.twitterReply(text);
+		} else if (value === "twitter-leave-user-cmd") {
+			Mojo.Log.info("twitter-leave-user-cmd");
+			this.twitterLeaveUser(text);
 		}
 	},
 	
+	twitterSkipChain: function (body) {
+		var originally_from, chainlink, result;
+		var modified = false;
+		Mojo.Log.info("twitterSkipChain(%j)", body);
+		while (true) {
+			// skip past any RT/via chains.
+			if (/^\s*rt(?:\s*@\s*|\s+)([_A-Za-z0-9]+)(?:\s*:\s*|\s+)/i.test(body)) {
+				// RT@user:... (space optional before or after @ and :)
+				// RT user ...
+				chainlink       = RegExp.match;
+				originally_from = RegExp.$1;
+				body            = RegExp.rightContext;
+				Mojo.Log.info("twitterSkipChain: skipping 'RT' chain link: %j", chainlink);
+				modified = true;
+			}
+			else if (/^\s*(?:[\(\[\{]\s*)?via(?:\s*@\s*|\s+)[_A-Za-z0-9]+(?:\s*[\)\]\}])?(?:\s*:\s*|\s+)/i.test(body)) {
+				// (via@user):...
+				//  via user  ...
+				chainlink = RegExp.match;
+				body      = RegExp.rightContext;
+				Mojo.Log.info("twitterSkipChain: skipping 'via' chain link: %j", chainlink);
+				modified = true;
+			}
+			else {
+				break;
+			}
+		}
+		if (modified) {
+			result = {
+				body: body,
+				originally_from: originally_from
+			};
+		}
+		Mojo.Log.info("twitterSkipChain: returning %j", result);
+		return result;
+	},
+
+	twitterParseMessage: function (text) {
+		var from, originally_from, body, chain, result;
+		Mojo.Log.info("twitterParseMessage(%j)", text);
+		if (/^Direct from (\S+):\s*(.*)/i.test(text)) {
+			from = RegExp.$1;
+			body = RegExp.$2;
+			result = {
+				direct: true,
+				from: from,
+				body: body
+			};
+		}
+		else if (/^(\S+):\s*(.*)/.test(text)) {
+			from = RegExp.$1;
+			originally_from = from;
+			body = RegExp.$2;
+			chain = this.twitterSkipChain(body);
+			if (chain) {
+				if ("originally_from" in chain) {
+					originally_from = chain.originally_from;
+				}
+				body = chain.body;
+			}
+			result = {
+				direct: false, 
+				from: from,
+				originally_from: originally_from,
+				body: body
+			};
+		}
+		Mojo.Log.info("twitterParseMessage: returning %j", result);
+		return result;
+	},
+
+	twitterRetweet: function (text) {
+		Mojo.Log.info("twitterRetweet(%j)", text);
+		var tweet = this.twitterParseMessage(text);
+		if (tweet) {
+			Mojo.Log.info("twitterRetweet: is an actionable tweet.");
+			if (tweet.direct) {
+				this.twitterErrorDialog("You cannot retweet a direct message.");
+			}
+			else {
+				if (tweet.originally_from === tweet.from) {
+					this.twitterSetTextFieldValue(
+						"RT @" + tweet.originally_from + ": " + tweet.body
+					);
+				}
+				else {
+					this.twitterSetTextFieldValue(
+						"RT @" + tweet.originally_from +
+							" via @" + tweet.from + ": " + tweet.body
+					);
+				}
+			}
+		}
+		else {
+			Mojo.Log.info("twitterRetweet: is not an actionable tweet.");
+		}
+	},
+
+	twitterErrorDialog: function (error) {
+		this.controller.showAlertDialog({
+			onChoose: function () { },
+			title: $L("Error"),
+			message: $L(error),
+			preventCancel: false,
+			choices: [{ label: $L('Dismiss'), value: 'Dismiss' }]
+		});
+	},
+	
+	twitterWarningDialog: function (warning) {
+		this.controller.showAlertDialog({
+			onChoose: function () { },
+			title: $L("Warning"),
+			message: $L(warning),
+			preventCancel: false,
+			choices: [{ label: $L('OK'), value: 'OK' }]
+		});
+	},
+
+	twitterSetTextFieldValue: function (text) {
+		var self = this;
+		var value = this.messageTextElement.value;
+		if (/\S/.test(value)) {
+			this.controller.showAlertDialog({
+				onChoose: function (choice) {
+					if (choice) {
+						self.twitterSetTextFieldValueRaw(text);
+					}
+				},
+				title: "Erase existing message?",
+				message: "Your current message:\n" + value,
+				preventCancel: false,
+				choices: [{ label: $L('Yes'), value: true },
+					  { label: $L('No'),  value: false }]
+			});
+		}
+		else {
+			this.twitterSetTextFieldValueRaw(text);
+		}
+	},
+
+	twitterSetTextFieldValueRaw: function (text) {
+		this.setTextFieldValue(text);
+		this.moveCursorToEndOfTextField();
+		if (text.length > 140) {
+			this.twitterWarningDialog("Your submission is longer than 140 characters. " + 
+						  "Please shorten before sending.");
+		}
+	},
+
+	twitterReply: function (text) {
+		Mojo.Log.info("twitterReply(%j)", text);
+		var tweet = this.twitterParseMessage(text);
+		if (tweet) {
+			Mojo.Log.info("twitterReply: is an actionable tweet.");
+			if (tweet.direct) {
+				this.twitterSetTextFieldValue("D " + tweet.from + " ");
+			}
+			else {
+				this.twitterSetTextFieldValue("@" + tweet.from + " ");
+			}
+		}
+		else {
+			Mojo.Log.info("twitterReply: is not an actionable tweet.");
+		}
+	},
+	
+	twitterLeaveUser: function (text) {
+		Mojo.Log.info("twitterLeaveUser(%j)", text);
+		var tweet = this.twitterParseMessage(text);
+		if (tweet) {
+			Mojo.Log.info("twitterLeaveUser: is an actionable tweet.");
+			if (tweet.direct) {
+				this.twitterSetTextFieldValue("leave " + tweet.from);
+			}
+			else {
+				this.twitterSetTextFieldValue("leave " + tweet.from);
+			}
+		}
+		else {
+			Mojo.Log.info("twitterLeaveUser: is not an actionable tweet.");
+		}
+	},
+
+	moveCursorToEndOfTextField: function () {
+		var widget = this.controller.get('messageTextWidget');
+		if (widget) {
+			widget = widget.mojo;
+		}
+		var len = widget.getValue().length;
+		widget.setCursorPosition(len, len);
+	},
+
 	/**
 	 * context menu handler for tap on MMS in chat list
 	 * 
@@ -1794,14 +1995,31 @@
 			
 			var composeParams;
 			if ((messageType == "SMS") || (messageType == "IM")) {
-				this.controller.popupSubmenu({
-					onChoose: this.handleContextMenuSelectSmsIm.bind(this, event.item.textForCopying, messageId, event.index),
-					placeNear: eventTarget.target,
-					items: [
+				var menuItems = [
 						{label: $L('Forward'), command: 'forward-cmd'},
 						{label: $L('Copy Text'), command: 'copy-cmd'},
 						{label: $L('Delete'), command: 'delete-cmd'}
-					]
+				];
+				var lcDisplayName = this.chatDisplayName.toLowerCase();
+				if (lcDisplayName === "twitter" ||
+				    lcDisplayName === "40404") {
+					var text = event.item.textForCopying;
+					var tweet = this.twitterParseMessage(text);
+					if (tweet) {
+						if (!tweet.direct) {
+							menuItems.push({ label: $L('Retweet'),
+									 command: 'twitter-retweet-cmd' });
+						}
+						menuItems.push({ label: $L('Reply'),
+								 command: 'twitter-reply-cmd' });
+						menuItems.push({ label: $L('Leave User'),
+								 command: 'twitter-leave-user-cmd' });
+					}
+				}
+				this.controller.popupSubmenu({
+					onChoose: this.handleContextMenuSelectSmsIm.bind(this, event.item.textForCopying, messageId, event.index),
+					placeNear: eventTarget.target,
+					items: menuItems
 				});
 
 			} else if (messageType == "MMS") {
