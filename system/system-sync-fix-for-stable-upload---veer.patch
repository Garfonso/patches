diff --git a/usr/palm/frameworks/mojoservice.transport.sync/submission/66/concatenated.js b/usr/palm/frameworks/mojoservice.transport.sync/submission/66/concatenated.js
index 2d813eb..6b70947 100755
--- a/usr/palm/frameworks/mojoservice.transport.sync/submission/66/concatenated.js
+++ b/usr/palm/frameworks/mojoservice.transport.sync/submission/66/concatenated.js
@@ -703,7 +703,7 @@ var SyncCommand = exports.SyncCommand = Class.create(Transport.Command,
 		}).then(this, function(future) {
 			if (future.result) {
 				// TODO: Set up one of these for each synced kind...
-				if (this._local2remoteTransformer) { // if we can up-sync, set up a watch to kick of sync on edit
+				if (this._future.result && this._local2remoteTransformer) { // if we can up-sync, set up a watch to kick of sync on edit
 					var rev = this.client.transport.modnum;
 					var name = "SyncOnEdit:"+this.controller.service.name + ":" + this.client.clientId; //TODO: clean this up here and in EnableAccountCommand
 					var requiresInternet;
@@ -1081,8 +1081,7 @@ var SyncCommand = exports.SyncCommand = Class.create(Transport.Command,
 						rev = result.local._rev;
 					}
 				});
-				this.client.transport.modnum = rev;
-				this.handler.updateAccountTransportObject(this.client.transport, {modnum: rev});
+				this._latestRev = rev;
 				this._localChanges = changes;
 				return "getFirstRemoteMatches";
 			}
@@ -1328,7 +1327,7 @@ var SyncCommand = exports.SyncCommand = Class.create(Transport.Command,
 				}
 				else
 				{
-					return "nextType";
+					return "getPostPutRemoteModnum";
 				}
 			}
 			catch (_)
@@ -1368,15 +1367,9 @@ var SyncCommand = exports.SyncCommand = Class.create(Transport.Command,
 	{
 		__enter: function()
 		{
-			this.handler.getLatestRev(this._kindName).then(this._gotReply);
-		},
-
-		gotReply: function(join)
-		{
 			try
 			{
-				// Find highest revision
-				var latestRev = join.result;
+				var latestRev = this._latestRev;
 				console.log(">>> getPostPutRemoteModnum: cur: " + this.client.transport.modnum + ", latest: " + JSON.stringify(latestRev));
 				if (latestRev > this.client.transport.modnum)
 				{
@@ -1475,7 +1468,7 @@ var SyncCommand = exports.SyncCommand = Class.create(Transport.Command,
 				//		until the user corrects the error
 
 				//whether or not we notify the user of the error, we need to propagate it upwards
-				this._future.exception = this._error;
+				this._future.exception = this._error || new Error("Unspecified error");
 			});
 		}
 	}
diff --git a/usr/palm/frameworks/mojoservice.transport.sync/submission/67/javascript/commands/synccommand.js.rej b/usr/palm/frameworks/mojoservice.transport.sync/submission/67/javascript/commands/synccommand.js.rej
new file mode 100644
index 0000000..41f916e
--- /dev/null
+++ b/usr/palm/frameworks/mojoservice.transport.sync/submission/67/javascript/commands/synccommand.js.rej
@@ -0,0 +1,56 @@
+--- usr/palm/frameworks/mojoservice.transport.sync/submission/67/javascript/commands/synccommand.js.orig
++++ usr/palm/frameworks/mojoservice.transport.sync/submission/67/javascript/commands/synccommand.js
+@@ -249,7 +249,7 @@
+ 		}).then(this, function(future) {
+ 			if (future.result) {
+ 				// TODO: Set up one of these for each synced kind...
+-				if (this._local2remoteTransformer) { // if we can up-sync, set up a watch to kick of sync on edit
++				if (this._future.result && this._local2remoteTransformer) { // if we can up-sync, set up a watch to kick of sync on edit
+ 					var rev = this.client.transport.modnum;
+ 					var name = "SyncOnEdit:"+this.controller.service.name + ":" + this.client.clientId; //TODO: clean this up here and in EnableAccountCommand
+ 					var requiresInternet;
+@@ -627,8 +627,7 @@
+ 						rev = result.local._rev;
+ 					}
+ 				});
+-				this.client.transport.modnum = rev;
+-				this.handler.updateAccountTransportObject(this.client.transport, {modnum: rev});
++				this._latestRev = rev;
+ 				this._localChanges = changes;
+ 				return "getFirstRemoteMatches";
+ 			}
+@@ -874,7 +873,7 @@
+ 				}
+ 				else
+ 				{
+-					return "nextType";
++					return "getPostPutRemoteModnum";
+ 				}
+ 			}
+ 			catch (_)
+@@ -914,15 +913,9 @@
+ 	{
+ 		__enter: function()
+ 		{
+-			this.handler.getLatestRev(this._kindName).then(this._gotReply);
+-		},
+-
+-		gotReply: function(join)
+-		{
+ 			try
+ 			{
+-				// Find highest revision
+-				var latestRev = join.result;
++				var latestRev = this._latestRev;
+ 				console.log(">>> getPostPutRemoteModnum: cur: " + this.client.transport.modnum + ", latest: " + JSON.stringify(latestRev));
+ 				if (latestRev > this.client.transport.modnum)
+ 				{
+@@ -1021,7 +1014,7 @@
+ 				//		until the user corrects the error
+ 
+ 				//whether or not we notify the user of the error, we need to propagate it upwards
+-				this._future.exception = this._error;
++				this._future.exception = this._error || new Error("Unspecified error");
+ 			});
+ 		}
+ 	}
diff --git a/usr/palm/frameworks/mojoservice.transport.sync/submission/67/javascript/commands/synccommand.js.~1~ b/usr/palm/frameworks/mojoservice.transport.sync/submission/67/javascript/commands/synccommand.js.~1~
new file mode 100644
index 0000000..e69de29
