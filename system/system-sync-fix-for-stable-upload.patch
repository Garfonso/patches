diff --git a/usr/palm/frameworks/mojoservice.transport.sync/submission/80/javascript/commands/synccommand.js b/usr/palm/frameworks/mojoservice.transport.sync/submission/80/javascript/commands/synccommand.js
index 556117e..1c64bb5 100644
--- a/usr/palm/frameworks/mojoservice.transport.sync/submission/80/javascript/commands/synccommand.js
+++ b/usr/palm/frameworks/mojoservice.transport.sync/submission/80/javascript/commands/synccommand.js
@@ -359,7 +359,7 @@ var SyncCommand = exports.SyncCommand = Class.create(Transport.Command,
 			}).then(this, function(future) {
 				if (future.result) {
 					// TODO: Set up one of these for each synced kind...
-					if (this._local2remoteTransformer) { // if we can up-sync, set up a watch to kick of sync on edit
+					if (this._future.result && this._local2remoteTransformer) { // if we can up-sync, set up a watch to kick of sync on edit
 						var rev = this.client.transport.modnum;
 						var name = "SyncOnEdit:"+this.controller.service.name + ":" + this.client.clientId; //TODO: clean this up here and in EnableAccountCommand
 						var requiresInternet;
@@ -767,9 +767,7 @@ var SyncCommand = exports.SyncCommand = Class.create(Transport.Command,
 						rev = result.local._rev;
 					}
 				}, this);				
-				this.client.transport.modnum = rev;
 				this._latestRev = rev;
-				this.handler.updateAccountTransportObject(this.client.transport, {modnum: rev});
 				this._localChanges = changes;
 				return "getFirstRemoteMatches";
 			}
@@ -1065,7 +1063,7 @@ var SyncCommand = exports.SyncCommand = Class.create(Transport.Command,
 				}
 				else
 				{
-					return "nextType";
+					return "getPostPutRemoteModnum";
 				}
 			}
 			catch (_)
@@ -1131,18 +1129,14 @@ var SyncCommand = exports.SyncCommand = Class.create(Transport.Command,
 		__enter: function()
 		{
 			console.log("getPostPutRemoteModnum");
-			this.handler.getLatestRev(this._kindName).then(this._gotReply);
-		},
-
-		gotReply: function(join)
-		{
 			try
 			{
-				// Find highest revision
-				var latestRev = join.result;
+				var latestRev = this._latestRev;
 				console.log(">>> getPostPutRemoteModnum: cur: " + this.client.transport.modnum + ", latest: " + JSON.stringify(latestRev));
-				if (latestRev > this._latestRev) {
-					this._latestRev = latestRev;
+				if (latestRev > this.client.transport.modnum)
+				{
+					this.client.transport.modnum = latestRev;
+					this.handler.updateAccountTransportObject(this.client.transport, {modnum: this.client.transport.modnum});
 				}
 				return "nextType";
 			}
@@ -1249,7 +1243,7 @@ var SyncCommand = exports.SyncCommand = Class.create(Transport.Command,
 				//		until the user corrects the error
 
 				//whether or not we notify the user of the error, we need to propagate it upwards
-				this._future.exception = this._error;
+				this._future.exception = this._error || new Error("Unspecified error");
 			});
 		}
 	}
@@ -1417,4 +1411,4 @@ SyncCommand.fetchPhoto = function( photo, headers )
 
 logError = function logError(place, exception) {
 	console.error("error in " + place + ": " + (exception._stack?exception._stack:exception.toString()));
-};
\ No newline at end of file
+};
