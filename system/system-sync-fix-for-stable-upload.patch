diff --git a/usr/palm/frameworks/mojoservice.transport.sync/submission/67/concatenated.js b/usr/palm/frameworks/mojoservice.transport.sync/submission/67/concatenated.js
index 638d4bd..02cbc36 100755
--- a/usr/palm/frameworks/mojoservice.transport.sync/submission/67/concatenated.js
+++ b/usr/palm/frameworks/mojoservice.transport.sync/submission/67/concatenated.js
@@ -703,7 +703,7 @@ var SyncCommand = exports.SyncCommand = Class.create(Transport.Command,
 		}).then(this, function(future) {
 			if (future.result) {
 				// TODO: Set up one of these for each synced kind...
-				if (this._local2remoteTransformer) { // if we can up-sync, set up a watch to kick of sync on edit
+				if (this._future.result && this._local2remoteTransformer) { // if we can up-sync, set up a watch to kick of sync on edit
 					var rev = this.client.transport.modnum;
 					var name = "SyncOnEdit:"+this.controller.service.name + ":" + this.client.clientId; //TODO: clean this up here and in EnableAccountCommand
 					var requiresInternet;
@@ -1083,8 +1083,12 @@ var SyncCommand = exports.SyncCommand = Class.create(Transport.Command,
 						rev = result.local._rev;
 					}
 				});
-				this.client.transport.modnum = rev;
-				this.handler.updateAccountTransportObject(this.client.transport, {modnum: rev});
+				for (var id in map) {
+					if (rev < map[id]) {
+						rev = map[id];
+					}
+				}
+				this._latestRev = rev;
 				this._localChanges = changes;
 				return "getFirstRemoteMatches";
 			}
@@ -1330,7 +1334,7 @@ var SyncCommand = exports.SyncCommand = Class.create(Transport.Command,
 				}
 				else
 				{
-					return "nextType";
+					return "getPostPutRemoteModnum";
 				}
 			}
 			catch (_)
@@ -1393,15 +1397,9 @@ var SyncCommand = exports.SyncCommand = Class.create(Transport.Command,
 	{
 		__enter: function()
 		{
-			this.handler.getLatestRev(this._kindName).then(this._gotReply);
-		},
-
-		gotReply: function(join)
-		{
 			try
 			{
-				// Find highest revision
-				var latestRev = join.result;
+				var latestRev = this._latestRev;
 				console.log(">>> getPostPutRemoteModnum: cur: " + this.client.transport.modnum + ", latest: " + JSON.stringify(latestRev));
 				if (latestRev > this.client.transport.modnum)
 				{
@@ -1426,6 +1424,9 @@ var SyncCommand = exports.SyncCommand = Class.create(Transport.Command,
 			if (this._remoteWriteback && this._remoteWriteback.length > 0) {
 				return "writeRemoteChanges";
 			}
+			if (this._latestRev !== undefined && this._latestRev > this.client.transport.modnum) {
+				return "getPostPutRemoteModnum";
+			}
 			console.log(">>> this._kindIndex = "+this._kindIndex+", this._kinds.syncOrder.length-1="+(this._syncOrder.length-1));
 			if (this._kindIndex < this._syncOrder.length-1) {
 				this._kindIndex++;
@@ -1500,7 +1501,7 @@ var SyncCommand = exports.SyncCommand = Class.create(Transport.Command,
 				//		until the user corrects the error
 
 				//whether or not we notify the user of the error, we need to propagate it upwards
-				this._future.exception = this._error;
+				this._future.exception = this._error || new Error("Unspecified error");
 			});
 		}
 	}
diff --git a/usr/palm/frameworks/mojoservice.transport.sync/submission/67/javascript/commands/synccommand.js b/usr/palm/frameworks/mojoservice.transport.sync/submission/67/javascript/commands/synccommand.js
index 1556f36..8695f80 100644
--- a/usr/palm/frameworks/mojoservice.transport.sync/submission/67/javascript/commands/synccommand.js
+++ b/usr/palm/frameworks/mojoservice.transport.sync/submission/67/javascript/commands/synccommand.js
@@ -249,7 +249,7 @@ var SyncCommand = exports.SyncCommand = Class.create(Transport.Command,
 		}).then(this, function(future) {
 			if (future.result) {
 				// TODO: Set up one of these for each synced kind...
-				if (this._local2remoteTransformer) { // if we can up-sync, set up a watch to kick of sync on edit
+				if (this._future.result && this._local2remoteTransformer) { // if we can up-sync, set up a watch to kick of sync on edit
 					var rev = this.client.transport.modnum;
 					var name = "SyncOnEdit:"+this.controller.service.name + ":" + this.client.clientId; //TODO: clean this up here and in EnableAccountCommand
 					var requiresInternet;
@@ -629,8 +629,12 @@ var SyncCommand = exports.SyncCommand = Class.create(Transport.Command,
 						rev = result.local._rev;
 					}
 				});
-				this.client.transport.modnum = rev;
-				this.handler.updateAccountTransportObject(this.client.transport, {modnum: rev});
+				for (var id in map) {
+					if (rev < map[id]) {
+						rev = map[id];
+					}
+				}
+				this._latestRev = rev;
 				this._localChanges = changes;
 				return "getFirstRemoteMatches";
 			}
@@ -876,7 +880,7 @@ var SyncCommand = exports.SyncCommand = Class.create(Transport.Command,
 				}
 				else
 				{
-					return "nextType";
+					return "getPostPutRemoteModnum";
 				}
 			}
 			catch (_)
@@ -939,15 +943,9 @@ var SyncCommand = exports.SyncCommand = Class.create(Transport.Command,
 	{
 		__enter: function()
 		{
-			this.handler.getLatestRev(this._kindName).then(this._gotReply);
-		},
-
-		gotReply: function(join)
-		{
 			try
 			{
-				// Find highest revision
-				var latestRev = join.result;
+				var latestRev = this._latestRev;
 				console.log(">>> getPostPutRemoteModnum: cur: " + this.client.transport.modnum + ", latest: " + JSON.stringify(latestRev));
 				if (latestRev > this.client.transport.modnum)
 				{
@@ -972,6 +970,9 @@ var SyncCommand = exports.SyncCommand = Class.create(Transport.Command,
 			if (this._remoteWriteback && this._remoteWriteback.length > 0) {
 				return "writeRemoteChanges";
 			}
+			if (this._latestRev !== undefined && this._latestRev > this.client.transport.modnum) {
+				return "getPostPutRemoteModnum";
+			}
 			console.log(">>> this._kindIndex = "+this._kindIndex+", this._kinds.syncOrder.length-1="+(this._syncOrder.length-1));
 			if (this._kindIndex < this._syncOrder.length-1) {
 				this._kindIndex++;
@@ -1046,7 +1047,7 @@ var SyncCommand = exports.SyncCommand = Class.create(Transport.Command,
 				//		until the user corrects the error
 
 				//whether or not we notify the user of the error, we need to propagate it upwards
-				this._future.exception = this._error;
+				this._future.exception = this._error || new Error("Unspecified error");
 			});
 		}
 	}
