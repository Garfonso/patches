diff --git a/usr/palm/frameworks/mojoservice.transport.sync/submission/80/concatenated.js.rej b/usr/palm/frameworks/mojoservice.transport.sync/submission/80/concatenated.js.rej
new file mode 100644
index 0000000..fba35d0
--- /dev/null
+++ b/usr/palm/frameworks/mojoservice.transport.sync/submission/80/concatenated.js.rej
@@ -0,0 +1,79 @@
+--- usr/palm/frameworks/mojoservice.transport.sync/submission/80/concatenated.js-
++++ usr/palm/frameworks/mojoservice.transport.sync/submission/80/concatenated.js
+@@ -359,7 +359,7 @@
+ 			}).then(this, function(future) {
+ 				if (future.result) {
+ 					// TODO: Set up one of these for each synced kind...
+-					if (this._local2remoteTransformer) { // if we can up-sync, set up a watch to kick of sync on edit
++					if (this._future.result && this._local2remoteTransformer) { // if we can up-sync, set up a watch to kick of sync on edit
+ 						var rev = this.client.transport.modnum;
+ 						var name = "SyncOnEdit:"+this.controller.service.name + ":" + this.client.clientId; //TODO: clean this up here and in EnableAccountCommand
+ 						var requiresInternet;
+@@ -767,9 +767,12 @@
+ 						rev = result.local._rev;
+ 					}
+ 				}, this);				
+-				this.client.transport.modnum = rev;
++				for (var id in map) {
++					if (rev < map[id]) {
++						rev = map[id];
++					}
++				}
+ 				this._latestRev = rev;
+-				this.handler.updateAccountTransportObject(this.client.transport, {modnum: rev});
+ 				this._localChanges = changes;
+ 				return "getFirstRemoteMatches";
+ 			}
+@@ -1065,7 +1063,7 @@
+ 				}
+ 				else
+ 				{
+-					return "nextType";
++					return "getPostPutRemoteModnum";
+ 				}
+ 			}
+ 			catch (_)
+@@ -1131,18 +1129,14 @@
+ 		__enter: function()
+ 		{
+ 			console.log("getPostPutRemoteModnum");
+-			this.handler.getLatestRev(this._kindName).then(this._gotReply);
+-		},
+-
+-		gotReply: function(join)
+-		{
+ 			try
+ 			{
+-				// Find highest revision
+-				var latestRev = join.result;
++				var latestRev = this._latestRev;
+ 				console.log(">>> getPostPutRemoteModnum: cur: " + this.client.transport.modnum + ", latest: " + JSON.stringify(latestRev));
+-				if (latestRev > this._latestRev) {
+-					this._latestRev = latestRev;
++				if (latestRev > this.client.transport.modnum)
++				{
++					this.client.transport.modnum = latestRev;
++					this.handler.updateAccountTransportObject(this.client.transport, {modnum: this.client.transport.modnum});
+ 				}
+ 				return "nextType";
+ 			}
+@@ -1169,8 +1169,8 @@
+ 			}
+ 			// if there were any changes since upsync then see if there might have been
+ 			// new local changes beetween them so that we can upsync them also
+-			if (this._latestRev > this.client.transport.modnum) {
+-				return "getLocalChanges";
++			if (this._latestRev !== undefined && this._latestRev > this.client.transport.modnum) {
++				return "getPostPutRemoteModnum";
+ 			}
+ 			console.log(">>> this._kindIndex = "+this._kindIndex+", this._kinds.syncOrder.length-1="+(this._syncOrder.length-1));
+ 			if (this._kindIndex < this._syncOrder.length-1) {
+@@ -1249,7 +1243,7 @@
+ 				//		until the user corrects the error
+ 
+ 				//whether or not we notify the user of the error, we need to propagate it upwards
+-				this._future.exception = this._error;
++				this._future.exception = this._error || new Error("Unspecified error");
+ 			});
+ 		}
+ 	}
diff --git a/usr/palm/frameworks/mojoservice.transport.sync/submission/80/concatenated.js.~1~ b/usr/palm/frameworks/mojoservice.transport.sync/submission/80/concatenated.js.~1~
new file mode 100644
index 0000000..e69de29
diff --git a/usr/palm/frameworks/mojoservice.transport.sync/submission/80/javascript/commands/synccommand.js.rej b/usr/palm/frameworks/mojoservice.transport.sync/submission/80/javascript/commands/synccommand.js.rej
new file mode 100644
index 0000000..071e3cb
--- /dev/null
+++ b/usr/palm/frameworks/mojoservice.transport.sync/submission/80/javascript/commands/synccommand.js.rej
@@ -0,0 +1,79 @@
+--- usr/palm/frameworks/mojoservice.transport.sync/submission/80/javascript/commands/synccommand.js.orig
++++ usr/palm/frameworks/mojoservice.transport.sync/submission/80/javascript/commands/synccommand.js
+@@ -359,7 +359,7 @@
+ 			}).then(this, function(future) {
+ 				if (future.result) {
+ 					// TODO: Set up one of these for each synced kind...
+-					if (this._local2remoteTransformer) { // if we can up-sync, set up a watch to kick of sync on edit
++					if (this._future.result && this._local2remoteTransformer) { // if we can up-sync, set up a watch to kick of sync on edit
+ 						var rev = this.client.transport.modnum;
+ 						var name = "SyncOnEdit:"+this.controller.service.name + ":" + this.client.clientId; //TODO: clean this up here and in EnableAccountCommand
+ 						var requiresInternet;
+@@ -767,9 +767,12 @@
+ 						rev = result.local._rev;
+ 					}
+ 				}, this);				
+-				this.client.transport.modnum = rev;
++				for (var id in map) {
++					if (rev < map[id]) {
++						rev = map[id];
++					}
++				}
+ 				this._latestRev = rev;
+-				this.handler.updateAccountTransportObject(this.client.transport, {modnum: rev});
+ 				this._localChanges = changes;
+ 				return "getFirstRemoteMatches";
+ 			}
+@@ -1065,7 +1063,7 @@
+ 				}
+ 				else
+ 				{
+-					return "nextType";
++					return "getPostPutRemoteModnum";
+ 				}
+ 			}
+ 			catch (_)
+@@ -1131,18 +1129,14 @@
+ 		__enter: function()
+ 		{
+ 			console.log("getPostPutRemoteModnum");
+-			this.handler.getLatestRev(this._kindName).then(this._gotReply);
+-		},
+-
+-		gotReply: function(join)
+-		{
+ 			try
+ 			{
+-				// Find highest revision
+-				var latestRev = join.result;
++				var latestRev = this._latestRev;
+ 				console.log(">>> getPostPutRemoteModnum: cur: " + this.client.transport.modnum + ", latest: " + JSON.stringify(latestRev));
+-				if (latestRev > this._latestRev) {
+-					this._latestRev = latestRev;
++				if (latestRev > this.client.transport.modnum)
++				{
++					this.client.transport.modnum = latestRev;
++					this.handler.updateAccountTransportObject(this.client.transport, {modnum: this.client.transport.modnum});
+ 				}
+ 				return "nextType";
+ 			}
+@@ -1169,8 +1169,8 @@
+ 			}
+ 			// if there were any changes since upsync then see if there might have been
+ 			// new local changes beetween them so that we can upsync them also
+-			if (this._latestRev > this.client.transport.modnum) {
+-				return "getLocalChanges";
++			if (this._latestRev !== undefined && this._latestRev > this.client.transport.modnum) {
++				return "getPostPutRemoteModnum";
+ 			}
+ 			console.log(">>> this._kindIndex = "+this._kindIndex+", this._kinds.syncOrder.length-1="+(this._syncOrder.length-1));
+ 			if (this._kindIndex < this._syncOrder.length-1) {
+@@ -1249,7 +1243,7 @@
+ 				//		until the user corrects the error
+ 
+ 				//whether or not we notify the user of the error, we need to propagate it upwards
+-				this._future.exception = this._error;
++				this._future.exception = this._error || new Error("Unspecified error");
+ 			});
+ 		}
+ 	}
diff --git a/usr/palm/frameworks/mojoservice.transport.sync/submission/80/javascript/commands/synccommand.js.~1~ b/usr/palm/frameworks/mojoservice.transport.sync/submission/80/javascript/commands/synccommand.js.~1~
new file mode 100644
index 0000000..e69de29
