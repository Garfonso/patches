diff --git a/usr/palm/frameworks/mojo/builtins/palmInitFramework347.js b/usr/palm/frameworks/mojo/builtins/palmInitFramework347.js
index aed4b02..c734096 100644
--- a/usr/palm/frameworks/mojo/builtins/palmInitFramework347.js
+++ b/usr/palm/frameworks/mojo/builtins/palmInitFramework347.js
@@ -3462,6 +3462,17 @@ this.instantiateChildWidgets(this.sceneElement);
 
 this._installMenus();
 
+var checkScrollbars=this.document.getElementById('scrollbar-y');
+if (!checkScrollbars && (this.stageController.stageType == Mojo.Controller.StageType.card || this.stageController.stageType == Mojo.Controller.StageType.childCard)) {
+var scrollbarYContent=this.document.createElement('div');
+var scrollbarXContent=this.document.createElement('div');
+scrollbarYContent.id="scrollbar-y";
+scrollbarYContent.style.cssText="position: fixed; z-index: 10000; background-color: #2e2e2e; width: 4px; height: 24px; top: 17px; right: 1px; -webkit-border-radius: 2px; border-style: solid; border-color: white; border-width: 1px; opacity: 0.0;";
+scrollbarXContent.id="scrollbar-x";
+scrollbarXContent.style.cssText="position: fixed; z-index: 10000; background-color: #2e2e2e; width: 24px; height: 4px; bottom: 1px; left: 17px; -webkit-border-radius: 2px; border-style: solid; border-color: white; border-width: 1px; opacity: 0.0;";
+this.document.body.appendChild(scrollbarXContent);
+this.document.body.appendChild(scrollbarYContent);
+}
 
 if(this.sceneScroller){
 this.sceneScroller.mojo.validateScrollPosition();
@@ -12608,6 +12619,8 @@ this.hasPalmOverflow=(Mojo.Host.current!==Mojo.Host.browser);
 this.bindHandlers();
 this.setupChildElements();
 this.handleModelChanged();
+this.controller.listen(this.controller.scene.sceneElement,Mojo.Event.orientationChange,this.updateOrientationStatus.bindAsEventListener(this));
+this.winOrientation = this.controller.stageController.getWindowOrientation();
 
 this.controller.exposeMethods(['revealTop','revealBottom','revealElement','scrollTo',
 'getState','setState','adjustBy','scrollerSize','setMode',
@@ -12646,6 +12659,7 @@ this.controller.stopListening(sceneElement,Mojo.Event.keydown,this.keyHandler);
 }
 this.clearCorrectOverscrollTimer();
 this.removeContinueOverscrollHandler();
+this.clearScrollbarsMemory();
 },
 
 
@@ -13250,6 +13264,247 @@ this.startCorrectOverscrollTimer();
 }
 },
 
+PROPERTY_MAP: {x: 'width', y: 'height'},
+POS_MAP: {x: 'left', y: 'top'},
+STYLE_MAP: {x: 'bottom', y: 'right'},
+REVPROP_MAP: {x: 'height', y: 'width'},
+REVPOS_MAP: {x: 'top', y: 'left'},
+REVSTY_MAP: {x: 'right', y: 'bottom'},
+
+updateOrientationStatus: function(e) {
+if (e && e.orientation) {
+this.winOrientation = this.controller.stageController.getWindowOrientation();
+if (this.savedData) this.calcPreFix();
+}
+},
+
+getElementPosition: function(el) {
+var valueL = 0, valueT = 0;
+if (el.offsetParent) {
+do {
+valueL += el.offsetLeft;
+valueT += el.offsetTop;
+} while (el = el.offsetParent);
+}
+valueL -= this.controller.document.body.scrollLeft || 0;
+valueT -= this.controller.document.body.scrollTop || 0;
+return {top: valueT, left: valueL};
+},
+
+getFixedElement: function(element, top) {
+top = top || false;
+while (element.parentNode !== this.controller.scene.sceneElement && element.parentNode !== this.controller.element && element.getStyle('position') !== "fixed" && (top || ((element.className).match('palm-menu-') === null || !element.parentNode.hasClassName('palm-menu')))) {
+element = element.parentNode;
+}
+return element;
+},
+
+getTopSpacer: function() {
+var topBound=0, scrollerContainer = this.controller.element;
+var viewportSize = {height:this.controller.window.innerHeight,width:this.controller.window.innerWidth};
+var margins = this.getElementPosition(scrollerContainer);
+var dimensions = {height: scrollerContainer.offsetHeight, width: scrollerContainer.offsetWidth}, hasWidth = scrollerContainer.scrollWidth > dimensions.width && this.mode === ('free' || 'dominant' || 'horizontal'|| 'horizontal-snap');
+dimensions = {height:dimensions.height - (dimensions.height + margins.top - viewportSize.height),width:dimensions.width - (dimensions.width + margins.left - viewportSize.width)};
+var tempEl, children = scrollerContainer.getElementsByTagName('*');
+for (var i=0,l=children.length; i<l && !topBound; i++) {
+if (children[i].nodeName == 'DIV' && (children[i].className).match('-spacer')!==null && (children[i].offsetHeight > 5||children[i].offsetHeight == 0)) {
+tempEl = this.controller.document.elementFromPoint(margins.left + dimensions.width - 20,margins.top + 5);
+if (tempEl && tempEl !== scrollerContainer && tempEl.offsetHeight < dimensions.height) {
+tempEl =  this.getFixedElement(tempEl,true);
+if (tempEl.getStyle('position') === 'fixed') topBound = children[i].offsetHeight == 0 ? tempEl.offsetHeight : children[i].offsetHeight;
+}
+} else if (children[i].nodeName == 'IMG' && (children[i].src).match('spacer')!==null && children[i].height > 5) {
+topBound = children[i].height;
+}
+}
+return topBound;
+},
+
+getBottomSpacer: function() {
+var scrollerContainer = this.controller.element;
+var doc = this.controller.document;
+var viewportSize = {height:this.controller.window.innerHeight,width:this.controller.window.innerWidth};
+var margins = this.getElementPosition(scrollerContainer);
+var dimensions = {height: scrollerContainer.offsetHeight, width: scrollerContainer.offsetWidth}, hasWidth = scrollerContainer.scrollWidth > dimensions.width && this.components[0] == "x";
+dimensions = {height:dimensions.height - (dimensions.height + margins.top - viewportSize.height),width:dimensions.width - (dimensions.width + margins.left - viewportSize.width)};
+var firstBottomElement, bottomBound, rightBound, isCropped = false;
+if (scrollerContainer.getStyle('-webkit-palm-scroll-margin-bottom') && parseInt(scrollerContainer.getStyle('-webkit-palm-scroll-margin-bottom'),10) > 0) {
+firstBottomElement = doc.elementFromPoint(margins.left + dimensions.width - 20,margins.top + dimensions.height - 10);
+if (firstBottomElement && firstBottomElement !== scrollerContainer && firstBottomElement.offsetHeight < dimensions.height) {
+firstBottomElement = this.getFixedElement(firstBottomElement);
+if (((firstBottomElement.className).match('palm-menu-') !== null || firstBottomElement.parentNode.hasClassName('palm-menu')) && firstBottomElement.offsetWidth < dimensions.height/4) {
+if (firstBottomElement.offsetWidth < 65 && hasWidth) {
+var children = firstBottomElement.parentNode.childElements;
+if (children.length > 3) {
+if (children.length < 6 && (parseInt(children[2].style.left,10) > 55 && parseInt(children[2].style.left,10) < viewportSize.width-120 || children[2].offsetWidth > 50)) {
+firstBottomElement = firstBottomElement.parentNode;
+bottomBound = firstBottomElement.offsetHeight;
+dimensions.height -= bottomBound;
+isCropped = true;
+}
+} else {
+rightBound = firstBottomElement.offsetWidth;
+bottomBound = firstBottomElement.offsetHeight;
+}
+} else {
+firstBottomElement = firstBottomElement.parentNode;
+bottomBound = firstBottomElement.offsetHeight;
+dimensions.height -= bottomBound;
+isCropped = true;
+}
+} else if (firstBottomElement.getStyle('position') == 'fixed') {
+if (firstBottomElement.offsetWidth < Math.floor(dimensions.width/2) && hasWidth) {
+bottomBound = firstBottomElement.offsetHeight;
+rightBound = firstBottomElement.offsetWidth;
+var tempEl = doc.elementFromPoint(margins.left + 20,margins.top + dimensions.height - 10);
+if (tempEl && tempEl !== scrollerContainer && tempEl.offsetHeight < dimensions.height) {
+tempEl = this.getFixedElement(tempEl);
+if (tempEl.getStyle('position') == 'fixed') {
+var leftBound = tempEl.offsetWidth;
+margins.left += leftBound;
+dimensions.width -= leftBound;
+}
+}
+} else {
+bottomBound = firstBottomElement.offsetHeight;
+dimensions.height -= bottomBound;
+isCropped = true;
+}
+}
+}
+} else {
+var children = scrollerContainer.getElementsByTagName('IMG');
+for (var i=0, l=children.length; i<l && !bottomBound; i++) {
+if ((children[i].src).match('spacer')!==null && children[i].height > 5) {
+firstBottomElement = children[i];
+bottomBound = children[i].height;
+dimensions.height -= bottomBound;
+isCropped = true;
+}
+}
+if (!bottomBound) {
+firstBottomElement = doc.elementFromPoint(margins.left + dimensions.width - 20,margins.top + dimensions.height - 10);
+if (firstBottomElement && firstBottomElement !== scrollerContainer && firstBottomElement.offsetHeight < dimensions.height) {
+firstBottomElement = this.getFixedElement(firstBottomElement);
+if (firstBottomElement.getStyle('position') == 'fixed') {
+if (firstBottomElement.offsetWidth < Math.floor(dimensions.width/2) && hasWidth) {
+bottomBound = firstBottomElement.offsetHeight;
+rightBound = firstBottomElement.offsetWidth;
+var tempEl = doc.elementFromPoint(margins.left + 20,margins.top + dimensions.height - 10);
+if (tempEl && tempEl !== scrollerContainer && tempEl.offsetHeight < dimensions.height) {
+tempEl = this.getFixedElement(tempEl);
+if (tempEl.getStyle('position') == 'fixed') {
+var leftBound = tempEl.offsetWidth;
+margins.left += leftBound;
+dimensions.width -= leftBound;
+}
+}
+} else {
+bottomBound = firstBottomElement.offsetHeight;
+dimensions.height -= bottomBound;
+isCropped = true;
+}
+} else if (((firstBottomElement.className).match('palm-menu-') !== null || firstBottomElement.parentNode.hasClassName('palm-menu')) && firstBottomElement.offsetWidth < dimensions.height/4) {
+if (firstBottomElement.offsetWidth < 65 && hasWidth) {
+var children = firstBottomElement.parentNode.childElements;
+if (children.length > 3) {
+if (children.length < 6 && (parseInt(children[2].style.left,10) > 55 && parseInt(children[2].style.left,10) < viewportSize.width-120 || children[2].offsetWidth > 50)) {
+firstBottomElement = firstBottomElement.parentNode;
+bottomBound = firstBottomElement.offsetHeight;
+dimensions.height -= bottomBound;
+isCropped = true;
+}
+} else {
+rightBound = firstBottomElement.offsetWidth;
+bottomBound = firstBottomElement.offsetHeight;
+}
+} else {
+firstBottomElement = firstBottomElement.parentNode;
+bottomBound = firstBottomElement.offsetHeight;
+dimensions.height -= bottomBound;
+isCropped = true;
+}
+}
+}
+}
+}
+return {botEl: firstBottomElement, croppedHeight: isCropped, top: margins.top, bottom: (bottomBound || 0), left: margins.left, right: (rightBound || 0), height: dimensions.height, width: dimensions.width};
+},
+
+getScrollerPositionInfo: function() {
+var el = this.controller.element;
+var doc = this.controller.document;
+var viewportSize = {height:this.controller.window.innerHeight,width:this.controller.window.innerWidth};
+var margins = this.getElementPosition(el);
+var isValid = this.controller.stageController.stageType == (Mojo.Controller.StageType.card || Mojo.Controller.StageType.childCard) && (el.parentNode === doc.body || !((el.parentNode.className).match('-menu') !== null || el.parentNode.hasClassName('palm-popup-wrapper') || el.parentNode.hasClassName('mv-value-list')));
+if (isValid && (!this.savedData || this.savedData.viewport.height !== viewportSize.height || this.savedData.viewport.width !== viewportSize.width || this.savedData.top !== (margins.top || margins.top + this.savedData.topBound) || !this.inOverscroll && (this.savedData.name !== this.controller.scene.sceneElement.id || this.savedData.firstBotEl && this.savedData.firstBotEl.getStyle('position') === 'fixed' && this.savedData.bottom !== ((this.savedData.firstBotEl).offsetHeight || (this.savedData.firstBotEl).height)))) {
+var topSpacerReturn, bottomSpacerReturn;
+topSpacerReturn = this.getTopSpacer();
+bottomSpacerReturn = this.getBottomSpacer();
+bottomSpacerReturn.height -= topSpacerReturn;
+bottomSpacerReturn.top += topSpacerReturn;
+this.savedData = {name: this.controller.scene.sceneElement.id, cropped: bottomSpacerReturn.croppedHeight, valid: isValid, firstBotEl: bottomSpacerReturn.botEl, topBound: topSpacerReturn, top: bottomSpacerReturn.top, bottom: bottomSpacerReturn.bottom, left: bottomSpacerReturn.left, right: bottomSpacerReturn.right, height: bottomSpacerReturn.height, width: bottomSpacerReturn.width, viewport: viewportSize};
+this.calcPreFix();
+} else {
+this.savedData.valid = isValid;
+}
+return this.savedData;
+},
+
+calcPreFix: function() {
+var tempX, tempY;
+var isUp = this.winOrientation === 'up' && !this.controller.scene._enableFullScreenMode;
+if (isUp) {
+tempX = (this.savedData.top + this.savedData.height - (this.savedData.cropped?0:this.savedData.bottom) == this.savedData.viewport.height ? (this.savedData.width - this.savedData.right == this.savedData.viewport.width - 16 ? 33 : (this.savedData.left < 17 || this.savedData.left + this.savedData.width - this.savedData.right == this.savedData.viewport.width ? 23 : 10)) : 10);
+tempY = (this.savedData.height - (this.savedData.cropped?0:this.savedData.bottom) == this.savedData.viewport.height ? 33 : (this.savedData.top < 17 || this.savedData.top + this.savedData.height - (this.savedData.cropped?0:this.savedData.bottom) == this.savedData.viewport.height ? 23 : 10));
+} else {
+tempX = tempY = 10;
+}
+this.preFix = {x: tempX, y: tempY};
+},
+
+animateScrollbars: function() {
+var scrollContainer = this.controller.element;
+var elementPos = {top:scrollContainer.scrollTop,left:scrollContainer.scrollLeft};
+var contentSize = {width: scrollContainer.scrollWidth, height: scrollContainer.scrollHeight};
+var scrollInfo = this.getScrollerPositionInfo();
+if (this.controller.scene.isActive() && scrollInfo.valid) {
+var viewportSize = scrollInfo.viewport;
+var components = this.components;
+for (var i = components.length - 1; i >= 0; i--) {
+var component = components[i];
+var property = this.PROPERTY_MAP[component], revProperty = this.REVPROP_MAP[component];
+if (contentSize[property] > scrollInfo[property]) {
+var posit = this.POS_MAP[component], revPosit = this.REVPOS_MAP[component];
+var stylePosit = this.STYLE_MAP[component], revStyle = this.REVSTY_MAP[component];
+var scrollbar = this.controller.get("scrollbar-" + component);
+var margin = scrollInfo[posit];
+var dimension = scrollInfo[property];
+var zoneDimen = dimension - this.preFix[component] - (!scrollInfo.cropped?scrollInfo[revStyle]:0);
+var scrollSize = contentSize[property] - scrollInfo[revStyle] - margin;
+this.controller.window.clearTimeout(this.scrollbarHider);
+var scrollbarHide = function() {
+scrollbar.setOpacity(0.0);
+};
+var mSize = dimension * dimension / scrollSize;
+var axisPercent = (elementPos[posit] / scrollSize) * 100;
+var scrollbarSize = Math.min(Math.max(mSize, 24), (zoneDimen - (zoneDimen * ((elementPos[posit] >= 0 ? axisPercent/100 : (-elementPos[posit] + scrollSize - (dimension + margin)) / scrollSize)))));
+scrollbar.style[property] = scrollbarSize + "px";
+scrollbar.style[posit] = (axisPercent > 0 ? (axisPercent / 100 * zoneDimen) : 0) + (margin <= 17 && this.preFix[component] > 10 ? 17 : margin + 5) + "px";
+scrollbar.style[stylePosit] = viewportSize[revProperty] - (scrollInfo[revPosit] + scrollInfo[revProperty]) + 1.5 + "px";
+scrollbar.setOpacity(0.8);
+this.scrollbarHider = this.controller.window.setTimeout(scrollbarHide.bind(this), 200);
+}
+}
+}
+},
+
+clearScrollbarsMemory: function() {
+this.controller.stopListening(this.controller.scene.sceneElement,Mojo.Event.orientationChange,this.updateOrientationStatus.bindAsEventListener(this));
+delete this.savedData;
+delete this.winOrientation;
+delete this.preFix;
+},
 
 flick:function(event){
 var factor;
@@ -13630,6 +13885,7 @@ scrolled=true;
 if(scrolled){
 this.setScrollPosition(scrollPosition);
 this.notifyListeners(false,currentCoordinate);
+this.animateScrollbars();
 }
 
 if(done.x&&done.y&&!this.unhandledAnimatingOverscroll()){
