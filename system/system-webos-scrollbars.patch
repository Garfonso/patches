diff --git a/usr/palm/frameworks/mojo/builtins/palmInitFramework2112.js b/usr/palm/frameworks/mojo/builtins/palmInitFramework2112.js
index 6495b12..34af2e2 100644
--- a/usr/palm/frameworks/mojo/builtins/palmInitFramework2112.js
+++ b/usr/palm/frameworks/mojo/builtins/palmInitFramework2112.js
@@ -162,7 +162,8 @@ controller[delegateFunctionName]=controller.wrapAssistantFunction(assistant,func
 Mojo.Controller.SceneController.prototype={sceneContainerLayer:0,dialogContainerLayer:10,submenuContainerLayer:20,ASSISTANT_SUCCESS:"success",ASSISTANT_FAILURE:"fail",setSceneElement:function(sceneElement){this.sceneElement=sceneElement;this.pushContainer(this.sceneElement,this.sceneContainerLayer)},wrapAssistantFunction:function(assistant,functionName,sceneName){var func=assistant[functionName];var stageName,stageType,args;if(func)return function(){try{func.apply(assistant,arguments);return this.ASSISTANT_SUCCESS}catch(e){stageName=
 this.window.name;stageType=this.window._mojoStageType;try{args="arguments were : "+JSON.stringify(Array.prototype.slice.call(arguments))}catch(e2){args=""}Mojo.Log.logException(e,"Exception caught in "+stageType+" stage : '"+stageName+"' in scene "+sceneName+"'s "+functionName+" method. "+args+".");if(stageType==Mojo.Controller.StageType.dashboard||stageType===Mojo.Controller.StageType.popupAlert){Mojo.Log.error("Closing stage.");Mojo.Controller.appController.closeStage(stageName)}return this.ASSISTANT_FAILURE}};
 else return Mojo.doNothing},unfocusOnTap:function(event){var focusedElement;if(event.defaultPrevented)return;focusedElement=this.getFocusedElement();if(event.target!==focusedElement)if(focusedElement)focusedElement.blur()},setup:function(){var stageType=Mojo.Controller.StageType;var scType=this.window._mojoStageType;var assistantResult;if(this.scrollingEnabled){this.sceneScroller=this.sceneElement.parentNode;this.updateSceneScrollerSize();this.scrollerController=new Mojo.Controller.WidgetController(this.sceneScroller,
-this,{establishWidth:true,scrollbars:this.scrollbars,pageUpDown:true})}this.pushCommander(this);if(this.assistant)this.pushCommander(this.assistant);assistantResult=this.assistantSetup();if(assistantResult===this.ASSISTANT_FAILURE)return assistantResult;this.instantiateChildWidgets(this.sceneElement);if(scType===stageType.card||scType===stageType.stackedCard||scType==="menu"||scType===stageType.dockMode)this._installMenus();if(this.sceneScroller)this.sceneScroller.mojo.validateScrollPosition();assistantResult=
+this,{establishWidth:true,scrollbars:this.scrollbars,pageUpDown:true})}this.pushCommander(this);if(this.assistant)this.pushCommander(this.assistant);assistantResult=this.assistantSetup();if(assistantResult===this.ASSISTANT_FAILURE)return assistantResult;this.instantiateChildWidgets(this.sceneElement);if(scType===stageType.card||scType===stageType.stackedCard||scType==="menu"||scType===stageType.dockMode)this._installMenus();
+var checkScrollbars=this.document.getElementById('scrollbar-y');if (this.document.body.insert&&!checkScrollbars && (scType===stageType.card||scType===stageType.stackedCard)){var scrollbarYContent="<div id=\"scrollbar-y\" style=\"position: fixed; z-index: 1000; background-color: #2e2e2e; width: 4px; height: 24px; top: 17px; right: 1px; -webkit-border-radius: 2px; border-style: solid; border-color: white; border-width: 1px; opacity: 0.0;\"></div>";var scrollbarXContent="<div id=\"scrollbar-x\" style=\"position: fixed; z-index: 1000; background-color: #2e2e2e; width: 24px; height: 4px; bottom: 1px; left: 17px; -webkit-border-radius: 2px; border-style: solid; border-color: white; border-width: 1px; opacity: 0.0;\"></div>";this.document.body.insert({top:scrollbarXContent});this.document.body.insert({top:scrollbarYContent});}if(this.sceneScroller)this.sceneScroller.mojo.validateScrollPosition();assistantResult=
 this.assistantReady();if(assistantResult===this.ASSISTANT_FAILURE)return assistantResult;_.defer(this.focusFirstElement.bind(this))},cleanup:function(){var i,activeServiceReqs,activeSubServiceReqs;this._containerStack.cleanup();this.assistantCleanup();this._modelWatchers=undefined;activeServiceReqs=this.activeServiceRequests;for(i=activeServiceReqs.length-1;i>=0;i--)activeServiceReqs[i].originalCancel();this.activeServiceRequests=undefined;activeSubServiceReqs=this.activeSubscribedServiceRequests;
 for(i=activeSubServiceReqs.length-1;i>=0;i--)activeSubServiceReqs[i].originalCancel();this.activeSubscribedServiceRequests=undefined;if(this.scrollingEnabled){Mojo.Dom.remove(this.sceneScroller);Mojo.removeAllEventListenersRecursive(this.sceneScroller)}else{Mojo.Dom.remove(this.sceneElement);Mojo.removeAllEventListenersRecursive(this.sceneElement)}if(this.assistant){delete this.assistant.controller;delete this.assistant}},aboutToActivate:function(synchronizer){this.updateSceneScrollerSize();Mojo.Event.listen(this.window,
 "resize",this.updateSceneScrollerSizeHandler);if(this.assistant&&this.assistant.aboutToActivate)this.assistantAboutToActivate(synchronizer.wrap(Mojo.doNothing));Mojo.Event.send(this.sceneElement,Mojo.Event.aboutToActivate,{synchronizer:synchronizer});this._doEnableFullScreenMode()},activate:function(returnValue){this._active=true;if(this.crossLaunchPush&&!this._didInitialActivate){this._didInitialActivate=true;if(this.window.PalmSystem.crossAppSceneActive)this.window.PalmSystem.crossAppSceneActive();
@@ -548,8 +549,16 @@ component;var canScroll=this.canScroll(components);if(!canScroll)return;this.com
 motionArgs.animatedMotion;component.motionSM.nextState(motionArgs)}}function updateMovementState(animatedMotion){var motionArgs={userAction:true,animatedMotion:animatedMotion};var animateComponent=this.animateComponent;advanceStates(animateComponent,"x",motionArgs);advanceStates(animateComponent,"y",motionArgs)}return updateMovementState}(),correctingOverscroll:function(){var xComponent=this.animateComponent.x;var yComponent=this.animateComponent.y;return xComponent&&xComponent.overscroller.correctingOverscroll||
 yComponent&&yComponent.overscroller.correctingOverscroll},inOverscroll:function(){var xComponent=this.animateComponent.x;var yComponent=this.animateComponent.y;return xComponent&&xComponent.overscroller.inOverscroll||yComponent&&yComponent.overscroller.inOverscroll},getLimits:function(component){return this.strategy.getPermittedAxes()[component]},componentAnimate:function(){var i,axis;var axes=this.strategy.getPermittedAxes();var compAnimator;var moved;var target=this.targetCoordinate;var current=
 this.currentCoordinate;var done=true;var scrolled;for(i=axes.length-1;i>=0;i--){axis=axes[i];compAnimator=this.animateComponent[axis];if(compAnimator){done&=compAnimator.animate(target[axis],current[axis]);moved=this.roundTowardZero(compAnimator.currentCoordinate)-this.roundTowardZero(current[axis]);target[axis]=compAnimator.targetCoordinate;current[axis]=compAnimator.currentCoordinate;if(moved){scrolled=scrolled||{};scrolled[axis]=this.roundTowardZero(current[axis]);compAnimator.indicateLocationChange(done)}}}return{scrolled:scrolled,
-done:done}},animate:function(queue){var currentCoordinate=this.currentCoordinate;var scroller=this.scroller;var strategy=this.strategy;var scrollPosition;var animateResult=this.componentAnimate();scrollPosition=animateResult.scrolled;if(scrollPosition){this.setScrollPosition(scrollPosition);scroller.notifyMovementListeners(false,currentCoordinate)}if(animateResult.done){strategy.handleAnimateDone();if(!strategy.mouseTracker){this.stopAnimating();this.lastCurrent={};scroller.notifyMovementListeners(true,
-currentCoordinate);delete this.targetCoordinate}}},finishScroll:function(){var current=this.currentCoordinate;var target=this.targetCoordinate;if(this.animating){current.x=target.x;current.y=target.y;this.animate()}},setFrameDistanceRatio:function(frameDistanceRatio){var x=this.animateComponent.x;var y=this.animateComponent.y;if(x)x.setFrameDistanceRatio(frameDistanceRatio);if(y)y.setFrameDistanceRatio(frameDistanceRatio)},targetCoordinateExists:function(){return!!this.targetCoordinate},setComponentTarget:function(component,
+done:done}},animate:function(queue){var currentCoordinate=this.currentCoordinate;var scroller=this.scroller;var strategy=this.strategy;var scrollPosition;var animateResult=this.componentAnimate();scrollPosition=animateResult.scrolled;if(scrollPosition){this.setScrollPosition(scrollPosition);scroller.notifyMovementListeners(false,currentCoordinate);this.animateScrollbars()}if(animateResult.done){strategy.handleAnimateDone();if(!strategy.mouseTracker){this.stopAnimating();this.lastCurrent={};scroller.notifyMovementListeners(true,
+currentCoordinate);delete this.targetCoordinate}}},POS_MAP:{x:'left',y:'top'},STYLE_MAP:{x:'bottom',y:'right'},REVPROP_MAP:{x:'height',y:'width'},REVPOS_MAP:{x:'top',y:'left'},REVSTY_MAP:{x:'right',y:'bottom'},getElementPosition:function(el){var valueL=0,valueT=0;if(el.offsetParent){do{valueL+=el.offsetLeft;valueT+=el.offsetTop;}while(el=el.offsetParent);}
+valueL-=this.controller.document.body.scrollLeft||0;valueT-=this.controller.document.body.scrollTop||0;return{top:valueT,left:valueL};},getScrollerPositionInfo:function(){var el=this.controller.element;var doc=this.controller.document;var viewportSize={height:this.controller.window.innerHeight,width:this.controller.window.innerWidth};var margins=this.getElementPosition(el);var dimensions={height:el.offsetHeight,width:el.offsetWidth};dimensions={height:dimensions.height-(dimensions.height+margins.top-viewportSize.height),width:dimensions.width-(dimensions.width+margins.left-viewportSize.width)};var tempElPos,topBound,bottomBound;var tempEl=doc.elementFromPoint(margins.left+dimensions.width-20,margins.top+5);if(tempEl&&tempEl!==el){if(tempEl.getStyle('position')!=="fixed"){while(tempEl.parentNode!==this.controller.scene.sceneElement&&tempEl.parentNode!==el&&tempEl.getStyle('position')!=="fixed"){tempEl=tempEl.parentNode;}}
+if(tempEl.getStyle('position')==="fixed"&&tempEl.offsetHeight<dimensions.height){tempElPos=this.getElementPosition(tempEl);topBound=(tempElPos.top+tempEl.offsetHeight)-margins.top;margins.top+=topBound;dimensions.height-=topBound;}}
+tempEl=doc.elementFromPoint(margins.left+dimensions.width-20,margins.top+dimensions.height-5);if(tempEl&&tempEl!==el&&tempEl.offsetHeight<dimensions.height){if(tempEl.getStyle('position')!=="fixed"){while(tempEl.parentNode!==this.controller.scene.sceneElement&&tempEl.parentNode!==el&&tempEl.getStyle('position')!=="fixed"){tempEl=tempEl.parentNode;}}
+if(tempEl.getStyle('position')==="fixed"&&tempEl.id!=='scrollbar-x'&&tempEl.className!=='scroller'){tempElPos=tempEl.viewportOffset();tempElPos={top:(tempElPos.top<(margins.top+dimensions.height-tempEl.offsetHeight)||tempElPos.top>(margins.top+dimensions.height)?tempElPos.top+el.scrollTop:tempElPos.top),left:(tempElPos.left<(margins.left+dimensions.width-tempEl.offsetWidth)?tempElPos.left+el.scrollLeft:tempElPos.left)}
+bottomBound=(margins.top+dimensions.height)-tempElPos.top;dimensions.height-=bottomBound;}}
+return{valid:!((tempEl.id==='palm-scrim')||tempEl.className.match('picker-container')!==null||tempEl.hasClassName('palm-scrim')),top:margins.top,bottom:(bottomBound||0)+(topBound||0),left:margins.left,right:0,height:dimensions.height,width:dimensions.width,viewport:viewportSize};},animateScrollbars:function(){if(this.controller.document.getElementById('scrollbar-y')){var scrollContainer=this.controller.element;var elementPos={top:scrollContainer.scrollTop,left:scrollContainer.scrollLeft},contentSize={width:scrollContainer.scrollWidth,height:scrollContainer.scrollHeight};var isUp=this.controller.stageController.getWindowOrientation()==='up';var scrollInfo=this.getScrollerPositionInfo();if(this.controller.scene.isActive()&&scrollInfo.valid){var viewportSize=scrollInfo.viewport;var i,components;components=this.components;for(i=components.length-1;i>=0;i--){var component=components[i];var property=this.PROPERTY_MAP[component],revProperty=this.REVPROP_MAP[component];var posit=this.POS_MAP[component],revPosit=this.REVPOS_MAP[component];var stylePosit=this.STYLE_MAP[component],revStyle=this.REVSTY_MAP[component];var scrollbar=this.controller.get("scrollbar-"+component);var margin=scrollInfo[posit];var dimension=scrollInfo[property];var opLength=scrollInfo[revPosit]+scrollInfo[revProperty];var preFix;if(isUp&&(dimension==viewportSize[property]||margin<=17&&(margin+dimension)==viewportSize[property])){preFix=33;}else if(isUp&&(margin+dimension)==viewportSize[property]){preFix=22;}else{preFix=10;}
+var scrollSize=contentSize[property]-scrollInfo[revStyle];var zoneDimen=dimension-preFix;this.controller.window.clearTimeout(this.scrollbarHider);var scrollbarHide=function(){this.controller.get("scrollbar-y").setOpacity(0.0);this.controller.get("scrollbar-x").setOpacity(0.0);};var mSize=dimension*dimension/scrollSize;var axisPercent=(elementPos[posit]/scrollSize)*100;var scrollbarSize=Math.min(Math.max(mSize,24),(zoneDimen-(zoneDimen*((elementPos[posit]>=0?axisPercent:(-elementPos[posit]+scrollSize-(dimension+margin))/scrollSize*100)/100))));scrollbar.style[property]=scrollbarSize+"px";scrollbar.style[posit]=(axisPercent>0?(axisPercent/100*zoneDimen):0)+(isUp&&margin<=17?(opLength<viewportSize[revProperty]?5:17):margin+5)+"px";scrollbar.style[stylePosit]=viewportSize[revProperty]-opLength+1.5+"px";scrollbar.setOpacity(0.8);this.scrollbarHider=this.controller.window.setTimeout(scrollbarHide.bind(this),200);}}}},
+finishScroll:function(){var current=this.currentCoordinate;var target=this.targetCoordinate;if(this.animating){current.x=target.x;current.y=target.y;this.animate()}},setFrameDistanceRatio:function(frameDistanceRatio){var x=this.animateComponent.x;var y=this.animateComponent.y;if(x)x.setFrameDistanceRatio(frameDistanceRatio);if(y)y.setFrameDistanceRatio(frameDistanceRatio)},targetCoordinateExists:function(){return!!this.targetCoordinate},setComponentTarget:function(component,
 newVal){this.targetCoordinate[component]=newVal},getComponentTarget:function(component){return this.targetCoordinate[component]},setComponentCurrent:function(component,newVal){this.currentCoordinate[component]=newVal},getComponentCurrent:function(component){return this.currentCoordinate[component]},setComponentOriginal:function(component,newVal){this.originalCoordinate[component]=newVal},getComponentOriginal:function(component){return this.originalCoordinate[component]},adjustTarget:function(deltaCoordinates){var components=
 this.components;var animateComponent;var motionForCoordinate,component,targetForComponent;var limits=this.strategy.getPermittedAxes();var limit;for(var i=components.length-1;i>=0;i--){component=components[i];animateComponent=this.animateComponent[component];limit=limits[component];targetForComponent=this.targetCoordinate[component];if(targetForComponent>limit.maxLimit||targetForComponent<limit.minLimit)motionForCoordinate=0.5*deltaCoordinates[component];else motionForCoordinate=deltaCoordinates[component];
 targetForComponent+=motionForCoordinate;if(motionForCoordinate!==0){targetForComponent=Math.max(limit.minOverLimit,targetForComponent);targetForComponent=Math.min(limit.maxOverLimit,targetForComponent);this.targetCoordinate[component]=targetForComponent}}},stopAnimating:function(){if(this.animating){this.animating=false;this.getAnimationQueue().remove(this)}},startAnimating:function(){var elementPos;if(!this.animating&&this.targetCoordinate){if(typeof this.currentCoordinate.x==="undefined"&&typeof this.currentCoordinate.y===
diff --git a/usr/palm/frameworks/mojo/builtins/palmInitFramework383.js b/usr/palm/frameworks/mojo/builtins/palmInitFramework383.js
index 24ffb3e..e788b54 100644
--- a/usr/palm/frameworks/mojo/builtins/palmInitFramework383.js
+++ b/usr/palm/frameworks/mojo/builtins/palmInitFramework383.js
@@ -3504,6 +3504,13 @@ this.instantiateChildWidgets(this.sceneElement);
 
 this._installMenus();
 
+var checkScrollbars = this.document.getElementById('scrollbar-y');
+if (!checkScrollbars && (this.stageController.stageType == Mojo.Controller.StageType.card || this.stageController.stageType == Mojo.Controller.StageType.childCard)) {
+var scrollbarYContent="<div id=\"scrollbar-y\" style=\"position: fixed; z-index: 1000; background-color: #2e2e2e; width: 4px; height: 24px; top: 17px; right: 1px; -webkit-border-radius: 2px; border-style: solid; border-color: white; border-width: 1px; opacity: 0.0;\"></div>";
+var scrollbarXContent="<div id=\"scrollbar-x\" style=\"position: fixed; z-index: 1000; background-color: #2e2e2e; width: 24px; height: 4px; bottom: 1px; left: 17px; -webkit-border-radius: 2px; border-style: solid; border-color: white; border-width: 1px; opacity: 0.0;\"></div>";
+this.document.body.insert({top:scrollbarXContent});
+this.document.body.insert({top:scrollbarYContent});
+}
 
 if(this.sceneScroller){
 this.sceneScroller.mojo.validateScrollPosition();
@@ -12637,6 +12644,7 @@ this.hasPalmOverflow=(Mojo.Host.current!==Mojo.Host.browser);
 this.bindHandlers();
 this.setupChildElements();
 this.handleModelChanged();
+this.isPre3 = (Mojo.parseJSON(PalmSystem.deviceInfo)).screenHeight == 800;
 
 this.controller.exposeMethods(['revealTop','revealBottom','revealElement','scrollTo',
 'getState','setState','adjustBy','scrollerSize','setMode',
@@ -13279,6 +13287,111 @@ this.startCorrectOverscrollTimer();
 }
 },
 
+PROPERTY_MAP: {x: 'width', y: 'height'},
+POS_MAP: {x: 'left', y: 'top'},
+STYLE_MAP: {x: 'bottom', y: 'right'},
+REVPROP_MAP: {x: 'height', y: 'width'},
+REVPOS_MAP: {x: 'top', y: 'left'},
+REVSTY_MAP: {x: 'right', y: 'bottom'},
+
+getElementPosition: function(el) {
+var valueL = 0, valueT = 0;
+if (el.offsetParent) {
+do {
+valueL += el.offsetLeft;
+valueT += el.offsetTop;
+} while (el = el.offsetParent);
+}
+valueL -= this.controller.document.body.scrollLeft || 0;
+valueT -= this.controller.document.body.scrollTop || 0;
+return {top: valueT, left: valueL};
+},
+
+getScrollerPositionInfo: function() {
+var el = this.controller.element;
+var isPhnx = (Mojo.Controller.appInfo.id).match("phnx") !== null && this.controller.scene.sceneElement.id === "mojo-scene-main";
+var doc = this.controller.document;
+var viewportSize = {height:this.controller.window.innerHeight,width:this.controller.window.innerWidth};
+var margins = this.getElementPosition(el);
+var dimensions = {height: el.offsetHeight, width: el.offsetWidth};
+dimensions = {height:dimensions.height - (dimensions.height + margins.top - viewportSize.height),width:dimensions.width - (dimensions.width + margins.left - viewportSize.width)};
+var tempElPos, topBound, bottomBound;
+var tempEl = doc.elementFromPoint(margins.left + dimensions.width - 20,margins.top + 5);
+if (tempEl && tempEl !== el) {
+if (tempEl.getStyle('position') !== "fixed" && !isPhnx) {
+while (tempEl.parentNode !== this.controller.scene.sceneElement && tempEl.parentNode !== el && tempEl.getStyle('position') !== "fixed") {
+tempEl = tempEl.parentNode;
+}
+}
+if ((tempEl.getStyle('position') === "fixed" || isPhnx) && tempEl.offsetHeight < dimensions.height) {
+tempElPos = this.getElementPosition(tempEl);
+topBound = (tempElPos.top + tempEl.offsetHeight) - margins.top;
+margins.top += topBound;
+dimensions.height -= topBound;
+}
+}
+tempEl = doc.elementFromPoint(margins.left + dimensions.width - 20,margins.top + dimensions.height - 5);
+if (tempEl && tempEl !== el && tempEl.offsetHeight < dimensions.height) {
+if (tempEl.getStyle('position') !== "fixed" && !isPhnx) {
+while (tempEl.parentNode !== this.controller.scene.sceneElement && tempEl.parentNode !== el && tempEl.getStyle('position') !== "fixed") {
+tempEl = tempEl.parentNode;
+}
+}
+if ((tempEl.getStyle('position') === "fixed" || isPhnx) && tempEl.id !== 'scrollbar-x' && tempEl.className !== 'scroller') {
+tempElPos = tempEl.viewportOffset();
+tempElPos = {top:(tempElPos.top < (margins.top + dimensions.height - tempEl.offsetHeight) || tempElPos.top > (margins.top + dimensions.height) ? tempElPos.top + el.scrollTop : tempElPos.top),left:(tempElPos.left < (margins.left + dimensions.width - tempEl.offsetWidth) ? tempElPos.left + el.scrollLeft : tempElPos.left)}
+bottomBound = (margins.top + dimensions.height) - tempElPos.top;
+dimensions.height -= bottomBound;
+}
+}
+return {valid: !((tempEl.id==='palm-scrim') || tempEl.className.match('picker-container')!==null || tempEl.hasClassName('palm-scrim')), top: margins.top, bottom: (bottomBound || 0) + (topBound || 0), left: margins.left, right: 0, height: dimensions.height, width: dimensions.width, viewport: viewportSize};
+},
+
+animateScrollbars: function() {
+if(this.controller.document.getElementById('scrollbar-y')) {
+var scrollContainer = this.controller.element;
+var elementPos = {top:scrollContainer.scrollTop,left:scrollContainer.scrollLeft}, contentSize = {width: scrollContainer.scrollWidth, height: scrollContainer.scrollHeight};
+var isUp = this.controller.stageController.getWindowOrientation() === 'up';
+var scrollInfo = this.getScrollerPositionInfo();
+if (this.controller.scene.isActive() && scrollInfo.valid) {
+var viewportSize = scrollInfo.viewport;
+var i, components;
+components = this.components;
+for (i = components.length - 1; i >= 0; i--) {
+var component = components[i];
+var property = this.PROPERTY_MAP[component], revProperty = this.REVPROP_MAP[component];
+var posit = this.POS_MAP[component], revPosit = this.REVPOS_MAP[component];
+var stylePosit = this.STYLE_MAP[component], revStyle = this.REVSTY_MAP[component];
+var scrollbar = this.controller.get("scrollbar-" + component);
+var margin = scrollInfo[posit];
+var dimension = scrollInfo[property];
+var opLength = scrollInfo[revPosit] + scrollInfo[revProperty];
+var preFix;
+if (isUp && (dimension == viewportSize[property] || (margin < 17 && (margin + dimension) == viewportSize[property] && viewportSize.height < 480))) {
+preFix = (this.isPre3 && viewportSize.height == 480 ? 25 : (opLength == viewportSize[revProperty] ? 33 : 5)) + (margin > 17 || opLength !== viewportSize[revProperty] ? 5 : 0);
+} else if (isUp && (margin + dimension) == viewportSize[property]) {
+preFix = (this.isPre3 && viewportSize.height == 480 ? 5 : (opLength == viewportSize[revProperty] ? 17 : 5)) + 5;//(margin > 17 || opLength !== viewportSize[revProperty] ? 5 : 0);
+} else {
+preFix = (isUp && margin <= 17 ? 17 - margin : 5) + 5;
+}
+var scrollSize = contentSize[property] - scrollInfo[revStyle];// - preFix;
+var zoneDimen = dimension - preFix;
+this.controller.window.clearTimeout(this.scrollbarHider);
+var scrollbarHide = function() {
+scrollbar.setOpacity(0.0);
+};
+var mSize = dimension * dimension / scrollSize;
+var axisPercent = (elementPos[posit] / scrollSize) * 100;
+var scrollbarSize = Math.min(Math.max(mSize, 24), (zoneDimen - (zoneDimen * ((elementPos[posit] >= 0 ? axisPercent : (-elementPos[posit] + scrollSize - (dimension + margin)) / scrollSize * 100) / 100))));
+scrollbar.style[property] = scrollbarSize + "px";
+scrollbar.style[posit] = (axisPercent > 0 ? (axisPercent / 100 * zoneDimen) : 0) + (isUp && margin <= 17 ? (opLength < viewportSize[revProperty] || (this.isPre3 && viewportSize[revProperty] == 480) ? 5 : 17) : margin + 5) + "px";
+scrollbar.style[stylePosit] = viewportSize[revProperty] - opLength + 1.5 + "px";
+scrollbar.setOpacity(0.8);
+this.scrollbarHider = this.controller.window.setTimeout(scrollbarHide.bind(this), 200);
+}
+}
+}
+},
 
 flick:function(event){
 var factor;
@@ -13659,6 +13772,7 @@ scrolled=true;
 if(scrolled){
 this.setScrollPosition(scrollPosition);
 this.notifyListeners(false,currentCoordinate);
+this.animateScrollbars();
 }
 
 if(done.x&&done.y&&!this.unhandledAnimatingOverscroll()){
