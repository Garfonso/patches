diff --git a/usr/palm/frameworks/mojo/builtins/palmInitFramework298.js b/usr/palm/frameworks/mojo/builtins/palmInitFramework298.js
index f657e03..065c604 100644
--- a/usr/palm/frameworks/mojo/builtins/palmInitFramework298.js
+++ b/usr/palm/frameworks/mojo/builtins/palmInitFramework298.js
@@ -162,7 +162,8 @@ controller[delegateFunctionName]=controller.wrapAssistantFunction(assistant,func
 Mojo.Controller.SceneController.prototype={sceneContainerLayer:0,dialogContainerLayer:10,submenuContainerLayer:20,ASSISTANT_SUCCESS:"success",ASSISTANT_FAILURE:"fail",setSceneElement:function(sceneElement){this.sceneElement=sceneElement;this.pushContainer(this.sceneElement,this.sceneContainerLayer)},wrapAssistantFunction:function(assistant,functionName,sceneName){var func=assistant[functionName];var stageName,stageType,args;if(func)return function(){try{func.apply(assistant,arguments);return this.ASSISTANT_SUCCESS}catch(e){stageName=
 this.window.name;stageType=this.window._mojoStageType;try{args="arguments were : "+JSON.stringify(Array.prototype.slice.call(arguments))}catch(e2){args=""}Mojo.Log.logException(e,"Exception caught in "+stageType+" stage : '"+stageName+"' in scene "+sceneName+"'s "+functionName+" method. "+args+".");if(stageType==Mojo.Controller.StageType.dashboard||stageType===Mojo.Controller.StageType.popupAlert){Mojo.Log.error("Closing stage.");Mojo.Controller.appController.closeStage(stageName)}return this.ASSISTANT_FAILURE}};
 else return Mojo.doNothing},unfocusOnTap:function(event){var focusedElement;if(event.defaultPrevented)return;focusedElement=this.getFocusedElement();if(event.target!==focusedElement)if(focusedElement)focusedElement.blur()},setup:function(){var stageType=Mojo.Controller.StageType;var scType=this.window._mojoStageType;var assistantResult;if(this.scrollingEnabled){this.sceneScroller=this.sceneElement.parentNode;this.updateSceneScrollerSize();this.scrollerController=new Mojo.Controller.WidgetController(this.sceneScroller,
-this,{establishWidth:true,scrollbars:this.scrollbars,pageUpDown:true})}this.pushCommander(this);if(this.assistant)this.pushCommander(this.assistant);assistantResult=this.assistantSetup();if(assistantResult===this.ASSISTANT_FAILURE)return assistantResult;this.instantiateChildWidgets(this.sceneElement);if(scType===stageType.card||scType===stageType.stackedCard||scType==="menu"||scType===stageType.dockMode)this._installMenus();if(this.sceneScroller)this.sceneScroller.mojo.validateScrollPosition();assistantResult=
+this,{establishWidth:true,scrollbars:this.scrollbars,pageUpDown:true})}this.pushCommander(this);if(this.assistant)this.pushCommander(this.assistant);assistantResult=this.assistantSetup();if(assistantResult===this.ASSISTANT_FAILURE)return assistantResult;this.instantiateChildWidgets(this.sceneElement);if(scType===stageType.card||scType===stageType.stackedCard||scType==="menu"||scType===stageType.dockMode)this._installMenus();
+var checkScrollbars=this.document.getElementById('scrollbar-y');if (!checkScrollbars&&(scType===stageType.card||scType===stageType.stackedCard)){var scrollbarYContent=this.document.createElement('div');var scrollbarXContent=this.document.createElement('div');scrollbarYContent.id="scrollbar-y";scrollbarYContent.style.cssText="position: fixed; z-index: 100000; background-color: #2e2e2e; width: 4px; height: 24px; top: 17px; right: 1px; -webkit-border-radius: 2px; border-style: solid; border-color: white; border-width: 1px; opacity: 0.0;";scrollbarXContent.id="scrollbar-x";scrollbarXContent.style.cssText="position: fixed; z-index: 100000; background-color: #2e2e2e; width: 24px; height: 4px; bottom: 1px; left: 17px; -webkit-border-radius: 2px; border-style: solid; border-color: white; border-width: 1px; opacity: 0.0;";this.document.body.appendChild(scrollbarXContent);this.document.body.appendChild(scrollbarYContent);}if(this.sceneScroller)this.sceneScroller.mojo.validateScrollPosition();assistantResult=
 this.assistantReady();if(assistantResult===this.ASSISTANT_FAILURE)return assistantResult;_.defer(this.focusFirstElement.bind(this))},cleanup:function(){var i,activeServiceReqs,activeSubServiceReqs;this._containerStack.cleanup();this.assistantCleanup();this._modelWatchers=undefined;activeServiceReqs=this.activeServiceRequests;for(i=activeServiceReqs.length-1;i>=0;i--)activeServiceReqs[i].originalCancel();this.activeServiceRequests=undefined;activeSubServiceReqs=this.activeSubscribedServiceRequests;
 for(i=activeSubServiceReqs.length-1;i>=0;i--)activeSubServiceReqs[i].originalCancel();this.activeSubscribedServiceRequests=undefined;if(this.scrollingEnabled){Mojo.Dom.remove(this.sceneScroller);Mojo.removeAllEventListenersRecursive(this.sceneScroller)}else{Mojo.Dom.remove(this.sceneElement);Mojo.removeAllEventListenersRecursive(this.sceneElement)}if(this.assistant){delete this.assistant.controller;delete this.assistant}},aboutToActivate:function(synchronizer){this.updateSceneScrollerSize();Mojo.Event.listen(this.window,
 "resize",this.updateSceneScrollerSizeHandler);if(this.assistant&&this.assistant.aboutToActivate)this.assistantAboutToActivate(synchronizer.wrap(Mojo.doNothing));Mojo.Event.send(this.sceneElement,Mojo.Event.aboutToActivate,{synchronizer:synchronizer});this._doEnableFullScreenMode()},activate:function(returnValue){this._active=true;if(this.crossLaunchPush&&!this._didInitialActivate){this._didInitialActivate=true;if(this.window.PalmSystem.crossAppSceneActive)this.window.PalmSystem.crossAppSceneActive();
@@ -548,8 +549,19 @@ component;var canScroll=this.canScroll(components);if(!canScroll)return;this.com
 motionArgs.animatedMotion;component.motionSM.nextState(motionArgs)}}function updateMovementState(animatedMotion){var motionArgs={userAction:true,animatedMotion:animatedMotion};var animateComponent=this.animateComponent;advanceStates(animateComponent,"x",motionArgs);advanceStates(animateComponent,"y",motionArgs)}return updateMovementState}(),correctingOverscroll:function(){var xComponent=this.animateComponent.x;var yComponent=this.animateComponent.y;return xComponent&&xComponent.overscroller.correctingOverscroll||
 yComponent&&yComponent.overscroller.correctingOverscroll},inOverscroll:function(){var xComponent=this.animateComponent.x;var yComponent=this.animateComponent.y;return xComponent&&xComponent.overscroller.inOverscroll||yComponent&&yComponent.overscroller.inOverscroll},getLimits:function(component){return this.strategy.getPermittedAxes()[component]},componentAnimate:function(){var i,axis;var axes=this.strategy.getPermittedAxes();var compAnimator;var moved;var target=this.targetCoordinate;var current=
 this.currentCoordinate;var done=true;var scrolled;for(i=axes.length-1;i>=0;i--){axis=axes[i];compAnimator=this.animateComponent[axis];if(compAnimator){done&=compAnimator.animate(target[axis],current[axis]);moved=this.roundTowardZero(compAnimator.currentCoordinate)-this.roundTowardZero(current[axis]);target[axis]=compAnimator.targetCoordinate;current[axis]=compAnimator.currentCoordinate;if(moved){scrolled=scrolled||{};scrolled[axis]=this.roundTowardZero(current[axis]);compAnimator.indicateLocationChange(done)}}}return{scrolled:scrolled,
-done:done}},animate:function(queue){var currentCoordinate=this.currentCoordinate;var scroller=this.scroller;var strategy=this.strategy;var scrollPosition;var animateResult=this.componentAnimate();scrollPosition=animateResult.scrolled;if(scrollPosition){this.setScrollPosition(scrollPosition);scroller.notifyMovementListeners(false,currentCoordinate)}if(animateResult.done){strategy.handleAnimateDone();if(!strategy.mouseTracker){this.stopAnimating();this.lastCurrent={};scroller.notifyMovementListeners(true,
-currentCoordinate);delete this.targetCoordinate}}},finishScroll:function(){var current=this.currentCoordinate;var target=this.targetCoordinate;if(this.animating){current.x=target.x;current.y=target.y;this.animate()}},setFrameDistanceRatio:function(frameDistanceRatio){var x=this.animateComponent.x;var y=this.animateComponent.y;if(x)x.setFrameDistanceRatio(frameDistanceRatio);if(y)y.setFrameDistanceRatio(frameDistanceRatio)},targetCoordinateExists:function(){return!!this.targetCoordinate},setComponentTarget:function(component,
+done:done}},animate:function(queue){var currentCoordinate=this.currentCoordinate;var scroller=this.scroller;var strategy=this.strategy;var scrollPosition;var animateResult=this.componentAnimate();scrollPosition=animateResult.scrolled;if(scrollPosition){this.setScrollPosition(scrollPosition);scroller.notifyMovementListeners(false,currentCoordinate);this.animateScrollbars()}if(animateResult.done){strategy.handleAnimateDone();if(!strategy.mouseTracker){this.stopAnimating();this.lastCurrent={};scroller.notifyMovementListeners(true,
+currentCoordinate);delete this.targetCoordinate}}},POS_MAP:{x:'left',y:'top'},STYLE_MAP:{x:'bottom',y:'right'},REVPROP_MAP:{x:'height',y:'width'},REVPOS_MAP:{x:'top',y:'left'},REVSTY_MAP:{x:'right',y:'bottom'},getElementPosition:function(el){var valueL=0,valueT=0;if(el.offsetParent){do{valueL+=el.offsetLeft;valueT+=el.offsetTop;}while(el=el.offsetParent);}
+valueL-=this.controller.document.body.scrollLeft||0;valueT-=this.controller.document.body.scrollTop||0;return{top:valueT,left:valueL};},getFixedElement:function(element,top){if(Mojo.Dom.getStyle(element,'position')!=="fixed"){while(element.parentNode!==this.controller.scene.sceneElement&&element.parentNode!==this.controller.element&&Mojo.Dom.getStyle(element,'position')!=="fixed"&&(top||!Mojo.Dom.hasClassName(element,'palm-menu-button')||!Mojo.Dom.hasClassName(element,'palm-menu-text'))){element=element.parentNode;}}
+return element;},getScrollerPositionInfo:function(){var el=this.controller.element;var doc=this.controller.document;var dimensions={height:el.offsetHeight,width:el.offsetWidth};var contentSize={width:el.scrollWidth,height:el.scrollHeight};if(!this.savedData||this.savedData.height!==dimensions.height||this.savedData.width!==dimensions.width){var viewportSize={height:this.controller.window.innerHeight,width:this.controller.window.innerWidth};var margins=this.getElementPosition(el);dimensions={height:dimensions.height-(dimensions.height+margins.top-viewportSize.height),width:dimensions.width-(dimensions.width+margins.left-viewportSize.width)};var tempElPos,topBound,bottomBound,rightBound,isCropped=false,leftBound=0,marginBottom=Mojo.Dom.getStyle(el,"-webkit-palm-scroll-margin-bottom")?parseInt(Mojo.Dom.getStyle(el,"-webkit-palm-scroll-margin-bottom"),10):0;var tempEl=doc.elementFromPoint(margins.left+dimensions.width-20,margins.top+5);if(tempEl&&tempEl!==el){tempEl=this.getFixedElement(tempEl,true);if((Mojo.Dom.getStyle(tempEl,'position')==="fixed")&&tempEl.offsetHeight<dimensions.height){tempElPos=this.getElementPosition(tempEl);topBound=(tempElPos.top+tempEl.offsetHeight)-margins.top;margins.top+=topBound;dimensions.height-=topBound;}}
+tempEl=doc.elementFromPoint(margins.left+dimensions.width-20,margins.top+dimensions.height-10);if(tempEl&&tempEl!==el&&tempEl.offsetHeight<dimensions.height){tempEl=this.getFixedElement(tempEl,false);if((Mojo.Dom.getStyle(tempEl,'position')==="fixed"&&tempEl.id!=='scrollbar-x'&&tempEl.className!=='scroller')||Mojo.Dom.hasClassName(tempEl,'palm-menu-button')||Mojo.Dom.hasClassName(tempEl,'palm-menu-text')){tempElPos=Mojo.Dom.viewportOffset(tempEl);tempElPos={top:(tempElPos.top<(margins.top+dimensions.height-tempEl.offsetHeight)||tempElPos.top>(margins.top+dimensions.height)?tempElPos.top+el.scrollTop:tempElPos.top),left:(tempElPos.left<(margins.left+dimensions.width-tempEl.offsetWidth)?tempElPos.left+el.scrollLeft:tempElPos.left)}
+bottomBound=marginBottom>(margins.top+dimensions.height)-tempElPos.top?marginBottom:(margins.top+dimensions.height)-tempElPos.top;if(dimensions.width<=viewportSize.width){dimensions.height-=bottomBound;isCropped=true;}else{rightBound=tempEl.offsetWidth;if(Mojo.Dom.hasClassName(tempEl,'palm-menu-button')||Mojo.Dom.hasClassName(tempEl,'palm-menu-text')){tempEl=doc.elementFromPoint(margins.left+Math.floor(dimensions.width/2),margins.top+dimensions.height-5);if(tempEl&&tempEl!==el&&tempEl.offsetHeight<dimensions.height){tempEl=this.getFixedElement(tempEl,false);if(Mojo.Dom.hasClassName(tempEl,'palm-menu-button')||Mojo.Dom.hasClassName(tempEl,'palm-menu-text')){dimensions.height-=bottomBound;isCropped=true;rightBound=0;}}}else{dimensions.height-=bottomBound;isCropped=true;rightBound=0;}
+if(!isCropped&&rightBound>0){tempEl=doc.elementFromPoint(margins.left+20,margins.top+dimensions.height-10);if(tempEl&&tempEl!==el&&tempEl.offsetHeight<dimensions.height){tempEl=this.getFixedElement(tempEl,false);if(Mojo.Dom.hasClassName(tempEl,'palm-menu-button')){tempElPos=this.getElementPosition(tempEl);leftBound+=(tempElPos.left+tempEl.offsetWidth)-margins.left;dimensions.width-=leftBound;margins.left+=leftBound;}}
+tempEl=doc.elementFromPoint(margins.left+dimensions.width-rightBound-20,margins.top+dimensions.height-10);if(tempEl&&tempEl!==el&&tempEl.offsetHeight<dimensions.height){tempEl=this.getFixedElement(tempEl,false);if(Mojo.Dom.hasClassName(tempEl,'palm-menu-button')){tempElPos=this.getElementPosition(tempEl);rightBound+=tempEl.offsetWidth;}}
+if(dimensions.width-rightBound<=(viewportSize.width/4)){dimensions.height-=bottomBound;margins.left-=leftBound;dimensions.height+=leftBound;isCropped=true;rightBound=0;}}}}}else if(dimensions.width>viewportSize.width&&marginBottom){marginBottom=parseInt(marginBottom,10);tempEl=doc.elementFromPoint(margins.left+Math.floor(dimensions.width/2),margins.top+dimensions.height-5);if(tempEl&&tempEl!==el&&tempEl.offsetHeight<dimensions.height){tempEl=this.getFixedElement(tempEl,false);if(Mojo.Dom.hasClassName(tempEl,'palm-menu-button')||Mojo.Dom.hasClassName(tempEl,'palm-menu-text')){dimensions.height-=marginBottom>bottomBound?marginBottom:bottomBound;isCropped=true;rightBound=0;}}else{tempEl=doc.elementFromPoint(margins.left+20,margins.top+dimensions.height-10);if(tempEl&&tempEl!==el&&tempEl.offsetHeight<dimensions.height){tempEl=this.getFixedElement(tempEl,false);if(Mojo.Dom.hasClassName(tempEl,'palm-menu-button')){tempElPos=this.getElementPosition(tempEl);leftBound=(tempElPos.left+tempEl.offsetWidth)-margins.left;dimensions.width-=leftBound;margins.left+=leftBound;}}}}
+this.savedData={cropped:isCropped,valid:el.parentNode===doc.body||!((el.parentNode.className).match('-menu')!==null||(el.parentNode.className).match('palm-popup-wrapper')!==null||(el.parentNode.className).match('mv-value-list')!==null),top:margins.top,bottom:(bottomBound||0),left:margins.left,right:(rightBound||0),height:dimensions.height,width:dimensions.width,viewport:viewportSize,contentSize:contentSize};}
+return this.savedData;},animateScrollbars:function(){if(this.controller.get('scrollbar-y')){var scrollContainer=this.controller.element;var elementPos=this.getScrollPosition();var isUp=this.controller.stageController.getWindowOrientation()==='up';var scrollInfo=this.getScrollerPositionInfo();var contentSize=scrollInfo.contentSize;if(this.controller.scene.isActive()&&scrollInfo.valid){var viewportSize=scrollInfo.viewport;var i,components;components=this.components;for(i=components.length-1;i>=0;i--){var component=components[i];var property=this.PROPERTY_MAP[component],revProperty=this.REVPROP_MAP[component];if(contentSize[property]>scrollInfo[property]){var posit=this.POS_MAP[component],revPosit=this.REVPOS_MAP[component];var stylePosit=this.STYLE_MAP[component],revStyle=this.REVSTY_MAP[component];var scrollbar=this.controller.get("scrollbar-"+component);var margin=scrollInfo[posit];var dimension=scrollInfo[property];var opLength=scrollInfo[revPosit]+scrollInfo[revProperty];var preFix;if(isUp&&(dimension==viewportSize[property]||margin<=17&&(margin+dimension)==viewportSize[property])){preFix=(opLength==viewportSize[revProperty]&&!(scrollInfo.cropped||scrollInfo[revStyle]>0)?33:22);;}else if(isUp&&(margin+dimension)==viewportSize[property]){preFix=(opLength==viewportSize[revProperty]&&!(scrollInfo.cropped||scrollInfo[revStyle]>0)?22:10);}else{preFix=10;}
+var scrollSize=contentSize[property]-scrollInfo[revStyle]-margin;var zoneDimen=dimension-preFix-(!scrollInfo.cropped?scrollInfo[revStyle]:0);this.controller.window.clearTimeout(this.scrollbarHider);var scrollbarHide=function(){this.controller.get("scrollbar-x").style.opacity=0;this.controller.get("scrollbar-y").style.opacity=0;};var mSize=dimension*dimension/scrollSize;var axisPercent=(elementPos[posit]/scrollSize)*100;var scrollbarSize=Math.min(Math.max(mSize,24),(zoneDimen-(zoneDimen*((axisPercent>=0?axisPercent:(-elementPos[posit]+scrollSize-(dimension+margin))/scrollSize*100)/100))));scrollbar.style[property]=scrollbarSize+"px";scrollbar.style[posit]=(axisPercent>0?(axisPercent/100*zoneDimen):0)+(isUp&&margin<=17?(opLength<viewportSize[revProperty]?5:17):margin+5)+"px";scrollbar.style[stylePosit]=viewportSize[revProperty]-opLength+1.5+"px";scrollbar.style.opacity=0.8;this.scrollbarHider=this.controller.window.setTimeout(scrollbarHide.bind(this),200);}}}}},
+finishScroll:function(){var current=this.currentCoordinate;var target=this.targetCoordinate;if(this.animating){current.x=target.x;current.y=target.y;this.animate()}},setFrameDistanceRatio:function(frameDistanceRatio){var x=this.animateComponent.x;var y=this.animateComponent.y;if(x)x.setFrameDistanceRatio(frameDistanceRatio);if(y)y.setFrameDistanceRatio(frameDistanceRatio)},targetCoordinateExists:function(){return!!this.targetCoordinate},setComponentTarget:function(component,
 newVal){this.targetCoordinate[component]=newVal},getComponentTarget:function(component){return this.targetCoordinate[component]},setComponentCurrent:function(component,newVal){this.currentCoordinate[component]=newVal},getComponentCurrent:function(component){return this.currentCoordinate[component]},setComponentOriginal:function(component,newVal){this.originalCoordinate[component]=newVal},getComponentOriginal:function(component){return this.originalCoordinate[component]},adjustTarget:function(deltaCoordinates){var components=
 this.components;var animateComponent;var motionForCoordinate,component,targetForComponent;var limits=this.strategy.getPermittedAxes();var limit;for(var i=components.length-1;i>=0;i--){component=components[i];animateComponent=this.animateComponent[component];limit=limits[component];targetForComponent=this.targetCoordinate[component];if(targetForComponent>limit.maxLimit||targetForComponent<limit.minLimit)motionForCoordinate=0.5*deltaCoordinates[component];else motionForCoordinate=deltaCoordinates[component];
 targetForComponent+=motionForCoordinate;if(motionForCoordinate!==0){targetForComponent=Math.max(limit.minOverLimit,targetForComponent);targetForComponent=Math.min(limit.maxOverLimit,targetForComponent);this.targetCoordinate[component]=targetForComponent}}},stopAnimating:function(){if(this.animating){this.animating=false;this.getAnimationQueue().remove(this)}},startAnimating:function(){var elementPos;if(!this.animating&&this.targetCoordinate){if(typeof this.currentCoordinate.x==="undefined"&&typeof this.currentCoordinate.y===
diff --git a/usr/palm/frameworks/mojo/builtins/palmInitFramework367.js b/usr/palm/frameworks/mojo/builtins/palmInitFramework367.js
index b062507..509fe37 100644
--- a/usr/palm/frameworks/mojo/builtins/palmInitFramework367.js
+++ b/usr/palm/frameworks/mojo/builtins/palmInitFramework367.js
@@ -3504,6 +3504,17 @@ this.instantiateChildWidgets(this.sceneElement);
 
 this._installMenus();
 
+var checkScrollbars=this.document.getElementById('scrollbar-y');
+if (!checkScrollbars && (this.stageController.stageType == Mojo.Controller.StageType.card || this.stageController.stageType == Mojo.Controller.StageType.childCard)) {
+var scrollbarYContent=this.document.createElement('div');
+var scrollbarXContent=this.document.createElement('div');
+scrollbarYContent.id="scrollbar-y";
+scrollbarYContent.style.cssText="position: fixed; z-index: 10000; background-color: #2e2e2e; width: 4px; height: 24px; top: 17px; right: 1px; -webkit-border-radius: 2px; border-style: solid; border-color: white; border-width: 1px; opacity: 0.0;";
+scrollbarXContent.id="scrollbar-x";
+scrollbarXContent.style.cssText="position: fixed; z-index: 10000; background-color: #2e2e2e; width: 24px; height: 4px; bottom: 1px; left: 17px; -webkit-border-radius: 2px; border-style: solid; border-color: white; border-width: 1px; opacity: 0.0;";
+this.document.body.appendChild(scrollbarXContent);
+this.document.body.appendChild(scrollbarYContent);
+}
 
 if(this.sceneScroller){
 this.sceneScroller.mojo.validateScrollPosition();
@@ -12637,6 +12648,8 @@ this.hasPalmOverflow=(Mojo.Host.current!==Mojo.Host.browser);
 this.bindHandlers();
 this.setupChildElements();
 this.handleModelChanged();
+this.controller.listen(this.controller.scene.sceneElement,Mojo.Event.orientationChange,this.updateOrientationStatus.bindAsEventListener(this));
+this.winOrientation = this.controller.stageController.getWindowOrientation();
 
 this.controller.exposeMethods(['revealTop','revealBottom','revealElement','scrollTo',
 'getState','setState','adjustBy','scrollerSize','setMode',
@@ -12675,6 +12688,7 @@ this.controller.stopListening(sceneElement,Mojo.Event.keydown,this.keyHandler);
 }
 this.clearCorrectOverscrollTimer();
 this.removeContinueOverscrollHandler();
+this.clearScrollbarsMemory();
 },
 
 
@@ -13279,6 +13293,247 @@ this.startCorrectOverscrollTimer();
 }
 },
 
+PROPERTY_MAP: {x: 'width', y: 'height'},
+POS_MAP: {x: 'left', y: 'top'},
+STYLE_MAP: {x: 'bottom', y: 'right'},
+REVPROP_MAP: {x: 'height', y: 'width'},
+REVPOS_MAP: {x: 'top', y: 'left'},
+REVSTY_MAP: {x: 'right', y: 'bottom'},
+
+updateOrientationStatus: function(e) {
+if (e && e.orientation) {
+this.winOrientation = this.controller.stageController.getWindowOrientation();
+if (this.savedData) this.calcPreFix();
+}
+},
+
+getElementPosition: function(el) {
+var valueL = 0, valueT = 0;
+if (el.offsetParent) {
+do {
+valueL += el.offsetLeft;
+valueT += el.offsetTop;
+} while (el = el.offsetParent);
+}
+valueL -= this.controller.document.body.scrollLeft || 0;
+valueT -= this.controller.document.body.scrollTop || 0;
+return {top: valueT, left: valueL};
+},
+
+getFixedElement: function(element, top) {
+top = top || false;
+while (element.parentNode !== this.controller.scene.sceneElement && element.parentNode !== this.controller.element && element.getStyle('position') !== "fixed" && (top || ((element.className).match('palm-menu-') === null || !element.parentNode.hasClassName('palm-menu')))) {
+element = element.parentNode;
+}
+return element;
+},
+
+getTopSpacer: function() {
+var topBound=0, scrollerContainer = this.controller.element;
+var viewportSize = {height:this.controller.window.innerHeight,width:this.controller.window.innerWidth};
+var margins = this.getElementPosition(scrollerContainer);
+var dimensions = {height: scrollerContainer.offsetHeight, width: scrollerContainer.offsetWidth}, hasWidth = scrollerContainer.scrollWidth > dimensions.width && this.mode === ('free' || 'dominant' || 'horizontal'|| 'horizontal-snap');
+dimensions = {height:dimensions.height - (dimensions.height + margins.top - viewportSize.height),width:dimensions.width - (dimensions.width + margins.left - viewportSize.width)};
+var tempEl, children = scrollerContainer.getElementsByTagName('*');
+for (var i=0,l=children.length; i<l && !topBound; i++) {
+if (children[i].nodeName == 'DIV' && (children[i].className).match('-spacer')!==null && (children[i].offsetHeight > 5||children[i].offsetHeight == 0)) {
+tempEl = this.controller.document.elementFromPoint(margins.left + dimensions.width - 20,margins.top + 5);
+if (tempEl && tempEl !== scrollerContainer && tempEl.offsetHeight < dimensions.height) {
+tempEl =  this.getFixedElement(tempEl,true);
+if (tempEl.getStyle('position') === 'fixed') topBound = children[i].offsetHeight == 0 ? tempEl.offsetHeight : children[i].offsetHeight;
+}
+} else if (children[i].nodeName == 'IMG' && (children[i].src).match('spacer')!==null && children[i].height > 5) {
+topBound = children[i].height;
+}
+}
+return topBound;
+},
+
+getBottomSpacer: function() {
+var scrollerContainer = this.controller.element;
+var doc = this.controller.document;
+var viewportSize = {height:this.controller.window.innerHeight,width:this.controller.window.innerWidth};
+var margins = this.getElementPosition(scrollerContainer);
+var dimensions = {height: scrollerContainer.offsetHeight, width: scrollerContainer.offsetWidth}, hasWidth = scrollerContainer.scrollWidth > dimensions.width && this.components[0] == "x";
+dimensions = {height:dimensions.height - (dimensions.height + margins.top - viewportSize.height),width:dimensions.width - (dimensions.width + margins.left - viewportSize.width)};
+var firstBottomElement, bottomBound, rightBound, isCropped = false;
+if (scrollerContainer.getStyle('-webkit-palm-scroll-margin-bottom') && parseInt(scrollerContainer.getStyle('-webkit-palm-scroll-margin-bottom'),10) > 0) {
+firstBottomElement = doc.elementFromPoint(margins.left + dimensions.width - 20,margins.top + dimensions.height - 10);
+if (firstBottomElement && firstBottomElement !== scrollerContainer && firstBottomElement.offsetHeight < dimensions.height) {
+firstBottomElement = this.getFixedElement(firstBottomElement);
+if (((firstBottomElement.className).match('palm-menu-') !== null || firstBottomElement.parentNode.hasClassName('palm-menu')) && firstBottomElement.offsetWidth < dimensions.height/4) {
+if (firstBottomElement.offsetWidth < 65 && hasWidth) {
+var children = firstBottomElement.parentNode.childElements;
+if (children.length > 3) {
+if (children.length < 6 && (parseInt(children[2].style.left,10) > 55 && parseInt(children[2].style.left,10) < viewportSize.width-120 || children[2].offsetWidth > 50)) {
+firstBottomElement = firstBottomElement.parentNode;
+bottomBound = firstBottomElement.offsetHeight;
+dimensions.height -= bottomBound;
+isCropped = true;
+}
+} else {
+rightBound = firstBottomElement.offsetWidth;
+bottomBound = firstBottomElement.offsetHeight;
+}
+} else {
+firstBottomElement = firstBottomElement.parentNode;
+bottomBound = firstBottomElement.offsetHeight;
+dimensions.height -= bottomBound;
+isCropped = true;
+}
+} else if (firstBottomElement.getStyle('position') == 'fixed') {
+if (firstBottomElement.offsetWidth < Math.floor(dimensions.width/2) && hasWidth) {
+bottomBound = firstBottomElement.offsetHeight;
+rightBound = firstBottomElement.offsetWidth;
+var tempEl = doc.elementFromPoint(margins.left + 20,margins.top + dimensions.height - 10);
+if (tempEl && tempEl !== scrollerContainer && tempEl.offsetHeight < dimensions.height) {
+tempEl = this.getFixedElement(tempEl);
+if (tempEl.getStyle('position') == 'fixed') {
+var leftBound = tempEl.offsetWidth;
+margins.left += leftBound;
+dimensions.width -= leftBound;
+}
+}
+} else {
+bottomBound = firstBottomElement.offsetHeight;
+dimensions.height -= bottomBound;
+isCropped = true;
+}
+}
+}
+} else {
+var children = scrollerContainer.getElementsByTagName('IMG');
+for (var i=0, l=children.length; i<l && !bottomBound; i++) {
+if ((children[i].src).match('spacer')!==null && children[i].height > 5) {
+firstBottomElement = children[i];
+bottomBound = children[i].height;
+dimensions.height -= bottomBound;
+isCropped = true;
+}
+}
+if (!bottomBound) {
+firstBottomElement = doc.elementFromPoint(margins.left + dimensions.width - 20,margins.top + dimensions.height - 10);
+if (firstBottomElement && firstBottomElement !== scrollerContainer && firstBottomElement.offsetHeight < dimensions.height) {
+firstBottomElement = this.getFixedElement(firstBottomElement);
+if (firstBottomElement.getStyle('position') == 'fixed') {
+if (firstBottomElement.offsetWidth < Math.floor(dimensions.width/2) && hasWidth) {
+bottomBound = firstBottomElement.offsetHeight;
+rightBound = firstBottomElement.offsetWidth;
+var tempEl = doc.elementFromPoint(margins.left + 20,margins.top + dimensions.height - 10);
+if (tempEl && tempEl !== scrollerContainer && tempEl.offsetHeight < dimensions.height) {
+tempEl = this.getFixedElement(tempEl);
+if (tempEl.getStyle('position') == 'fixed') {
+var leftBound = tempEl.offsetWidth;
+margins.left += leftBound;
+dimensions.width -= leftBound;
+}
+}
+} else {
+bottomBound = firstBottomElement.offsetHeight;
+dimensions.height -= bottomBound;
+isCropped = true;
+}
+} else if (((firstBottomElement.className).match('palm-menu-') !== null || firstBottomElement.parentNode.hasClassName('palm-menu')) && firstBottomElement.offsetWidth < dimensions.height/4) {
+if (firstBottomElement.offsetWidth < 65 && hasWidth) {
+var children = firstBottomElement.parentNode.childElements;
+if (children.length > 3) {
+if (children.length < 6 && (parseInt(children[2].style.left,10) > 55 && parseInt(children[2].style.left,10) < viewportSize.width-120 || children[2].offsetWidth > 50)) {
+firstBottomElement = firstBottomElement.parentNode;
+bottomBound = firstBottomElement.offsetHeight;
+dimensions.height -= bottomBound;
+isCropped = true;
+}
+} else {
+rightBound = firstBottomElement.offsetWidth;
+bottomBound = firstBottomElement.offsetHeight;
+}
+} else {
+firstBottomElement = firstBottomElement.parentNode;
+bottomBound = firstBottomElement.offsetHeight;
+dimensions.height -= bottomBound;
+isCropped = true;
+}
+}
+}
+}
+}
+return {botEl: firstBottomElement, croppedHeight: isCropped, top: margins.top, bottom: (bottomBound || 0), left: margins.left, right: (rightBound || 0), height: dimensions.height, width: dimensions.width};
+},
+
+getScrollerPositionInfo: function() {
+var el = this.controller.element;
+var doc = this.controller.document;
+var viewportSize = {height:this.controller.window.innerHeight,width:this.controller.window.innerWidth};
+var margins = this.getElementPosition(el);
+var isValid = this.controller.stageController.stageType == (Mojo.Controller.StageType.card || Mojo.Controller.StageType.childCard) && (el.parentNode === doc.body || !((el.parentNode.className).match('-menu') !== null || el.parentNode.hasClassName('palm-popup-wrapper') || el.parentNode.hasClassName('mv-value-list')));
+if (isValid && (!this.savedData || this.savedData.viewport.height !== viewportSize.height || this.savedData.viewport.width !== viewportSize.width || this.savedData.top !== (margins.top || margins.top + this.savedData.topBound) || !this.inOverscroll && (this.savedData.name !== this.controller.scene.sceneElement.id || this.savedData.firstBotEl && this.savedData.firstBotEl.getStyle('position') === 'fixed' && this.savedData.bottom !== ((this.savedData.firstBotEl).offsetHeight || (this.savedData.firstBotEl).height)))) {
+var topSpacerReturn, bottomSpacerReturn;
+topSpacerReturn = this.getTopSpacer();
+bottomSpacerReturn = this.getBottomSpacer();
+bottomSpacerReturn.height -= topSpacerReturn;
+bottomSpacerReturn.top += topSpacerReturn;
+this.savedData = {name: this.controller.scene.sceneElement.id, cropped: bottomSpacerReturn.croppedHeight, valid: isValid, firstBotEl: bottomSpacerReturn.botEl, topBound: topSpacerReturn, top: bottomSpacerReturn.top, bottom: bottomSpacerReturn.bottom, left: bottomSpacerReturn.left, right: bottomSpacerReturn.right, height: bottomSpacerReturn.height, width: bottomSpacerReturn.width, viewport: viewportSize};
+this.calcPreFix();
+} else {
+this.savedData.valid = isValid;
+}
+return this.savedData;
+},
+
+calcPreFix: function() {
+var tempX, tempY;
+var isUp = this.winOrientation === 'up' && !this.controller.scene._enableFullScreenMode;
+if (isUp) {
+tempX = (this.savedData.top + this.savedData.height - (this.savedData.cropped?0:this.savedData.bottom) == this.savedData.viewport.height ? (this.savedData.width - this.savedData.right == this.savedData.viewport.width - 16 ? 33 : (this.savedData.left < 17 || this.savedData.left + this.savedData.width - this.savedData.right == this.savedData.viewport.width ? 23 : 10)) : 10);
+tempY = (this.savedData.height - (this.savedData.cropped?0:this.savedData.bottom) == this.savedData.viewport.height ? 33 : (this.savedData.top < 17 || this.savedData.top + this.savedData.height - (this.savedData.cropped?0:this.savedData.bottom) == this.savedData.viewport.height ? 23 : 10));
+} else {
+tempX = tempY = 10;
+}
+this.preFix = {x: tempX, y: tempY};
+},
+
+animateScrollbars: function() {
+var scrollContainer = this.controller.element;
+var elementPos = {top:scrollContainer.scrollTop,left:scrollContainer.scrollLeft};
+var contentSize = {width: scrollContainer.scrollWidth, height: scrollContainer.scrollHeight};
+var scrollInfo = this.getScrollerPositionInfo();
+if (this.controller.scene.isActive() && scrollInfo.valid) {
+var viewportSize = scrollInfo.viewport;
+var components = this.components;
+for (var i = components.length - 1; i >= 0; i--) {
+var component = components[i];
+var property = this.PROPERTY_MAP[component], revProperty = this.REVPROP_MAP[component];
+if (contentSize[property] > scrollInfo[property]) {
+var posit = this.POS_MAP[component], revPosit = this.REVPOS_MAP[component];
+var stylePosit = this.STYLE_MAP[component], revStyle = this.REVSTY_MAP[component];
+var scrollbar = this.controller.get("scrollbar-" + component);
+var margin = scrollInfo[posit];
+var dimension = scrollInfo[property];
+var zoneDimen = dimension - this.preFix[component] - (!scrollInfo.cropped?scrollInfo[revStyle]:0);
+var scrollSize = contentSize[property] - scrollInfo[revStyle] - margin;
+this.controller.window.clearTimeout(this.scrollbarHider);
+var scrollbarHide = function() {
+scrollbar.setOpacity(0.0);
+};
+var mSize = dimension * dimension / scrollSize;
+var axisPercent = (elementPos[posit] / scrollSize) * 100;
+var scrollbarSize = Math.min(Math.max(mSize, 24), (zoneDimen - (zoneDimen * ((elementPos[posit] >= 0 ? axisPercent/100 : (-elementPos[posit] + scrollSize - (dimension + margin)) / scrollSize)))));
+scrollbar.style[property] = scrollbarSize + "px";
+scrollbar.style[posit] = (axisPercent > 0 ? (axisPercent / 100 * zoneDimen) : 0) + (margin <= 17 && this.preFix[component] > 10 ? 17 : margin + 5) + "px";
+scrollbar.style[stylePosit] = viewportSize[revProperty] - (scrollInfo[revPosit] + scrollInfo[revProperty]) + 1.5 + "px";
+scrollbar.setOpacity(0.8);
+this.scrollbarHider = this.controller.window.setTimeout(scrollbarHide.bind(this), 200);
+}
+}
+}
+},
+
+clearScrollbarsMemory: function() {
+this.controller.stopListening(this.controller.scene.sceneElement,Mojo.Event.orientationChange,this.updateOrientationStatus.bindAsEventListener(this));
+delete this.savedData;
+delete this.winOrientation;
+delete this.preFix;
+},
 
 flick:function(event){
 var factor;
@@ -13659,6 +13914,7 @@ scrolled=true;
 if(scrolled){
 this.setScrollPosition(scrollPosition);
 this.notifyListeners(false,currentCoordinate);
+this.animateScrollbars();
 }
 
 if(done.x&&done.y&&!this.unhandledAnimatingOverscroll()){
