diff --git a/usr/lib/luna/system/luna-systemui/app/controllers/storagealert-assistant.js b/usr/lib/luna/system/luna-systemui/app/controllers/storagealert-assistant.js
index a48d0ca..ae0a94c 100644
--- a/usr/lib/luna/system/luna-systemui/app/controllers/storagealert-assistant.js
+++ b/usr/lib/luna/system/luna-systemui/app/controllers/storagealert-assistant.js
@@ -2,16 +2,35 @@
 
 var StoragealertAssistant = Foundations.Class.create({
 	
-	initialize: function(showMSMWarning) {
+	initialize: function(showMSMWarning,showMediaWarning,disableImasq) {
 		this.showMSMWarning = showMSMWarning;		
+		this.showMediaWarning = showMediaWarning;
+		this.disableImasq = disableImasq;
 		this.isTapOnButton = false;			
     },
     
     setup: function() {	
+		var msmDiv = this.controller.get('msm');
+		var parentDiv = msmDiv.parentNode;
+		var newDiv = this.controller.document.createElement("div");
+		newDiv.setAttribute("id", "imasq");
+		newDiv.setAttribute("x-mojo-tap-highlight", "immediate");
+		newDiv.setAttribute("class", "palm-notification-button");
+		newDiv.innerHTML = "<div class='info-icon' id='imasq-info' x-mojo-touch-feedback='immediate'></div><span x-mojo-loc=''>" + $L('Media Sync') + "</span>";
+		parentDiv.insertBefore(newDiv, msmDiv);
+		
+		var iMasqMode = this.iMasqMode.bindAsEventListener(this);
 		var MSMMode = this.MSMMode.bindAsEventListener(this);
 		var charge = this.charge.bindAsEventListener(this);
+		this.controller.get('imasq').addEventListener(Mojo.Event.tap, this.isHostConnected.bind(this,"imasq"));
 		this.controller.get('msm').addEventListener(Mojo.Event.tap, this.isHostConnected.bind(this,"msm"));
 		this.controller.get('charge').addEventListener(Mojo.Event.tap, this.isHostConnected.bind(this,"charge"));
+		
+		if (this.disableImasq) {
+			this.controller.get('imasq').hide();
+			this.controller.get('msm-info').show();
+		}
+
 	},
 	
 	isHostConnected: function(mode,event) {
@@ -19,8 +38,13 @@ var StoragealertAssistant = Foundations.Class.create({
 		
 		var targetId = event.target.id;
 		
-		if (targetId && targetId === "msm-info") {
-				this.launchHelpApp();
+		if (targetId && targetId === "imasq-info") {
+			this.launchHelpApp("media");
+			this.charge();
+			return;
+		}
+		else if (targetId && targetId === "msm-info") {
+				this.launchHelpApp("media");
 				this.charge();
 				return;
 		}
@@ -31,6 +55,8 @@ var StoragealertAssistant = Foundations.Class.create({
 				if(payload.result == true && payload.hostIsConnected) {
 				
 					switch(mode) {
+						case "imasq": this.iMasqMode();
+								break;
 						case "msm": this.MSMMode();
 								break;
 						case "charge": this.charge();
@@ -54,6 +80,25 @@ var StoragealertAssistant = Foundations.Class.create({
 		
 	},
 	
+	iMasqMode:function() {
+		
+		this.showUSBDashboard();
+		
+		if (!this.showMediaWarning) {			
+			this.showStorageModeWarning("media");			
+		}
+		else {			
+			this.controller.serviceRequest('palm://com.palm.storage/diskmode/', {
+				method: 'enterMSM',
+				parameters: {
+					"user-confirmed": true,
+					"enterIMasq": true
+				},
+			});			
+		}
+		this.controller.window.close();
+	},
+	
 	MSMMode:function() {	
 		
 		this.showUSBDashboard();
@@ -89,7 +134,7 @@ var StoragealertAssistant = Foundations.Class.create({
 	showUSBDashboard: function() {
 		var stageController = Mojo.Controller.getAppController().getStageController("usb-dashboard");
 		if (stageController) {
-			stageController.delegateToSceneAssistant("update");
+			stageController.delegateToSceneAssistant("update",this.disableImasq);
 		} else {
 			this.notificationCreatedHandler = this.notificationCreated.bind(this);
 			Mojo.Controller.getAppController().createStageWithCallback({name: "usb-dashboard", lightweight: true, icon: "/usr/lib/luna/system/luna-systemui/images/notification-small-usb.png"},//small icon at right corner 
@@ -100,7 +145,7 @@ var StoragealertAssistant = Foundations.Class.create({
 
 	notificationCreated: function(text, stageController) {
 		var stageController = Mojo.Controller.getAppController().getStageController("usb-dashboard");
-		stageController.pushScene('usbdashboard',this.showMSMWarning);
+		stageController.pushScene('usbdashboard',this.showMSMWarning,this.showMediaWarning,this.disableImasq);
 	},
 	
 	cleanup: function() {		
diff --git a/usr/lib/luna/system/luna-systemui/app/controllers/usbdashboard-assistant.js b/usr/lib/luna/system/luna-systemui/app/controllers/usbdashboard-assistant.js
index 0655b10..2820495 100644
--- a/usr/lib/luna/system/luna-systemui/app/controllers/usbdashboard-assistant.js
+++ b/usr/lib/luna/system/luna-systemui/app/controllers/usbdashboard-assistant.js
@@ -2,13 +2,19 @@
 
 UsbdashboardAssistant = Foundations.Class.create({
 	
-	initialize: function(showMSMWarning) {
+	initialize: function(showMSMWarning, showMediaWarning,disableImasq) {
 		this.showMSMWarning = showMSMWarning;
+		this.showMediaWarning = showMediaWarning;
+		this.disableImasq = disableImasq;
 	},
 	
 	setup: function() {
-		this.controller.get('dashMsg').innerHTML = $L('Tap for USB Drive');
+		this.controller.get('dashMsg').innerHTML = $L('Tap for Media Sync or USB Drive');
 		this.controller.get('usbdashboard').addEventListener(Mojo.Event.tap, this.onTap.bindAsEventListener(this));
+		if(this.disableImasq)
+			this.controller.get('dashMsg').innerHTML = $L('Tap for USB Drive');
+		else
+			this.controller.get('dashMsg').innerHTML = $L('Tap for Media Sync or USB Drive');
 		this.checkUSBConnected();
 	},
 	
@@ -20,6 +26,10 @@ UsbdashboardAssistant = Foundations.Class.create({
 		this.showMSMWarning = msmwarn;		
 	},
 	
+	updateMediaWarning: function(mediawarn) {
+		this.showMediaWarning = mediawarn;
+	},
+	
 	checkUSBConnected: function() {
 		this.isUSBConnectedReq = new Mojo.Service.Request('palm://com.palm.storage/diskmode/',{
 		method:'hostIsConnected',
@@ -39,19 +49,39 @@ UsbdashboardAssistant = Foundations.Class.create({
 	},
 	
 	onTap: function() {
-		if(this.showMSMWarning) {
-			this.controller.serviceRequest('palm://com.palm.storage/diskmode/', {
-				method: 'enterMSM',
-				parameters: {
-					"user-confirmed": true,
-					"enterIMasq": false
-				},
-			});
-		}
-		else {
-			this.showStorageModeWarning("msm");
+		
+		if(this.disableImasq) {
+					
+			if(this.showMSMWarning) {
+				this.controller.serviceRequest('palm://com.palm.storage/diskmode/', {
+					method: 'enterMSM',
+					parameters: {
+						"user-confirmed": true,
+						"enterIMasq": false
+					},
+				});
+			}
+			else {
+				this.showStorageModeWarning("msm");
+			}	
+			
+			return;
 		}	
-		return;
+		var appController = Mojo.Controller.getAppController();
+		var stageController = appController.getStageController("StorageModeAlert");
+	        // if the window already exists, don't do anything
+	        if (!stageController) {
+	         	// Create a popup alert
+			    var f = function(stageController){
+			      stageController.pushScene('storagealert',this.showMSMWarning,this.showMediaWarning,this.disableImasq);
+			    }.bind(this);
+			    var params;
+				if(this.disableImasq)
+					params = {name: 'StorageModeAlert', height: 120, lightweight:true,soundclass:'none'};
+				else 
+					params = {name: 'StorageModeAlert', height: 170, lightweight:true,soundclass:'none'};		    	    
+			    appController.createStageWithCallback(params,f,'popupalert');
+	        }
 	},
 	
 	showStorageModeWarning: function(mode) {
