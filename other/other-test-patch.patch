diff --git a/usr/palm/applications/com.palm.app.browser/app/controllers/page-applicationmenu.js b/usr/palm/applications/com.palm.app.browser/app/controllers/page-applicationmenu.js
index 9030f4d..9759f22 100644
--- a/usr/palm/applications/com.palm.app.browser/app/controllers/page-applicationmenu.js
+++ b/usr/palm/applications/com.palm.app.browser/app/controllers/page-applicationmenu.js
@@ -17,6 +17,96 @@ MenuData.ApplicationMenu = {
 		checkEnabled: true
 	},
 	
+	
+	ShareViaFacebook: {
+		label: $L('Facebook'),
+		command: 'share-fb-cmd',
+		checkEnabled: true
+	},
+	
+	TweetViaBadKitty: {
+		label: $L('Bad Kitty'),
+		command: 'share-bk-cmd',
+		checkEnabled: true
+	},
+	
+	TweetViaSpaz: {
+		label: $L('Spaz'),
+		command: 'share-spaz-cmd',
+		checkEnabled: true
+	},
+	
+	TweetViaTwee: {
+		label: $L('Twee'),
+		command: 'share-twee-cmd',
+		checkEnabled: true
+	},
+	
+	TweetViaTweed: {
+		label: $L('Tweed'),
+		command: 'share-tweed-cmd',
+		checkEnabled: true
+	},
+	
+	TweetViaCarbon: {
+		label: $L('Carbon'),
+		command: 'share-carbon-cmd',
+		checkEnabled: true
+	},
+
+	AddToRelego: {
+		label: $L('Add to Relego'),
+		command: 'add-relego-cmd',
+		checkEnabled: true
+	},
+
+	AddToSpareTime: {
+		label: $L('Add to Spare Time'),
+		command: 'add-sparetime-cmd',
+		checkEnabled: true
+	},
+	
+	TogglePrivate: {
+		label: $L('Enable Private Browsing'),
+		command: 'enable-private-cmd'
+	},
+	
+	NeatoThatUrl: {
+		label: $L('Send via Neato!'),
+		command: 'add-neato-cmd',
+		checkEnabled: true
+	},	
+	
+	ShortenURL: {
+		label: $L('Shorten URL'),
+		command: 'shorten-url-cmd',
+		checkEnabled: true
+	},
+	
+	CopyToClipboard: {
+		label: $L('Copy to Clipboard'),
+		command: 'copy-clipboard-cmd',
+		checkEnabled: true
+	},
+	
+   ReKindleIt: {
+		label: $L('ReKindleIt!'),
+		command: 'add-rekindleit-cmd',
+		checkEnabled: true
+	},
+		
+	ShareViaSMS: {
+		label: $L('SMS'),
+		command: 'share-sms-cmd',
+		checkEnabled: true
+	},
+	
+	ShareViaEmail: {
+		label: $L('Email'),
+		command: 'share-email-cmd',
+		checkEnabled: true
+	},
+	
 	AddToLauncher: {
 		label: $L('Add to Launcher'),
 		command: 'add-launch-icon-cmd',
diff --git a/usr/palm/applications/com.palm.app.browser/app/controllers/page-assistant.js b/usr/palm/applications/com.palm.app.browser/app/controllers/page-assistant.js
index 09c898f..6f9cbbf 100644
--- a/usr/palm/applications/com.palm.app.browser/app/controllers/page-assistant.js
+++ b/usr/palm/applications/com.palm.app.browser/app/controllers/page-assistant.js
@@ -783,20 +783,69 @@ PageAssistant.prototype._setupMenus = function() {
 		this._pageControls.setup(true);
 
 		// Create the application menus and shortcuts (once the modifier keys work).
+		
 		this.appMenuModel = {
 			visible: true,
 			items: [
-				MenuData.ApplicationMenu.NewCard,
-				MenuData.ApplicationMenu.AddBookmark,
 				{
 					label: $L("Page"),
 					items: [
-						MenuData.ApplicationMenu.AddToLauncher,
-						MenuData.ApplicationMenu.SharePage]
+						{label:$L('Add Bookmark'), shortcut:'m', command:'add-bookmark-cmd'},
+						{label:$L('Add To Launcher'),     shortcut:'l', command:'add-launch-icon-cmd'},
+						]
+				},
+				{		
+					label: $L("Share via..."),
+					items: [
+						{label:$L('SMS'), shortcut:'s', command:'share-sms-cmd'},
+						{label:$L('Email'), shortcut:'e', command:'share-email-cmd'},
+						]
 				},
-				MenuData.ApplicationMenu.ShowBookmarks,
-				MenuData.ApplicationMenu.ShowHistory]
+				{label:$L('New Card'), shortcut:'n', command:'new-page-cmd'},
+				{label:$L('Refresh Page'), shortcut:'r', command:'refresh'},
+				{label:$L('Bookmarks'), shortcut:'b', command:'show-bookmarks-cmd'},
+				{label:$L('History'), shortcut:'h', command:'show-history-cmd'},
+				
+				]
+				
+				
 		};
+		
+		this.getTweaksPrefs = new Mojo.Service.Request("palm://org.webosinternals.tweaks.prefs/", {
+			method: 'get', parameters: {'owner': "sharing-super-mix", 
+			keys: ["showNeato","showSpareTime", "showRelego", "showClipboard", "shortenURL", "reKindleIt", 
+					"showFacebook", "showBadKitty", "showSpaz", "showTwee", "showTweed", "showCarbon", "privateBrowsing" ]},
+			onSuccess: function(response) {
+				if(response) {
+					if(response.showNeato == true)
+						this.appMenuModel.items[0].items.push(MenuData.ApplicationMenu.NeatoThatUrl);
+					if(response.showSpareTime == true) 
+						this.appMenuModel.items[0].items.push(MenuData.ApplicationMenu.AddToSpareTime);
+					if(response.showRelego == true) 
+						this.appMenuModel.items[0].items.push(MenuData.ApplicationMenu.AddToRelego);
+					if(response.showClipboard == true) 
+						this.appMenuModel.items[0].items.push(MenuData.ApplicationMenu.CopyToClipboard);
+					if(response.shortenURL == true) 
+						this.appMenuModel.items[0].items.push(MenuData.ApplicationMenu.ShortenURL);
+					if(response.reKindleIt == true) 
+						this.appMenuModel.items[0].items.push(MenuData.ApplicationMenu.ReKindleIt);
+					if(response.showFacebook == true) 
+						this.appMenuModel.items[1].items.push(MenuData.ApplicationMenu.ShareViaFacebook);
+					if(response.showBadKitty == true) 
+						this.appMenuModel.items[1].items.push(MenuData.ApplicationMenu.TweetViaBadKitty);
+					if(response.showSpaz == true) 
+						this.appMenuModel.items[1].items.push(MenuData.ApplicationMenu.TweetViaSpaz);
+					if(response.showTwee == true) 
+						this.appMenuModel.items[1].items.push(MenuData.ApplicationMenu.TweetViaTwee);			
+					if(response.showTweed == true) 
+						this.appMenuModel.items[1].items.push(MenuData.ApplicationMenu.TweetViaTweed);
+					if(response.showCarbon == true) 
+						this.appMenuModel.items[1].items.push(MenuData.ApplicationMenu.TweetViaCarbon);
+					if(response.privateBrowsing == true)
+						this.appMenuModel.items.splice(2,0,this.togglePrivate = MenuData.ApplicationMenu.TogglePrivate);
+				}
+			}.bind(this)});
+					
 
 		this.controller.setupWidget(Mojo.Menu.appMenu, undefined, this.appMenuModel);
 
@@ -1056,6 +1105,11 @@ PageAssistant.prototype._updateHistory = function() {
 	if (!this.currentUrl || (this.currentUrl.length === 0)) {
 		return;
 	}
+	
+	if (this.togglePrivate.enabled) {
+		return;
+	}
+ 	
 
 	var title = this.currentTitle || null;
 	this.historyStore.addHistory(this.currentUrl, title, new Date(),
@@ -2119,8 +2173,459 @@ PageAssistant.prototype.handleCommand = function(event) {
 					this._createDefaultBookmarkImages(urlReference);
 					this.showBookmarkDialog(BookmarkDialogAssistant.createLaunchpointTask, urlReference);
 					break;
-
-				case MenuData.ApplicationMenu.SharePage.command:
+				
+				//NEATO	
+				case MenuData.ApplicationMenu.NeatoThatUrl.command:
+					// Lets Neato! that URL
+					try{
+						this.neatoappid = "com.zhephree.neato";
+						this.controller.serviceRequest("palm://com.palm.applicationManager", {
+							method: 'open',
+							parameters: {
+								id: this.neatoappid,
+								params: {send: '{"a":"url","c":"'+this.currentUrl+'"}'}
+							},
+							onFailure:function(){
+								//--> Promt to download if Neato! is not installed
+								this.controller.showAlertDialog({
+									onChoose: function(value){
+										if (value=="yes"){
+											//--> open app catalog at Neato! page
+											this.controller.serviceRequest('palm://com.palm.applicationManager', {
+												method:'open',
+												parameters:{
+													target: "http://developer.palm.com/appredirect/?packageid=" + this.neatoappid
+												}
+											});
+										}
+									},
+									preventCancel: false,
+									title: $L("Neato! Not Installed"),
+									message: $L("Neato! is not installed. Would you like to download it?"),
+									choices:[
+										{label:$L('Yes'), value:"yes", type:'affirmative'},
+										{label:$L('No'), value:"no", type:'dismissal'}
+									]
+								});
+							}.bind(this)
+						})
+					}catch(e){
+						Mojo.Log.error("Neato Patch Error: " + e);
+					}
+					break;
+					
+				//SPARE TIME
+				case MenuData.ApplicationMenu.AddToSpareTime.command:
+					// Send the URL to Spare Time
+					try{
+						this.sparetimeappid = "com.semicolonapps.sparetime";
+						this.controller.serviceRequest("palm://com.palm.applicationManager", {
+							method: 'open',
+							parameters: {
+								id: this.sparetimeappid,
+								params: {action: "add_url", url: this.currentUrl, title: this.currentTitle}
+							},
+							onFailure:function(){
+								//--> How do they not have it installed?
+								this.controller.showAlertDialog({
+									onChoose: function(value){
+										if (value=="yes"){
+											//--> And weee'rrre.. of to see the wizard
+											this.controller.serviceRequest('palm://com.palm.applicationManager', {
+												method:'open',
+												parameters:{
+													target: "http://developer.palm.com/appredirect/?packageid=" + this.sparetimeappid
+												}
+											});
+										}
+									},
+									preventCancel: false,
+									title: $L("Spare Time Not Installed"),
+									message: $L("Spare Time is not installed. Would you like to download it?"),
+									choices:[
+										{label:$L('Yes'), value:"yes", type:'affirmative'},
+										{label:$L('No'), value:"no", type:'dismissal'}
+									]
+								});
+							}.bind(this)
+						})
+					}catch(e){
+						Mojo.Log.error("Spare Time Patch Error: " + e);
+					}
+					break;
+				
+				//RELEGO
+				case MenuData.ApplicationMenu.AddToRelego.command:
+					// Send the URL to Spare Time
+					try{
+						this.relegoappid = "com.webosroundup.relego";
+						this.controller.serviceRequest("palm://com.palm.applicationManager", {
+							method: 'open',
+							parameters: {
+								id: this.relegoappid,
+								params: {action: 'addtorelego', url: this.currentUrl, title: this.currentTitle}
+							},
+							onFailure:function(){
+								this.controller.showAlertDialog({
+									onChoose: function(value){
+										if (value=="yes"){
+											//--> And weee'rrre.. of to see the wizard
+											this.controller.serviceRequest('palm://com.palm.applicationManager', {
+												method:'open',
+												parameters:{
+													target: "http://developer.palm.com/appredirect/?packageid=" + this.relegoappid
+												}
+											});
+										}
+									},
+									preventCancel: false,
+									title: $L("Relego Not Installed"),
+									message: $L("Relego is not installed. Would you like to download it? It's Free!"),
+									choices:[
+										{label:$L('Yes'), value:"yes", type:'affirmative'},
+										{label:$L('No'), value:"no", type:'dismissal'}
+									]
+								});
+							}.bind(this)
+						})
+					}catch(e){
+						Mojo.Log.error("Relego Patch Error: " + e);
+					}
+					break;
+				
+				//CLIPBOARD
+				case MenuData.ApplicationMenu.CopyToClipboard.command:
+					this.controller.stageController.setClipboard(this.currentTitle + ' - ' + this.currentUrl);
+					Mojo.Controller.getAppController().showBanner("Copied to Clipboard!",  {source: 'notification'});
+					break;
+					
+				//SHORTEN URL
+				case MenuData.ApplicationMenu.ShortenURL.command:
+					// Set up the url
+						var url = "http://is.gd/api.php?longurl=" + this.currentUrl;
+					var target = this;
+	
+					// Attempt to connect to api
+						var request = new Ajax.Request(url, {
+							method: 'get',
+							evalJSON: 'false',
+							onSuccess: function(response) {
+								// Retrieve the short url and copy it
+  								var short_url = response.responseText;
+								target.controller.stageController.setClipboard(short_url, false);
+		
+								// Set up and show the banner message for success
+								var message = "Short URL copied to clipboard.";
+								var appController = Mojo.Controller.getAppController();
+								var bannerParams = {soundClass: '', soundFile: '', icon: '', messageText: message};
+								appController.showBanner(bannerParams, {banner: message});
+							},
+							onFailure: function(response) {
+							// What happens when the api call fails
+							}
+						});
+				break;
+				
+				//REKINDLEIT
+				case MenuData.ApplicationMenu.ReKindleIt.command:
+						this._newBrowserPage("http://www.rekindle.it/queue?r=" + this.currentUrl);
+						break;
+				
+				//FACEBOOK
+				case MenuData.ApplicationMenu.ShareViaFacebook.command:
+					try{
+						this.facebookappid = "com.palm.app.facebook";
+						this.controller.serviceRequest("palm://com.palm.applicationManager", {
+							method: 'open',
+							parameters: {
+								id: this.facebookappid,
+								params: {status: this.currentTitle + ' - ' + this.currentUrl}
+							},
+							onFailure:function(){
+								this.controller.showAlertDialog({
+									onChoose: function(value){
+										if (value=="yes"){
+											this.controller.serviceRequest('palm://com.palm.applicationManager', {
+												method:'open',
+												parameters:{
+													target: "http://developer.palm.com/appredirect/?packageid=" + this.facebookappid
+												}
+											});
+										}
+									},
+									preventCancel: false,
+									title: $L("Facebook Not Installed"),
+									message: $L("Facebook is not installed. Would you like to download it? It's Free!"),
+									choices:[
+										{label:$L('Yes'), value:"yes", type:'affirmative'},
+										{label:$L('No'), value:"no", type:'dismissal'}
+									]
+								});
+							}.bind(this)
+						})
+					}catch(e){
+						Mojo.Log.error("Facebook Patch Error: " + e);
+					}
+					break;
+				
+				//BAD KITTY
+				case MenuData.ApplicationMenu.TweetViaBadKitty.command:
+					// Send the URL to Bad Kitty
+					try{
+						this.badkittyappid = "com.superinhuman.badkitty";
+						this.controller.serviceRequest("palm://com.palm.applicationManager", {
+							method: 'open',
+							parameters: {
+								id: this.badkittyappid,
+								params: {action: 'tweet', tweet: this.currentTitle + ' - ' + this.currentUrl}
+							},
+							onFailure:function(){
+								this.controller.showAlertDialog({
+									onChoose: function(value){
+										if (value=="yes"){
+											//--> And weee'rrre.. of to see the wizard
+											this.controller.serviceRequest('palm://com.palm.applicationManager', { 
+												method:'open',
+												parameters:{
+													target: "http://developer.palm.com/appredirect/?packageid=" + this.badkittyappid
+												}
+											});
+										}
+									},
+									preventCancel: false,
+									title: $L("Bad Kitty Not Installed"),
+									message: $L("Bad Kitty is not installed. Would you like to download it?"),
+									choices:[
+										{label:$L('Yes'), value:"yes", type:'affirmative'},
+										{label:$L('No'), value:"no", type:'dismissal'}
+									]
+								});
+							}.bind(this)
+						})
+					}catch(e){
+						Mojo.Log.error("Bad Kitty Patch Error: " + e);
+					}
+					break;
+				
+				//SPAZ
+				case MenuData.ApplicationMenu.TweetViaSpaz.command:
+					var spazappids = ['com.funkatron.app.spaz-sped', 'com.funkatron.app.spaz-beta', 'com.funkatron.app.spaz'], spazindex = 0;
+					var target = this;
+					function makeCall() {
+						if (spazindex < spazappids.length) {
+				 
+							Mojo.Log.info('Trying to launch with appid %s', spazappids[spazindex]);
+				 
+							var request = new Mojo.Service.Request("palm://com.palm.applicationManager", {
+								method: 'launch',
+								parameters: {
+									id: spazappids[spazindex],
+									params: {tweet: target.currentTitle + ' - ' + target.currentUrl}
+								},
+								onFailure: function() {
+									Mojo.Log.info('Spaz failed to launch with appid %s', spazappids[spazindex]);
+									spazindex++; // go to next appid
+									makeCall(); // retry
+								}.bind(this)
+							});
+				 
+						} else {
+							Mojo.Log.error('Spaz failed to launch');
+							target.controller.showAlertDialog({
+									onChoose: function(value){
+										if (value=="yes"){
+											//--> And weee'rrre.. of to see the wizard
+											target.controller.serviceRequest('palm://com.palm.applicationManager', { 
+												method:'open',
+												parameters:{
+													target: "http://developer.palm.com/appredirect/?packageid=" + spazappids[2]
+												}
+											});
+										}
+									},
+									preventCancel: false,
+									title: $L("Spaz Not Installed"),
+									message: $L("Spaz is not installed. Would you like to download it? It's free!"),
+									choices:[
+										{label:$L('Yes'), value:"yes", type:'affirmative'},
+										{label:$L('No'), value:"no", type:'dismissal'}
+									]
+								});
+						}
+				 
+					}
+					makeCall();
+					break;
+					
+				//TWEE
+				case MenuData.ApplicationMenu.TweetViaTwee.command:
+					// Send the URL to Twee
+					try{
+						this.tweeappid = "com.deliciousmorsel.twee";
+						this.controller.serviceRequest("palm://com.palm.applicationManager", {
+							method: 'open',
+							parameters: {
+								id: this.tweeappid,
+								params: {tweet: this.currentTitle + ' - ' + this.currentUrl}
+							},
+							onFailure:function(){
+								this.controller.showAlertDialog({
+									onChoose: function(value){
+										if (value=="yes"){
+											//--> And weee'rrre.. of to see the wizard
+											this.controller.serviceRequest('palm://com.palm.applicationManager', { 
+												method:'open',
+												parameters:{
+													target: "http://developer.palm.com/appredirect/?packageid=" + this.tweeappid
+												}
+											});
+										}
+									},
+									preventCancel: false,
+									title: $L("Twee Not Installed"),
+									message: $L("Twee is not installed. Would you like to download it?"),
+									choices:[
+										{label:$L('Yes'), value:"yes", type:'affirmative'},
+										{label:$L('No'), value:"no", type:'dismissal'}
+									]
+								});
+							}.bind(this)
+						})
+					}catch(e){
+						Mojo.Log.error("Twee Patch Error: " + e);
+					}
+					break;
+				
+				//TWEED				
+				case MenuData.ApplicationMenu.TweetViaTweed.command:
+					// Send the URL to Tweed
+					try{
+						this.tweedappid = "com.pivotallabs.webos.tweed";
+						this.controller.serviceRequest("palm://com.palm.applicationManager", {
+							method: 'open',
+							parameters: {
+								id: this.tweedappid,
+								params: {newTweet: this.currentTitle + ' - ' + this.currentUrl}
+							},
+							onFailure:function(){
+								this.controller.showAlertDialog({
+									onChoose: function(value){
+										if (value=="yes"){
+											//--> And weee'rrre.. of to see the wizard
+											this.controller.serviceRequest('palm://com.palm.applicationManager', { 
+												method:'open',
+												parameters:{
+													target: "http://developer.palm.com/appredirect/?packageid=" + this.tweedappid
+												}
+											});
+										}
+									},
+									preventCancel: false,
+									title: $L("Tweed Not Installed"),
+									message: $L("Tweed is not installed. Would you like to download it?"),
+									choices:[
+										{label:$L('Yes'), value:"yes", type:'affirmative'},
+										{label:$L('No'), value:"no", type:'dismissal'}
+									]
+								});
+							}.bind(this)
+						})
+					}catch(e){
+						Mojo.Log.error("Tweed Patch Error: " + e);
+					}
+					break;
+				
+				//CARBON				
+				case MenuData.ApplicationMenu.TweetViaCarbon.command:
+					// Send the URL to Carbon
+					try{
+						this.carbonappid = "com.dotsandlines.carbonbeta";
+						this.controller.serviceRequest("palm://com.palm.applicationManager", {
+							method: 'open',
+							parameters: {
+								id: this.carbonappid,
+								params: {action: "compose", body: this.currentTitle + ' - ' + this.currentUrl}
+							},
+							onFailure:function(){
+								this.controller.showAlertDialog({
+									onChoose: function(value){
+										if (value=="yes"){
+											//--> And weee'rrre.. of to see the wizard
+											this.controller.serviceRequest('palm://com.palm.applicationManager', { 
+												method:'open',
+												parameters:{
+													target: "http://developer.palm.com/appredirect/?packageid=" + this.carbonappid
+												}
+											});
+										}
+									},
+									preventCancel: false,
+									title: $L("Carbon Not Installed"),
+									message: $L("Carbon is not installed. Would you like to download it?"),
+									choices:[
+										{label:$L('Yes'), value:"yes", type:'affirmative'},
+										{label:$L('No'), value:"no", type:'dismissal'}
+									]
+								});
+							}.bind(this)
+						})
+					}catch(e){
+						Mojo.Log.error("Carbon Patch Error: " + e);
+					}
+					break;
+				
+				//SMS
+				case MenuData.ApplicationMenu.ShareViaSMS.command:
+					// Set up the url
+						var url = "http://is.gd/api.php?longurl=" + this.currentUrl;
+						var target = this;
+	
+					// Attempt to connect to api
+						var request = new Ajax.Request(url, {
+							method: 'get',
+							evalJSON: 'false',
+							onSuccess: function(response) {
+								// Retrieve the short url and copy it
+  								var short_url = response.responseText;
+  								var request = new Mojo.Service.Request("palm://com.palm.applicationManager", {
+									method: 'open',
+									parameters: {
+										id: "com.palm.app.messaging",
+										params: {messageText: target.currentTitle + ' - ' + short_url}
+									}
+								});
+							},
+							onFailure: function(response) {
+							// What happens when the api call fails
+							Mojo.Controller.getAppController().showBanner("Share Via SMS Failed",  {source: 'notification'});
+							}
+						});
+						break;
+				
+				//PRIVATE BROWSING
+					
+				case 'enable-private-cmd':
+					this.togglePrivate.command = 'disable-private-cmd';
+					this.togglePrivate.label = $L('Disable Private Browsing');
+					
+					this.togglePrivate.enabled = true;
+					
+					this.controller.modelChanged(this.appMenuModel);
+					Mojo.Controller.getAppController().showBanner("Private Browsing: Enabled!",  {source: 'notification'});
+					break;
+					
+				case 'disable-private-cmd':
+					this.togglePrivate.command = 'enable-private-cmd';
+					this.togglePrivate.label = $L('Enable Private Browsing');
+					
+					this.togglePrivate.enabled = false;
+					
+					this.controller.modelChanged(this.appMenuModel);
+					Mojo.Controller.getAppController().showBanner("Private Browsing: Disabled!",  {source: 'notification'});
+					break;				
+				
+				//EMAIL
+				case MenuData.ApplicationMenu.ShareViaEmail.command:
 					this._shareUrl(this.currentUrl, this._getDisplayTitle(), true /*capture*/);
 					break;
 
diff --git a/usr/palm/applications/com.palm.app.browser/app/controllers/startpage-assistant.js b/usr/palm/applications/com.palm.app.browser/app/controllers/startpage-assistant.js
index 1d890db..483c53f 100644
--- a/usr/palm/applications/com.palm.app.browser/app/controllers/startpage-assistant.js
+++ b/usr/palm/applications/com.palm.app.browser/app/controllers/startpage-assistant.js
@@ -53,6 +53,16 @@ StartpageAssistant.prototype.setup = function() {
 			MenuData.ApplicationMenu.ShowBookmarks,
 			MenuData.ApplicationMenu.ShowHistory]
 	};
+	
+	this.getTweaksPrefs = new Mojo.Service.Request("palm://org.webosinternals.tweaks.prefs/", {
+			method: 'get', parameters: {'owner': "sharing-super-mix", 
+			keys: ["privateBrowsing"]},
+			onSuccess: function(response) {
+				if(response) {
+					if(response.privateBrowsing == true)
+						this.appMenuModel.items.splice(3,0,this.togglePrivate = MenuData.ApplicationMenu.TogglePrivate);
+				}
+		}.bind(this)});
 
 	this.controller.setupWidget(Mojo.Menu.appMenu, undefined, this.appMenuModel);
 
@@ -365,7 +375,27 @@ StartpageAssistant.prototype.handleCommand = function(event) {
 				case MenuData.ApplicationMenu.ShowHistory.command:
 					this._openHistoryView();
 					break;
-
+				
+				case 'enable-private-cmd':
+					this.togglePrivate.command = 'disable-private-cmd';
+					this.togglePrivate.label = $L('Disable Private Browsing');
+					
+					this.togglePrivate.enabled = true;
+					
+					this.controller.modelChanged(this.appMenuModel);
+					Mojo.Controller.getAppController().showBanner("Private Browsing: Enabled!",  {source: 'notification'});
+					break;
+					
+				case 'disable-private-cmd':
+					this.togglePrivate.command = 'enable-private-cmd';
+					this.togglePrivate.label = $L('Enable Private Browsing');
+					
+					this.togglePrivate.enabled = false;
+					
+					this.controller.modelChanged(this.appMenuModel);
+					Mojo.Controller.getAppController().showBanner("Private Browsing: Disabled!",  {source: 'notification'});
+					break;
+				
 				case MenuData.ApplicationMenu.ShowBookmarks.command:
 					this._openBookmarkView();
 					break;
